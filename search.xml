<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>博客增加锚点功能</title>
      <link href="2020/12/28/Hexo%E5%8D%9A%E5%AE%A2%E5%A2%9E%E5%8A%A0%E9%94%9A%E7%82%B9%E5%8A%9F%E8%83%BD/"/>
      <url>2020/12/28/Hexo%E5%8D%9A%E5%AE%A2%E5%A2%9E%E5%8A%A0%E9%94%9A%E7%82%B9%E5%8A%9F%E8%83%BD/</url>
      
        <content type="html"><![CDATA[<p>Hexo自带的Markdown渲染器没有脚注等语法的支持，提供以下方法增加该功能的支持<sup class="footnote-ref"><a href="#fn1" id="fnref1">[1]</a></sup></p><h2 id="锚点功能的解决途径">锚点功能的解决途径</h2><p>一种是手动添加<code>a</code>标签，但这种方法比较麻烦。</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#bib1<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>bib1ref<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>sup</span><span class="token punctuation">></span></span>[1]<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>sup</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>bib1<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#bib1ref<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>sup</span><span class="token punctuation">></span></span>[1]<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>sup</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>还有一种是采用插件，这里选择了<a href="https://github.com/hexojs/hexo-renderer-markdown-it">hexo-renderer-markdown-it</a>插件</p><p>插件的安装</p><p>首先在Hexo博客目录下，选择删除原来的渲染器</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> un hexo-renderer-marked --save<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在安装该插件</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> i hexo-renderer-markdown-it --save<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>之后在 Hexo 的 _config.yml 文件中进行相关的配置。</p><pre class="line-numbers language-yml" data-language="yml"><code class="language-yml">markdown:  preset: &#39;default&#39;  render:    html: true    xhtmlOut: false    langPrefix: &#39;language-&#39;    breaks: true    linkify: true    typographer: true    quotes: &#39;“”‘’&#39;  enable_rules:  disable_rules:  plugins:  anchors:    level: 2    collisionSuffix: &#39;&#39;    permalink: false    permalinkClass: &#39;header-anchor&#39;    permalinkSide: &#39;left&#39;    permalinkSymbol: &#39;¶&#39;    case: 0    separator: &#39;-&#39;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>在安装插件的过程中遇到没有生效的问题，首先使用<code>hexo clean</code>命令清理，在重新尝试<br>如果仍不生效可以查看 packge.json 和 node_modules 有没有导入包，Markdown脚注的格式是否正确，</p></blockquote><h2 id="对于锚点的适配问题">对于锚点的适配问题</h2><p>在我使用的<a href="https://github.com/blinkfox/hexo-theme-matery/">matery</a>主题中，文章内<code>a</code>标签中默认加入了<code>target:_brank</code>属性，这使得点击链接会跳转到新的窗口中现实，不符合锚点需要的页面内的跳转功能</p><p>解决办法，在主题的 source\js\matery.js 文件中找到如下代码，并注释<code>$('#articleContent a').attr('target', '_blank');</code></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/*文章内容详情的一些初始化特性*/</span><span class="token keyword">let</span> <span class="token function-variable function">articleInit</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//$('#articleContent a').attr('target', '_blank');</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>完成以上内容，即可使用锚点，但锚点总会跳转到页面最顶端，由于主题banner是浮动效果，会导致遮住跳转的链接。</p><p>下面提供一种Js代码的解决方式，<a href="https://www.cnblogs.com/attlia/p/7488271.html">参考文章</a></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/*文章内容详情的一些初始化特性*/</span><span class="token keyword">let</span> <span class="token function-variable function">articleInit</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// $('#articleContent a').attr('target', '_blank');</span>    <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'#articleContent a'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">var</span> target <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">attr</span><span class="token punctuation">(</span><span class="token string">'href'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'html, body'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">animate</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>           scrollTop<span class="token operator">:</span> <span class="token function">$</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">offset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>top <span class="token operator">-</span> <span class="token number">65</span> <span class="token comment">//65位设置的偏移值</span>         <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>自此完成了对脚注的支持，但因为这个renderer-markdown-it渲染器的原因，可以会存在一些问题，之后遇到了在说。</p><hr class="footnotes-sep"><section class="footnotes"><ol class="footnotes-list"><li id="fn1" class="footnote-item"><p>这是脚注内容 <a href="#fnref1" class="footnote-backref">↩︎</a></p></li></ol></section>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> Html </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>植物组织培养复习整理</title>
      <link href="2020/12/25/%E7%94%9F%E7%89%A9%E5%AD%A6/%E6%A4%8D%E7%89%A9%E7%BB%84%E7%BB%87%E5%9F%B9%E5%85%BB%E5%A4%8D%E4%B9%A0%E6%95%B4%E7%90%86_v0.2/"/>
      <url>2020/12/25/%E7%94%9F%E7%89%A9%E5%AD%A6/%E6%A4%8D%E7%89%A9%E7%BB%84%E7%BB%87%E5%9F%B9%E5%85%BB%E5%A4%8D%E4%B9%A0%E6%95%B4%E7%90%86_v0.2/</url>
      
        <content type="html"><![CDATA[<blockquote><p>最近一次同步时间:2020年12月26日21点41分<br>如文档内容有误，点击<a href="http://doc.halo123.top:3000/ygHmkfBjRZq1ZoAtW8Wk5g?both">该链接</a>对文档进行修改，定时会同步到网站上<br>文档采用Markdown格式排版，可以参考<a href="https://halo123.top/2019/05/08/Markdown%E8%AF%AD%E6%B3%95/">该网站</a>进行简单学习，感谢参与整理的同学们</p></blockquote><h2 id="1-绪论">1 绪论</h2><h3 id="1、简述植物组织培养的理论依据？">1、简述植物组织培养的理论依据？</h3><p>植物组织培养的理论依据是植物细胞的全能性。即植物每个细胞都携带有完整的全套遗传基因，并具有发育成完整植株的潜在能力。</p><h3 id="2、植物组织培养有哪些特点？">2、植物组织培养有哪些特点？</h3><ol><li>培养条件可以人为控制。组织培养采用的植物材料完全是在人为提供的培养基和小气候环境条件下进行生长，摆脱了大自然中四季、昼夜的变化以及灾害性气候的不利影响，且条件均一，对植物生长极为有利，便于稳定地进行周年培养生产。</li><li>生长周期短，繁殖率高。植物组织培养是由于人为控制培养条件，根据不同植物不同部位的不同要求而提供不同的培养条件，因此生长较快。另外，植株也比较小，往往20-30天为一个周期。</li><li>管理方便，利于工厂化生产和自动化控制。植物组织培养是在一定的场所和环境下，人为提供一定的温度、光照、湿度、营养、激素等条件，极利于高度集约化和高密度工厂化生产，也利于自动化控制生产。它是未来农业工厂化育苗的发展方向。它可以大大节省人力、物力及田间种植所需要的土地。</li></ol><h3 id="3、植物组织培养的分类？">3、植物组织培养的分类？</h3><ol><li>按培养对象分为：植株培养；胚胎培养；器官培养；组织培养；细胞培养；原生质体培养；</li><li>按培养过程分：初代培养；继代培养；</li><li>根据再生途径分为：愈伤组织途径；芽增殖途径；原球茎途径；体胚发生途径；</li><li>根据培养基的物理状态：固体培养；液体培养。</li></ol><h3 id="4、植物组织培养主要应用于哪些方面？">4、植物组织培养主要应用于哪些方面？</h3><ol><li>快速繁殖  运用组织培养的途径，一个单株一年可以繁殖几万到几百万个植株；</li><li>种苗脱毒  针对病毒对农作物造成的严重危害，通过组织培养可以有效地培育出大量的无病毒种苗；</li><li>培育和创制新品种  利用组织培养可以使难度很大的远缘杂交取得成功，从而育成一些罕见的新物种；</li><li>大量生产次生代谢物质  通过植物细胞培养获得的生物碱、维生素、色素、抗生素以及抗肿瘤药物不下50多个大类，其中已有30多种次生物质的含量在人工培养时已达到或超过亲本植物的水平。植物细胞次生物质的研制与生产硕果累累，后来居上。</li><li>植物种质资源的离体保存  植物组织培养结合超低温保存技术，可以给植物种质保存带来一次大的飞跃。因为保存一个细胞就相当于保存一粒种子，但所占的空间仅为原来的几万分之一，而且在-193度的液氮中可以长时间保存，不像种子那样需要年年更新或经常更新。</li><li>人工种子  人工种子便于贮藏和运输，适合机械化播种；繁殖速度快，不受季节和环境限制，利于工厂化生产； 体细胞胚由无性繁殖体系产生，可以固定杂种优势。</li></ol><h2 id="2-组培的基本技术">2 组培的基本技术</h2><h3 id="1、论述植物生长调节物质在组织培养中的作用？-并列举常见的种类">1、论述植物生长调节物质在组织培养中的作用？ 并列举常见的种类</h3><p>植物生长物质是培养基中不可缺少的关键物质，用量虽少，但它们对外植体愈伤组织的诱导和根、芽等器官分化，起着重要和关键的调节作用。<br>常见的种类有：</p><ol><li>生长素类：主要被用于诱导愈伤组织形成，促进细胞脱分化；促进细胞伸长；诱导根的分化，促进生根。吲哚乙酸（IAA）、吲哚丁酸（IBA）、萘乙酸（NAA）、2,4-二氯苯氧乙酸（2,4-D）</li><li>细胞分裂素类：诱导芽的分化促进侧芽萌发生长；促进细胞分裂与扩大；抑制根的分化；抑制衰老，减少叶绿素分解，有保鲜效果。激动素（KT）、异戊烯基腺嘌呤（z-iP）、6-苄基腺嘌呤（BAP、6-BA）、玉米素（Zt）、TDZ</li><li>赤霉素（GA3）</li><li>脱落酸（ABA）</li></ol><h3 id="2、常用的培养基有哪些？说明其特点">2、常用的培养基有哪些？说明其特点</h3><ol><li>MS培养基:1962年由 Murashige 和Skoog为培养烟草细胞而设计的。是目前应用最广泛的培养基。特点是无机盐离子浓度较高；</li><li>white 培养基:无机机盐浓度较低，适于生根培养；</li><li>N6培养基: KNO3 和(NH4) 2S04含量高，不含钼。广泛应用于禾谷类植物的花粉和花药培养；</li><li>B5培养基:主要特点是含有较低的铵盐，较高的硝酸盐和盐酸硫胺素。适宜双子叶植物特别是木本植物的培养；</li><li>M- -8P培养基:为原生质体培养而设计的。其特点是有机成分较复杂，它包括了所有的单糖和维生素。</li></ol><h3 id="3、接种后离体培养物对光、温、湿等环境条件的要求？">3、接种后离体培养物对光、温、湿等环境条件的要求？</h3><ol><li>光照:愈伤组织的诱导不需光照或弱光，器官分化需要光照，一般12- 16h/d，光照度1000 - 50001x;</li><li>温度：一般25士2℃</li><li>湿度:培养室内的湿度要求保持70%一80%的相对湿度。</li></ol><h3 id="4、论述离体培养污染产生的原因及防治措施。">4、论述离体培养污染产生的原因及防治措施。</h3><p>污染：污染原因从病源分面主要有细菌和真菌和两大类。<br>产生原因：</p><ol><li>外植体材料消毒不彻底</li><li>培养基灭菌不彻底</li><li>操作环境不洁净</li><li>操作人员操作不规范、不熟练。</li></ol><p>防止措施：</p><ol><li>减少或防止材料带菌</li><li>外植体灭菌要彻底</li><li>培养基灭菌要彻底</li><li>玻璃器皿和金属器皿的灭菌要彻底</li><li>无菌室的消毒</li><li>操作人员一定要严格按照无菌操作的程序进行接种</li></ol><h3 id="5、植物组织培养技术主要包括哪些环节？">5、植物组织培养技术主要包括哪些环节？</h3><ol><li>培养基的配制及灭菌</li><li>外植体的选择及灭菌</li><li>外植体的接种及培养</li><li>试管苗的驯化与移栽</li></ol><h3 id="6、无菌操作时应注意哪些事项？">6、无菌操作时应注意哪些事项？</h3><ol><li>在接种4h前用甲醛熏蒸接种室;</li><li>在接种前15-20min,打开超净工作台的风机以及台上的紫外灯;</li><li>接种员先洗净双手，在实验前换好专用实验服;</li><li>到超净台后，用酒精棉球擦拭双手，特别是指甲处。然后用70%酒精擦拭工作台面:</li><li>接种工具蘸95%酒精，灼烧;</li><li>接种时将试管斜着，使试管口在酒精灯火焰上转动，灼烧数秒钟。接完种后，将管口在火焰上再灼烧数秒钟。</li><li>接种时，接种员双手不能离开工作台，不能说话、走动和咳嗽等;</li><li>接种完毕后要清理干净并用酒精擦工作台。</li></ol><h3 id="7、在植物组织培养中，通过哪些途径可以得到完整的植株？">7、在植物组织培养中，通过哪些途径可以得到完整的植株？</h3><ol><li><p>外植体→愈伤组织一根、芽→试管苗</p><p>①同时长芽和根    ②先长芽，再长根    ③先长根，再长芽</p></li><li><p>外植体→胚状体→试管苗</p></li><li><p>外植体→根、芽→试管苗。</p></li></ol><h2 id="3-基本原理">3 基本原理</h2><h3 id="1、愈伤组织细胞的分化一般分几个时期？各有何特点？">1、愈伤组织细胞的分化一般分几个时期？各有何特点？</h3><ol><li>诱导期：是细胞准备分裂的时期。细胞大小几不变，内部发生生理生化变化，迅速合成蛋白质和核酸。</li><li>分裂期：外层细胞分裂，中间细胞常不分裂，形成小芯。细胞分裂快，结构疏松，缺少结构，浅而透明。在原培养基上，细胞必分化，及时转移，其可无限制地进行细胞分裂，维持不分化状态。</li><li>分化期：细胞在形态和生理功能上的分化，出现形态和功能各异的细胞。</li></ol><h3 id="2、优良的愈伤组织必须具备哪4个特性？">2、优良的愈伤组织必须具备哪4个特性？</h3><ol><li>高度的胚性或再分化能力，以便从这些愈伤组织得到再生植物。</li><li>容易散碎，以便用这些愈伤组织建立优良的悬浮系，并且在需要时能从中分离出全能性的原生质体</li><li>旺盛的自我增殖能力，以便用这些愈伤组织建立大规模的愈伤组织无性系</li><li>经过长期继代保存而不丧失胚性，便有可能对它们进行各种遗传操作。</li></ol><h3 id="3、愈伤组织的形态发生有哪些情况？">3、愈伤组织的形态发生有哪些情况？</h3><ol><li><p>愈伤组织仅有根或芽器官的分别形成，即无根的芽或无芽的根；</p></li><li><p>先形成芽，再在芽伸长后，在其茎的基部长出根而形成小植株，多数植物属这种情况；</p></li><li><p>先产生根，再从根基部分化出芽而形成小植株。这种情况较难诱导芽的形成，尤其对于单子叶植物少见；</p></li><li><p>先在愈伤组织的邻近不同部位分别形成芽和根，然后两者结合起来形成一株小植株。</p><p>单子叶植物：与双子叶植物诱导发生过程类似，只是在形态上无鱼雷形胚等阶段，成熟体胚上有盾片、胚芽鞘和胚根等结构。</p></li></ol><h3 id="4、简述细胞脱分化过程。">4、简述细胞脱分化过程。</h3><p>细胞的脱分化过程可分为3个阶段：</p><ol><li>第一阶段为启动阶段，表现为细胞质增生，并开始向细胞中央伸出细胞质丝，液泡蛋白体出现；</li><li>第二阶段为演变阶段，此时细胞核开始向中央移动，质体演变成原质体；</li><li>第三阶段是脱分化终结阶段，此时细胞回复到分生细胞状态，细胞分裂即将开始</li></ol><h3 id="5、胚状体发生途径与器官发生途径形成植株的区别">5、胚状体发生途径与器官发生途径形成植株的区别:</h3><ol><li>胚状体具有两极性， 即在发育的早期阶段， 从其方向相反的两端 分化出茎端和根端;而不定芽和不定根<br>都为单向极性。</li><li>胚状体的维管组织与外植体的维管组织无解剖结构上的联系。而不定芽或不定根往往总是与愈伤组织的<br>维管组织相联系。</li><li>胚状体维管组织的分布是独立的“Y”字形。而不定芽的维管组织无此现象。</li></ol><h2 id="4-胚胎培养及离体授粉">4 胚胎培养及离体授粉</h2><h3 id="1、胚培养的作用有哪些？">1、胚培养的作用有哪些？</h3><ol><li>在远缘杂交育种中的应用，克服杂种胚不能正常发育</li><li>克服珠心胚的干扰，提高育种效率</li><li>缩短育种周期</li><li>测定休眠种子的萌发率</li><li>理论研究中的应用</li></ol><h3 id="2、简述离体授粉的程序。">2、简述离体授粉的程序。</h3><ol><li>确定开花、花药开裂及授粉时间</li><li>去雄后将花蕾套袋隔离</li><li>制备无菌子房或胚珠</li><li>制备无菌花粉</li><li>胚珠或子房的试管内授粉</li></ol><h3 id="3、胚胎培养的操作步骤。">3、胚胎培养的操作步骤。</h3><ol><li>取子房</li><li>常规表面消毒</li><li>解剖镜下，取胚珠、去珠被、取出完整幼胚</li><li>固体培养</li></ol><h3 id="4、幼胚的发育方式">4、幼胚的发育方式</h3><ol><li>胚性发育:继续进行正常的胚胎发育</li><li>早熟发育:迅速萌发成幼苗</li><li>产生愈伤组织:再分化形成多个胚状体或芽原基。</li></ol><h3 id="5、胚胎培养的意义">5、胚胎培养的意义</h3><ol><li>克服远缘杂种的不育性</li><li>使胚胎发育不完全的植株获得后代</li><li>缩短育种年限，提高育种效率</li></ol><h2 id="5-花药和花粉培养">5 花药和花粉培养</h2><h3 id="1、-如何确定水稻单核靠边期的花粉？">1、 如何确定水稻单核靠边期的花粉？</h3><ol><li>在水稻中，在外部形态上可根据叶枕距为5-15cm，颖片淡黄绿色、雄蕊长度接近颖片长度的1/2这些条件鉴定。</li><li>利用这些外部标志，选择符合条件的花蕾，经镜检确定花粉发育的准确时期。</li><li>压片染色法是检测划分发育时期的简便有效方法，常用染色剂为醋酸洋红。</li></ol><h3 id="2、比较花粉培养与花药培养">2、比较花粉培养与花药培养</h3><p>相同点：</p><ol><li>利用小孢子染色体数目的单倍性，培育出单倍体植株。</li><li>成苗途径相同，即有 胚状体成苗 和 愈伤组织再分化成苗两条途径。</li></ol><p>不同点：</p><ol><li>花药培养属于器官培养；而花粉培养属于细胞培养。</li><li>花粉培养可避免花药壁，花丝和药隔的等体细胞组织的干扰；可计数小孢子产胚率；可观察和更好调节控制雄核发育的全过程；花粉量大，具有单细胞，单倍性和较高的同步性。但技术更复杂。</li></ol><h3 id="3、简述花粉分离方法">3、简述花粉分离方法</h3><ol><li>自然散落法(漂浮培养散落小孢子收集法)将 花药接种在预处理液或液体培养基上，待花粉自动散落后，收集培养。</li><li>挤压法在烧杯或研钵中挤压花药，将花粉挤出后收集培养。</li><li>机械游离<ul><li>磁搅拌法  用磁力搅拌器搅拌培养液中的花药，使花粉游离出来;</li><li>超速旋切法通过搅拌器 中的高速旋转刀具破碎花蕾、穗子、花药，使小孢子游离出来</li></ul></li></ol><h2 id="6-细胞培养">6 细胞培养</h2><h3 id="1、如何得到单细胞无性系？">1、如何得到单细胞无性系？</h3><p>在细胞培养中，常由分散性较好的愈伤组织或悬浮培养物来制备单细胞，也可以用机械法和酶解法从植物器官直接制备单细胞。<br>由分离的单细胞经看护培养法、微室培养法或平板培养法，即可得到单细胞无性系。</p><h3 id="2、单细胞培养有哪些方法？各有何含义及特点">2、单细胞培养有哪些方法？各有何含义及特点</h3><p>单细胞培养：看护培养；微室培养；平板培养</p><ol><li>看护培养法：指用一块活跃生长的愈伤组织块来看护单个细胞，并使其生长和增殖的方法。<br>特点：优点：①简便易行 ②效果好，易于成功。<br>缺点：不能在显微镜下直接观察细胞的生长过程。<br>用途：诱导形成单细胞系。</li><li>微室培养法：即将细胞培养在很少量的培养基中。<br>特点：优点：在培养过程中，可以连续进行显微观察一个细胞的生长、分裂和形成细胞团的全部过程<br>缺点：培养时间较短<br>用途：主要用来观察细胞生长、分裂、形成细胞团的过程。</li><li>平板培养法：把单细胞悬浮液与融化的琼脂培养基均匀混合，平铺一薄层在培养基底上的培养方法。<br>特点：优点：①可以定点观察;②分离单细胞系容易;<br>缺点：培养细胞气体交换不畅。<br>用途：分离单细胞无性系，研究其生理、生化、遗传上的差异而设计的一种单细胞培养技术。广泛应用于细胞、原生质体及融合产物的培养。</li></ol><h3 id="3、什么是植板率？小细胞团的计数方法有哪几种？">3、什么是植板率？小细胞团的计数方法有哪几种？</h3><p>植板率是指已形成细胞团的单细胞与接种总细胞数的百分数。<br>小细胞团计数方法:</p><ol><li>低倍显微镜直接计算;</li><li>细胞团显影法</li></ol><h3 id="4、什么是细胞悬浮培养？简述成批培养和连续培养的的特点？">4、什么是细胞悬浮培养？简述成批培养和连续培养的的特点？</h3><p>细胞悬浮培养:是使离体的植物细胞悬浮在液体培养基中进行的无菌培养。</p><ol><li>成批培养的特点:<ul><li>细胞生长在固定体积的培养基上，直至养分耗尽；</li><li>用搅拌的方法使细胞团和细胞均匀分布；</li><li>细胞数目呈现慢-快一慢一停止生长的变化，但必须更换新鲜培养基才能进行下一批培养。</li></ul></li><li>连续培养的特点:<ul><li>由于不断加入新鲜培养基，保证了养分的充分供应，不会出现悬浮培养物发生营养不足的现象；</li><li>可在培养期间使细胞保持在对数生长期中。细胞增殖速度快；</li><li>适于大规模工业化生产。</li></ul></li></ol><h3 id="5、细胞悬浮培养主要应用">5、细胞悬浮培养主要应用</h3><ol><li>植物有用物质的生产：在植物组织培养研究中，发现培养细胞中含有各种特殊的代谢产物。</li><li>诱发和筛选突变体：在细胞培养过程中会产生一些突变体，常采用不同培养基来进行选择，也就是把悬浮细胞培养于缺少某种营养物质或生长因子，或是添加某种抑制剂的培养基里，使突变细胞和正常细胞区别开来</li><li>原生质体培养和细胞分离：利用细胞悬浮培养方法，对细胞原生质进行分离，在适宜的培养基上进行培养，使之生成完整植株，或对原生体的生理特性进行观察研究。</li><li>食品生产：通过对许多食用植物培养组织的细胞团生产的研究。</li></ol><h2 id="7-原生质体培养和细胞融合">7 原生质体培养和细胞融合</h2><h3 id="1、简述原生质体作为遗传操作和生理生化研究的材料有何特点？">1、简述原生质体作为遗传操作和生理生化研究的材料有何特点？</h3><ol><li>没有细胞壁，有利于体细胞融合、体细胞杂交、基因转移和单细胞培养。</li><li>原生质体能比较容易摄取外来的遗传物质。</li></ol><h3 id="2、酶法分离原生质体时使用的酶的种类有哪些？">2、酶法分离原生质体时使用的酶的种类有哪些？</h3><p>常用的细胞壁降解酶种类：纤维素酶、半纤维素酶、果胶酶、果酸酶等。</p><h3 id="3、简述一步酶法分离原生质体的方法">3、简述一步酶法分离原生质体的方法</h3><p>一步分离法:把一定量纤维素酶和果胶酶组成混合酶液，对材料进行一次性处理而分离出原生质体。处理温度25-30℃，处理的时间根据材料及酶浓度的不同而不同，可为2-24h。</p><h3 id="4、如何纯化分离的植物原生质体并鉴定其活力？">4、如何纯化分离的植物原生质体并鉴定其活力？</h3><ol><li>原生质体的纯化<ul><li>沉降法：应用原生质体的比重大于溶液的性质而使原生质体沉于底部。</li><li>漂浮法：应用渗透剂含量较高的洗涤液使原生质体漂浮于液体表面。</li><li>梯度离心法：选两种不同渗透浓度的溶液，其中一种溶液密度大于原生质体的密度，另一种溶液小于原生质体的密度。</li></ul></li><li>原生质体活力的测定<ul><li>形态识别:形态上完整，呈圆形，含有饱满的细胞质，颜色鲜艳的即为存活的原生质体。</li><li>染色识别<ol><li>0.1%酚番红或Evans蓝染色：有活力的不被染色，死亡的被染上色。</li><li>双醋酸盐荧光素(FDA)染色法：在荧光显微镜下有荧光的即为有活性的原生质体。</li></ol></li></ul></li></ol><h3 id="原生质体培养的方法有哪些？">原生质体培养的方法有哪些？</h3><ol><li>液体浅层培养</li><li>平板法培养</li><li>微悬滴法培养</li><li>双层培养法</li><li>饲养层培养</li></ol><h3 id="6、原生质体融合有哪几种主要方法？">6、原生质体融合有哪几种主要方法？</h3><ol><li>化学法诱导融合:硝酸盐溶液</li><li>PEG结合高钙-高pH诱导法:在无菌条件下混合双亲原生质体——滴加PEG溶液，摇匀，静置一—滴加高钙高pH溶液，摇匀，静置——滴加原生质体培养液洗涤数次——离心获得原生质体细胞团——筛选——再生杂合细胞。</li><li>电融合技术:将双亲原生质体悬浮溶液混合后插入微电极，接通一定的交变电场，原生质体极化后顺着电场排列成珠状，此时施与适当强度的电脉冲，使原生质体膜被击穿而发生融合。</li></ol><h2 id="8-植物离体快繁和人工种子">8 植物离体快繁和人工种子</h2><h3 id="1、人工种子的优点。">1、人工种子的优点。</h3><ol><li>使自然条件下不易结实或种子昂贵的材料能快速繁殖和保存；</li><li>繁殖速度快；</li><li>为基因工程技术应用于生产提供桥梁；</li><li>固定杂种优势；</li><li>提高植物抗逆性；</li><li>取代天然种子，节约粮食。</li></ol><ul><li>人工种子与试管苗相比，具有所用培养基量少、体积小、繁殖快、发芽成苗快、运输及保存方便的特点;</li><li>人工种子技术适用于难以保存的种质资源、遗传性状不稳定或育性不佳的珍稀林木繁殖;</li><li>人工种子可以克服营养繁殖造成的病毒积累，可以快速繁殖脱毒苗。</li></ul><h2 id="9-植物无病毒苗木培育">9 植物无病毒苗木培育</h2><h3 id="1、植物脱毒的主要方法有哪些？其主要原理是什么？">1、植物脱毒的主要方法有哪些？其主要原理是什么？</h3><ol><li>茎尖培养脱毒:病毒在植物体内的分布并不均匀，越靠近茎端的病毒的感染深度越低，生长点则几乎不含或含病毒很少</li><li>愈伤组织培养脱毒法:通过植物的器官和组织的培养，脱分化诱导产生愈伤组织，然后从愈伤组织再分化产生芽，长成小植株，可以得到无病毒苗</li><li>珠心胚培养脱毒:病毒一般不通过种子传播，由珠心细胞发育成的胚再生的植株是无毒的，并具有与母本相:同的遗传特性。</li><li>茎尖微体嫁接:将实生苗砧木在人工培养基上种植培育，再从成年无病树枝上切取0.4- -1.0mm茎尖，在砧木上进行试管 微体嫁接，以获得无病毒幼苗。</li><li>热处理脱毒:一些病毒对热不稳定，在高于常温的温度下(35-40C)，即钝化失活(6)化学处理脱毒:抑制或杀死病毒</li><li>化学处理脱毒：抑制或杀死病毒</li></ol><h3 id="2、说明微尖嫁接技术脱毒的程序">2、说明微尖嫁接技术脱毒的程序</h3><p>微尖嫁接技术指在人工培养基上培养实生砧木，嫁接无病毒茎尖以培养脱毒苗的技术。<br>主要程序:无菌砧木培养——茎尖准备——嫁接——嫁接苗培养——移栽。</p><h3 id="3、目前鉴定脱毒苗的方法有哪些？各有何特点？">3、目前鉴定脱毒苗的方法有哪些？各有何特点？</h3><ol><li>指示植物法:将一些对病毒反应敏感、症状特征显著的植物作为指示植物(又称鉴别寄主)，利用病毒在其他植物上产生的枯斑作为鉴别病毒种类的方法。这种方法条件简单，操作方便，为一种经济而有效的鉴定方法</li><li>抗血清鉴定法:用已知抗血清鉴定未知病毒的种类。这种方法特异性高，测定速度快。所以抗血清法成为植物病毒鉴定中最有用的方法之一。</li><li>电镜检查法:可以直接观察病毒，检查出有无病毒存在，了解病毒颗粒的大小、形状和结构，又可以鉴定病毒的种类。优点是方法先进、灵敏度高、能在植物粗提取液中定量测定病毒。但需一定的设备和技术。</li></ol><h3 id="4、简述植物无病毒原种长期保存的方法。">4、简述植物无病毒原种长期保存的方法。</h3><ol><li>低温保存:将茎尖或小植株接种到培养基上，置低温(1-9℃)、低光照下保存。材料生长极缓慢，只需半年或一年更换一次培养基，又叫最小生长法。</li><li>冷冻保存(又叫超低温保存)，一般用液氮保存植物材料。在—169℃的低温下，植物材料新陈代谢活动基本停止，处于“生机停顿”状态。</li></ol><h3 id="5、植物脱毒的意义">5、植物脱毒的意义</h3><ol><li>能够有效地保持优良品种的特性</li><li>快速繁殖品种，使优良品种迅速应用</li><li>生产无病毒种苗，防止品种退化</li><li>节约耕地，提高农产品的商品率</li><li>便于运输</li></ol><h3 id="种质保存">种质保存</h3><h3 id="1、低温保存和超低温保存技术冷冻的方法">1、低温保存和超低温保存技术冷冻的方法</h3><ul><li>快速冷冻法</li><li>冷冻前的预处理</li><li>解冻方法</li><li>重新培养</li></ul><h3 id="2、冷冻保存的应用前景">2、冷冻保存的应用前景</h3><ol><li>长期保存种质的遗传稳定性。</li><li>长期保存去病毒的种质。</li><li>保持稀有珍贵及濒危植物的种质资源。</li><li>保持不稳定性的培养物，如单倍体。</li><li>保持培养细胞形态发生的能力。</li><li>防止种质衰老。</li><li>延长花粉寿命，解决不同开花期和异地植物杂交上的困难。</li><li>冷冻解冻过程可筛选抗逆新品种。</li><li>便于国际间的种质交换。</li></ol>]]></content>
      
      
      <categories>
          
          <category> 生物学 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 植物组织培养 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>专业英语复习整理</title>
      <link href="2020/12/25/%E7%94%9F%E7%89%A9%E5%AD%A6/%E4%B8%93%E4%B8%9A%E8%8B%B1%E8%AF%AD%E5%A4%8D%E4%B9%A0%E6%95%B4%E7%90%86_v0.2/"/>
      <url>2020/12/25/%E7%94%9F%E7%89%A9%E5%AD%A6/%E4%B8%93%E4%B8%9A%E8%8B%B1%E8%AF%AD%E5%A4%8D%E4%B9%A0%E6%95%B4%E7%90%86_v0.2/</url>
      
        <content type="html"><![CDATA[<blockquote><p>最近一次同步时间:2020年12月26日21点41分<br>如文档内容有误，点击<a href="http://doc.halo123.top:3000/m06H0jw0QDC0327_Bn1xEw?both">该链接</a>对文档进行修改，定时会同步到网站上<br>文档采用Markdown格式排版，可以参考<a href="https://halo123.top/2019/05/08/Markdown%E8%AF%AD%E6%B3%95/">该网站</a>进行简单学习，感谢参与整理的同学们</p></blockquote><h2 id="第一章-Inside-the-Living-Cell-Structure-and-Function-of-Internal-Cell-Parts">第一章 Inside the Living Cell: Structure and Function of Internal Cell Parts</h2><ol><li>Cytoplasm: The Dynamic, Mobile Factory (细胞质：动力工厂)</li></ol><p>Most of the properties we associate with life are properties of the cytoplasm.  Much of the mass of a cell consists of this semifluid substance, which is bounded on the outside by the plasma membrane.  Organelles are suspended within it, supported by the filamentous network of the cytoskeleton.  Dissolved in the cytoplasmic fluid are nutrients, ions, soluble proteins, and other materials needed for cell functioning.</p><blockquote><p>生命的大部分特征表现在细胞质的特征上。细胞质大部分由半流体物质组成，并由细胞膜（原生质膜）包被。细胞器悬浮在其中，并由丝状的细胞骨架支撑。细胞质中溶解了大量的营养物质，离子，可溶蛋白以及维持细胞生理需求的其它物质。</p></blockquote><ol start="2"><li>The Nucleus: Information Central（细胞核：信息中心）</li></ol><p>The eukaryotic cell nucleus is the largest organelle and houses the genetic material (DNA) on chromosomes. (In prokaryotes the hereditary material is found in the nucleoid.) The nucleus also contains one or two organelles-the nucleoli-that play a role in cell division.  A pore-perforated sac called the nuclear envelope separates the nucleus and its contents from the cytoplasm.  Small molecules can pass through the nuclear envelope, but larger molecules such as mRNA and ribosomes must enter and exit via the pores.</p><blockquote><p>真核细胞的细胞核是最大的细胞器，细胞核对染色体组有保护作用（原核细胞的遗传物质存在于拟核中）。细胞核含有一或二个核仁，核仁促进细胞分裂。核膜贯穿许多小孔，小分子可以自由通过核膜，而象mRNA和核糖体等大分子必须通过核孔运输。</p></blockquote><ol start="3"><li>Organelles: Specialized Work Units（细胞器：特殊的功能单位）</li></ol><p>All eukaryotic cells contain most of the various kinds of organelles, and each organelle performs a specialized function in the cell.  Organelles described in this section include ribosomes, the endoplasmic reticulum, the Golgi complex, vacuoles, lysosomes, mitochondria, and the plastids of plant cells.</p><blockquote><p>所有的真核细胞都含有多种细胞器，每个细胞器都有其特定功能。本节主要介绍核糖体，内质网，高尔基体系，液泡，溶酶体，线粒体和植物细胞中的质体。</p></blockquote><p>The number of ribosomes within a cell may range from a few hundred to many thousands.  This quantity reflects the fact that, ribosomes are the sites at which amino acids are assembled into proteins for export or for use in cell processes.  A complete ribosome is composed of one larger and one smaller subunit.  During protein synthesis the two subunits move along a strand of mRNA, “reading” the genetic sequence coded in it and translating that sequence into protein.  Several ribosomes may become attached to a single mRNA strand; such a combination is called a polysome.  Most cellular proteins are manufactured on ribosomes in the cytoplasm.  Exportable proteins and membrane proteins are usually made in association with the endoplasmic reticulum.</p><blockquote><p>核糖体的数量变化从几百到几千，核糖体是氨基酸组装成蛋白质的重要场所。完整的核糖体由大亚基和小亚基组成。核糖体沿着mRNA移动并阅读遗传密码，翻译成蛋白质。一条mRNA上可能有多个核糖体，称多聚核糖体。大多数细胞蛋白是由细胞质中核糖体生产。输出蛋白和膜蛋白通常与内质网有关。</p></blockquote><p>The endoplasmic reticulum, a lacy array of membranous sacs, tubules, and vesicles, may be either rough (RER) or smooth (SER).  Both types play roles in the synthesis and transport of proteins. The RER, which is studded with polysomes, also seems to be the source of the nuclear envelope after a cell divides. SER lacks polysomes; it is active in the synthesis of fats and steroids and in the oxidation of toxic substances in the cell.  Both types of endoplasmic reticulum serve as compartments within the cell where specific products can be isolated and subsequently shunted to particular areas in or outside the cell.</p><blockquote><p>内质网，带有花边的生物囊，有管状，泡状之分，以及光滑和粗糙面区别。两种都与蛋白质的合成和运输有关。粗糙内质网上分布许多核糖体，也可能提供细胞分裂后所需的细胞膜。光滑内质网上无核糖体，主要作用是脂肪和类固醇的合成以及细胞内有毒物质的氧化。两种内质网合成的产物在其中进行分流或运输到细胞外。</p></blockquote><p>Transport vesicles may carry exportable molecules from the endoplasmic reticulum to another membranous organelle, the Golgi complex.  Within the Golgi complex molecules are modified and packaged for export out of the cell or for delivery else where in the cytoplasm.</p><blockquote><p>运输小泡能够将可运输分子从内质网运输到高尔基复合体上。在高尔基复合体中修饰，包装后输出细胞或传递到细胞质中的其他场所。</p></blockquote><p>Vacuoles in cells appear to be hollow sacs but are actually filled with fluid and soluble molecules.  The most prominent vacuoles appear in plant cells and serve as water reservoirs and storage sites for sugars and other molecules.  Vacuoles in animal cells carry out phagocytosis (the intake of particulate matter) and pinocytosis (vacuolar drinking).</p><blockquote><p>细胞中的液泡好象是中空的，但实际上充满了液体和可溶分子。最典型的液泡存在于植物细胞中，储备水，糖以及其它分子。动物中的液泡起吞噬和胞饮作用。</p></blockquote><p>A subset of vacuoles are the organelles known as lysosomes, which contain digestive enzymes (packaged in lysosomes in the Golgi complex) that can break down most biological macromolecules.  They act to digest food particles and to degrade damaged cell parts.</p><blockquote><p>溶酶体是液泡亚单位，含有消化酶，降解大部分生物大分子。消化食物微粒和降解损伤的细胞残片。</p></blockquote><p>Mitochondria are the sites of energy-yielding chemical reactions in all cells.  In addition, plant cells contain plastids that utilize light energy to manufacture carbohydrates in the process of photosynthesis.  It is on the large surface area provided by the inner cristae of mitochondria that ATP-generating enzymes are located.  Mitochondria are self-replicating, and probably they are the evolutionary descendants of what were once free-living prokaryotes.</p><blockquote><p>线粒体是细胞中化学产能的场所。另外，植物细胞中的质体在光合作用中利用光能产生碳水化合物，线粒体内嵴上提供了很大的表面积并分布着产ATP酶。线粒体自我复制，并且可能是自由生活的原核生物在进化中形成的后代。</p></blockquote><p>There are two types of plastids: leucoplasts, which lack pigments and serve as storage sites for starch, proteins, and oils; and chromoplasts, which contain pigments.  The most important chromoplasts are chloroplasts-organelles that contain the chlorophyll used in photosynthesis.  The internal structure of chloroplasts includes stacks of membranes called grana, which are embedded in a matrix called the stroma.</p><blockquote><p>质体有两种类型：白色体，缺乏色素，是淀粉，蛋白质和油的储备场所；色质体，含有色素。叶绿体是最重要的色质体，含有与光合作用有关的叶绿素。叶绿体的内部结构是由多层膜形成的叶绿体基粒，其中包埋在基质中的基粒称子座。</p></blockquote><ol start="4"><li><p>The Cytoskeleton（细胞骨架）</p><p>All eukaryotic cells have a cytoskeleton, which is a convoluted latticework of filaments and tubules that appears to fill all available space in the cell and provides support for various other organelles.  A large portion of the cytoskeleton consists of threadlike microfilaments composed mainly of the contractile protein actin.  They are involved in many types of intracellular movements in plant and animal cells.  A second protein, myosin, is involve in the contraction of muscle cells.  Another main structural component of the cytoskeleton consists of microtubules, which are composed of the globular protein tubulin and together act as scaffolding that provides a stable cell shape.  Cytoskeletal intermediate filaments appear to impart tensile strength to the cell cytoplasm.  Mechanoenzymes such as myosin, dynein, and kinesin interact with the cytoskeletal filaments and tubules to generate forces that cause movements.</p><blockquote><p>所有的细胞都有细胞骨架，网络结构的纤丝充满了它所能触及的全部空间并且对细胞器提供支持作用。细胞骨架大部分由微丝组成，微丝主要由可收缩的肌动蛋白组成。动植物细胞的许多种类型细胞内运动与肌动蛋白有关。第二类蛋白是肌球蛋白，它与肌肉细胞的收缩有关。细胞骨架的另一个主要结构成分是微管，由球状的微管蛋白组成，象脚手架一般维持细胞的稳定形态。细胞骨架的中间丝提供了细胞质伸缩动力。机械酶，例如，肌球蛋白，动力蛋白，驱动蛋白与微丝，微管相互作用产生动力而引起细胞运动。</p></blockquote></li><li><p>Cellular Movements（细胞运动）</p><p>Although the cytoskeleton provides some stability稳固 to cells, its microtubules and filaments 丝状物 and their associated proteins enable cells to move by creeping 爬行 or gliding 滑动.  Such movements require a solid固体的 substrate to which the cell can adhere附着 and can be guided by the geometry dʒiˈɔmitri]  几何形状of the surface.  Some cells also exhibit [iɡˈzibit] 展览chemotaxis, keməˈtæksis趋药性 the ability to move toward or away from the source of a diffusing 扩散 chemical.</p><blockquote><p>尽管细胞骨架提供了细胞的某些稳定性，微丝，微管及相关蛋白能使细胞爬行或滑动。这种运动需要固体基质依托并通过表面几何形状的改变而运动。某些细胞具备趋药性，即趋向或逃离扩散开的化学源。</p></blockquote><p>Certain eukaryotic cells can swim freely in liquid environments, propelled by whiplike cilia [ˈsiliə]纤毛or flagella 英[fləˈdʒelə鞭毛. Both cilia and flagella have the same internal structure: nine doublets (pairs of microtubules) are arranged in a ring and extend the length of the cilium or flagellum, and two more microtubules run down the center of the ring. Every cilium or flagellum grows only from the cell surface where a basal body基体is located. Movement is based on the activities of tiny dynein动力蛋白 side arms that extend from one of the microtubules of each doublet成对的东西.</p><blockquote><p>某些真核细胞能在液体液体中自由运动，由纤毛或鞭毛推动。纤毛和鞭毛具有同样的内部结构：九个双微管环形排列，纵向延伸，环中心是两个或以上微管组成。纤毛或鞭毛从细胞表面的基体出生长，双微管的动力蛋白臂从一侧延伸到另一侧而引起运动。</p></blockquote><p>Nutrients, proteins, and other materials within most plant cells are moved about via cytoplasmic streaming. The process occurs as myosin ˈmaiəusin肌凝蛋白 proteins attached to organelles 细胞器,小器官 push against microfilaments arrayed [əˈrei] 展示throughout the cell. Microfilaments and microtubules are responsible for almost all major cytoplasmic movements. During cell division, microtubules of the spindle assembled 集合, 收集 from tubutin subunits near organelles called centrioles move the chromosomes.</p><blockquote><p>大部分植物细胞的营养，蛋白质和其它物质由细胞质流运输。这个过程是由于依附在细胞器上的肌球蛋白反推排列在细胞周围的微丝形成的。绝大部分细胞质运动由微丝和微管完成。在细胞分裂期间，中心粒周围的由微管蛋白亚基装配形成的纺锤体微管移向染色体。</p></blockquote></li></ol><h2 id="第二章-Photosynthesis">第二章 Photosynthesis</h2><p>Photosynthesis occurs only in the chlorophyllchlorophyll叶绿素-containing cells of green plants, algae藻, and certain protists原生生物and bacteria.  Overall, it is a process that converts light energy into chemical energy that is stored in the molecular bonds.  From the point of view of chemistry and energetics, it is the opposite of cellular respiration.  Whereas 然而 cellular细胞的 respiration 呼吸is highly exergonic吸收能量的 and releases energy, photosynthesis光合作用 requires energy and is highly endergonic.</p><blockquote><p>光合作用只发生在含有叶绿素的绿色植物细胞，海藻，某些原生动物和细菌之中。总体来说，这是一个将光能转化成化学能，并将能量贮存在分子键中，从化学和动能学角度来看，它是细胞呼吸作用的对立面。细胞呼吸作用是高度放能的，光合作用是需要能量并高吸能的过程。</p></blockquote><p>Photosynthesis starts with CO2 and H2O as raw materials and proceeds through two sets of partial reactions.  In the first set, called the light-dependent reactions, water molecules are split裂开 (oxidized), 02 is released, and ATP and NADPH are formed.  These reactions must take place in the presence of 在面前 light energy.  In the second set, called light-independent reactions, CO2 is reduced (via the addition of H atoms) to carbohydrate.  These chemical events rely on the electron carrier NADPH and ATP generated by the first set of reactions.</p><blockquote><p>光合作用以二氧化碳和水为原材料并经历两步化学反应。第一步，称光反应，水分子分解，氧分子释放，ATP和NADPH形成。此反应需要光能的存在。第二步，称暗反应，二氧化碳被还原成碳水化合物，这步反应依赖电子载体NADPH以及第一步反应产生的ATP。</p></blockquote><p>Both sets of reactions take place in chloroplasts.  Most of the enzymes and pigments 色素for the lightdependent reactions are embedded 深入的内含的in the thylakoid类囊体 membrane膜隔膜 of chloroplasts 叶绿体.  The dark reactions take place in the stroma.基质</p><blockquote><p>两步反应都发生在叶绿体中。光反应需要的大部分酶和色素包埋在叶绿体的类囊体膜上。暗反应发生在基质中。</p></blockquote><ol><li>How Light Energy Reaches Photosynthetic Cells（光合细胞如何吸收光能的）</li></ol><p>The energy in light photons in the visible part of the spectrum can be captured by biological molecules to do constructive work.  The pigment chlorophyll in plant cells absorbs photons within a particular absorption spectrums statement of the amount of light absorbed by chlorophyll at different wavelengths.  When light is absorbed it alters the arrangement of electrons in the absorbing molecule.  The added energy of the photon boosts the energy condition of the molecule from a stable state to a less-stable excited state.  During the light-dependent reactions of photosynthesis, as the absorbing molecule returns to the ground state, the “excess” excitation energy is transmitted to other molecules and stored as chemical energy.</p><blockquote><p>生物分子能捕获可见光谱中的光能。植物细胞中叶绿素在不同光波下吸收部分吸收光谱。在吸收分子中，光的作用使分子中的电子发生重排。光子的能量激活了分子的能量状态，使其从稳定态进入不稳定的激活态。</p></blockquote><p>All photosynthetic organisms contain various classes of chlorophylls and one or more carotenoid (accessory) pigments that also contribute to photosynthesis.  Groups of pigment molecules called antenna complexes are present on thylakoids.  Light striking any one of the pigment molecules is funneled to a special chlorophyll a molecule, termed a reaction-center chlorophyll, which directly participates in photosynthesis.  Most photosynthetic organisms possess two types of reaction-center chlorophylls, P680 and P700, each associated with an electron acceptor molecule and an electron donor.  These aggregations are known respectively as photosystem Ⅰ (P700) and photosystem Ⅱ (P680).</p><blockquote><p>所有的光合作用生物含有不同等级的叶绿素和一个或多个类胡萝卜素（光合作用的辅助色素）。称作天线复合体的色素分子群存在于类囊体中。激活色素分子的光能进入叶绿素反应中心，其直接参与光合作用。大部分光反应细胞器拥有两套反应中心，P680和P700，每个光系统都含有一个电子受体和电子供体。这些集合体就是大家熟识的光合系统Ⅰ和光合系统Ⅱ。</p></blockquote><ol start="2"><li><p>The Light-Dependent Reaction: Converting Solar Energy into Chemical-Bond Energy（光反应：光能转化成化学键能）</p><p>The photosystems of the light-dependent reactions are responsible for the packaging of light energy in the chemical compounds ATP and NADPH.  This packaging takes place through a series of oxidation reduction reactions set in motion when light strikes the P680 reaction center in photosystem Ⅱ.  In this initial event water molecules are cleaved, oxygen is released, and electrons are donated.  These electrons are accepted first by plastoquinone and then by a series of carriers as they descend an electron transport chain.  For each four electrons that pass down the chain, two ATPs are formed. The last acceptor in the chain is the P700 reaction center of photosystem Ⅰ. At this point incoming photons boost the energy of the electrons, and they are accepted by ferredoxin.  Ferredoxin is then reoxidized, and the coenzyme NADP+ is reduced to the NADPH.  The ATP generated previously and the NADPH then take part in the light independent reactions.</p><blockquote><p>光反应的光系统将光能转化成化学复合物ATP和NADPH。当光激活光系统Ⅱ的光反应中心时，通过一系列的氧化还原反应实现能量的传递。反应开始时，水被分解，氧被释放并提供电子。电子首先传递给质体醌，然后通过一系列载体形成的电子传递链。每传递4个电子，形成2个ATP。最后一个受体存在于光反应系统Ⅰ的反应中心里。此处光子激活电子，电子传递给铁氧还蛋白。铁氧还蛋白再氧化，并且辅酶NADP+还原成NADPH。早期产生的ATP和NADPH进入暗反应。</p></blockquote><p>The production of ATP from the transport of electrons excited by light energy down an electron transport chain is termed photophosphorylation.  The one-way flow of electrons through photosystems II and I is called noncyclic photophosphorylation; plants also derive additional ATP through cyclic photophosphorylation, in which some electrons are shunted back through the electron transport chain between photosystems Ⅱ and Ⅰ.</p><blockquote><p>由电子传递链偶连产生ATP的过程称为光合磷酸化。通过光合系统Ⅱ流经光合系统Ⅰ的电子路径称非循环式光合磷酸化；植物通过循环式光合磷酸化获得额外的ATP，一些电子在光合系统Ⅰ和Ⅱ之间的电子传递链中回流。</p></blockquote></li><li><p>The Light-Independent Reactions: Building Carbohydrates（暗反应：碳水化合物的形成）</p><p>In the light-independent reactions of photosynthesis, which are driven by ATP and NADPH, C02 is converted to carbohydrate.  The reactions are also known as the Calvin-Benson cycle.  Atmospheric CO2, is fixed as it reacts with ribulosebiphosphate (RuBP), a reaction that is catalyzed by the enzyme ribulosebiphosphate carboxylase. The reduction Of C02 to carbohydrate (fructose diphosphate) is completed via several more steps of the cycle.  Finally, RUBP is regenerated so that the cycle may continue.</p><blockquote><p>由ATP和NADPH驱动的暗反应中，二氧化碳转化成碳水化合物。即卡尔文循环。二磷酸核酮糖固定二氧化碳，由二磷酸核酮糖羧化酶催化。</p></blockquote></li><li><p>Oxygen: An Inhibitor of photosynthesis（氧：光合作用的抑制因子）</p><p>High levels of oxygen in plant cells can disrupt photosynthesis and can also cause photorespiration-an inefficient fun of the dark reactions in which O<sub>2</sub> is fixed rather than CO<sub>2</sub> and no carbohydrate is produced.</p><blockquote><p>植物细胞中高浓度的氧会扰乱光合作用，并导致光呼吸——暗反应的无效形式，在反应中消耗的是O<sub>2</sub>，而不是CO<sub>2</sub>，且没有有机物产生。</p></blockquote></li><li><p>Reprieve from Photorespiration: The C4 Pathway（避开光呼吸：C4循环途径）<br>Most plants are C3 plants; they experience decreased carbohydrate production under hot, dry conditions as a result of the effects of photorespiration.  Among C4 plants, however, special leaf anatomy and a unique biochemical pathway enable the plant to thrive in and conditions.  Thus C4 plants lessen photorespiration by carrying out photosynthesis only in cells that are insulated from high levels of CO2.  They also possess a novel mechanism for carbon fixation.</p><blockquote><p>大部分植物是碳3植物，在高温干旱条件下，由于光呼吸作用而使碳水化合物的合成降低。而在大多数的碳4植物中，由于叶脉的特殊构造和独特的化学路径使植物依然很茂盛。这是碳固定的一个新机制。</p></blockquote></li></ol><h2 id="第三章-Cellular-Reproduction-Mitosis-and-Meiosis">第三章 Cellular Reproduction:  Mitosis and Meiosis</h2><ol><li><p>The Nucleus and Chromosomes（细胞核和染色体）<br>The cell nucleus is the main repository of genetic information.  Within the nucleus are the chromosomes tightly coiled strands of DNA and clusters of associated proteins.  Long stretches of the continuous DNA molecule wind around these clusters of proteins, or histones, forming beadlike complexes known as nucleosomes. More coiling and supercoiling produces a dense chromosome structure. Each long strand of DNA combines with histones and nonhistone proteins to make up the substance chromatin.</p><blockquote><p>细胞核是贮藏遗传信息的主要场所。DNA盘绕成螺旋线以及相关的成簇蛋白质。DNA螺旋线缠绕成簇的组蛋白形成珠链状的核小体。这些螺旋和超螺旋形成致密的染色体组结构。每个长链DNA与组蛋白和非组蛋白一起构成染色质物质。</p></blockquote><p>A pictorial display of an organism’s chromosomes in the coiled, condensed state is known as a karyotype.  Karyotype reveal that in most cells all but sex chromosomes are present as two copies, referred to as homologous pairs.  Non-sex chromosomes are called autosomes.  Organisms whose cells contain two sets of parental chromosomes are called diploid; those with cells containing a single set of parental chromosomes are called haploid.</p><blockquote><p>染色体致密的超螺旋状态我们称染色体组。除了性染色体外，大多数细胞的染色体组成对出现，称同源染色体对。非性染色体称常染色体。生物细胞含有两套父母本染色体的称二倍体；含有单套染色体的称单倍体。</p></blockquote></li><li><p>The Cell Cycle（细胞循环）<br>The cell cycle is a regular sequence in which the cell grows, prepares for division, and divides to form two daughter cells, each of which then repeats the cycle.  Such cycling in effect makes single-celled organisms immortal.  Many cells in multicellular organisms, including animal muscle and nerve cells, either slow the cycle or break out of it altogether.</p><blockquote><p>在细胞生长过程中，细胞循环遵循特定程序，分裂准备，分裂成2个子细胞，子细胞再循环。此循环使得单细胞永生。多细胞生物中的许多细胞，包括动物肌肉和神经细胞，要么降低循环速度，要么同时分裂。</p></blockquote><p>The normal cell cycle consists of four phases.  The first three include G1, the period of normal metabolism; S phase, during which normal synthesis of biological molecules continues, DNA is replicated, and histones are synthesized; and G2, a brief period of metabolism and additional growth.  Together the G1, S, and G2 phases are called interphase.  The fourth phase of the cell cycle is M phase, the period of mitosis, during which the replicated chromosomes condense and move and the cell divides.  It is believed that properties of the cell cytoplasm control the cell cycle, along with external stimulators and inhibitors such as chalones.</p><blockquote><p>正常细胞循环由4个时期组成。头三期包括G1,正常新陈代谢；S期,正常新陈代谢同时，DNA复制，组蛋白合成； G2 期，短期的新陈代谢和少许生长。G1, S, 和G2称分裂间期。最后是M期，有丝分裂期，复制的染色体组浓缩，移动并细胞分裂。据称是染色质控制了细胞循环，伴随外部激活因子和抑制因子如抑素。</p></blockquote></li><li><p>Mitosis: Partitioning the Hereditary Material（有丝分裂：遗传物质的分割）</p><p>Biologists divide the mitotic cycle into four phases.  At the beginning of prophase 前期 the chromosomes each consist of two highly condensed chromatids attached to each other at a centromere.  As prophase ends and metaphase 中期 begins, the condensed 浓缩的 chromosomes become associated with the spindle 纺锤体.  Eventually the chromosomes become arranged in a plane (called the metaphase plate) at a right angle to the spindle fibers.  Next, during anaphase 后期, the two  sister chromatids of each chromosome split, and one from each pair is drawn toward each pole of the cell.  During telophase末期 nuclear envelopes 包膜 begin to form around each set of chromosomes, and division of the cytoplasm takes place.</p><blockquote><p>生物学家将有丝分裂划分为4个阶段。分裂前期，高度浓缩的两个染色单体通过着丝粒连接在一起。在分裂前期后期和分裂中期前期，浓缩的染色体与纺锤体相连，最后以正确的角度排列在赤道板上。在分裂后期，两个姊妹单体分离，分别拽向细胞两极。在分裂末期，在每套染色体周围形成核膜，细胞质发生分裂。</p></blockquote><p>As mitosis proceeds, the spindle microtubules play a crucial role in ensuring that both paired and separated chromatids  染色单体 move in the right directions at the proper times.  Each half of the spindle forms as microtubules extend from each pole of a dividing cell to the region of the metaphase plate.  During prophase, other microtubules, the centromeric着丝粒fibers, extend outward from the spindle poles to structures on the chromosomes called kinetochores着丝粒.  During anaphase the fibers begin to shorten, and the chromatids begin to move apart.</p><blockquote><p>在有丝分裂过程中，是纺锤体微管确保了染色单体在适当时间以正确方向进行分离。纺锤体微管由两极向赤道板延伸。在分裂前期，其它微管，着丝粒纤维延伸到染色体的动粒。在分裂后期，纤维开始变短，染色单体分离。</p></blockquote><p>The spindle forms differently in plant and animal cells.  In animals it is associated with centriole 中心粒, while in plant and fungal 真菌 cells spindle formation is associated with reions called microtubule organizing centers.</p><blockquote><p>植物和动物细胞形成的纺锤体不同。动物细胞与中心粒相连，而在植物和真菌细胞中，纺锤体与微管组织中心的离子相连。</p></blockquote></li><li><p>Cytokinesis: Partitioning the Cytoplasm（胞质分裂：细胞质分离）</p><p>The division of the cell cytoplasm at the end of mitosis is called cytokinesis 细胞浆移动.  In animal cells it takes place as a ring of actin filaments contracts使缩短合同契约 around the cell equator赤道, pinching收聚 the cell in two.  In plant cells, which are bounded 有限制的 by a cell wall, cytokinesis involves the building of a new cell plate across the dividing cell at its equator.  Cell wall material is then deposited 存放堆积 in the region of the cell plate.</p><blockquote><p>在动物细胞中，环形肌动蛋白丝延赤道板收缩而使细胞一分为二。在植物细胞中，在赤道板形成新的细胞板。</p></blockquote></li><li><p>Meiosis: The Basis of Sexual Reproduction（减数分裂：有性生殖的基础）<br>Meiosis 减数 is a special form of cell division that takes place in the reproductive 生殖 organs that produce sex cells.  Like mitosis, it takes place after DNA replication has occurred and involves two sequential 连续的 nuclear divisions (meiosis I and meiosis Ⅱ).  These divisions result in four daughter cells, each with half the number of chromosomes of the parent cell.  The phenomenon of crossing over during meiosis results in exchanges of genetic information between chromosomes.  Hence因此, the homologous 同源的 chromosomes distributed 分布 to different progeny 后裔 cells are not identical同样的.</p><blockquote><p>减数分裂是性细胞分裂的特殊形式。如有丝分裂，它也是发生在DNA复制后并有连续的两个核分裂。产生4个子细胞，分别含有亲本一半的染色体数。</p></blockquote><p>As in mitosis two chromatids exist for each chromosome at the beginning of prophase 1. During this phase the homologous 同源 chromosomes undergo 经历sy-napsis联会 , or pairing, which is brought about by a bridging structure of proteins and RNA called the synaptonemal联会丝的 complex.  The homologous pairs stay together when they align 排列 on the metaphase 中 plate.  Unlike the anaphase of mitosis, however, during anaphase I the two chromatids of each chromosome stay joined at the centromere着丝点 and move together to one of the two poles of the cell.  It is this event that results in the halving 减半的 of the chromosome number in the four daughter cells that result from meiosis.</p><blockquote><p>正如在有丝分裂中一样，两个同源染色单体通过蛋白质和RNA桥配对形成联会复合体。与有丝分裂不同的是，每组染色体的两个染色单体连接在着丝点上并一起移向细胞两极的一级。由此而导致4个子细胞染色体数减半。</p></blockquote><p>During telophase末期 I nuclear envelopes enclose the chromosomes in nuclei, and in most species cytokinesis 细胞浆流动 (the first nuclear division) follows.  The second nuclear division begins with metaphase Ⅱ, in which the chromosomes in each daughter cell again align 排列on a metaphase plate.  The centromeres着丝粒 finally divide, and each sister chromatid moves to one of the poles of the spindle.  The next phase is telophase , followed again by cytokinesis.  The result of the entire process is four haploid cells in which parental chromosomes are randomly distributed.</p><blockquote><p>第二次核分裂开始于分裂中期，子细胞中染色体重新排列在赤道板上。着丝粒最终分离，每个姊妹染色单体分向两极。接着胞质分裂。产生4个单倍体，父母染色体随机分配。</p></blockquote></li><li><p>Asexual Versus Sexual Reproduction（无性生殖与有性生殖）</p><p>Mitosis and meiosis, respectively分别, make simple cell division and sexual reproduction possible.  Each means of passing on hereditary 遗传 information has advantages.  In asexual  无性的 reproduction the parent organism生物体 gives rise to offspring 后代that are genetic clones of the parent.  The advantages of this type of reproduction are that it preserves the parent’s successful genetic complement 遗传互补, requires little or no specialization of reproductive organs, and is more rapid than sexual reproduction.  A major disadvantage of the asexual mode is that a single catastrophic灾难的 event or disease may destroy an entire population of genetically identical organisms.  A prime benefit of sexual reproduction is that it provides genetic variability and a ready mechanism机制 for the elimination of deleterious mutations.  It also allows “new” gene forms to arise and spread through populations.</p><blockquote><p>有丝分裂和减数分裂在传递遗传信息过程中各有优势。体细胞的繁殖就是父母本的克隆，其优势是保留了父母本的成功遗传信息，不需要特殊器官，比性复制快的多。但一个简单灾难性事件或疾病都可能摧毁一个细胞群体。性复制的优势是它提供了遗传可变性和现存排除有害突变的机制。也可以产生新的基因并在种群中蔓延。</p></blockquote></li></ol><h2 id="第四章-Foundations-of-Genetics">第四章 Foundations of Genetics</h2><ol><li><p>Early Theories of inheritanee（早期遗传理论）</p><p>Early ideas of inheritance included Hippocrates’ theory of pangenesis and August Weismands germ plasm theory.  Based on experiments with mice, Weismann proposed that hereditary information in gametes transmitted traits to progeny.  Both of these early views incorporated the blending theory: they held that heritable traits of the two parents blend, so that the distinct characteristics of each are lost in offspring.</p><blockquote><p>遗传学的早期理论包括泛生说和种质理论。基于小鼠实验，维丝曼提出遗传信息储存在配子中并将遗传信息传递给后代。这两个早期观点合起来形成融合理论：子代拥有父母本混合的遗传特征，而不完全象亲代。</p></blockquote></li><li><p>Gregor Mendel and the Birth of Genetics  Gregor Mendel（和遗传学的诞生）</p><p>Gregor Mendel, an Augustinian monk in the monastery at Brunn, Austria, is known as the “father of genetics.” Having been exposed to theories of the particulate nature of matter while a university student and having a background in mathematics, Mendel carried out a series of carefully planned experiments that demonstrated the particulate nature of heredity.  His revolutionary ideas were neither understood nor accepted until many years after Mendel died.</p><blockquote><p>孟德尔，众所周知的遗传学之父，是一名修道士。当他还是大学生时就提出了物质的粒子属性。孟德尔进行了一系列周密安排的实验来证实遗传的颗粒性。直到他去世后，他的理论才被理解和接受。</p></blockquote></li><li><p>Mendel’s Classic Experiments   （Mendel的经典实验）</p><p>Mendel studied genetics through plant-breeding experiments with the garden pea, a plant species that is self-fertilizing and breeds true (each offspring is identical to the parent in the trait of interest).  To test the blending theory, he focused his research on seven distinct characters.  Each of these characters, such as seed color and plant height, present only two, clear-cut possibilities.  He also recorded the type and number of all progeny produced from each pair of parent pea plants, and followed the results of each cross for two generations.</p><blockquote><p>孟德尔通过豌豆实验研究遗传学，豌豆是自花授粉植物和纯品系。为验证融合理论，他的研究主要集中在7个特征上。例如，种子颜色，植株高度，这些特征只有两个明确的可能性。他记录了产生的每一个子代类型和数量，在杂交产生子2代。</p></blockquote><p>For each of the characters he studied, Mendel found that one trait was dominant while the other was recessive. In the second filial (F2) generation, the ratio of dominant to recessive was 3:1. Mendel deduced that this result was possible only if each individual possesses only two hereditary units, one from each parent. The units Mendel hypothesized are today known as alleles, alternative forms of genes. Genes are the basic units of heredity. An organism that inherits identical alleles for a trait from each parent is said to be homozygous for that trait; if different alleles for a trait are inherited, the organism is heterozygous for that trait.</p><blockquote><p>对于每个特征而言，要么显形，要么隐性。在子2代中显形与隐性比为3∶1。只有在每个个体仅拥有两个研究遗传单元，并每个单元来自一个亲代时，实验结果才成立。此遗传单元就是今天共识的等位基因。两个一样的等位基因决定一个特征，称纯合。相反，称杂合。</p></blockquote><p>When an organism is heterozygous for a trait, the resulting phenotype for that trait expresses only the dominant allele.Thus, the organism’s phenotype—its physical appearance and properties-differs from its genotype, which may include both a dominant and a recessive allele.  A pictorial representation of all possible combinations of a genetic cross is known as a Punnett square.</p><blockquote><p>当生物是杂合时，它的表型由显性基因决定。因此，生物的表型与基因型是不同的。旁纳特方格可以陈列所有可能的遗传组合。</p></blockquote><p>The results of Mendel’s experiments on dominant and recessive inheritance let to Mendel’s first law: the law of segregation.This law states that for a given trait an organism inherits one allele from each parent.  Together these alleles form the allele pair. When gametes are formed during meiosis, the two alleles become separated (halving of chromosome number).To gain evidence for his theory Mendel performed test crosses, mating plants of unknown genotype to plants that were homozygous recessive for the trait of interest.  The ratio of dominant phenotypes (if any) in the progeny makes clear whether the unknown genotype is heterozygous, homozygous dominant, or homozygous recessive.</p><blockquote><p>分离定律，生物只遗传父母本等位基因对的一个等位基因。减数分裂期形成配子时两个等位基因分离。为验证此理论，他做了测交实验，即基因型未知的植物与纯合的隐性基因植物杂交。子代显性表型可以明确测得杂合基因或纯合基因的基因型。</p></blockquote></li><li><p>Mendel’s Ideas and the Law of independent Assortment  （Mendel的想法和独立分配定律）</p><p>Mendel also performed dihybrid crosses, which enabled him to consider how two traits are inherited relative to one another.  This work let to the law of independent assortment, which states that the alleles of genes governing different characters are inherited independently.  An apparent exception to Mendel’s laws is incomplete dominance, a phenomenon in which offspring of a cross exhibit a phenotype that is intermediate between those of the parents.  However, incomplete dominance reflects the fact that both alleles for the trait in question exert an effect on the phenotype.  The alleles themselves remain separate.</p><blockquote><p>双因子杂合试验，两个特征是如何相互影响遗传的。试验结果产生独自分配定律，即等位基因独立遗传。特例是，不完全显性。子代的表型是父母本的中间类型。不完全显性说明了两个等位基因对表型都有影响。，等位基因会继续分离。</p></blockquote><p>Mendel presented his ideas in 1866 in a scientific paper published by the Brunn Society for Natural History.  Unfortunately, the meaning of his research was not understood by other scientists of the day.  His work was rediscovered in 1900 by Carl Correns and Hugo de Vries.</p><blockquote><p>1866年，孟德尔在自然史上发表了他的科学论文，陈诉了他的观点。不幸的是，他的研究不被当时科学家接受。在1900年，他的著作再被发现利用。</p></blockquote></li><li><p>Chromosomes and Mendelian Genetics（染色体和孟德尔遗传定律）</p><p>Soon after Mendel’s work was rediscovered, Walter Sutton and Theodor Boveri independently proposed that the hereditary units might be located on chromosomes.  Experiments to prove this hypothesis were carried out by Thomas Hunt Morgan and his students at Columbia University, in research on the sex chromosomes of fruit flies.  Morgan’s studies were also the first exploration of sex-linked traits.  It also led to the discovery in 1916 by Calvin Bridges of the phenomenon of nondisjunction, in which a chromosome pair fails to segregate during meiosis.</p><blockquote><p>孟德尔著作被再发现不久，Walter Sutton 和Theodor Boveri提出，遗传单位可能定位在染色体组上。伴性遗传又导致了不分离现象的发现，即在减数分裂中，染色体对不分离。</p></blockquote></li></ol><h2 id="第五章-Discovering-the-Chemical-Nature-of-the-Gene">第五章 Discovering the Chemical Nature of the Gene</h2><ol><li><p>Genes Code for Particular Proteins（特定蛋白质的基因编码）</p><p>The first scientist to investigate the question of how genes affect phenotype was Sir Archibald Garrod, whose studies of alkaptonuria implied a relationship between genes and enzymes.  Thirty years later Beadle and Ephrussi showed a relationship between particular genes and biosynthetic reactions responsible for eye color in fruit flies. Next, in a series of classic experiments on the effects of mutations in the bread mold Neurosporacrassa, Beadle and Tatum explored the one-gene-one-enzyme hypothesis-the idea that each gene codes for a particular enzyme.  Their work paved the way for other researchers to elucidate the precise ways in which enzymes affect complex metabolic pathways.In 1949, in research on the role of hemoglobin in sickle cell anemia, Linus Pauling helped refine the one-gene-one-enzyme hypothesis into the one-gene-one-polypeptide hypothesis.</p><blockquote><p>Archibald Garrod是第一个研究基因是如何影响表型的科学家，他对尿黑酸症的研究揭示了基因与酶之间的关系。Beadle 和Ephrussi在三十年后对果蝇眼睛颜色的研究发现特殊基因与相关反应的生物合成有关。接着对面包发霉粗糙脉孢菌的突变试验得出一个基因一个酶的假说。他们的工作为其他工作者铺平了道路，即精确地阐明了酶影响了复杂的新陈代谢途径。在1949年，对镰刀状细胞贫血症的研究对一个基因一个酶的假说进一步上升为一个基因一个多肽。</p></blockquote></li><li><p>The Search for the Chemistry and Molecular Structure of nucleic Acids（核酸的化学和分子结构的研究）</p><p>Nuclei acid, originally isolated by Johann Miescher in 1871, was identified as a prime constituent of chromosomes through the use of the red-staining method developed by Feulgen in the early 1900s.  Frederick Griffith’s experiments with the R and S stains of pneumococci showed that an as yet unknown material from one set of bacterial could alter the physical traits of a second set.  In the 1940s the team of Avery, MacLeod, and McCarty showed that this unknown material was DNA.  At about the same time P.A. Levene discovered that DNA contained four nitrogenous bases, each of which was attached to a sugar molecule and a phosphate group-a combination Levene termed a nucleotide.</p><blockquote><p>在1871年，核酸最初是由Johann Miescher分离成功，并由Feulgen在1900年证实核酸是染色体组最基本的组成。Frederick Griffith对粗糙和光滑的肺炎球菌实验表明，不确定的某种物质可以从一组细菌转移到另一种细菌中。在1940年，确认该物质为DNA。四个碱基和磷酸分子分别连接在糖分子上，称核苷酸。</p></blockquote><p>Disagreement over whether DNA could carry complex genetic information was ended in the early 1950s by Martha Chase and Alfred Hershey, whose work with E. coli showed clearly that DNA, and not protein, is the bearer of genetic information.</p><blockquote><p>直到1950年，通过对大肠杆菌实验发现，遗传物质是DNA，而不是蛋白质。</p></blockquote><p>Each DNA nucleotide contains a five-carbon sugar, deoxyribose, attached to one of four bases: adenine, guanine, cytosine, or thymine.  Adenine and guanine molecules are double-ring structures called purines, while cytosine and thymine are single-ring structures called pyrimidines.  The molecule made up of a base plus a sugar is termed a nucleoside.  In each molecule of DNA a phosphate group links the five-carbon sugar of one nucleoside to the five-carbon sugar of the next nucleoside in the chain.  This phosphate bonding creates a sugar-phosphate backbone.</p><blockquote><p>每个核苷酸都含有一个五碳脱氧核糖，分别连接4个碱基，即：腺嘌呤，鸟嘌呤，胞嘧啶，胸腺嘧啶。碱基连接糖称核苷。磷酸键形成磷酸骨架。</p></blockquote><p>Chargaff’s rules describe the fact that (1) the amount of adenine is equal to the amount of thymine in DNA, with amount of cytosine equal to that of guanine, and (2) the ratios of A to T and of C to G vary with different species.</p><blockquote><p>（1）腺嘌呤与胸腺嘧啶，胞嘧啶与鸟嘌呤相等；（2）腺嘌呤与胸腺嘧啶，胞嘧啶与鸟嘌呤的比例随物种不同而不同。</p></blockquote></li><li><p>The Research Race for the Molecular Structure of  DNA  (DNA分子结构的研究实验 )</p><p>In the late 1940s and early 1950s, researchers looking for the structure of DNA drew upon Chargaff s insight, Levene’s ideas on DNA components, and two other lines of evidence.  One was the suggestion of Linus Pauling that DNA might have a helical structure held in place by hydrogen bonds, and the other was X-ray diffraction photos of DNA, showing a helical structure with distance between the coils, taken by Franklin and Wilkins.</p><blockquote><p>直到40年代末50年代初，研究者在寻求DNA结构过程中，确立了Chargaff 的观点和, Levene的组成理论以及其他两个线索。一个是Linus Pauling的假设，DNA可能具有螺旋结构，通过氢键连接。另一个是X-衍射图片，Franklin and Wilkins提供。</p></blockquote><p>Based on this information Watson and Crick proposed the double helix model of DNA-A twisted ladder-like molecule with two outer sugar phosphate chains and rungs formed by nucleotide pairs.  Paired nucleotides, which always occur as A-T or G-C, are linked by hydrogen bonds.  Watson and Crick also proposed that genetic information is encoded by the sequence of base pairs along the DNA molecule.</p><blockquote><p>基于这些信息，Watson 和 Crick提出了双螺旋结构模型，成对的核苷酸通过氢键相连，遗传信息就贮藏在碱基对中。</p></blockquote></li><li><p>How DNA Replicates  (DNA如何复制)</p><p>In their model of DNA structure and function, Watson and Crick hypothesized that DNA replicates itself by “unzipping” along the hydrogen bonds joining A to T and C to G. This process would produce two opposite halves that could then serve as templates for the construction of new, complementary strands.  This model of semiconservative replication conservative because each new molecule has one half of the former parent molecule-was later confirmed by the work of</p><blockquote><p>DNA进行复制是以拉链方式自我复制，产生的两个二分体分别为模板生成互补链，即半保留复制。并由Meselson和 Stahl验证。</p></blockquote><p>In E. coli DNA replication begins with the formation of a bubblelike structure on the circular chromosome that is produced by replication forks.  Studies of bacterial DNA replication have shown that a growing DNA chain lengthens only in the 5’ to 3’ direction (from the 5’ carbon of one sugar to the 3’ carbon of the next).  The leading strand is synthesized continuously, while the lagging strand is synthesized in short stretches known as Okazaki fragments.  The enzyme DNA polymerase links free nucleotides as they line up on the template formed by the original strand of the parent molecule.<br>In eukaryotes DNA replication follows the same general principles as in prokarotes. On the long DNA molecules replication proceeds (in two directions at once) from hundreds or thousands of points of origin.</p><blockquote><p>大肠杆菌复制开始时形成泡样复制叉，链生长方向由5′向3′端，前导链连续生成，后随链由冈崎片段组成，由DNA聚合酶催化。真核生物复制与原核生物复制相似，但有几百到几千个复制原点（原核一般只有一个复制原点）。</p></blockquote></li></ol><h2 id="第八章-Animal-Development">第八章 Animal Development</h2><ol><li><p>Production of Sperm and Eggs（精子和卵子的产生）</p><p>In sexually reproducing organisms males and females produce sex cells, known as gametes.  These are swimming sperm in males and ova (eggs) in females.</p><blockquote><p>在性繁殖过程中，生物的雄性和雌性产生性细胞，称配子。雄性是能够游动的精子，雌性是卵子。</p></blockquote><p>The process of sperm production, spermatogenesis, takes place in testes.  The sperm originate in gonial cells (spermatogonia) in the walls of seminiferous tubules.  Spermatocytes produced by mitosis in spermatogonia divide meiotically to generate haploid spermatids.  The mature sperm has a tail, a nucleus containing haploid chromosomes, and a front end with an acrosome, the storage site for enzymes that will aid fertilization.</p><blockquote><p>精子产生过程，即精子发生在睾丸中。精子产生于输精管壁的性母细胞（精原细胞）。精原细胞经有丝分裂再减数分裂产生单倍体精子细胞，即精母细胞。成熟精子有尾部，单倍体染色体组，头部有顶体，内部储存酶类，有助于受精。</p></blockquote><p>Ova, which are produced during oogenesis, are generated in gonial cells (oogonia) of the female’s ovaries.  Oocytes then enter a stage of arrest in early meiosis.  At a species-specific later point, a final ripening (ovulation) and the first meiotic division occur.  A second meiotic division, followed by development of the embryo, takes place if the egg is fertilized.</p><blockquote><p>在卵子发生过程中，由卵巢中的性母细胞产生。卵母细胞进入减数分裂的抑制阶段。第一次减数分裂产生一个成熟卵。如果卵受精，那么第二次减数分裂伴随胚胎的发育。</p></blockquote><p>Eggs vary greatly in size from species to species and have complex structures.  Virtually all developing animal ova are surrounded by helper cells, either follicle cells or nurse cells.  Depending on the species, eggs also store varying amounts of yolk, a reservoir of nutrients produced by digestive-gland cells in the mother’s body.  Finally, follicle cells or cells of the maternal oviduct provide protective coatings for the egg, including albumen (egg white) and various types of outer membranes and shells.</p><blockquote><p>品种间卵的大小变化很大，并且有复杂的结构。实际上，所有发育过程中的卵都辅助细胞环绕，要么是滤泡细胞，要么是抚育细胞。依赖物种的不同而不同，卵黄贮备也不同，即由母体消化腺细胞产生的营养储备。最后，滤泡或母体输卵管细胞产生保护性的卵膜，包括清蛋白和各种外部膜及壳。</p></blockquote><p>Frog oocytes have served as model systems for studies of oocyte development.  During maturation they produce huge numbers of ribosomes through gene amplification.  Large quantities of mRNA may also be made and stored.</p><blockquote><p>蛙卵母细胞作为卵母细胞发育的研究系统模型。在成熟过程中，通过基因扩增产生大量的核糖体。同时也产生和储备了大量的mRNA。</p></blockquote></li><li><p>Fertilization: Initiating Development（受精：启动发育）</p><p>Fertilization unites male and female gametes and initiates development.  In some species fertilization is external; in others (including most terrestrial animals) it takes place internally.  The first contact of the sperm head with the egg’s jelly coat triggers the acrosome reaction, in which enzymes are released to digest a hole through the egg’s protective layers, and the plasma membrane of the sperm is brought into position to bind to the ovum’s surface.  After fusion of the egg and sperm plasma membranes, the haploid male nucleus with its chromosomes moves into the egg cytoplasm.  Fusion also triggers the egg’s final meiotic reduction divisions.  When sperm and egg nuclei unite, the two sets of chromosomes mingle to create a diploid set.  The fertilized egg is now a zygote.</p><blockquote><p>雌雄配子结合作用称受精作用，发育开始。某些物种中，是外部受孕；另一些物种，包括大部分陆生动物，是内部受孕。当精子和卵子的胶状膜发生接触时，触发了顶体反应。释放多种酶而将卵保护膜消化出一个洞。精子的原生质膜与卵子的表面连接起来。精卵原生质膜融合后，单倍体雄性核进入卵细胞质。融合也触发了最后的减数分裂。当精卵核结合时，两套染色体混合产生一二倍体，即受精卵。</p></blockquote><p>The egg’s cortical reaction serves as a barrier to the entry of more than one sperm.  Initially, there is a temporary change in the egg’s electrical state, and the egg cell is activated.  The final stage of the reaction, the rapid elevation of the fertilization membrane, prevents further sperm penetration.</p><blockquote><p>卵皮层阻止其他的精子进入，充当壁垒作用。开始时，卵电位发生暂时变化，卵细胞被激活。反应最后阶段，受精卵的膜快速隆起，阻止更多精子进入。</p></blockquote><p>In some species fertilization is not necessary.  Instead, parthenogenesis takes place: the egg is spontaneously activated and proceeds to normal embryonic development.</p><blockquote><p>对某些物种而言，受精不是必须的。孤雌生殖，即卵自发地被激活并进入正常的胚胎发育过程中。</p></blockquote></li><li><p>Cleavage: An Increase in Cell Number（分裂：细胞数量的增加）</p><p>Cleavage, the major developmental event immediately following fertilization, is a special form of cell division (mitosis).  Cleavage produces a blastula, a sheet of cells rounded into a sphere that in most species surrounds a cavity.  In the process, the single-celled zygote is divided into many small cells, and yolk, mRNA, ribosomes, and other materials arc distributed to each cell in precise ways.  The cells of the blastula, called blastomeres, also each receive a full diploid set of chromosomes.</p><blockquote><p>受精后，立即发生卵裂，细胞有丝分裂的特殊过程。卵裂产生一个囊胚，形成的细胞壁球形排列形成一个空腔。在这个过程中，单细胞的受精卵分裂成许多小细胞，卵黄，mRNA，核糖体和其他物质被精确分配到每个细胞中。这些囊胚细胞，称卵裂球，每个细胞都有一套二倍体染色体组。</p></blockquote><p>There are different patterns of cleavage in different species.  The amount of yolk present in the egg is a major factor in determining the pattern: in species having little yolk (such as mammals) the zygote cleaves completely through, forming cells that are roughly equivalent in size.  In frogs, in which the egg has somewhat more yolk, cleavage proceeds more rapidly in regions of the embryo having less yolk.  In bird eggs the yolk is so massive that cleavage divisions are restricted to a tiny area of cytoplasm.</p><blockquote><p>不同物种，卵裂方式不同。决定因素主要取决于卵黄的含量。含有少量卵黄的物种（例如哺乳动物），合子分裂得很彻底，子细胞大致平均分裂。蛙卵，卵黄稍微多点，在胚胎的卵黄较少区域发育更快些。鸟卵卵黄很大，卵裂被限制在细胞质很小区域内。</p></blockquote><p>In many species the precise distribution to blastomeres of molecular determinants in the cytoplasm is crucial to proper development of different cell types in the embryo.  In mammal and bird species the fate of cells is determined by the position of a cell late in cleavage.</p><blockquote><p>细胞质中分子遗传因素精确分配到卵裂球中，对许多物种而言，是发育成胚中不同类型细胞关键所在。对哺乳动物和鸟类而言，细胞的命运最终由细胞分裂后所处的位置决定的。</p></blockquote></li><li><p>Gastrulation: Rearrangement of Cells（原肠胚：细胞重排列）</p><p>The rearrangement of the blastula into a three-dimensional organism with inner, middle, and outer layers occurs during gastrulation.  The resulting gastrula consists of an outer ectoderm, an inner endoderm, and a mesoderm layer positioned between them.</p><blockquote><p>在原肠胚形成过程中，囊胚重新排列，形成包括内层，中层，外层的三围组织。最终原肠胚由一个外肠胚，内肠胚，和一个中肠胚构成。</p></blockquote><p>Each layer gives rise to specific tissues during embryonic development.  A variation in gastrulation, involving the movement of cells into endodermal and mesodermal positions through the thickened primitive streak, arose in reptiles and can still be seen in bird and mammalian embryos, lending support to the theory that birds and mammals evolved from reptiles.</p><blockquote><p>每个胚层产生特殊的胚胎组织。密实的原肠胚通过细胞运动进入内胚层和中胚层，爬虫，鸟，哺乳动物的胚胎都如此。因此提出这样的理论，鸟类和哺乳动物是由爬虫进化而来的。</p></blockquote></li><li><p>Organogenesis: Formation of Functional Tissues and Organs（器官发生：功能组织和器官的形成）</p><p>The organs and tissues of the embryo arise during organogenesis as cells inside the embryo and on its surface become specialized.  Organogenesis actually includes two closely linked processes, morphogenesis and differentiation.  During morphogenesis cells and cell populations change shape: an example is neurulation in vertebrate embryos, in which the edges of the flat neural plate fold upward and fuse, forming the beginnings of the hollow brain and spinal cord.  During differentiation cells mature so that they may perform separate functions.  This maturation may include taking on a function-related shape, such as the long, spindly shape of skeletal-muscle cells.  Cell differentiation also results in responsiveness-the ability of a cell to be regulated within the organism through the action of hormones, neurons, and other signals.</p><blockquote><p>胚经过内部细胞和表面细胞特化后，器官形成，发育成器官和组织。器官形成实质上包括两个联系紧密的过程，即形态发生和分化。在形态发生期间，细胞和细胞群体形状发生改变：例如，脊椎动物的神经胚，扁平神经板的边缘向上折叠并融合，是中空大脑和脊髓神经形成的开端。在分化期间，细胞成熟，执行各自功能。成熟包括功能相关的成型过程。例如，细长的骨骼肌肉细胞。细胞分化也产生应答能力，即细胞受生物体内激素，神经和其他信号的调控过程。</p></blockquote></li><li><p>Embryonic Coverings and Membranes（胚胎覆盖物和胎膜）</p><p>The embryos of land vertebrates are enclosed within four extraembryonic membranes that afford protection while still permitting the exchange of gases, nutrients, and other materials.</p><blockquote><p>脊椎动物的胚胎被4层膜包被，起保护作用，但仍能交换气体，营养和其他物质。</p></blockquote></li><li><p>Growth: Increase in Size（增长：规模增加）</p><p>Growth in embryos is largely due to an increase in the number of cells rather than to an increase in the size of individual cells.  In many species the extent of embryonic growth is limited by the availability of food (yolk).  In animals that develop entirely free of the maternal body, such as frogs and insects, the embryo give rise to a larval stage that can feed itself and later undergo metamorphosis to attain the adult stage.  In many species the most spectacular growth phase takes place during the juvenile and adolescent phases of the life cycle.  Actual growth generally stops once the organism reaches its typical adolescent phases of the life cycle.  Actual growth generally stops once the organism reaches its typical adult size, although replacement of dead cells may continue.</p><blockquote><p>胚的生长很大程度取决于细胞数量的增加而不是单个细胞大小的改变。在大多数物种中，胚的生长是受卵黄的量限制的。在动物细胞中，完全依赖于母体，例如蛙和昆虫，胚产生幼虫状态，后来经历变态而进入成年状态。在许多物种中，在少年和青春期，发生特别显著的生长。一旦细胞进入成年状态和成年大小，生长就停止了，尽管死细胞的替代不断发生。</p></blockquote><p>A special type of growth, regeneration of lost body parts, can take place in adults of some species.  Prior to such regeneration cells in stump tissue undergo dedifferentiation.  They lose their functional phenotype, divide rapidly, and generate a population of cells that will regenerate the lost part. Compensatory hypertrophy is a different, temporary growth response in which residual tissue increases in mass and cell number: cells undergo mitosis but do not dedifferentiate.</p><blockquote><p>一个特殊类型的生长，再生失去的部分躯体，发生在某些物种的成体中。在再生之前，残肢组织细胞经历了去分化过程。他们失去功能表型，快速分裂，产生细胞群来再生失去的部分。代偿式肥大是一个不同的，暂时的生长应答过程，残余组织在体积和细胞数量上增加：细胞经历了减数分裂，但没有去分化过程。</p></blockquote></li><li><p>Aging and Death: Final Developmental Processes（衰老与死亡：最后的发展过程）</p><p>Aging is an ongoing, time-dependent developmental process in which body parts deteriorate.  Proposed causes include the degeneration of collagen (the fibrous proteins of the connective tissues) and limits on the number of times cells can divide.  Other theories focus on a decline of the immune system or on the accumulation of lipofuscins (aging pigments).</p><blockquote><p>老化是一个持续过程，随时间发育，身体部分恶化。可能原因包括胶质的退化（纤维蛋白）和能分裂活细胞的限制。另外理论认为，免疫系统的免疫下降或脂褐素的堆积造成的。</p></blockquote></li></ol><h2 id="短语与词汇">短语与词汇</h2><ul><li>Polysome：多聚核糖体</li><li>RNA and ribosomes：RNA和核糖体</li><li>Pinocytosis：胞饮cell drinking</li><li>Exocytosis：胞吐</li><li>expel：排出</li><li>Plastid：质体</li><li>in plants only：仅在植物体中</li><li>Golgi complex：高尔基体</li><li>packaging：包装，打包</li><li>Flagella：鞭毛</li><li>whiplike：鞭子似的，像鞭子的</li><li>Phagocytosis：吞噬</li><li>engulfment：吞食</li><li>Lysosome：溶酶体</li><li>baglike structure：像袋子一样的结构</li><li>Basal body：基体</li><li>where flagella grow：鞭毛生长的地方</li><li>Chemotactic：趋化</li><li>toward or away from a chemical stimulus：朝向或远离化学刺激</li><li>Nucleus：核</li><li>control room：控制中心</li><li>Vacuole：液泡</li><li>vacant：空着的</li><li>Ribosome：核糖体</li><li>protein synthesis：蛋白质合成</li><li>Cytoskeleton：细胞骨架</li><li>weblike：像网的</li><li>Mitochondrion：线粒体</li><li>power generator：发电机</li></ul><hr><ul><li>C3 plant：三碳植物</li><li>moist climates：潮湿的气候</li><li>Pigment：色素</li><li>absorbs：吸收</li><li>Light reactions：光反应</li><li>water oxidized：水氧化了</li><li>Thylakoid：类囊体</li><li>surrounds lumen：围绕着管腔</li><li>Ground state：基态</li><li>most stable：最稳定的</li><li>Reaction center：反应中心</li><li>a specific site：一个特定的位置</li><li>Photorespiration：光呼吸</li><li>greenhouse effectn：温室效应</li><li>RuBP（ribulose biphosphate）：核酮糖二磷酸</li><li>electron acceptor for CO<sub>2</sub>：二氧化碳的电子受体</li><li>Calvin-Benson cycle  Calvin-Benson：循环</li><li>light-independent reactions：光无关的反应</li><li>C4 plant：四碳植物</li><li>dry climates：干燥的气候</li><li>Photon：光子</li><li>wave and particle：波和粒子</li><li>Chlorophyll：叶绿素</li><li>principal pigment：主要色素</li><li>Chloroplast：叶绿体</li><li>banana shape：香蕉形状</li><li>Carbon cycle：碳循环</li><li>inefficient dark reaction：低效的黑暗反应</li><li>Light-independent reactions：暗反应</li><li>light optional：灯光可选</li></ul><hr><ul><li>Cytokinesis：胞质分裂</li><li>division of cytoplasm：胞质分裂</li><li>Synapsis：染色体联会</li><li>crossing over：互换</li><li>Histone：组蛋白</li><li>positively charged protein：带正电的蛋白质</li><li>Mitosis：有丝分裂</li><li>cell division：细胞分裂</li><li>Cell cycle：细胞循环</li><li>sequence of cell growth and division：细胞生长和分裂序列</li><li>Chalone：抑素</li><li>inhibit cell division：抑制细胞分裂</li><li>Spindle：纺锤体</li><li>set of microtubules：一组微管</li><li>Chromatid：染色单体</li><li>single chromosome copy：单个染色体拷贝</li><li>Nucleosome：核小体</li><li>DNA+histones DNA：组蛋白</li><li>Diploid：二倍体</li><li>two sets：两组</li><li>Meiosis：减数分裂</li><li>gamete production：配子的产生</li><li>Cell plate：细胞板</li><li>plant division：植物分裂</li><li>Sex chromosome：性染色体X and Y</li><li>Karyotype：核型，染色体组型</li><li>chromosome display：染色体显示</li><li>Haploid：单倍体</li><li>one set：一组</li></ul><hr><ul><li>Dominant：显性</li><li>always expressed：总是表达出来的</li><li>Phenotype：表（现）型</li><li>appearance：外表</li><li>Allele：等位基因</li><li>alternative forms：替代形式</li><li>Homozygous：纯合的</li><li>similar：类似的</li><li>Recessive：隐形的</li><li>nondominant：非显性的</li><li>P1 ：亲本1parental（杂种）亲本的；作为来源[渊源]的</li><li>Dihybrid cross：双因子杂合子杂交</li><li>two characters：两个角色</li><li>Law of segregetion ：自由组合定律</li><li>separate：（使）分开/分离/分散</li><li>Gene：基因</li><li>basic units of heredity：遗传的基本单位</li><li>Pangenesis：泛生论Hippocrates</li><li>F2：杂交2代  grandchildren 孙辈</li><li>Sex-linked：伴性的</li><li>X or Y chromosome ：X或Y染色体</li><li>Heterozygote：二因子杂种</li><li>different：有差别的，分别的</li><li>Genotype：基因型</li><li>total alleles：总等位基因</li><li>Germ plasm theory：种质学说Weismann</li></ul><hr><ul><li>Replication fork：复制叉</li><li>start of DNA replication DNA：复制的开始</li><li>Cytosine：胞嘧啶</li><li>a DNA base：一个DNA碱基</li><li>Okazaki fragment：冈崎片段</li><li>small piece of DNA：一小块DNA</li><li>X-ray diffraction ：X射线衍射</li><li>photographic process ：照相法</li><li>Nucleoside：核苷</li><li>a base plus a sugar：一个碱基加上一个糖</li><li>Semiconservative replication：半保留复制</li><li>unwinding must occur：松开必须发生</li><li>5’ to 3’direction ：5’至3’方向</li><li>DNA chain lengthens ：DNA链延长</li><li>Chargaff’s rules  ：Chargaff规则A=T</li><li>Base：碱基</li><li>ring structure composed of carbon and nitrogen：由碳和氮组成的环状结构</li><li>Double helix：双螺旋</li><li>shape proposed by Watson and Crick：沃森和克里克提出的形状</li></ul><hr><ul><li>Yolk：卵黄</li><li>food：食物</li><li>Amnion：羊膜</li><li>cushions embryo：垫子胚胎</li><li>Regeneration：再生</li><li>replacement of lost parts：更换丢失的零件</li><li>Parthenogenesis：孤雌发育</li><li>“virgin”birth：“处女”出生</li><li>Cleavage：卵裂</li><li>divides a single-celled zygote into many small cells：将单细胞合子分成许多小细胞</li><li>Zygote：合子</li><li>fertilized egg： 受精卵</li><li>Chorion：绒毛膜</li><li>fuses with allantois：与尿囊融合</li><li>Testis：睾丸</li><li>homologous with ovaries：与卵巢同源</li><li>Cortical reaction：皮层反应</li><li>prevents multiple fertilizations：防止多次受精</li><li>Ovum：卵子</li><li>gamete or egg：配子或卵子</li><li>Primitive streak ：[胚]原条</li><li>associated with large yolks：与大卵黄有关</li><li>Blastomere ：[卵]裂球</li><li>individual blastula cells：单个鼓泡细胞</li><li>Allantois：尿囊</li><li>trash dump：垃圾堆</li><li>Oviduct：输卵管</li><li>egg tube：卵巢管</li><li>Gonial cell：角质细胞</li><li>spermatogonia：精原细胞</li></ul>]]></content>
      
      
      <categories>
          
          <category> 生物学 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 专业英语 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>遗传学复习整理</title>
      <link href="2020/12/25/%E7%94%9F%E7%89%A9%E5%AD%A6/%E9%81%97%E4%BC%A0%E5%AD%A6%E5%A4%8D%E4%B9%A0%E6%95%B4%E7%90%86_v0.3/"/>
      <url>2020/12/25/%E7%94%9F%E7%89%A9%E5%AD%A6/%E9%81%97%E4%BC%A0%E5%AD%A6%E5%A4%8D%E4%B9%A0%E6%95%B4%E7%90%86_v0.3/</url>
      
        <content type="html"><![CDATA[<blockquote><p>最近一次同步时间:2020年12月28日19点42分<br>如文档内容有误，点击<a href="http://doc.halo123.top:3000/6t-ExVyDTK6f2kJ2e1hp3w?both">该链接</a>对文档进行修改，定时会同步到网站上<br>文档采用Markdown格式排版，可以参考<a href="https://halo123.top/2019/05/08/Markdown%E8%AF%AD%E6%B3%95/">该网站</a>进行简单学习，感谢参与整理的同学们</p></blockquote><h2 id="名词解释">名词解释</h2><blockquote><p>有子列表内容的名词，是指不同来源解释。部分名词已注明来源，自己酌情选择</p></blockquote><ol><li><strong>转导</strong>：是指以噬菌体为媒介，将细菌的小片段染色体或基因从一个细菌转移到另一个细菌的过程。（P188）</li><li><strong>转化</strong>：是某一基因型的细胞从周围介质中吸收来自另一基因型的细胞的DNA而使它的基因型和表现型发生相应变化的现象。</li><li><strong>性导</strong>：利用F’因子进行细菌基因的转移叫做性导。（P183）</li><li><strong>异源多倍体</strong>：两个不相同的种杂交，它们的杂交再经过染色体加倍，就形成了异源多倍体。（P240）</li><li><strong>同源多倍体</strong>：<ul><li>染色体已经复制，而细胞质不分离，可形成同源多倍体（P238）</li><li>指增加的染色体组来自同一物种，一般由二倍体的染色体直接加倍产生的（<a href="https://baike.baidu.com/item/%E5%90%8C%E6%BA%90%E5%A4%9A%E5%80%8D%E4%BD%93/4719790?fr=aladdin">百度百科</a>）</li></ul></li><li><strong>重复</strong>：<ul><li>染色体增加了片段。（P220）</li><li>重复指的是除了正常的染色体组外，多了一些染色体部分，这种额外的染色体部分叫作重复片段。（P226）</li></ul></li><li><strong>缺失</strong>：染色体失去了片段。（P220）</li><li><strong>易位</strong>：<ul><li>非同源染色体间互相交换染色体片段，造成染色体间基因的重新排列。（P221）</li><li>一条染色体的一段搭到一条非同源染色体上去，叫做易位。（P226）</li></ul></li><li><strong>倒位</strong>：<ul><li>染色体片段发生180度的颠倒，造成染色体内基因的重新排列。（P220）</li><li>一个染色体片段断裂了，倒转180°，重新又搭上去了，这个现象叫作倒位。（P231）</li></ul></li><li><strong>缺体</strong>：是异源多倍体的特征，只有一对同源染色体成员全部丢失（2n-2）的生物个体，又称为零体。一般来源于单体（2n-1）的自交。</li><li><strong>三体</strong>：比正常的二倍体多了一条染色体的物种。</li><li><strong>非整倍体</strong>：增减一条或几条染色体，增减后的染色体数目不是整倍数，所以叫作非整倍体。(P244)</li><li><strong>罗伯逊易位</strong>：由着丝粒的融合或断裂引起的易位，使染色体数目减少或增加，是核型进化的一种形式。</li><li><strong>错义突变</strong>：DNA中碱基对替换，使mRNA的某一密码子改变，由它所编码的氨基酸不同。</li><li><strong>无义突变</strong>：碱基替换改变了mRNA上的一个密码子，成为3个终止密码子UAG、UAA和UGA中的任意一个时，就出现无义突变。</li><li><strong>中性突变</strong>：DNA一级结构的变化不影响蛋白质生物活性、不表现明显表型效应的突变称为中性突变。</li><li><strong>表现度</strong>：具有相同基因型的个体间基因表达的变化程度称为表现度。</li><li><strong>外显率</strong>：某一基因型个体显示预期表型的比例。</li><li><strong>表型模拟</strong>：指环境改变引起的表型改变，有时会类似某基因引起的表型变化。</li><li><strong>限性遗传</strong>：只在某一种性别表现的性状称为限性性状，限性性状的遗传行为称为限性遗传。控制限性性状的基因多数位于常染色体上，也有少部分位于性染色体上。</li><li><strong>位置效应</strong>：基因在染色体上位置不同对性状表现的作用也可能不同。</li><li><strong>剂量补偿</strong>：在XY性别决定的生物中，使性连锁基因在两种性别中有相等或近乎相等的有效剂量的遗传效应。</li><li><strong>顺反子</strong>：即结构基因，是决定一条多肽链合成的功能单位。</li><li><strong>遗传漂变</strong>：由于群体较小和偶然事件所造成的基因频率的不确定性变化现象被称为遗传漂变。或者说，非随机取样而引起的基因频率的改变称为遗传漂变。</li><li><strong>适合度</strong>：一般记作W，是指某一基因型跟其他基因型相比时，能够存活并留下子裔的相对能力。</li><li><strong>选择系数</strong>：一般记作s，s是在选择作用下降低的适合度，即s=1-W，或W=1-s。</li><li><strong>遗传平衡定律</strong>：一个群体在符合一定条件的情况下，群体中各个体的比例可从一代到另一代维持不变。</li><li><strong>遗传多态</strong>：同一群体中两种或两种以上变异类型并存的现象。</li><li><strong>基因转变</strong>：异源双链DNA分子错配的核苷酸对，在修复校正过程中发生的一个基因转变为它的等位基因的现象。</li><li><strong>基因重排</strong>：将一个基因从远离启动子的地方移到距启动子很近的地方从而启动转录的方式。</li><li><strong>母性影响</strong>：有时候两种交配的结果并不相同，子代的表型受到母本基因型的影响，与母本的表型一样，这种现象叫做母性影响。</li><li><strong>图式形成</strong>：胚胎细胞形成不同组织、器官，构成有序空间结构的过程。</li><li><strong>细胞决定</strong>：指细胞在发生可识别的形态变化之前,就已受到约束而向特定方向分化,这时细胞内部已发生变化,确定了未来的发育命运。</li><li><strong>正向遗传学</strong>：研究突变表型以确定突变基因的遗传学研究方法。大规模随机诱变，产生发育异常的突变个体，然后再寻找突变的基因。</li><li><strong>反向遗传学</strong>：通过定点突变某基因，研究其表型来确定该基因的功能的遗传学研究方法。</li><li><strong>表观遗传学</strong>：<ul><li>是探讨在不发生DNA序列改变的情形下，由DNA甲基化、染色质结构状态等因素改变，使基因功能发生可遗传的变化并最终导致表型变异的遗传现象及本质，即研究非DNA序列变化的，可遗传的表达改变的科学。</li><li>所谓表观遗传学，指的是在DNA序列不改变的情况下，基因功能发生的可遗传的变异，最终可导致表型变化，包括DNA甲基化、组蛋白修饰、RNA介导的基因沉默等（P375）</li></ul></li><li><strong>QTL</strong>：数量性状基因座 (quantitative trait locus, QTL) 控制数量性状的基因,是影响数量性状的一个染色体片段。</li></ol><h2 id="问答题">问答题</h2><h3 id="1、一野生型的雄果蝇与一个对白眼基因是纯合的雌果蝇杂交，子代中发现有一只雌果蝇具有白眼表型。你怎样决定这个结果是由于一个点突变引起的，还是由于缺失造成的？">1、一野生型的雄果蝇与一个对白眼基因是纯合的雌果蝇杂交，子代中发现有一只雌果蝇具有白眼表型。你怎样决定这个结果是由于一个点突变引起的，还是由于缺失造成的？</h3><p>让这只雌蝇和正常雄蝇交配，若后代中雄蝇全白眼，雌蝇全红眼，且雌:雄为1:1，是点突变；</p><p>若后代中雄蝇为白眼，雌蝇为红颜，但雌:雄为2:1，则是由于缺失造成。</p><p>红眼白眼是伴X隐性遗传，如果该雌蝇是缺失眼色基因的导致的白眼，那么后代雄蝇就会有一半没有眼色基因于是致死。</p><h3 id="2、从经典遗传学到分子遗传学，基因的概念有什么发展？现在对基因的概念是怎么样的？">2、从经典遗传学到分子遗传学，基因的概念有什么发展？现在对基因的概念是怎么样的？</h3><p>经典遗传学认为基因是一个最小单位，不能分割，既是重组单位，又是功能单位、突变单位，基因直线排列在染色体上，即“三位一体”概念。</p><p>生化和微生物学家先提出了“一个基因一个酶”的假说，后来随着蛋白质多聚体的研究，发展为“一个基因决定一条多肽链”。</p><p>从经典遗传学到分子遗传学的重要发展：只要突变能带来表型效应的遗传功能就被认为是基因，不管该单位是否编码遗传信息到只有编码遗传信息的遗传功能大内才称为基因。</p><p>分子遗传学提出了折叠基因、断裂基因和移动基因的概念，在1955年 Benzer 根据噬菌体突变的互补实验和重组实验结果，提出了基因是一个作用单位——顺反子，基因不再是最小的重组单位，突变单位，最小重组单位是重组子，最小突变单位是突变子，即顺反子内可以分成很多突变子和重组子，分子遗传学已阐明最小重组单位和最小突变的单位是碱基对。</p><h3 id="3、紫外线诱变的作用机制如何？它引起的DNA损伤的修复途径是什么？">3、紫外线诱变的作用机制如何？它引起的DNA损伤的修复途径是什么？</h3><p>紫外线有效波长为260nm，而这个波长正是DNA的吸收峰。当DNA链经紫外线照射后，同一链上的两个邻接核苷酸会形成嘧啶二聚体，嘧啶二聚体会使双螺旋的两链间的键减弱，DNA结构发生局部变形，不能作为DNA复制的样板，新合成的链在二聚体的对面两旁留下缺口。</p><p>修复途径：</p><ol><li>在损伤部位就地修复——光复活；</li><li>取代损伤部位——暗修复或切除修复；</li><li>越过损伤部位而进行修复——重组修复。</li></ol><h3 id="4、母性影响与细胞质遗传有什么不同？">4、母性影响与细胞质遗传有什么不同？</h3><ol><li>母性影响是亲代核基因的某些产物或者某种因子积累在卵细胞的细胞质中，对子代某些性状的表现产生影响的现象。这种效应只能影响子代的性状，不能遗传。因此F1代表型受母亲的基因型控制，属于细胞核遗传体系；细胞质遗传是细胞质中的DNA或基因对遗传性状的决定作用。由于精卵结合时，精子的细胞质往往不进入受精卵中，因此，细胞质遗传性状只能通过母体或卵细胞传递给子代，子代总是表现为母本性状，属于细胞质遗传体系，</li><li>母性影响符合孟德尔遗传规律；细胞质遗传是非孟德尔式遗传。</li><li>母性遗传杂交后代有一定的分离比,只不过是要推迟一个世代而已；细胞质遗传杂交后代一般不出现一定的分离比。</li></ol><h3 id="5、在一牛群中，外貌正常的双亲产生一头矮生的雄犊。这种矮生究竟是由于突变的直接结果，是由于隐性矮生基因的“携带者”的偶尔交配后发生的分离，还是由于非遗传（环境）的影响？你怎么决定？">5、在一牛群中，外貌正常的双亲产生一头矮生的雄犊。这种矮生究竟是由于突变的直接结果，是由于隐性矮生基因的“携带者”的偶尔交配后发生的分离，还是由于非遗传（环境）的影响？你怎么决定？</h3><p>原因：</p><ol><li>外貌正常的双亲都是矮生基因的携带者，两者产生的矮生基因配子结合，成为纯合的矮生基因型。即Aa×A a → 1AA（正常）：2Aa（正常）：1aa（矮生）；</li><li>由显性突变造成，这种突变可以直接传给后代，用这头矮牛与正常牛交配。其后代矮牛与正常牛呈1：1；</li><li>由于营养不良等环境因素造成。这种变异是不可遗传的，改变环境后，性状也会有改变。</li></ol><h3 id="5、生殖隔离的分类和机制。【见课本P432】">5、生殖隔离的分类和机制。【见课本P432】</h3><ol><li><p>受精前的生殖隔离</p><ul><li>季节隔离：两个种的生育季节不重叠，如发情期、交配季节不同。</li><li>心理隔离：指有求偶行为的动物，异性个体间缺乏引诱力，所以不相互交配，所以有些不同种虽然在实验室中可以人工授精产生杂种，但自然界中很少见。</li><li>受精隔离：指体内受精动物在交配受精后，体外受精动物在释放配子后，植物在花粉到达柱头后，在一系列反应中有某种不协调，使雌雄配子无法结合。</li></ul></li><li><p>受精后生殖隔离：</p><ul><li>F1合子形成以后，不能生存或者不能发育到性成熟阶段；</li><li>或使F1杂种不育，或使F2以后各代中带有杂种基因组合的个体不能生产或者不能发育，总之是影响种间杂种后代的个体发育过程。</li><li>杂种不活表现在个体发育阶段，在不同杂种组合中不同。杂种不育或是由于性腺形成不全，或是性腺内生殖细胞没有分化，或是减数分裂失败等等都可使杂种不育。</li></ul></li></ol><h3 id="6、新种是如何形成的">6、新种是如何形成的</h3><ol><li>渐变式新种形成：一般先有地理隔离，各自通过不同的基因突变、染色体畸变或重组，在自然选择下，形成不同亚种，亚种一般在形态上已有一定差异，在进一步分化，有机会重新遇见时，已不能有基因交流，产生生殖隔离，成为不同种。</li><li>爆发式新种形成：主要见于植物，先是一个二倍体经长期分化，经过许多基因突变，染色体畸变，和极长的自然选择，形成新染色体组（我觉得和亚种差不多），然后具有不同染色体的个体相互杂交，子一代染色体加倍，形成异源染色体，再通过自然选择，逐渐适应环境。</li></ol><h3 id="7、用图解说明无籽西瓜制种的原理，无籽西瓜为什么没有种子？是否绝对没有种子？">7、用图解说明无籽西瓜制种的原理，无籽西瓜为什么没有种子？是否绝对没有种子？</h3><p><img src="https://pic.downk.cc/item/5fe980283ffa7d37b3a64c86.png" alt="无籽西瓜"></p><p>无籽西瓜是一个多元单倍体，在减数第一次分裂中期时没有可以配对的同源染色体，从而被随机分向两极，很难形成可育的配子。每一染色体分到一极的机会为1/2，从而所有色体都分到一极的机会是(1/2)<sup>n</sup>（n为每一染色体组的染色体数），产生可育配子的比例是(1/2)<sup>n</sup>，所以无籽西瓜也不是绝对无籽</p><h3 id="8、紫外线诱变的作用机制如何？它引起的DNA损伤的修复途径是什么？（10分）">8、紫外线诱变的作用机制如何？它引起的DNA损伤的修复途径是什么？（10分）</h3><p>紫外线有效波长为260nm，而这个波长正是DA的吸收峰。当DNA链经紫外线照射后，同一链上的两个邻接嘧啶核苷酸会发生共价连接形成嘧啶二聚体，嘧啶二聚体使双螺旋的两链间的键减弱，DNA结构会发生局部变形，因此经紫外线照射形成嘧啶二聚体的链将不能作为DA复制的样板，新合成的链在二聚体的对面两旁留下缺口。</p><p>紫外线引起DNA损伤的修复大致上通过3个途径:</p><ol><li>在损伤部位就地修复一光复活</li><li>取代损伤部位一暗修复或切除修复</li><li>越过损伤部位而进行修复一重组修复。</li></ol><h3 id="9、用现有科学事实，怎样正确理解在遗传中细胞核与细胞质之间的关系">9、用现有科学事实，怎样正确理解在遗传中细胞核与细胞质之间的关系</h3><p>细胞质基因指的是细胞质内控制生物性状的遗传物质。细胞核基因指的是细胞核内控制生物性状的遗传物质。两者的主要区别：一是存在位置不同。质基因存在于细胞质的线粒体、叶绿体等结构上；核基因位于细胞核内染色体上。二是存在方式不同。核基因在染色体上呈直线排列，与蛋白质结合。而含质基因的DNA不与蛋白质结合，而是呈双链环状等形状单独存在。</p><p>两者的主要关系有：</p><ol><li>生物体中绝大部分性状是受核基因控制的，核基因是主要的遗传物质，而有些性状是受细胞质基因控制的。</li><li>细胞核遗传和细胞质遗传各自都有相对的独立性。质基因与核基因一样，可以自我复制、可以转录和翻译控制蛋白质的合成，也就是说都具有稳定性、连续性、变异性和独立性。</li><li>核遗传和质遗传相互影响，生物性状很多情况体现为核质互作。两者相互依存相互制约。</li></ol><h3 id="10、简述电离辐射引起的DNA的损伤及其修复">10、简述电离辐射引起的DNA的损伤及其修复</h3><p>损伤：</p><ol><li>直接作用</li><li>间接作用：通过水的电离所形成的自由基起作用。使DNA链双链或单链断裂，造成缺失、重复、易位和倒位。高剂量照射时，还能破坏碱基。</li></ol><p>修复：以大肠杆菌为例，通常认为大肠杆菌有3种修复过程，需要3种不同的修复酶系</p><ol><li>超快修复：单链断裂的极快修复过程。0℃时，2分钟内即可完成，可能是DNA连接酶的单独作用。</li><li>快修复：需要DNA聚合酶I的修复过程，室温下在缓冲液中迅速进行。超快修复后剩下的单链断裂有90%可被修复。</li><li>慢修复：快修复所不能修复的单链断裂，可由重组修复系统修复。</li></ol><h3 id="11、正反交在F1往往得出不同的结果。这可以由（1）伴性遗传，（2）细胞质遗传，（3）母性影响。如果你得到这样的一种结果，怎样用实验方法来决定是属于那一种范畴？">11、正反交在F1往往得出不同的结果。这可以由（1）伴性遗传，（2）细胞质遗传，（3）母性影响。如果你得到这样的一种结果，怎样用实验方法来决定是属于那一种范畴？</h3><p>如果亲本的不同表型在F1中都有表现,但正交F1表型象母亲，反交F1表型雄性象母亲,雌性象父亲,即F1表型有性别之分，可判断为伴性遗传。如果正反交F1表型只与母亲一样，说明是细胞质遗传或母性影响。如果让F1自交得F2,F2自交得F3,F2、F3只与母本一样，说明是细胞质遗传，如果F3中又出现了孟德尔分离比,即孟德尔分离比推迟一代出现，即可判断为母性影响。</p><h3 id="12、在人类中，苯丙酮尿症突变基因的频率p＝1-100，问堂兄妹婚配时，孩子患这种病的概率是多少？就此病说明近亲婚配的危害。（10分）">12、在人类中，苯丙酮尿症突变基因的频率p＝1/100，问堂兄妹婚配时，孩子患这种病的概率是多少？就此病说明近亲婚配的危害。（10分）</h3><p>近交系数F=1/16</p><p>近亲婚配时的得病概率 P=(1/100)<sup>2</sup>(1-1/16)+(1/100)(1/16)=7×10<sup>-4</sup></p><p>非近亲婚配得病概率  P=(1/100)<sup>2</sup>=1×10<sup>-4</sup></p><p>相差7倍</p><h3 id="13、杂交水稻-“二区三系”制种方法及基本原理">13、杂交水稻 “二区三系”制种方法及基本原理</h3><p>胞质基因和核内基因共同影响可育性状:细胞质，S为不育基因，N为可育基因;胞核，r为不育基因，R为可育基因:只要有N和R中任一个即可育。</p><p>三系：不育系S（r）；保持系N（rr）;恢复系，N（R）或S（RR）。</p><p>隔离区1：不育系和保持系交替种植;保持系自交，收获的种子仍为保持系;不育系靠保持系授粉，后代仍为不育系;从而一个隔离区两个品系繁育制种。</p><p>隔离区2：不育系和恢复系交替种植;恢复系自交，获得的种子仍为恢复系(纯繁);不育系靠恢复系授粉，收获的是可育的杂交种子(商品用杂交种子)。</p><h3 id="14、你怎样区别某一性状是常染色体遗传，还是伴性遗传的？举例说明。">14、你怎样区别某一性状是常染色体遗传，还是伴性遗传的？举例说明。</h3><p>伴性遗传的正反交结果不同，与子代的性别有关。首先看该性状的遗传在后代的雌雄性别中是否不同;然后再根据正反交结果是否一致，如果该性状的遗传在后代的雌雄性别中不同，正反交结果不一致，则该性状的遗传属于伴性遗传，否则属于常染色体遗传。</p><h3 id="15、什么是分子遗传标记？常见的分子遗传标记有哪些？请举例说明其各自的优点和缺点。">15、什么是分子遗传标记？常见的分子遗传标记有哪些？请举例说明其各自的优点和缺点。</h3><p>分子标记，是以个体间遗传物质内核苷酸序列变异为基础的遗传标记，是DNA水平遗传多态性的直接的反映。</p><p><strong>限制性片段长度多态分析技术(RFLP)</strong>：基因组DNA在限制性内切酶作用下，产生大小不等的DNA片段;它所代表的是基因组DNA酶切后产生的片段在长度上的差异，这种差异是由于突变增加或减少了某些内切酶位点造成的。</p><p>优点：</p><ol><li>标记的等位基因间是共显性的，不受杂交方式制约，即与显隐性基因无关;</li><li>检测结果不受环境因素影响;</li><li>标记的非等位基因之间无基因互作效应，即标记之间无干扰。</li></ol><p>缺点：主要是克隆可表现基因组DNA多态性的探针较为困难;另外，实验操作较繁锁，检测周期长，成本费用也很高。</p><p><strong>随机引物扩增多态性DNA技术分析(RAPD)</strong>：建立于PCR基础之上的，利用随机的脱氧核节酸序列作引物，对所研究的基因组DNA体外扩增，扩增产物经电泳分离染色后，来检测其多态性，这些扩增DNA片段多态性便反映了基因组相应区域的DNA多态性。</p><p>优点：</p><ol><li>RAPD扩增引物没有物种的限制;</li><li>RAPD扩增引物没有数量上限制;</li><li>简捷方便，可进行大量样品的筛选。</li></ol><p>缺点: RAPD标记是显性的，无法区分动物纯、杂合体，而且在分析中易产生非特异性。</p><p><strong>DNA指纹分析技术</strong>：以小卫星或微卫星DNA作探针，与多种限制性内切酶酶切片段杂交，所得个体特异性的杂交图谱，即为DNA指纹。</p><p>优点：</p><ol><li>具有高度特异性</li><li>遗传方式简明。遵循孟德尔遗传定律</li><li>具有高效性。</li></ol><p>缺点：由于卫星DNA不是单拷贝，难于跟踪分离群体中个体基因组中同源区域的分离。</p><p><strong>AFLP分析技术</strong>：将PCR与RFLP结合起来。基因组DNA先用限制性内切酶双酶切，再在两端连上特定的人工接头，根据接头和酶切位点的序列设计引物。</p><p>优点：无需了解DNA模板序列，产生的多态性较多。与RAPD比较，它的可重复性得到极大提高。它既有R FL P的可靠性，也具有RA PD的方便性，被认为是迄今为止最有效的分子标记</p><h2 id="名词解释自测">名词解释自测</h2><ol><li>转导：<u>是指以噬菌体为媒介，将细菌的小片段染色体或基因从一个细菌转移到另一个细菌的过程。</u></li><li>转化：<u>是某一基因型的细胞从周围介质中吸收来自另一基因型的细胞的DNA而使它的基因型和表现型发生相应变化的现象。</u></li><li>性导：<u>利用F’因子进行细菌基因的转移叫做性导。</u></li><li>异源多倍体：<u>两个不同的种杂交，它们的杂交再经过染色体加倍，就形成了异源多倍体。</u></li><li>同源多倍体：<u>染色体已经复制，而细胞质不分离（书本）/指增加的染色体组来自同一物种，一般由二倍体的染色体直接加倍产生的（百度）</u></li><li>重复：<u>染色体增加了片段。</u></li><li>缺失：<u>染色体失去了片段。</u></li><li>易位：<u>非同源染色体间互相交换染色体片段，造成染色体间基因的重新排列。</u></li><li>倒位：<u>染色体片段发生180度的颠倒，造成染色体内基因的重新排列。</u></li><li>缺体：<u>是异源多倍体的特征，只有一对同源染色体成员全部丢失（2n-2）的生物个体，又称为零体。一般来源于单体（2n-1）的自交。</u></li><li>三体：<u>比正常的二倍体多了一条染色体的物种。</u></li><li>非整倍体：<u>增减一条或几条染色体，增减后的染色体数目不是整倍数，所以叫作非整倍体。</u></li><li>罗伯逊易位：<u>由着丝粒的融合或断裂引起的易位，使染色体数目减少或增加，是核型进化的一种形式。</u></li><li>错义突变：<u>DNA中碱基对替换，使mRNA的某一密码子改变，由它所编码的氨基酸不同。</u></li><li>无义突变：<u>碱基替换改变了mRNA上的一个密码子，成为3个终止密码子UAG、UAA和UGA中的任意一个时，就出现无义突变。</u></li><li>中性突变：<u>DNA一级结构的变化不影响蛋白质生物活性、不表现明显表型效应的突变称为中性突变。</u></li><li>表现度：<u>具有相同基因型的个体间基因表达的变化程度称为表现度。</u></li><li>外显率：<u>某一基因型个体显示预期表型的比例。</u></li><li>表型模拟：<u>指环境改变引起的表型改变，有时会类似某基因引起的表型变化。</u></li><li>限性遗传：<u>只在某一种性别表现的性状称为限性性状，限性性状的遗传行为称为限性遗传。控制限性性状的基因多数位于常染色体上，也有少部分位于性染色体上。</u></li><li>位置效应：<u>基因在染色体上位置不同对性状表现的作用也可能不同。</u></li><li>剂量补偿：<u>在XY性别决定的生物中，使性连锁基因在两种性别中有相等或近乎相等的有效剂量的遗传效应。</u></li><li>顺反子：<u>即结构基因，是决定一条多肽链合成的功能单位。</u></li><li>遗传漂变：<u>由于群体较小和偶然事件所造成的基因频率的不确定性变化现象被称为遗传漂变。或者说，非随机取样而引起的基因频率的改变称为遗传漂变。</u></li><li>适合度：<u>一般记作W，是指某一基因型跟其他基因型相比时，能够存活并留下子裔的相对能力。</u></li><li>选择系数：<u>一般记作s，s是在选择作用下降低的适合度，即s=1-W，或W=1-s。</u></li><li>遗传平衡定律：<u>一个群体在符合一定条件的情况下，群体中各个体的比例可从一代到另一代维持不变。</u></li><li>遗传多态：<u>同一群体中两种或两种以上变异类型并存的现象。</u></li><li>基因转变：<u>异源双链DNA分子错配的核苷酸对，在修复校正过程中发生的一个基因转变为它的等位基因的现象。</u></li><li>基因重排：<u>将一个基因从远离启动子的地方移到距启动子很近的地方从而启动转录的方式。</u></li><li>母性影响：<u>有时候两种交配的结果并不相同，子代的表型受到母本基因型的影响，与母本的表型一样，这种现象叫做母性影响。</u></li><li>图式形成：<u>胚胎细胞形成不同组织、器官，构成有序空间结构的过程。</u></li><li>细胞决定：<u>指细胞在发生可识别的形态变化之前,就已受到约束而向特定方向分化,这时细胞内部已发生变化,确定了未来的发育命运。</u></li><li>正向遗传学：<u>研究突变表型以确定突变基因的遗传学研究方法。大规模随机诱变，产生发育异常的突变个体，然后再寻找突变的基因。</u></li><li>反向遗传学：<u>通过定点突变某基因，研究其表型来确定该基因的功能的遗传学研究方法。</u></li><li>表观遗传学：<u>是探讨在不发生DNA序列改变的情形下，由DNA甲基化、染色质结构状态等因素改变，使基因功能发生可遗传的变化并最终导致表型变异的遗传现象及本质，即研究非DNA序列变化的，可遗传的表达改变的科学。</u></li><li>QTL：<u>数量性状基因座 (quantitative trait locus, QTL) 控制数量性状的基因,是影响数量性状的一个染色体片段。</u></li></ol>]]></content>
      
      
      <categories>
          
          <category> 生物学 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 遗传学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>现代分子生物学复习整理</title>
      <link href="2020/12/25/%E7%94%9F%E7%89%A9%E5%AD%A6/%E7%8E%B0%E4%BB%A3%E5%88%86%E5%AD%90%E7%94%9F%E7%89%A9%E5%AD%A6%E5%A4%8D%E4%B9%A0%E6%95%B4%E7%90%86_v0.3/"/>
      <url>2020/12/25/%E7%94%9F%E7%89%A9%E5%AD%A6/%E7%8E%B0%E4%BB%A3%E5%88%86%E5%AD%90%E7%94%9F%E7%89%A9%E5%AD%A6%E5%A4%8D%E4%B9%A0%E6%95%B4%E7%90%86_v0.3/</url>
      
        <content type="html"><![CDATA[<blockquote><p>最近一次同步时间:2020年12月28日21点13分<br>如文档内容有误，点击<a href="http://doc.halo123.top:3000/GceDChBvSGawSgvkIYJfGw?both">该链接</a>对文档进行修改，定时会同步到网站上<br>文档采用Markdown格式排版，可以参考<a href="https://halo123.top/2019/05/08/Markdown%E8%AF%AD%E6%B3%95/">该网站</a>进行简单学习，感谢参与整理的同学们</p></blockquote><h2 id="名词解释">名词解释</h2><ol><li><strong><abbr title="碱基对">Base pair</abbr></strong>：是一对被氢键连接起来相互匹配的碱基(即A：T，G：C，A：U相互作用)，是形成DNA、RNA单体以及编码遗传信息的化学结构。</li><li><strong><abbr title="微卫星DNA">Microsatellite DNA</abbr></strong>：重复单位序列最短，只有2~6bp，串联成簇，长度50~100bp，又称为短串联重复序列（Short Tandem Repeat STR)。广泛分布于基因组中。 其中富含A-T碱基对。</li><li><strong><abbr title="复性">Renaturation</abbr></strong>：变性后成为单链的DNA，在适当条件下又能恢复成为双链DNA，这成为DNA复性或退火。</li><li><strong><abbr title="退火">Annealing</abbr></strong>：见上。</li><li><strong><abbr title="分子杂交">Molecular hybridization</abbr></strong>：不同的DNA片段之间，DNA片段与RNA片段之间，如果彼此间的核苷酸排列顺序互补也可以复性，形成新的双螺旋结构。这种按照互补碱基配对而使不完全互补的两条多核苷酸相互结合的过程称为分子杂交。</li><li><strong><abbr title="基因组">Genome</abbr></strong>：一个细胞或病毒所携带的全部遗传信息或整套基因，包括每一条染色体和所有亚细胞器的DNA序列信息。</li><li><strong><abbr title="增色效应">Hyperchromic effect</abbr></strong>：指因高分子结构的改变，而使摩尔吸光系数(molar extinction coefficient) ε 增大的现象，亦称高色效应。</li><li><strong><abbr title="解链温度">Tm(Melting temperature)</abbr></strong>：利用加热使溶液中50%的DNA分子成为单链所需温度称为解链温度。</li><li><strong><abbr title="半保留复制">Semi-conservative replication</abbr></strong>：在DNA复制过程中，每条链分别作为模板合成新链，产生互补的两条链。这样新形成的两个DNA分子与原来DNA分子的碱基顺序完全一样。因此，每个子代分子的一条链来自亲代DNA，另一条链则是新合成的，这种复制方式被称为DNA的半保留复制。</li><li><strong><abbr title="半不连续复制">Semi-discontinuous replication</abbr></strong>：DNA复制过程中前导链的复制是连续的，而另一条链，即滞后链的复制是中断的、不连续的。</li><li><strong><abbr title="C值矛盾">C-value paradox</abbr></strong>：一种生物的单倍体基因组的DNA总量称为C值。生物的C值并不与生物复杂程度（或生物在进化上所处的地位）相关，这一现象称为C值悖论。</li><li><strong><abbr title="遗传中心法则">Genetic central dogma</abbr></strong>：由克里克首次提出的遗传信息传递规律，该法则阐明了DNA复制，RNA转录以及翻译产生蛋白质在生命过程中的核心地位。</li><li><strong><abbr title="Klenow片段">Klenow fragment</abbr></strong>：原核生物DNA-pol经特异的蛋白水解酶形成的大片段，3’—5’核酸外切酶活性和DNA聚合酶活性 Klenow片段是实验室合成DNA，进行分子生物学研究中常用的工具酶。</li><li><strong>split \ <abbr title="断裂基因">interrupted gene</abbr></strong>：是真核生物的结构基因。由若干个编码序列和非编码序列互相间隔开但又连续镶嵌而成，去除非编码序列再连接后，可翻译出由连续氨基酸组成的完整蛋白质，这些基因称为断裂基因。</li><li><strong><abbr title="内含子">Intron</abbr></strong>：是一个基因中非编码DNA片段，它分开相邻的外显子，内含子是阻断基因线性表达的序列。</li><li><strong><abbr title="外显子">Exon</abbr></strong>：是真核生物基因的一部分，它在剪接（Splicing）后仍会被保存下来，并可在蛋白质生物合成过程中被表达为蛋白质。</li><li><strong><abbr title="重叠基因">Overlapping gene</abbr></strong>：具有部分共用核苷酸序列的基因，即同一段DNA携带了两种或两种以上不同蛋白质的编码信息。重叠的序列可以是调控基因，也可以是结构基因。常见于病毒和噬菌体基因组中。</li><li><strong><abbr title="质粒">Plasmid</abbr></strong>：细菌内染色体外的环状DNA分子。</li><li><strong><abbr title="单核苷酸多态性（P470）">SNP(Single nucleotide polymorphism)</abbr></strong>：指分散于基因组中的单个碱基的差异，包括单个碱基的缺失和插入，但更常见的是单个核苷酸的替换。</li><li><strong><abbr title="端粒酶">Telomerase</abbr></strong>：是由RNA和蛋白质组成的一种核糖核蛋白（RNP）复合体，具有逆转录酶活性，能利用自身携带的RNA链作为模板，用dDTP为原料，以逆转录方式催化互补于RNA模板的后随链DNA片段的合成。（或把DNA复制损失的端粒填补起来，把端粒修复延长，使得细胞分裂的次数增加。）</li><li><strong><abbr title="反转录">Reverse transcription</abbr></strong>：以mRNA为模板，在反转录酶的作用下合成cDNA的过程。</li><li><strong><abbr title="互补DNA">cDNA(Complementary DNA)</abbr></strong>：特指在体外经过逆转录后与RNA互补的DNA链。与基因组DNA不同，cDNA没有内含子而只有外显子的序列 。在遗传工程方面广为应用。</li><li><strong><abbr title="转座子">Transposon</abbr></strong>：能够在没有序列相关性的情况下独立插入基因组新位点上的一段DNA序列，是存在于染色体DNA上可自主复制和位移的基本单位。</li><li><strong><abbr title="重组修复">Recombination repairing</abbr></strong>：又被称为“复制后修复”，它发生在复制之后，机体细胞对在复制起始时尚未修复的DNA损伤部位可以先复制再修复，及先跳过该损伤部位，在新合成链中留下一个对应于损伤序列的缺口，该缺口由DNA重组来修复:先从同源DNA母链上将相应核苷酸序列片断一致子链缺口处，然后再用新合成序列补上母链空缺。大肠杆菌的rec基因编码主要的重组修复系统。</li><li><strong><abbr title="无义突变">Nonsense mutation</abbr></strong>：在DNA序列中任何导致编码氨基酸的三联密码子改变为终止密码子（UAG,UGA,UAA）的突变，它在蛋白质合成提前终止，合成无功能或无意义的多肽。</li><li><strong><abbr title="移码突变">Frameshift mutation</abbr></strong>：指一种突变，其结果可导致核苷酸序列与相对应蛋白质的氨基酸序列之间的正常关系发生改变。移码突变是由山区或插入一个核苷酸的“点突变”构成的，突变位点之前的密码子不发生改变，但突变位点以后的所有密码子都发生变化，编码的氨基酸出现错误。</li><li><strong><abbr title="翻译">Translation</abbr></strong>：指将mRNA链上的核苷酸从一个特定的起始位点开始，按每3个核苷酸代表一个氨基酸的原则，依次合成一条多肽链的过程。</li><li><strong><abbr title="遗传密码">Genetic code</abbr></strong>：mRNA上每3个核苷酸翻译成多肽链上的一个氨基酸，这3个核苷酸就称为一个密码子（三联子密码）。</li><li><strong><abbr title="SD 序列">Shine-Dalgarno sequence</abbr></strong>：存在于原核生物起始密码子AUG上游7~12个核苷酸处的一种4~7个核苷酸的保守片段，它与16S-rRNA 3’端反向互补，所以可以将mRNA的AUG起始密码子置于核糖体的适当位置以便起始翻译作用。根据首次识别其功能意义的科学家命名。</li><li><strong><abbr title="开放阅读框">ORF</abbr></strong>：从mRNA链的起始密码子AUG开始到终止密码子为止的连续核苷酸密码所对应的基因序列称为可读框。</li><li><strong><abbr title="氨基酸活化">Amino acid activation</abbr></strong>：</li><li><strong><abbr title="分子伴侣">Molecular chaperon</abbr></strong>：它是细胞中一类能够识别并结合到不完全折叠或装配的蛋白质上以帮助这些多肽正确折叠、转运或防止他们聚集的蛋白质，其本身不参与最终产物的形成。</li><li><strong><abbr title="热激蛋白">Heat shock protein</abbr></strong>：是在从细菌到哺乳动物中广泛存在一类热应激蛋白质。当有机体暴露于高温的时候，就会由热激发合成此种蛋白，来保护有机体自身。许多热休克蛋白具有分子伴侣活性。</li><li><strong><abbr title="信号肽">Signal peptide</abbr></strong>：在起始密码子后有一段编码疏水性氨基酸序列的RNA区域，该氨基酸序列就被称为信号肽序列，它负责把蛋白质导引到细胞还不同膜结构的亚细胞器内。</li><li><strong><abbr title="限制性内切酶">Restriction enzyme</abbr></strong>：是可以识别并附着特定的脱氧核苷酸序列，并对每条链中特定部位的两个脱氧核糖核苷酸之间的磷酸二酯键进行切割的一类酶，简称限制酶。</li><li><strong><abbr title="2-DE,双向凝胶电泳">Two-Dimensional Electrophoresis</abbr></strong>：是一种依赖蛋白质的等电点和分子大小的性质，通过组合等电聚焦电泳和聚丙烯酰胺凝胶电泳，分离大量混合蛋白质组份的技术。</li><li><strong><abbr title="美国国家生物技术信息中心">NCBI</abbr></strong>：</li><li><strong><abbr title="末端快速扩增法">RACE</abbr></strong>：利用PCR技术在已知部分cDNA序列的基础上特异性克隆其5’端或3’端缺失的序列。</li><li><strong><abbr title="基因组DNA文库">Genomic DNA library</abbr></strong>：是某一生物体全部或部分基因的集合。将某个生物的基因组DNA或cDNA片段与适当载体的体外重组后，转化宿主细胞，所得的菌落或噬菌体的集合即为该生物的基因文库。</li><li><strong><abbr title="蛋白质组学">Proteomics</abbr></strong>：只在蛋白质组水平上研究蛋白质的特征，包括蛋白质的表达水平、翻译与修饰、蛋白与蛋白相互作用等，并由此获得关于疾病发生、发展及细胞代谢等过程的整体认识。</li><li><strong><abbr title="重组DNA技术">Recombinant DNA technology</abbr></strong>：又称基因工程。据不同的DNA片段（如某个基因或基因的一部分）按照预先的设计定向连接起来，在特定的受体细胞中与载体同时复制并得到表达，产生影响受体细胞的新的遗传性状的技术。</li><li><strong><abbr title="绿色荧光蛋白">GFP</abbr></strong>：是一个由约238个氨基酸组成的蛋白质，从蓝光到紫外线都能使其激发，发出绿色萤光。</li><li><strong><abbr title="基因芯片">Gene chip</abbr></strong>：是利用原位合成法或将已合成好的一系列寡核苷酸分子以预先设定的排列方式固定在固相支持介质表面，形成高密度寡核苷酸阵列，并于样品杂交。通过检测杂交信号的强度及分布来进行分析。</li><li><strong><abbr title="基因表达">Gene expression</abbr></strong>：基因经过转录、翻译，产生具有特异生物学功能的蛋白质分子或RNA分子的过程。</li><li><strong><abbr title="基因敲除">Gene knock-out</abbr></strong>：针对一个序列已知但功能未知的基因，从DNA水平上设计实验，彻底破坏该基因的功能或消除其表达机制，从而推测该基因的生物学功能。</li><li><strong><abbr title="核定位序列">NLS</abbr></strong>：蛋白质中的一个常见的结构域，通常为一短的氨基酸序列，它能与入核载体相互作用，将蛋白质运进细胞核内。</li><li><strong><abbr title="安慰诱导物">Gratuitous inducer</abbr></strong>：指得是与转录调控中实际诱导物相似的一类高效诱导物，能诱导酶的合成，但又不被所诱导的酶分解。</li><li><strong><abbr title="操纵子">Operon</abbr></strong>：是指原核生物中包括结构基因及其上游的启动基因、操纵基因以及其他转录翻译调控元件组成的DNA片段，是转录的功能单位。</li><li><strong><abbr title="分解代谢阻遏作用">Catabolite repression</abbr></strong>：又称代谢物阻遏作用，是葡萄糖或代谢物或葡萄糖的降解产物对一个基因或操纵子的阻遏作用。</li><li><strong><abbr title="空间特异性">Spatial specificity</abbr></strong>：又称细胞或组织特异性（cell or tissue specificity）是指在个体生长过程中，某种基因产物按不同组织空间顺序出现。</li><li><strong><abbr title="时间特异性">Temporal specificity</abbr></strong>：即按功能需要，某一特定基因的表达严格按特定的时间顺序发生。</li><li><strong><abbr title="基因调控">Gene regulation</abbr></strong>：所有生物的遗传信息，都是以基因的形式储存在细胞内的DNA（或RNA）分子中，随着个体的发育，DNA分子能有序地将其所承载的遗传信息，通过密码子-反密码子系统，转变成蛋白质分子，执行各种生理生化功能。这个从DNA到蛋白质的过程被称为基因表达，对这个过程的调节就称为基因表达的调控。</li><li><strong><abbr title="弱化子">Attenuator</abbr></strong>：是指原核生物操纵子中能显著减弱甚至终止转录作用的一段核苷酸序列，该区域能形成不同的二级结构，利用原核生物转录与翻译的偶联机制对转录进行调节。</li><li><strong><abbr title="转录组">Transcriptome</abbr></strong>：广义上指某一生理条件下，细胞内所有转录产物的集合，包括信使RNA、核糖体RNA、转运RNA及非编码RNA；狭义上指所有mRNA的集合。</li><li><strong><abbr title="转录因子">Transcription factor</abbr></strong>：包括转录激活因子（transcriptional activator）和转录阻遏因子（ transcriptiona repressor）。这类调节蛋白能识别并结合转录起始点的上游序列或远端增强子元件，通过DNA-蛋白质相互作用而调节转录活性，并决定不同基因的时间、空间特异性表达。</li><li><strong><abbr title="管家基因">Housekeeping gene</abbr></strong>：在个体的所有细胞中持续表达的基因。</li><li><strong><abbr title="泛素">Ubiquitin</abbr></strong>：含有高度保守的76个氨基酸的序列，它以羧基基团连接到目标蛋白质的赖氨酸残基的ε位氨基上，其主要作用是起始蛋白质的降解。</li><li><strong><abbr title="基因家族">Gene family</abbr></strong>：真核细胞中许多相关的基因常按功能成套组合。</li><li><strong><abbr title="表观遗传">Epigenetic</abbr></strong>：指在基因的DNA序列没有发生改变的情况下，基因功能发生了可遗传的变化，并最终导致了表型的变化。</li><li><strong><abbr title="原癌基因">Proto-oncogene</abbr></strong>：是指存在于生物正常细胞基因组中的癌基因。正常情况下，存在于基因组中的原癌基因处于低表达或不表达状态，并发挥重要的生理功能。但在某些条件下，如病毒感染、化学致癌物或辐射作用等，原癌基因可被异常激活，转变为癌基因，诱导细胞发生癌变。</li><li><strong><abbr title="肿瘤抑制基因">Tumor suppressor gene</abbr></strong>：俗称抗癌基因，是一类存在于正常细胞内可抑制细胞生长并具有潜在抑癌作用的基因。抑癌基因在控制细胞生长、增殖及分化过程中起着十分重要的负调节作用，它与原癌基因相互制约，维持正负调节信号的相对稳定。当这类基因在发生突变、缺失或失活时可引起细胞恶性转化而导致肿瘤的发生。</li><li><strong><abbr title="人免疫缺损病毒">HIV</abbr></strong>：俗称艾滋病毒（AIDS），是一种能生存于人的血液中并攻击人体免疫系统的病毒，主要攻击人体免疫系统中重要的T4淋巴细胞，大量吞噬、破坏T4淋巴细胞，从而使得整个人体免疫系统遭到破坏，最终因丧失对各种疾病的抵抗能力而死亡。</li><li><strong><abbr title="乙肝病毒">HBV</abbr></strong>：是嗜肝DNA病毒科中哺乳动物病毒属的一员。</li><li><strong><abbr title="人乳头瘤病毒">HPV</abbr></strong>：是一种属于乳多空病毒科的乳头瘤空泡病毒A属，是球形DNA病毒，能引起人体皮肤黏膜的鳞状上皮增殖。</li><li><strong><abbr title="CRISPR/Cas9">CRISPR/Cas9</abbr></strong>：</li><li><strong><abbr title="基因治疗">Gene therapy</abbr></strong>：基因治疗是将具有治疗价值的基因，即“治疗基因”装配于带有在人体细胞中表达所必备元件的载体中，导入人体细胞，通过靶基因的表达来治疗遗传疾病。基因治疗是从根本上治疗遗传病的唯一途径。目前科学界关注的主要问题是基因治疗的有效性、安全性和质量可控性。</li><li><strong><abbr title="表达序列标签">EST</abbr></strong>：从已建好的CDNA库中随机取出一个克隆，从5’末端或3’末端对插入的cDNA片段进行一轮单向自动测序，所获得的约60-500bp的一段cDNA序列。</li><li><strong><abbr title="转录">Transcription</abbr></strong>：是指拷贝出一条与DNA链序列完全相同（除了T→U之外）的RNA单链的过程，是基因表达的核心步骤。</li><li><strong><abbr title="启动子">Promoter</abbr></strong>：是一段位于结构基因5’端上游区的DNA序列，能活化RNA聚合酶，使之与模板DNA准确地相结合并具有转录起始的特异性，对于基因转录起始是所必需，是基因表达调控的上游顺式作用元件之一。</li><li><strong><abbr title="RNA剪接">RNA splicing</abbr></strong>：从mRNA前体分子中切除被称为内含子（intron）的非编码区，并使基因中被称为外显子（exon）的编码区拼接形成成熟mRNA的过程就称为RNA的剪接。</li><li><strong><abbr title="RNA编辑">RNA editing</abbr></strong>：是某些RNA，特别是mRNA的一种加工方式，它导致了DNA所编码的遗传信息的改变，因为经过编辑的mRNA序列发生了不同于模板DNA的变化。</li><li><strong><abbr title="长链非编码RNA">LncRNA</abbr></strong>：是一类长度大于200nt的非编码RNA，其在转录沉默、转录激活、染色体修饰、核内运输等均具有重要的功能。</li><li><strong><abbr title="反式作用因子">Transacting factor</abbr></strong>：是指能够结合在顺式作用元件上调控基因表达的蛋白质或者RNAs。</li><li><strong><abbr title="GT-AG法则">GT-AG law</abbr></strong>：前体RNA中参与内含子剪接的两个特殊位点，即在内含子和外显子交界处有两个相当短的保守序列:5’端为GT, 3’端为 AG,称为GT-AG规律。GT-AG规则主要适用于(或是全部)真核生物基因的剪接位点。</li><li><strong><abbr title="顺式作用元件">Cis-acting element</abbr></strong>：是指启动子和基因的调节序列。主要包括启动子（promoter）增强子（enhancer）沉默子（silencer）等。</li><li><strong><abbr title="增强子">Enhancer</abbr></strong>：能强化转录起始的序列，也称为强化子。它们不是启动子的一部分，但能增强或促进转录的起始。</li><li><strong><abbr title="质粒载体">Plasmid Vector</abbr></strong>：是在天然质粒的基础上为适应实验室操作而进行人工构建的质粒。通常带有一个或一个以上的选择性标记基因（如抗生素抗性基因）和一个人工合成的含有多个限制性内切酶识别位点的多克隆位点序列，并去掉了大部分非必需序列，使分子量尽可能减少，以便于基因工程操作。</li><li><strong><abbr title="引物">Primer</abbr></strong>：是指一段较短的单链RNA或DNA，它能与DNA的一条链配对提供游离的3-OH末端以作为DNA聚合酶合成脱氧核苷酸链的起始点。</li><li><strong><abbr title="转化">Transformation</abbr></strong>：是某一基因型的细胞从周围介质中吸收来自另一基因型的细胞的DNA而使它的基因型和表现型发生相应变化的现象。</li><li><strong><abbr title="聚合酶链式反应">PCR</abbr></strong>：是指两通过模拟体内DNA复制方式在体外选择性地将DNA某个特定区域扩增出来的技术。</li><li><strong><abbr title="基因克隆">Gene cloning</abbr></strong>：在分子生物学上，人们把将外源DNA插入具有复制能力的载体DNA中，转入宿主细胞使之得以永久保存和复制这种过程称为基因克隆。</li><li><strong><abbr title="TATA 区">TATA box</abbr></strong>：在真核生物基因中位于转录起始点上游-25～-30bp处的富含AT的保守区，是RNA聚合酶与启动子的结合位点，也称为Hogness区（Hogness box），类似于原核基因中的Pribnow区。</li><li><strong><abbr title="Pribnow 区">Pribnow box</abbr></strong>：在启动子区有一个由5个核苷酸组成的共同序列，是RNA聚合酶的紧密结合点，称为Pribnow区，这个区的中央大约位于起始点上游10bp处，所以又称为-10区。</li><li><strong><abbr title="RNA干扰">RNAi</abbr></strong>：是利用双链小RNA高效、特异性降解细胞内同源mRNA，从而阻断体内靶基因表达，使细胞出现靶基因缺失的表型。</li><li><strong><abbr title="C值">C value</abbr></strong>：一种生物的单倍体基因组的DNA总量称为C值。</li><li><strong><abbr title="CpG岛（P467）">CpG岛</abbr></strong>：真核生物中，成串出现在DNA上的CpG二核苷酸。5-甲基胞嘧啶主要出现在CpG序列、CpXpG、CCA/TGG和GATC中，在高等生物CpG二核苷酸序列中的C通常是甲基化的，极易自发脱氨，生成胸腺嘧啶，所以CpG二核苷酸序列出现的频率远远低于按核苷酸组成计算出的频率。</li></ol><h2 id="问答题">问答题</h2><h3 id="1、简述真核与原核细胞中翻译起始的主要区别">1、简述真核与原核细胞中翻译起始的主要区别</h3><ol><li><p>翻译起始复合物形成的过程不同</p><ul><li>真核生物：核蛋白体大小亚基分离；起始氨基酰-tRNA的结合； mRNA在小亚基定位结合；核蛋白体大亚基结合。</li><li>原核生物：核蛋白体大小亚基分离； mRNA在小亚基定位结合；起始氨基酰-tRNA的结合；核蛋白体大亚基结合。</li></ul></li><li><p>参与物质不同</p><ul><li>真核生物，核蛋白体是80S （40S＋60S）;</li><li>起始因子种类多；</li><li>起始tRNA的Met不需甲酰化；</li><li>mRNA无SD序列，5’帽子和3’poly A尾结构与mRNA在核蛋白体就位有关；</li><li>需要帽子结合蛋白复合物(eIF-4F)参与;</li></ul></li></ol><h3 id="2、简述遗传密码的特点">2、简述遗传密码的特点</h3><ol><li>密码子的连续性</li><li>密码子的简并性</li><li>密码子的变偶（摆动）性</li><li>密码子的通用性和变异性</li><li>方向性</li></ol><h3 id="3、简述蛋白质合成后修饰方式">3、简述蛋白质合成后修饰方式</h3><ol><li>多肽链折叠为天然三级结构<br>在分子伴侣的作用下形成正确的折叠；在二硫键异构酶的作用下形成正确二硫键；在肽酰脯氨酸顺反异构酶的作用下形成正确肽键异构。</li><li>一级结构修饰<br>去除N端蛋氨酸残基；个别氨基酸的共价修饰，如糖基化，甲基化，磷酸化，羟基化，二硫键形成，亲脂性修饰等。</li><li>高级结构修饰<br>通过非共价键亚基聚合形成四级结构；与辅基结合形成完整的结合蛋白。</li></ol><h3 id="4、PCR-扩增的原理、PCR-扩增常用体系和程序">4、<abbr title="聚合酶链式反应">PCR</abbr> 扩增的原理、<abbr title="聚合酶链式反应">PCR</abbr> 扩增常用体系和程序</h3><h3 id="5、简述乳糖操纵子调节机制">5、简述乳糖操纵子调节机制</h3><ol><li>乳糖操纵子是由调节基因，启动子，操纵基因及Z/Y/A三个结构基因组成。</li><li>阻遏蛋白的负调控：无乳糖时，阻遏蛋白结合操纵基因，妨碍RNA聚合酶结合启动子，抑制结构基因转录。有乳糖时，乳糖（诱导剂）结合阻遏蛋白， 导致其不能封闭操纵基因，结构基因可以转录。</li><li>cAMP-CAP复合物的正调控：无葡萄糖时，cAMP浓度高，形成的cAMP-CAP复合物结合于CAP结合位点，增强启动子转录活性。有葡萄糖时，cAMP浓度低，cAMP-CAP复合物形成受阻，影响转录活性。</li><li>正、负调控机制相辅相成。cAMP-CAP复合物是转录必需的，同时阻遏蛋白进一步控制转录启动。综上，乳糖操纵子最强的表达条件是有乳糖无葡萄糖。</li></ol><h3 id="6、真核生物转录因子中DNA结合结构域类型有哪些？">6、真核生物转录因子中DNA结合结构域类型有哪些？</h3><ol><li>螺旋转角螺旋</li><li>螺旋环螺旋</li><li>亮氨酸拉链</li><li>锌指结构</li></ol><h3 id="7、真核生物转录因子中激活结构域的特征有哪些？">7、真核生物转录因子中激活结构域的特征有哪些？</h3><ol><li>富含酸性氨基酸</li><li>富含谷氨酰胺</li><li>富含脯氨酸</li></ol><h3 id="8、真核生物的基因表达调控水平主要包括哪些？">8、真核生物的基因表达调控水平主要包括哪些？</h3><ol><li>染色体、染色质水平上的调控</li><li>转录调控</li><li>转录后加工调控</li><li>翻译调控</li><li>翻译后加工的调控</li></ol><h3 id="9、一代测序技术和二代测序技术原理和特点">9、一代测序技术和二代测序技术原理和特点</h3><ol><li>一代测序即Sanger测序是基于DNA合成的双脱氧终止技术。<br>其原理是在测序反应中加入待测样本作为模板，加入特异性引物，DNA聚合酶，dNTP及ddNTP，当双脱氧ddNTP取代常规脱氧核苷酸参入到合成后，就阻断了DNA的合成反应，因此将会产生不同长度的DNA片段混合物，通过电泳及自显影技术可直接读出DNA的顺序。<br>特点是测序反应的长度较短，一般不超过1000bp。</li><li>第二代测序技术是指对第一代测序技术的改进技术。<br>主要对测序流程中的样品准备，分子标记，化学反应试剂，及测序的平行化等方面进行了大量改进，包括Roche454焦磷酸测序，基于合成的循环阵列测序及ABI SOLiD基于连接的的测序等。<br>二代测序技术的特点是，大大提高了测序的自动化和平行化，大大降低了测序成本。</li></ol><h3 id="10、试分析分子生物学的发展趋势">10、试分析分子生物学的发展趋势</h3><p>分子生物学是现代生物学的发展方向，分子生物学重点研究的领域包括</p><ol><li>生物大分子的结构和功能的研究；</li><li>真核生物基因及基因表达调控的研究；</li><li>分子神经生物学的研究；</li><li>医学分子生物学的研究；</li><li>植物分子生物学的研究；</li><li>分子进化的研究等。</li></ol><p>分子生物学带动了整个生物科学的全面发展。</p><h3 id="11、简述原核生物DNA复制过程中需要哪些酶和蛋白的参与，各具有何作用">11、简述原核生物DNA复制过程中需要哪些酶和蛋白的参与，各具有何作用</h3><p>以大肠杆菌为例，原核生物DNA复制主要有一下酶和蛋白质参与。</p><ol><li>DNA拓扑异构酶：DNA拓扑异构酶的作用是，将解链过程中产生的正超螺旋消除，有利于解链进行；</li><li>DNA解链酶：DNA解链酶的作用是，断开DNA双螺旋中碱基之间的氢键；</li><li>单链DNA结合蛋白：单链DNA结合蛋白，与单链DNA结合，防止重新形成双链；</li><li>引发酶：引发酶的作用是合成一小段RNA引物，引导DNA聚合；</li><li>DNA聚合酶I/II/III：DNA聚合酶I的作用是既可以合成DNA，又可以水解DNA，确保DNA合成的准确性；DNA聚合酶II的作用是用来修复受损的DNA；DNA聚合酶III是原核生物合成DNA的主要酶；</li><li>DNA连接酶：DNA连接酶的作用是形成3’,5’磷酸二酯键将冈崎片段连接起来。</li></ol><h3 id="12、请写出6种以上RNA及其功能">12、请写出6种以上RNA及其功能</h3><ol><li>rRNA  即核糖体RNA，是蛋白质合成的场所。</li><li>mRNA 即 信使RNA，是蛋白质合成的模板。</li><li>tRNA 即转运RNA,是蛋白质合成过程中运载氨基酸的工具</li><li>hnRNA 即核内不均一RNA，是m RNA的前体。</li><li>microRNA，即微小RNA，是参与转录后基因表达调控的小分子RNA</li><li>lncRNA, 即长链非编码RNA,可与DNA、蛋白质相互作用，可能具有多种生物学功能。</li></ol><h3 id="13、5’端帽子和polyA尾巴各有什么功能">13、5’端帽子和polyA尾巴各有什么功能</h3><ol><li>帽子结构使mRNA免遭核酸酶的破坏，可能是蛋白质合成起始信号的一部分。</li><li>多聚A提高mRNA在细胞基质中的稳定性，也参与蛋白质合成的起始。</li></ol><h3 id="14、简述原核生物两种转录终止的机制">14、简述原核生物两种转录终止的机制</h3><ol><li>RNA聚合酶在DNA模板上停顿下来不再前进，转录产物RNA链从转录复合物上脱落下来即转录终止。</li><li>依据是否需要蛋白质因子的参与，原核生物转录终止分为：依赖ρ 因子的转录终止和不依赖ρ因子的转录终止。当新生成的RNA链因含有富含GC的反向重复序列而形成茎环结构时，RNA聚合酶移动减慢，造成高度延宕，茎环结构末端的一串U序列与DNA稳定性较差，从而使新生成的链释放出来。</li><li>当新生成的RNA链反向重复序列GC含量较少时，且茎环结构末端不含有一串U序列，此时转录的终止需要ρ因子的帮助，ρ因子由6个亚基组成的蛋白质，具有ATP酶和解旋酶的活性，能将RNA-DNA杂交双链解开，使RNA脱离模板，从而终止RNA转录。</li></ol><h3 id="15、简述原核生物与真核生物启动子的主要差别">15、简述原核生物与真核生物启动子的主要差别</h3><ol><li>原核生物：启动子拥有-10区和-35区，是RNA聚合酶的识别和结合位点；</li><li>真核生物：启动子在-25~-35区含有TATA box即核心启动子区，在-70~-80区含有CAAT box，另外还常含有GC区及增强区，需要多种转录调控因子。</li></ol><h2 id="问答题自测">问答题自测</h2><h3 id="1、简述真核与原核细胞中翻译起始的主要区别-2">1、简述真核与原核细胞中翻译起始的主要区别.</h3><ol><li><u>翻译起始复合物形成的过程不同</u><br><u>真核生物：核蛋白体大小亚基分离；起始氨基酰-tRNA的结合； mRNA在小亚基定位结合；核蛋白体大亚基结合。</u><br><u>原核生物：核蛋白体大小亚基分离； mRNA在小亚基定位结合；起始氨基酰-tRNA的结合；核蛋白体大亚基结合。</u></li><li><u>参与物质不同</u><br><u>真核生物，核蛋白体是80S （40S＋60S）;起始因子种类多；起始tRNA的Met不需甲酰化；</u><br><u>mRNA无SD序列，5’帽子和3’poly A尾结构与mRNA在核蛋白体就位有关；需要帽子结合蛋白复合物(eIF-4F)参与;</u></li></ol><h3 id="2、简述遗传密码的特点。">2、简述遗传密码的特点。</h3><ol><li><u>密码子的连续性</u></li><li><u>密码子的简并性</u></li><li><u>密码子的变偶（摆动）性</u></li><li><u>密码子的通用性和变异性</u></li><li><u>方向性</u></li></ol><h3 id="3、简述蛋白质合成后修饰方式。">3、简述蛋白质合成后修饰方式。</h3><ol><li><u>多肽链折叠为天然三级结构</u><br><u>在分子伴侣的作用下形成正确的折叠；在二硫键异构酶的作用下形成正确二硫键；在肽酰脯氨酸顺反异构酶的作用下形成正确肽键异构。</u></li><li><u>一级结构修饰</u><br><u>去除N端蛋氨酸残基；个别氨基酸的共价修饰，如糖基化，甲基化，磷酸化，羟基化，二硫键形成，亲脂性修饰等。</u></li><li><u>高级结构修饰</u><br><u>通过非共价键亚基聚合形成四级结构；与辅基结合形成完整的结合蛋白。</u></li></ol><h3 id="4、PCR-扩增的原理、PCR-扩增常用体系和程序。">4、<abbr title="聚合酶链式反应">PCR</abbr> 扩增的原理、<abbr title="聚合酶链式反应">PCR</abbr> 扩增常用体系和程序。</h3><h3 id="5、简述乳糖操纵子调节机制-2">5、简述乳糖操纵子调节机制</h3><ol><li><u>乳糖操纵子是由调节基因，启动子，操纵基因及Z/Y/A三个结构基因组成。</u></li><li><u>阻遏蛋白的负调控：无乳糖时，阻遏蛋白结合操纵基因，妨碍RNA聚合酶结合启动子，抑制结构基因转录。有乳糖时，乳糖（诱导剂）结合阻遏蛋白， 导致其不能封闭操纵基因，结构基因可以转录。</u></li><li><u>cAMP-CAP复合物的正调控：无葡萄糖时，cAMP浓度高，形成的cAMP-CAP复合物结合于CAP结合位点，增强启动子转录活性。有葡萄糖时，cAMP浓度低，cAMP-CAP复合物形成受阻，影响转录活性。</u></li><li><u>正、负调控机制相辅相成。cAMP-CAP复合物是转录必需的，同时阻遏蛋白进一步控制转录启动。综上，乳糖操纵子最强的表达条件是有乳糖无葡萄糖。</u></li></ol><h3 id="6、真核生物转录因子中DNA结合结构域类型有哪些？-2">6、真核生物转录因子中DNA结合结构域类型有哪些？</h3><ol><li><u>螺旋转角螺旋</u></li><li><u>螺旋环螺旋</u></li><li><u>亮氨酸拉链</u></li><li><u>锌指结构</u></li></ol><h3 id="7、真核生物转录因子中激活结构域的特征有哪些？-2">7、真核生物转录因子中激活结构域的特征有哪些？</h3><ol><li><u>富含酸性氨基酸</u></li><li><u>富含谷氨酰胺</u></li><li><u>富含脯氨酸</u></li></ol><h3 id="8、真核生物的基因表达调控水平主要包括哪些？-2">8、真核生物的基因表达调控水平主要包括哪些？</h3><ol><li><u>染色体、染色质水平上的调控</u></li><li><u>转录调控</u></li><li><u>转录后加工调控</u></li><li><u>翻译调控</u></li><li><u>翻译后加工的调控</u></li></ol><h3 id="9、一代测序技术和二代测序技术原理和特点。">9、一代测序技术和二代测序技术原理和特点。</h3><ol><li><u>一代测序即Sanger测序是基于DNA合成的双脱氧终止技术。</u><br><u>其原理是在测序反应中加入待测样本作为模板，加入特异性引物，DNA聚合酶，dNTP及ddNTP，当双脱氧ddNTP取代常规脱氧核苷酸参入到合成后，就阻断了DNA的合成反应，因此将会产生不同长度的DNA片段混合物，通过电泳及自显影技术可直接读出DNA的顺序。</u><br><u>特点是测序反应的长度较短，一般不超过1000bp。</u></li><li><u>第二代测序技术是指对第一代测序技术的改进技术。</u><br><u>主要对测序流程中的样品准备，分子标记，化学反应试剂，及测序的平行化等方面进行了大量改进，包括Roche454焦磷酸测序，基于合成的循环阵列测序及ABI SOLiD基于连接的的测序等。</u><br><u>二代测序技术的特点是，大大提高了测序的自动化和平行化，大大降低了测序成本。</u></li></ol><h3 id="10、试分析分子生物学的发展趋势。">10、试分析分子生物学的发展趋势。</h3><p><u>分子生物学是现代生物学的发展方向，分子生物学重点研究的领域包括</u></p><ol><li><u>生物大分子的结构和功能的研究；</u></li><li><u>真核生物基因及基因表达调控的研究；</u></li><li><u>分子神经生物学的研究；</u></li><li><u>医学分子生物学的研究；</u></li><li><u>植物分子生物学的研究；</u></li><li><u>分子进化的研究等。</u></li></ol><p><u>分子生物学带动了整个生物科学的全面发展。</u></p><h3 id="11、简述原核生物DNA复制过程中需要哪些酶和蛋白的参与，各具有何作用。">11、简述原核生物DNA复制过程中需要哪些酶和蛋白的参与，各具有何作用。</h3><p><u>以大肠杆菌为例，原核生物DNA复制主要有一下酶和蛋白质参与。</u></p><ol><li><u>DNA拓扑异构酶：DNA拓扑异构酶的作用是，将解链过程中产生的正超螺旋消除，有利于解链进行；</u></li><li><u>DNA解链酶：DNA解链酶的作用是，断开DNA双螺旋中碱基之间的氢键；</u></li><li><u>单链DNA结合蛋白：单链DNA结合蛋白，与单链DNA结合，防止重新形成双链；</u></li><li><u>引发酶：引发酶的作用是合成一小段RNA引物，引导DNA聚合；</u></li><li><u>DNA聚合酶I/II/III：DNA聚合酶I的作用是既可以合成DNA，又可以水解DNA，确保DNA合成的准确性；DNA聚合酶II的作用是用来修复受损的DNA；DNA聚合酶III是原核生物合成DNA的主要酶；</u></li><li><u>DNA连接酶：DNA连接酶的作用是形成3’,5’磷酸二酯键将冈崎片段连接起来。</u></li></ol><h3 id="12、请写出6种以上RNA及其功能-2">12、请写出6种以上RNA及其功能</h3><ol><li><u>rRNA  即核糖体RNA，是蛋白质合成的场所。</u></li><li><u>mRNA 即 信使RNA，是蛋白质合成的模板。</u></li><li><u>tRNA 即转运RNA,是蛋白质合成过程中运载氨基酸的工具</u></li><li><u>hnRNA 即核内不均一RNA，是m RNA的前体。</u></li><li><u>microRNA，即微小RNA，是参与转录后基因表达调控的小分子RNA</u></li><li><u>lncRNA, 即长链非编码RNA ,可与DNA、蛋白质相互作用，可能具有多种生物学功能。</u></li></ol><h3 id="13、5‘端帽子和polyA尾巴各有什么功能。">13、5‘端帽子和polyA尾巴各有什么功能。</h3><ol><li><u>帽子结构使mRNA免遭核酸酶的破坏，可能是蛋白质合成起始信号的一部分。</u></li><li><u>多聚A提高mRNA在细胞基质中的稳定性，也参与蛋白质合成的起始。</u></li></ol><h3 id="14、简述原核生物两种转录终止的机制。">14、简述原核生物两种转录终止的机制。</h3><ol><li><u>RNA聚合酶在DNA模板上停顿下来不再前进，转录产物RNA链从转录复合物上脱落下来即转录终止。</u></li><li><u>依据是否需要蛋白质因子的参与，原核生物转录终止分为：依赖ρ 因子的转录终止和不依赖ρ因子的转录终止。当新生成的RNA链因含有富含GC的反向重复序列而形成茎环结构时，RNA聚合酶移动减慢，造成高度延宕，茎环结构末端的一串U序列与DNA稳定性较差，从而使新生成的链释放出来。</u></li><li><u>当新生成的RNA链反向重复序列GC含量较少时，且茎环结构末端不含有一串U序列，此时转录的终止需要ρ因子的帮助，ρ因子由6个亚基组成的蛋白质，具有ATP酶和解旋酶的活性，能将RNA-DNA杂交双链解开，使RNA脱离模板，从而终止RNA转录。</u></li></ol><h3 id="15、简述原核生物与真核生物启动子的主要差别。">15、简述原核生物与真核生物启动子的主要差别。</h3><ol><li><u>原核生物：启动子拥有-10区和-35区，是RNA聚合酶的识别和结合位点；</u></li><li><u>真核生物：启动子在-25~-35区含有TATA box即核心启动子区，在-70~-80区含有CAAT box，另外还常含有GC区及增强区，需要多种转录调控因子。</u></li></ol><h2 id="宁波大学2020年941分子生物学考研真题">宁波大学2020年941分子生物学考研真题</h2><h3 id="名词解释（50分，每个5分）">名词解释（50分，每个5分）</h3><ol><li>degenerate primer</li><li>chromosome walking</li><li>overlapping gene</li><li><abbr title="绿色荧光蛋白">GFP</abbr></li><li>proteomics</li><li>gene chip</li><li>lncRNA</li><li>operon</li><li>sequence alignment</li><li>semi conservative replication</li></ol><h3 id="问答题-2">问答题</h3><ol><li>简述原核生物DNA复制过程中需要哪些酶和蛋白的参与，各具有何作用？（10分）</li><li>简述基因工程的基本操作步骤及其应用意义。（10分）</li><li>一代测序技术和二代测序技术原理和特点。（10分）</li><li>如何确定提取RNA的质量好坏？（10分）</li><li>引物设计的要求有哪些？（15分）</li><li>目前知名的序列数据库有哪些？如何从数据库中获取一个已知基因的序列？（10分）</li></ol><h3 id="综合体">综合体</h3><ol><li>什么是基因克隆？基因克隆步骤包括哪些？其中一般PCR的体系和程序如何设置？（20分）</li><li>简述TA克隆的原理？怎样挑选阳性重组DNA？（15分）</li></ol><h2 id="宁波大学2019年941分子生物学考研真题">宁波大学2019年941分子生物学考研真题</h2><h3 id="名词解释（40分，每个4分）">名词解释（40分，每个4分）</h3><ol><li><abbr title="基因表达">Gene expression</abbr></li><li><abbr title="RNA剪接">RNA splicing</abbr></li><li>probe</li><li>Genetic engineering</li><li>Repressor protein</li><li><abbr title="微卫星DNA">Microsatellite DNA</abbr></li><li><abbr title="绿色荧光蛋白">GFP</abbr></li><li><abbr title="末端快速扩增法">RACE</abbr></li><li>nested <abbr title="聚合酶链式反应">PCR</abbr></li><li>multi gene family</li></ol><h3 id="问答题（60分，每个10分）">问答题（60分，每个10分）</h3><ol><li>请写出6种以上RNA及其功能。</li><li>5’端帽子和polyA尾巴各有什么功能。</li><li>简述原核生物转录终止的两种主要机制。</li><li>简述原核生物与真核生物启动子的主要差别。</li><li>简述一代测序技术和二代测序技术原理和特点。</li><li>比较基因组、转录组、蛋白质组和代谢组的异同。</li></ol><h3 id="分析题（50分）">分析题（50分）</h3><p>现要求以某一植物或动物组织cDNA为模板扩增A基因，并构建该基因的重组表达质粒pET-28a-A，并在大肠杆菌BL21中进行表达。</p><ol><li><p>写出从组织中抽取RNA的关键步骤，并解释如何判断RNA质量。（20分）</p></li><li><p>根据A基因序列设计原核表达引物。（10分）</p><p>A基因序列如下：</p><p><strong>ATG</strong>TCCGAAGTAATCGAAGAACATCTTCTCAGCGATAATTCTGATGATTCCAGCTCGGAATTGACTTCTAC……… GGACGAACCACGAAGAGACGATAT<strong>TAA</strong></p><p>pET-28a多克隆位点如下：</p><p><img src="https://pic.downk.cc/item/5feafba23ffa7d37b381de4e.png" alt="pET-28a多克隆位点"></p><p>引物设计必须满足：</p><p>①要求在引物两端分别加上<em>Bam</em>HI（GGATCC）和<em>Eco</em>RI（GAATTC）。</p><p>②要求表达的重组蛋白C端带His标签。</p></li><li><p>写出原核表达实验步骤。（20分）</p></li></ol><h2 id="宁波大学2018年941分子生物学考研真题">宁波大学2018年941分子生物学考研真题</h2><h3 id="名词解释（40分，每个4分）-2">名词解释（40分，每个4分）</h3><ol><li><abbr title="RNA剪接">RNA splicing</abbr></li><li>RNA interference</li><li>two-dimensional electrophoresis</li><li><abbr title="美国国家生物技术信息中心">NCBI</abbr></li><li><abbr title="末端快速扩增法">RACE</abbr></li><li>transcription factors</li><li>satellite DNA</li><li>polysome</li><li><abbr title="C值矛盾">C-value paradox</abbr></li><li><abbr title="启动子">Promoter</abbr></li></ol><h3 id="问答题（70分）">问答题（70分）</h3><ol><li>什么是蓝白斑筛选法？长出的白斑一定是转基因的吗？为什么？（10分）</li><li>什么是基因表达？可用哪些技术来检测一个基因是否表达？（10分）</li><li>简述DNA复制的回环模型。（10分）</li><li>试比较真核生物RNA聚合酶II识别的启动子与原核生物RNA聚合酶所识别的启动子的结构特点，各结构单元的功能是什么？（10分）</li><li>简述真核与原核细胞中翻译起始的主要区别。（10分）</li><li>简述原核生物转录终止的两种主要机制。（10分）</li><li>简述如何用Mega软件制作蛋白质进化树？（10分）</li></ol><h3 id="分析题（40分）">分析题（40分）</h3>]]></content>
      
      
      <categories>
          
          <category> 生物学 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 分子生物学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringMVC入门</title>
      <link href="2020/11/03/SpringMVC%E5%85%A5%E9%97%A8/"/>
      <url>2020/11/03/SpringMVC%E5%85%A5%E9%97%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="快速入门">快速入门</h2><p>本小节，我们会使用 <a href="https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-starter-web"><code>spring-boot-starter-web</code></a> 实现 SpringMVC 的自动化配置。然后实现用户的增删改查接口。接口列表如下：</p><table><thead><tr><th style="text-align:left">请求方法</th><th style="text-align:left">URL</th><th style="text-align:left">功能</th></tr></thead><tbody><tr><td style="text-align:left"><code>GET</code></td><td style="text-align:left"><code>/users</code></td><td style="text-align:left">查询用户列表</td></tr><tr><td style="text-align:left"><code>GET</code></td><td style="text-align:left"><code>/users/&#123;id&#125;</code></td><td style="text-align:left">获得指定用户编号的用户</td></tr><tr><td style="text-align:left"><code>POST</code></td><td style="text-align:left"><code>/users</code></td><td style="text-align:left">添加用户</td></tr><tr><td style="text-align:left"><code>PUT</code></td><td style="text-align:left"><code>/users/&#123;id&#125;</code></td><td style="text-align:left">更新指定用户编号的用户</td></tr><tr><td style="text-align:left"><code>DELETE</code></td><td style="text-align:left"><code>/users/&#123;id&#125;</code></td><td style="text-align:left">删除指定用户编号的用户</td></tr></tbody></table><h2 id="有关注解">有关注解</h2><h3 id="Controller">@Controller</h3><p><a href="https://github.com/spring-projects/spring-framework/blob/master/spring-context/src/main/java/org/springframework/stereotype/Controller.java"><code>@Controller</code></a> 注解，添加在类上，表示这是控制器 Controller 对象。属性如下：</p><ul><li><code>name</code> 属性：该 Controller 对象的 Bean 名字。允许空。</li></ul><p><a href="https://github.com/spring-projects/spring-framework/blob/master/spring-web/src/main/java/org/springframework/web/bind/annotation/RestController.java"><code>@RestController</code></a> 注解，添加在类上，是 <code>@Controller</code> 和 <a href="https://github.com/ndimiduk/spring-framework/blob/master/org.springframework.web/src/main/java/org/springframework/web/bind/annotation/ResponseBody.java"><code>@ResponseBody</code></a> 的组合注解，直接使用接口方法的返回结果，经过 JSON/XML 等序列化方式，最终返回。也就是说，无需使用 InternalResourceViewResolver 解析视图，返回 HTML 结果。</p><p>目前主流的架构，都是 <a href="https://blog.csdn.net/fuzhongmin05/article/details/81591072">前后端分离</a> 的架构，后端只需要提供 API 接口，仅仅返回数据。而视图部分的工作，全部交给前端来做。也因此，我们项目中 99.99% 使用 <code>@RestController</code> 注解。</p><h3 id="RequestMapping">@RequestMapping</h3><p><a href="https://github.com/spring-projects/spring-framework/blob/master/spring-web/src/main/java/org/springframework/web/bind/annotation/RequestMapping.java"><code>@RequestMapping</code></a> 注解，添加在类或方法上，标记该类/方法对应接口的配置信息。</p><p><code>@RequestMapping</code> 注解的<strong>常用属性</strong>，如下：</p><ul><li><code>path</code> 属性：接口路径。<code>[]</code> 数组，可以填写多个接口路径。</li><li><code>values</code> 属性：和 <code>path</code> 属性相同，是它的别名。</li><li><code>method</code> 属性：请求方法 <a href="https://github.com/spring-projects/spring-framework/blob/master/spring-web/src/main/java/org/springframework/web/bind/annotation/RequestMethod.java">RequestMethod</a> ，可以填写 <code>GET</code>、<code>POST</code>、<code>POST</code>、<code>DELETE</code> 等等。<code>[]</code> 数组，可以填写多个请求方法。如果为空，表示匹配所有请求方法。</li></ul><p><code>@RequestMapping</code> 注解的<strong>不常用属性</strong>，如下：</p><ul><li><code>name</code> 属性：接口名。一般情况下，我们不填写。</li><li><code>params</code> 属性：请求参数需要包含值的<strong>参数名</strong>。可以填写多个参数名。如果为空，表示匹配所有请你求方法。</li><li><code>headers</code> 属性：和 <code>params</code> 类似，只是从参数名变成<strong>请求头</strong>。</li><li><code>consumes</code> 属性：和 <code>params</code> 类似，只是从参数名变成请求头的<strong>提交内容类型</strong>( <a href="https://juejin.im/post/5cb34fc06fb9a068a75d3555">Content-Type</a> )</li><li><code>produces</code> 属性：和 <code>params</code> 类似，只是从参数名变成请求头的( <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Accept">Accept</a> )<strong>可接受类型</strong>。</li></ul><p>考虑到让开发更加方便，Spring 给每种请求方法提供了对应的注解：</p><ul><li><a href="https://github.com/spring-projects/spring-framework/blob/master/spring-web/src/main/java/org/springframework/web/bind/annotation/GetMapping.java"><code>@GetMapping</code></a> 注解：对应 <code>@GET</code> 请求方法的 <code>@RequestMapping</code> 注解。</li><li><a href="https://github.com/spring-projects/spring-framework/blob/master/spring-web/src/main/java/org/springframework/web/bind/annotation/PostMapping.java"><code>@PostMapping</code></a> 注解：对应 <code>@POST</code> 请求方法的 <code>@RequestMapping</code> 注解。</li><li><a href="https://github.com/spring-projects/spring-framework/blob/master/spring-web/src/main/java/org/springframework/web/bind/annotation/PutMapping.java"><code>@PutMapping</code></a> 注解：对应 <code>@PUT</code> 请求方法的 <code>@RequestMapping</code> 注解。</li><li><a href="https://github.com/spring-projects/spring-framework/blob/master/spring-web/src/main/java/org/springframework/web/bind/annotation/DeleteMapping.java"><code>@DeleteMapping</code></a> 注解：对应 <code>@DELETE</code> 请求方法的 <code>@RequestMapping</code> 注解。</li><li>…</li></ul><h3 id="RequestParam">@RequestParam</h3><p><a href="https://github.com/spring-projects/spring-framework/blob/master/spring-web/src/main/java/org/springframework/web/bind/annotation/RequestParam.java"><code>@RequestParam</code></a> 注解，添加在方法参数上，标记该方法参数对应的请求参数的信息。属性如下：</p><ul><li><code>name</code> 属性：对应的请求参数名。如果为空，则直接使用方法上的参数变量名。</li><li><code>value</code> 属性：和 <code>name</code> 属性相同，是它的别名。</li><li><code>required</code> 属性：参数是否必须传。默认为 <code>true</code> ，表示必传。</li><li><code>defaultValue</code> 属性：参数默认值。</li></ul><p><a href="https://github.com/spring-projects/spring-framework/blob/master/spring-web/src/main/java/org/springframework/web/bind/annotation/PathVariable.java"><code>@PathVariable</code></a> 注解，添加在方法参数上，标记接口路径和方法参数的映射关系。具体的，我们在示例中来看。相比 <code>@RequestParam</code> 注解，少一个 <code>defaultValue</code> 属性。</p><h2 id="引入依赖">引入依赖</h2><p>在 <a href="https://github.com/YunaiV/SpringBoot-Labs/blob/master/lab-23/lab-springmvc-23-01/pom.xml"><code>pom.xml</code></a> 文件中，引入相关依赖。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token operator">&lt;</span><span class="token operator">?</span>xml version<span class="token operator">=</span><span class="token string">"1.0"</span> encoding<span class="token operator">=</span><span class="token string">"UTF-8"</span><span class="token operator">?</span><span class="token operator">></span><span class="token operator">&lt;</span>project xmlns<span class="token operator">=</span><span class="token string">"http://maven.apache.org/POM/4.0.0"</span>         xmlns<span class="token operator">:</span>xsi<span class="token operator">=</span><span class="token string">"http://www.w3.org/2001/XMLSchema-instance"</span>         xsi<span class="token operator">:</span>schemaLocation<span class="token operator">=</span><span class="token string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span><span class="token operator">></span>    <span class="token generics"><span class="token punctuation">&lt;</span>parent<span class="token punctuation">></span></span>        <span class="token generics"><span class="token punctuation">&lt;</span>groupId<span class="token punctuation">></span></span>org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>        <span class="token generics"><span class="token punctuation">&lt;</span>artifactId<span class="token punctuation">></span></span>spring<span class="token operator">-</span>boot<span class="token operator">-</span>starter<span class="token operator">-</span>parent<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>        <span class="token generics"><span class="token punctuation">&lt;</span>version<span class="token punctuation">></span></span><span class="token number">2.1</span><span class="token number">.3</span><span class="token punctuation">.</span>RELEASE<span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">></span>        <span class="token operator">&lt;</span>relativePath<span class="token operator">/</span><span class="token operator">></span> <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> lookup parent from repository <span class="token operator">--</span><span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>parent<span class="token operator">></span>    <span class="token generics"><span class="token punctuation">&lt;</span>modelVersion<span class="token punctuation">></span></span><span class="token number">4.0</span><span class="token number">.0</span><span class="token operator">&lt;</span><span class="token operator">/</span>modelVersion<span class="token operator">></span>    <span class="token generics"><span class="token punctuation">&lt;</span>artifactId<span class="token punctuation">></span></span>lab<span class="token operator">-</span>springmvc<span class="token operator">-</span><span class="token number">23</span><span class="token operator">-</span><span class="token number">01</span><span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>    <span class="token generics"><span class="token punctuation">&lt;</span>dependencies<span class="token punctuation">></span></span>        <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 实现对 <span class="token class-name">Spring</span> MVC 的自动化配置 <span class="token operator">--</span><span class="token operator">></span>        <span class="token generics"><span class="token punctuation">&lt;</span>dependency<span class="token punctuation">></span></span>            <span class="token generics"><span class="token punctuation">&lt;</span>groupId<span class="token punctuation">></span></span>org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>            <span class="token generics"><span class="token punctuation">&lt;</span>artifactId<span class="token punctuation">></span></span>spring<span class="token operator">-</span>boot<span class="token operator">-</span>starter<span class="token operator">-</span>web<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 方便等会写单元测试 <span class="token operator">--</span><span class="token operator">></span>        <span class="token generics"><span class="token punctuation">&lt;</span>dependency<span class="token punctuation">></span></span>            <span class="token generics"><span class="token punctuation">&lt;</span>groupId<span class="token punctuation">></span></span>org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>            <span class="token generics"><span class="token punctuation">&lt;</span>artifactId<span class="token punctuation">></span></span>spring<span class="token operator">-</span>boot<span class="token operator">-</span>starter<span class="token operator">-</span>test<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>            <span class="token generics"><span class="token punctuation">&lt;</span>scope<span class="token punctuation">></span></span>test<span class="token operator">&lt;</span><span class="token operator">/</span>scope<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>dependencies<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>project<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="创建Application">创建Application</h2><p>创建 <a href="https://github.com/YunaiV/SpringBoot-Labs/blob/master/lab-23/lab-springmvc-23-01/src/main/java/cn/iocoder/springboot/lab23/springmvc/Application.java"><code>Application.java</code></a> 类，配置 <code>@SpringBootApplication</code> 注解即可。代码如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@SpringBootApplication</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloApplication</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">SpringApplication</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">HelloApplication</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="创建UserController">创建UserController</h2><p>在controller包路径下，创建 <a href="https://github.com/YunaiV/SpringBoot-Labs/blob/master/lab-23/lab-springmvc-23-01/src/main/java/cn/iocoder/springboot/lab23/springmvc/controller/UserController.java">UserController</a> 类。代码如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@RestController</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/users"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserController</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> <span class="token class-name">UserService</span> userService<span class="token punctuation">;</span>    <span class="token comment">/**     * 查询用户列表     *     * @return 用户列表     */</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">UserVO</span><span class="token punctuation">></span></span> <span class="token function">list</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 查询列表</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">UserVO</span><span class="token punctuation">></span></span> result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        result<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">UserVO</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setUsername</span><span class="token punctuation">(</span><span class="token string">"yudaoyuanma"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        result<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">UserVO</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setUsername</span><span class="token punctuation">(</span><span class="token string">"woshiyutou"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        result<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">UserVO</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setUsername</span><span class="token punctuation">(</span><span class="token string">"chifanshuijiao"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 返回列表</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 获得指定用户编号的用户     *     * @param id 用户编号     * @return 用户     */</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/&#123;id&#125;"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">UserVO</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span> <span class="token class-name">Integer</span> id<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 查询并返回用户</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">UserVO</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setUsername</span><span class="token punctuation">(</span><span class="token string">"username:"</span> <span class="token operator">+</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 获得指定用户编号的用户     *     * @param id 用户编号     * @return 用户     */</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/v2/&#123;id&#125;"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">UserVO</span> <span class="token function">get2</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span> <span class="token class-name">Integer</span> id<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> userService<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 添加用户     *     * @param addDTO 添加用户信息 DTO     * @return 添加成功的用户编号     */</span>    <span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">Integer</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">UserAddDTO</span> addDTO<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 插入用户记录，返回编号</span>        <span class="token class-name">Integer</span> returnId <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token comment">// 返回用户编号</span>        <span class="token keyword">return</span> returnId<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 更新指定用户编号的用户     *     * @param id        用户编号     * @param updateDTO 更新用户信息 DTO     * @return 是否修改成功     */</span>    <span class="token annotation punctuation">@PutMapping</span><span class="token punctuation">(</span><span class="token string">"/&#123;id&#125;"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">Boolean</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span> <span class="token class-name">Integer</span> id<span class="token punctuation">,</span> <span class="token class-name">UserUpdateDTO</span> updateDTO<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 将 id 设置到 updateDTO 中</span>        updateDTO<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 更新用户记录</span>        <span class="token class-name">Boolean</span> success <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token comment">// 返回更新是否成功</span>        <span class="token keyword">return</span> success<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 删除指定用户编号的用户     *     * @param id 用户编号     * @return 是否删除成功     */</span>    <span class="token annotation punctuation">@DeleteMapping</span><span class="token punctuation">(</span><span class="token string">"/&#123;id&#125;"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">Boolean</span> <span class="token function">delete</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span> <span class="token class-name">Integer</span> id<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 删除用户记录</span>        <span class="token class-name">Boolean</span> success <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token comment">// 返回是否更新成功</span>        <span class="token keyword">return</span> success<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Java框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringMVC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Tomcat</title>
      <link href="2020/11/03/JavaEE-01-Tomcat/"/>
      <url>2020/11/03/JavaEE-01-Tomcat/</url>
      
        <content type="html"><![CDATA[<h2 id="Tomcat简介">Tomcat简介</h2><p>如果你学过html，css，你会知道你写的页面只能自己访问，别人不能远程访问你写的页面，Tomcat就是提供能够让别人访问自己写的页面的一个程序。</p><h2 id="安装Tomcat">安装Tomcat</h2><p>Tomcat<a href="http://tomcat.apache.org/">官网</a>下载</p><p>选择下载的版本、合适的镜像以及对于系统的压缩包</p><p><img src="http://img.whl123456.top/image/image-20201105115616266.png" alt="image-20201105115616266"></p><p>解压压缩包，得到以下目录</p><p><img src="http://img.whl123456.top/image/image-20201105115908271.png" alt="image-20201105115908271"></p><pre class="line-numbers language-none"><code class="language-none">Tomcat-9.0 ├── bin               启动关闭的脚本文件 ├── conf              配置文件 ├── lib               依赖的Jar包 ├── logs              日志 ├── temp              临时文件 ├── webapps           网站资源    ├── work              工作目录 ├── BUILDING.txt ├── CONTRIBUTING.md ├── LICENSE ├── NOTICE ├── README.md ├── RELEASE-NOTES └── RUNNING.txt<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="启动和关闭Tomcat">启动和关闭Tomcat</h2><p>打开bin文件夹的startup.bat文件，这时弹出黑窗口且不报错，表示启动成功，访问http://localhost:8080/可以看到Tomcat的欢迎页面。</p><p>关闭黑窗口或者点击bin文件夹下的shutdown.bat文件，</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Tomcat </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot2</title>
      <link href="2020/10/29/Java-01-SpringBoot/"/>
      <url>2020/10/29/Java-01-SpringBoot/</url>
      
        <content type="html"><![CDATA[<h2 id="SpringBoot实现RESTful风格Web应用">SpringBoot实现RESTful风格Web应用</h2><p>REST（REpresentational State Transfer）全称是 Resource Representational State Transfer：通俗来讲就是：资源在网络中以某种表现形式进行状态转移。分解开来：</p><ul><li>Resource：资源，即数据（前面说过网络的核心）。比如 newsfeed，friends等；</li><li>Representational：某种表现形式，比如用JSON，XML，JPEG等；</li><li>State Transfer：状态变化。通过HTTP动词实现。</li></ul><p>URL定位资源，用HTTP动词（GET,POST,DELETE,DETC）描述操作。</p><h3 id="创建类BolgController">创建类BolgController</h3><p>在包controller中创建类BolgController</p><pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">package com.example.restful.controller;import org.springframework.stereotype.Controller;import org.springframework.web.bind.annotation.PathVariable;import org.springframework.web.bind.annotation.RequestMapping;import org.springframework.web.bind.annotation.RequestParam;import org.springframework.web.servlet.ModelAndView;@Controller@RequestMapping(&quot;&#x2F;blog&quot;)public class BolgController &#123;    @RequestMapping(&quot;&#x2F;&#123;id&#125;&quot;)    public ModelAndView show(@PathVariable(&quot;id&quot;) Integer id) &#123;        ModelAndView mav &#x3D; new ModelAndView();        mav.addObject(&quot;id&quot;, id);        mav.setViewName(&quot;bolg&quot;);        return mav;    &#125;    @RequestMapping(&quot;&#x2F;query&quot;)    public ModelAndView query(@RequestParam(value &#x3D; &quot;q&quot;, required &#x3D; false) String q) &#123;        ModelAndView mav &#x3D; new ModelAndView();        mav.addObject(&quot;q&quot;, q);        mav.setViewName(&quot;query&quot;);        return mav;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="创建文件-index-html">创建文件 index.html</h3><p>在 resource/static 目录下创建文件 index.html</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Title<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/blog/21<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>博客<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/blog/query?q=123456><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>搜索<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="创建文件-bolg-html">创建文件 bolg.html</h3><p>在 resource/templates 目录下创建文件 blog.html</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">HTML</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name"><span class="token namespace">xmlns:</span>th</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.thymeleaf.org<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Getting Started: Serving Web Content<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Content-Type<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/html; charset=UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">'</span>博客编号:<span class="token punctuation">'</span> + $&#123;id&#125; + <span class="token punctuation">'</span>!<span class="token punctuation">'</span><span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="创建文件-query-html">创建文件 query.html</h3><p>在 resource/templates 目录下创建文件 query.html</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">HTML</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name"><span class="token namespace">xmlns:</span>th</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.thymeleaf.org<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Getting Started: Serving Web Content<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Content-Type<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/html; charset=UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">'</span>查询,<span class="token punctuation">'</span> + $&#123;q&#125; + <span class="token punctuation">'</span>!<span class="token punctuation">'</span><span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="运行程序">运行程序</h3><p>运行程序后，在浏览器中输入 localhost:8080</p><p>![image-20201029185618289](E:\OneDrive - lanqilu\我的图片库\blogimg\Java-01-SpringBoot\image-20201029185618289.png)</p><p>点击博客或搜索显示如下页面</p><p>![image-20201029191916914](E:\OneDrive - lanqilu\我的图片库\blogimg\Java-01-SpringBoot\image-20201029191916914.png)</p><p>![image-20201029191930191](E:\OneDrive - lanqilu\我的图片库\blogimg\Java-01-SpringBoot\image-20201029191930191.png)</p><h2 id="带-Bootstrap-和-JQuery-的-Web-应用">带 Bootstrap 和 JQuery  的 Web 应用</h2><h3 id="添加依赖">添加依赖</h3><h2 id="接口文档-Swagger-入门">接口文档 Swagger <a href="http://www.iocoder.cn/Spring-Boot/Swagger/">入门</a></h2><p>目前，大多数系统都采用前后端分离。在享受前后端分离的<a href="https://www.zhihu.com/question/28207685">好处</a>的同时，接口联调往往成为团队效率的瓶颈，甚至产生前后端的矛盾。简单归结来说，有几方面的原因：</p><ul><li>问题一，<strong>接口设计滞后。</strong> 后端团队往往不喜欢 API 接口设计先行，提前和前端沟通好接口。而在开发阶段的中后期，在后端提供 API 接口后，而这些接口和前端的预期有一些偏差，很容易就产生抱怨，特别是项目周期比较紧张的情况下。</li><li>问题二，<strong>接口不规范。</strong> 当团队里没有同意明确的接口规范时，又或者代码 Review 做的不是很好的情况下，千奇百怪、各式各样的 API 接口可能就产生了。前端在对接这样的 API 接口，苦不堪言，在一口 mmp 一嘴 fuck xxx 之中，调完接口。</li><li>问题三，<strong>接口文档更新不及时，或者遗忘更新。</strong> 因为后端 API 代码和 API 接口在两个地方，我们无法保证提交 API 代码的同时，及时更新文档。有的时候，我们甚至会遗忘更新 API 接口。随着时间的流逝，API 文档和 API 接口不一致的地方越来越多，前端会对 API 接口的信任度越来越低，然后不知道不觉之中，回到原始时代，直接问后端开发 API 是什么样的。</li></ul><p>对于<strong>问题一</strong>和<strong>问题二</strong>，更多是开发流程上的问题，所以不在本文的范围内。当然话痨的艿艿，还是要给点粗浅的建议，完全拦不住我啊。</p><ul><li><strong>接口设计先行</strong>。设计完成后，后端和前端进行简单沟通，看看是否能够满足诉求。</li><li><strong>统一的接口规范</strong>。一定要制定统一的接口规范文档，即使比较简陋，也能保证团队的 API 接口相对统一一致。😈 即使错，咱也错的一模一样，而不是千奇百怪。当然，接口规范是无法覆盖到所有的场景的，借助于“接口设计先行”，我们可以提前去 Review 每个接口的设计。</li></ul><p>对于<strong>问题三</strong>，就进入了本文的<strong>主角 Swagger</strong> 。通过在 API 接口上，添加相应的 Swagger 提供的注解，自动生成 API 文档。酱紫，API 接口和文档就在一起了，从此过上了幸福快乐的生活。</p><p>Swagger 是一个规范和完整的框架，用于生成、描述、调用和可视化 RESTful 风格的 Web 服务。</p><p>总体目标是使客户端和文件系统作为服务器以同样的速度来更新。文件的方法、参数和模型紧密集成到服务器端的代码，允许 API 来始终保持同步。Swagger 让部署管理和使用功能强大的 API 从未如此简单。</p><h3 id="引入依赖">引入依赖</h3><p>在 <code>pom.xml</code>文件中，引入相关依赖。</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>     <span class="token comment">&lt;!-- 实现对 Spring MVC 的自动化配置 --></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>     <span class="token comment">&lt;!-- 引入 Swagger 依赖 --></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>io.springfox<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>springfox-swagger2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.9.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>     <span class="token comment">&lt;!-- 引入 Swagger UI 依赖，以实现 API 接口的 UI 界面 --></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>io.springfox<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>springfox-swagger-ui<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.9.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="SwaggerConfiguration">SwaggerConfiguration</h3><p>因为 Spring Boot 暂未提供 Swagger 内置的支持，所以我们需要自己定义配置类。</p><p>在 <code>*.apidoc.config</code> 包路径下，创建 SwaggerConfiguration 配置类，用于配置 Swagger 。代码如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token annotation punctuation">@EnableSwagger2</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SwaggerConfiguration</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> <span class="token class-name">Docket</span> <span class="token function">createRestApi</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 创建 Docket 对象</span>        <span class="token comment">// 文档类型，使用 Swagger2</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Docket</span><span class="token punctuation">(</span><span class="token class-name">DocumentationType</span><span class="token punctuation">.</span>SWAGGER_2<span class="token punctuation">)</span>                <span class="token comment">// 设置 API 信息</span>                <span class="token punctuation">.</span><span class="token function">apiInfo</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">apiInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token comment">// 扫描 Controller 包路径，获得 API 接口</span>                <span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token comment">// 注意改成自己的包名</span>                <span class="token punctuation">.</span><span class="token function">apis</span><span class="token punctuation">(</span><span class="token class-name">RequestHandlerSelectors</span><span class="token punctuation">.</span><span class="token function">basePackage</span><span class="token punctuation">(</span><span class="token string">"com.halo.apidoc.controller"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">paths</span><span class="token punctuation">(</span><span class="token class-name">PathSelectors</span><span class="token punctuation">.</span><span class="token function">any</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token comment">// 构建出 Docket 对象</span>                <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 创建 API 信息     */</span>    <span class="token keyword">private</span> <span class="token class-name">ApiInfo</span> <span class="token function">apiInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ApiInfoBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">title</span><span class="token punctuation">(</span><span class="token string">"测试接口文档示例"</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">description</span><span class="token punctuation">(</span><span class="token string">"我是一段描述"</span><span class="token punctuation">)</span>                <span class="token comment">// 版本号</span>                <span class="token punctuation">.</span><span class="token function">version</span><span class="token punctuation">(</span><span class="token string">"1.0.0"</span><span class="token punctuation">)</span>                <span class="token comment">// 联系人</span>                <span class="token punctuation">.</span><span class="token function">contact</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Contact</span><span class="token punctuation">(</span><span class="token string">"泷"</span><span class="token punctuation">,</span> <span class="token string">"http://www.whl123456.top"</span><span class="token punctuation">,</span> <span class="token string">"885240677@qq.com"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在类上，添加 <a href="http://springfox.github.io/springfox/javadoc/2.5.0/index.html?springfox/documentation/swagger2/annotations/EnableSwagger2.html"><code>@EnableSwagger2</code></a> 注解， 标记项目启用 Swagger API 接口文档。</p><h3 id="Application">Application</h3><p>创建 <a href="https://github.com/YunaiV/SpringBoot-Labs/blob/master/lab-24/lab-24-apidoc-swagger/src/main/java/cn/iocoder/springboot/lab24/apidoc/Application.java"><code>Application.java</code></a> 类，配置 <code>@SpringBootApplication</code> 注解即可。代码如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@SpringBootApplication</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Application</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">SpringApplication</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">Application</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>先暂时不启动项目。等我们添加好 Controller</p><h3 id="UserController">UserController</h3><p>在 <code>*.apidoc.controller</code> 包路径下，创建 <a href="https://github.com/YunaiV/SpringBoot-Labs/blob/master/lab-24/lab-24-apidoc-swagger/src/main/java/cn/iocoder/springboot/lab24/apidoc/controller/TestController.java">UserController</a> 类，提供用户 API 接口。代码如下：</p><ul><li>相比我们之前使用 SpringMVC 来说，我们在类和接口上，额外增加了 Swagger 提供的注解。</li><li>从使用习惯上，我比较喜欢先添加 SpringMVC 的注解，再添加 Swagger 的注解。</li><li>因为已经使用了 Swagger 的注解，所以类和方法上的注释，一般可以删除了，除非有特殊诉求。</li><li>其中涉及到的 POJO 类，有 <a href="https://github.com/YunaiV/SpringBoot-Labs/blob/master/lab-24/lab-24-apidoc-swagger/src/main/java/cn/iocoder/springboot/lab24/apidoc/dto/UserAddDTO.java">UserAddDTO</a>、<a href="https://github.com/YunaiV/SpringBoot-Labs/blob/master/lab-24/lab-24-apidoc-swagger/src/main/java/cn/iocoder/springboot/lab24/apidoc/dto/UserUpdateDTO.java">UserUpdateDTO</a>、<a href="https://github.com/YunaiV/SpringBoot-Labs/blob/master/lab-24/lab-24-apidoc-swagger/src/main/java/cn/iocoder/springboot/lab24/apidoc/vo/UserVO.java">UserVO</a> 。</li></ul><p>执行 Application 启动项目。然后浏览器访问 <code>http://127.0.0.1:8080/swagger-ui.html</code> 地址，就可以看到 Swagger 生成的 API 接口文档。如下图所示：</p><p>![Swagger-UI 示例](E:\OneDrive - lanqilu\我的图片库\blogimg\Java-01-SpringBoot\01.png)</p><p>至此，我们已经完成了 Swagger 的快速入门。不过考虑到胖友能够更好的使用，我们来一个一个注解了解。</p>]]></content>
      
      
      <categories>
          
          <category> Java框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Thymeleaf</title>
      <link href="2020/10/29/Thymeleaf/"/>
      <url>2020/10/29/Thymeleaf/</url>
      
        <content type="html"><![CDATA[<h2 id="Thymeleaf-基础知识">Thymeleaf 基础知识</h2><p>Thymeleaf 试一个模板引擎，以便显示由应用程序生成的数据或文本。它适合在Web应用程序中为HTML5提供服务，也可以处理任何XML文件。Thymeleaf具有开箱即用的特点：允许处理XML、HTML、JavaScript、CSS、普通文本等模板，每种模板都称为模板模式。</p><p>Thymeleaf 命名空间的被声明为 <code>th:*</code>属性，代码示例如下所示</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name"><span class="token namespace">xmlns:</span>th</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.thymeleaf.org<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="Thymeleaf的标准表达式">Thymeleaf的标准表达式</h2><p>Thymeleaf 的标准表达式主要包括以下8类</p><h3 id="简单表达式">简单表达式</h3><table><thead><tr><th style="text-align:center">语法</th><th style="text-align:center">名称</th><th style="text-align:center">描述</th><th style="text-align:center">作用</th></tr></thead><tbody><tr><td style="text-align:center"><code>$&#123;…&#125;</code></td><td style="text-align:center">Variable Expressions</td><td style="text-align:center">变量表达式</td><td style="text-align:center">取出上下文变量的值</td></tr><tr><td style="text-align:center"><code>*&#123;…&#125;</code></td><td style="text-align:center">Selection Variable Expressions</td><td style="text-align:center">选择变量表达式</td><td style="text-align:center">取出选择的对象的属性值</td></tr><tr><td style="text-align:center"><code>#&#123;…&#125;</code></td><td style="text-align:center">Message Expressions</td><td style="text-align:center">消息表达式</td><td style="text-align:center">使文字消息国际化，I18N</td></tr><tr><td style="text-align:center"><code>@&#123;…&#125;</code></td><td style="text-align:center">Link URL Expressions</td><td style="text-align:center">链接表达式</td><td style="text-align:center">用于表示各种超链接地址</td></tr><tr><td style="text-align:center"><code>~&#123;…&#125;</code></td><td style="text-align:center">Fragment Expressions</td><td style="text-align:center">片段表达式</td><td style="text-align:center">引用一段公共的代码片段</td></tr></tbody></table><h3 id="字面量">字面量</h3><p>参考资料:《SpringBoot 开发实战》吴胜</p>]]></content>
      
      
      <categories>
          
          <category> JavaEE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Thymeleaf </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java基本程序设计结构</title>
      <link href="2020/10/29/Java-01-%E5%9F%BA%E6%9C%AC%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E7%BB%93%E6%9E%84/"/>
      <url>2020/10/29/Java-01-%E5%9F%BA%E6%9C%AC%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E7%BB%93%E6%9E%84/</url>
      
        <content type="html"><![CDATA[<p>参考资料：</p><ul><li>《Java核心技术 卷Ⅰ》（第11版）</li><li>《Java编程思想》（第4版）</li><li>《OnJava8》</li></ul><hr><h2 id="一个简单的Java程序">一个简单的Java程序</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Hello</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// Java程序的入口方法，程序将从这里开始执行</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">// 向控制台打印一条语句，Java程序严格区分大小写</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Hello Word!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="注释">注释</h2><p>注释是使用自然语言编写的文本，供某一程序的人类读者阅读。Java 编译器会忽略注释。Java 支持三种注释。</p><p>第一种是单行注释，以 <code>//</code> 字符开始，直到行尾结束。</p><pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">&#x2F;&#x2F; 这是注释...<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>第二种是多行注释，以 <code>/*</code> 字符开始，不管有多少行，直到 <code>*/</code> 字符结束，一般用于多行注释。这种注释不能嵌套，即 <code>/* */</code> 中不能再有 <code>/* */</code>。编写多行注释时，程序员经常使用额外的 <code>*</code> 字符，突出注释的内容。</p><pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">&#x2F;* * 这是注释 * blablabla... * 这也是注释 *&#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>第三种注释是第二种的一个特例。如果注释以 <code>/**</code> 开头，会被当成特殊的文档注释。和普通的多行注释一样，文档注释也以 <code>*/</code> 结尾，而且不能嵌套。如果你编写了一个 Java 类，希望让其他程序员使用，可以直接在源码中嵌入关于这个类和其中每个方法的文档。名为 javadoc 的程序会提取这些文档，经过处理后生成这个类的在线文档。文档注释中可以包含 HTML 标签和 javadoc 能理解的其他句法。例如：</p><pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">&#x2F;** * 可以用来自动创建文档的注释 * * @auther lanqilu *&#x2F;public class Hello &#123;    public static void main(String[] args) &#123;        System.out.println(&quot;Hello, world!&quot;);    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这种特殊的多行注释需要写在类和方法的定义处，可以用于自动创建文档。</p><p>类文档标记</p><ul><li><code>@version 版本信息</code></li><li><code>@author 作者信息</code></li></ul><p>方法文档标记</p><ul><li><code>@param 参数名 说明</code></li><li><code>@return 说明</code></li><li><code>@exception 完整类名 说明</code></li><li><code>@deprecated</code></li></ul><p>Java程序对格式没有明确的要求，多几个空格或者回车不影响程序的正确性，但是我们要养成良好的编程习惯，注意遵守Java社区约定的编码格式。</p><h2 id="数据类型">数据类型</h2><p>Java是一种强类型语言。这就意味着必须为每一个变量声明一种类型。</p><p>基本数据类型是CPU可以直接进行运算的类型。Java 支持八种基本数据类型，包括一种布尔类型、一种字符类型、四种整数类型和两种浮点数类型：</p><ul><li>整数类型：byte，short，int，long</li><li>浮点数类型：float，double</li><li>字符类型：char</li><li>布尔类型：boolean</li></ul><p>除了基本数据类型之外，Java 还支持称为引用类型的非基本数据类型：</p><ul><li>类（class）</li><li>接口（interface）</li><li>数组（array）</li></ul><blockquote><p>Java有一个能够表示任意精度的算术包，通常称为“大数”（big number）。虽然称为大数但它并不是一种基本Java类型，而是一个Java对象。</p></blockquote><h2 id="变量与常量">变量与常量</h2>]]></content>
      
      
      <categories>
          
          <category> Java基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java后端学习路线</title>
      <link href="2020/10/25/%E5%90%8E%E7%AB%AF%E8%B7%AF%E7%BA%BF/"/>
      <url>2020/10/25/%E5%90%8E%E7%AB%AF%E8%B7%AF%E7%BA%BF/</url>
      
        <content type="html"><![CDATA[<p>对Java基础学习进行整理</p><hr><h2 id="Java基础">Java基础</h2><h3 id="Java变量">Java变量</h3><h3 id="Java操作符">Java操作符</h3><h3 id="Java控制流程">Java控制流程</h3><h3 id="Java数组">Java数组</h3><h3 id="Java类和对象">Java类和对象</h3><h3 id="Java接口与继承">Java接口与继承</h3><h3 id="Java数字与字符串">Java数字与字符串</h3><h3 id="Java日期">Java日期</h3><h2 id="Java中级">Java中级</h2><h3 id="Java集合">Java集合</h3><h3 id="Java异常处理">Java异常处理</h3><h3 id="Java泛型">Java泛型</h3><h3 id="Java函数式编程">Java函数式编程</h3><h3 id="Java-I-O系统">Java I/O系统</h3><h3 id="Java多线程">Java多线程</h3><h3 id="Java网络编程">Java网络编程</h3><h3 id="Java反射">Java反射</h3><h3 id="Java注解">Java注解</h3><h2 id="Java应用">Java应用</h2><h3 id="Loga4j">Loga4j</h3><h3 id="Junit">Junit</h3><h3 id="Hutool">Hutool</h3><h3 id="jsoup">jsoup</h3><h3 id="Lombok">Lombok</h3><h2 id="JavaWeb基础">JavaWeb基础</h2><h3 id="HTML">HTML</h3><h3 id="CSS">CSS</h3><h3 id="JavaScript">JavaScript</h3><h3 id="HTML-DOM">HTML DOM</h3><h3 id="JSON">JSON</h3><h3 id="Ajax">Ajax</h3><h3 id="Cookie、Session">Cookie、Session</h3><h3 id="JQuery">JQuery</h3><h3 id="Vue-js">Vue.js</h3><h3 id="Node-js">Node.js</h3><h3 id="BootStrap">BootStrap</h3><h3 id="webpack">webpack</h3><h3 id="chartjs">chartjs</h3><h2 id="JavaEE">JavaEE</h2><h3 id="Tomcat">Tomcat</h3><h3 id="XML">XML</h3><h3 id="Servlet">Servlet</h3><h3 id="HTTP协议">HTTP协议</h3><h3 id="Filter过滤器和监听器">Filter过滤器和监听器</h3><h3 id="JSP">JSP</h3><h3 id="MVC">MVC</h3><h3 id="Listener">Listener</h3><h3 id="Thymeleaf">Thymeleaf</h3><h3 id="Freemarker">Freemarker</h3><h3 id="前后端分离">前后端分离</h3><h2 id="工具基础">工具基础</h2><h3 id="Git">Git</h3><h3 id="Maven">Maven</h3><h3 id="Gradle">Gradle</h3><h3 id="Intellij-IDEA">Intellij IDEA</h3><h3 id="Linux">Linux</h3><h3 id="Jenkins">Jenkins</h3><h3 id="设计模式">设计模式</h3><h3 id="Nginx">Nginx</h3><h3 id="WebSocket">WebSocket</h3><h3 id="QRCode">QRCode</h3><h3 id="搜索引擎技术">搜索引擎技术</h3><p>Lucene、Solr、ElasticSearch</p><h3 id="Quartz">Quartz</h3><h3 id="Shiro">Shiro</h3><h2 id="数据库">数据库</h2><h3 id="MySQL">MySQL</h3><h3 id="JDBC">JDBC</h3><h3 id="Redis">Redis</h3><h2 id="框架">框架</h2><h3 id="Spring">Spring</h3><h3 id="SpringMVC">SpringMVC</h3><h3 id="Mybatis">Mybatis</h3><h3 id="Mybatis-Plus">Mybatis-Plus</h3><h3 id="SSM">SSM</h3><h3 id="SpringBoot">SpringBoot</h3><h3 id="Hibernate">Hibernate</h3><h3 id="Struts">Struts</h3><h3 id="MQ消息队列">MQ消息队列</h3><h3 id="RPC通信框架">RPC通信框架</h3><h3 id="Kafka">Kafka</h3><h2 id="架构">架构</h2><h3 id="Spring-Cloud">Spring Cloud</h3><h3 id="dubbo">dubbo</h3><h3 id="Docker">Docker</h3><h3 id="K8S">K8S</h3>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 学习路线 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java函数式编程</title>
      <link href="2020/10/14/Java-05-%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B/"/>
      <url>2020/10/14/Java-05-%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<p>函数式编程语言操纵代码片段就像操作数据一样容易。 虽然 Java 不是函数式语言，但 Java 8 Lambda 表达式和方法引用 (Method References) 允许你以函数式编程。</p><hr><p>在计算机时代早期，内存是稀缺和昂贵的。几乎每个人都用汇编语言编程。人们虽然知道编译器，但编译器生成的代码很低效，比手工编码的汇编程序多很多字节，仅仅想到这一点，人们还是选择汇编语言。</p><p>通常，为了使程序能在有限的内存上运行，在程序运行时，程序员通过修改内存中的代码，使程序可以执行不同的操作，用这种方式来节省代码空间。这种技术被称为<strong>自修改代码</strong> （self-modifying code）。只要程序小到几个人就能够维护所有棘手和难懂的汇编代码，你就能让程序运行起来。</p><p>随着内存和处理器变得更便宜、更快。C 语言出现并被大多数汇编程序员认为更“高级”。人们发现使用 C 可以显著提高生产力。同时，使用 C 创建自修改代码仍然不难。</p><p>随着硬件越来越便宜，程序的规模和复杂性都在增长。这一切只是让程序工作变得困难。我们想方设法使代码更加一致和易懂。使用纯粹的自修改代码造成的结果就是：我们很难确定程序在做什么。它也难以测试：除非你想一点点测试输出，代码转换和修改等等过程？</p><p>然而，使用代码以某种方式操纵其他代码的想法也很有趣，只要能保证它更安全。从代码创建，维护和可靠性的角度来看，这个想法非常吸引人。我们不用从头开始编写大量代码，而是从易于理解、充分测试及可靠的现有小块开始，最后将它们组合在一起以创建新代码。难道这不会让我们更有效率，同时创造更健壮的代码吗？</p><p>这就是<strong>函数式编程</strong>（FP）的意义所在。通过合并现有代码来生成新功能而不是从头开始编写所有内容，我们可以更快地获得更可靠的代码。至少在某些情况下，这套理论似乎很有用。在这一过程中，函数式语言已经产生了优雅的语法，这些语法对于非函数式语言也适用。</p><p>你也可以这样想：</p><p>OO（object oriented，面向对象）是抽象数据，FP（functional programming，函数式编程）是抽象行为。</p><p>纯粹的函数式语言在安全性方面更进一步。它强加了额外的约束，即所有数据必须是不可变的：设置一次，永不改变。将值传递给函数，该函数然后生成新值但从不修改自身外部的任何东西（包括其参数或该函数范围之外的元素）。当强制执行此操作时，你知道任何错误都不是由所谓的副作用引起的，因为该函数仅创建并返回结果，而不是其他任何错误。</p><p>更好的是，“不可变对象和无副作用”范式解决了并发编程中最基本和最棘手的问题之一（当程序的某些部分同时在多个处理器上运行时）。这是可变共享状态的问题，这意味着代码的不同部分（在不同的处理器上运行）可以尝试同时修改同一块内存（谁赢了？没人知道）。如果函数永远不会修改现有值但只生成新值，则不会对内存产生争用，这是纯函数式语言的定义。 因此，经常提出纯函数式语言作为并行编程的解决方案（还有其他可行的解决方案）。</p><p>需要提醒大家的是，函数式语言背后有很多动机，这意味着描述它们可能会有些混淆。它通常取决于各种观点：为“并行编程”，“代码可靠性”和“代码创建和库复用”。 关于函数式编程能高效创建更健壮的代码这一观点仍存在部分争议。虽然已有一些好的范例，但还不足以证明纯函数式语言就是解决编程问题的最佳方法。</p><p>FP 思想值得融入非 FP 语言，如 Python。Java 8 也从中吸收并支持了 FP。我们将在此章探讨。</p><h2 id="新旧对比">新旧对比</h2><p>通常，传递给方法的数据不同，结果不同。如果我们希望方法在调用时行为不同，该怎么做呢？结论是：只要能将代码传递给方法，我们就可以控制它的行为。此前，我们通过在方法中创建包含所需行为的对象，然后将该对象传递给我们想要控制的方法来完成此操作。下面我们用传统形式和 Java 8 的方法引用、Lambda 表达式分别演示。代码示例：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// functional/Strategize.java</span><span class="token keyword">interface</span> <span class="token class-name">Strategy</span> <span class="token punctuation">&#123;</span>  <span class="token class-name">String</span> <span class="token function">approach</span><span class="token punctuation">(</span><span class="token class-name">String</span> msg<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">Soft</span> <span class="token keyword">implements</span> <span class="token class-name">Strategy</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">approach</span><span class="token punctuation">(</span><span class="token class-name">String</span> msg<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> msg<span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"?"</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">Unrelated</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">twice</span><span class="token punctuation">(</span><span class="token class-name">String</span> msg<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> msg <span class="token operator">+</span> <span class="token string">" "</span> <span class="token operator">+</span> msg<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Strategize</span> <span class="token punctuation">&#123;</span>  <span class="token class-name">Strategy</span> strategy<span class="token punctuation">;</span>  <span class="token class-name">String</span> msg<span class="token punctuation">;</span>  <span class="token class-name">Strategize</span><span class="token punctuation">(</span><span class="token class-name">String</span> msg<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    strategy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Soft</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [1]</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>msg <span class="token operator">=</span> msg<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">void</span> <span class="token function">communicate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>strategy<span class="token punctuation">.</span><span class="token function">approach</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">void</span> <span class="token function">changeStrategy</span><span class="token punctuation">(</span><span class="token class-name">Strategy</span> strategy<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>strategy <span class="token operator">=</span> strategy<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">Strategy</span><span class="token punctuation">[</span><span class="token punctuation">]</span> strategies <span class="token operator">=</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">new</span> <span class="token class-name">Strategy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">// [2]</span>        <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">approach</span><span class="token punctuation">(</span><span class="token class-name">String</span> msg<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token keyword">return</span> msg<span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"!"</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>      msg <span class="token operator">-></span> msg<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">// [3]</span>      <span class="token class-name">Unrelated</span><span class="token operator">::</span><span class="token function">twice</span> <span class="token comment">// [4]</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token class-name">Strategize</span> s <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Strategize</span><span class="token punctuation">(</span><span class="token string">"Hello there"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    s<span class="token punctuation">.</span><span class="token function">communicate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name">Strategy</span> newStrategy <span class="token operator">:</span> strategies<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      s<span class="token punctuation">.</span><span class="token function">changeStrategy</span><span class="token punctuation">(</span>newStrategy<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [5]</span>      s<span class="token punctuation">.</span><span class="token function">communicate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [6]</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">/* Outputhello there?HELLO THERE!HelloHello there Hello there*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>TODO ：对于程序的执行顺序有些不清楚。2020年10月14日</p><p><strong>Strategy</strong> 接口提供了单一的 <code>approach()</code> 方法来承载函数式功能。通过创建不同的 <strong>Strategy</strong> 对象，我们可以创建不同的行为。</p><p>我们一般通过创建一个实现<strong>Strategy</strong>接口的类来实现这种行为，正如在<strong>Soft</strong>里所做的。</p><ul><li><strong>[1]</strong> 在 <strong>Strategize</strong> 中，你可以看到 <strong>Soft</strong> 作为默认策略，在构造函数中赋值。</li><li><strong>[2]</strong> 一种较为简洁且更加自然的方法是创建一个<strong>匿名内部类</strong>。即便如此，仍有相当数量的冗余代码。你总需要仔细观察后才会发现：“哦，我明白了，原来这里使用了匿名内部类。”</li><li><strong>[3]</strong> Java 8 的 Lambda 表达式，其参数和函数体被箭头 <code>-&gt;</code> 分隔开。箭头右侧是从 Lambda 返回的表达式。它与单独定义类和采用匿名内部类是等价的，但代码少得多。</li><li><strong>[4]</strong> Java 8 的<strong>方法引用</strong>，它以 <code>::</code> 为特征。 <code>::</code> 的左边是类或对象的名称， <code>::</code> 的右边是方法的名称，但是没有参数列表。</li><li><strong>[5]</strong> 在使用默认的 <strong>Soft</strong> 策略之后，我们逐步遍历数组中的所有 <strong>Strategy</strong>，并通过调用 <code>changeStrategy()</code> 方法将每个 <strong>Strategy</strong> 传入变量 <code>s</code> 中。</li><li><strong>[6]</strong> 现在，每次调用 <code>communicate()</code> 都会产生不同的行为，具体取决于此刻正在使用的策略<strong>代码对象</strong>。我们传递的是行为，而并不仅仅是数据。</li></ul><p>在 Java 8 之前，我们能够通过 <strong>[1]</strong> 和 <strong>[2]</strong> 的方式传递功能。然而，这种语法的读写非常笨拙，并且我们别无选择。方法引用和 Lambda 表达式的出现让我们可以在需要时<strong>传递功能</strong>，而不是仅在必要时才这么做。</p><h2 id="Lambda表达式">Lambda表达式</h2><p>Lambda 表达式是使用<strong>最小可能</strong>语法编写的函数定义：</p><ol><li>Lambda 表达式产生函数，而不是类。 在 JVM（Java Virtual Machine，Java 虚拟机）上，一切都是一个类，因此在幕后执行各种操作使 Lambda 看起来像函数 —— 但作为程序员，你可以高兴地假装它们“只是函数”。</li><li>Lambda 语法尽可能少，这正是为了使 Lambda 易于编写和使用。</li></ol><p>我们在 <strong>Strategize.java</strong> 中看到了一个 Lambda 表达式，但还有其他语法变体：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// functional/LambdaExpressions.java</span><span class="token keyword">interface</span> <span class="token class-name">Description</span> <span class="token punctuation">&#123;</span>  <span class="token class-name">String</span> <span class="token function">brief</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">interface</span> <span class="token class-name">Body</span> <span class="token punctuation">&#123;</span>  <span class="token class-name">String</span> <span class="token function">detailed</span><span class="token punctuation">(</span><span class="token class-name">String</span> head<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">interface</span> <span class="token class-name">Multi</span> <span class="token punctuation">&#123;</span>  <span class="token class-name">String</span> <span class="token function">twoArg</span><span class="token punctuation">(</span><span class="token class-name">String</span> head<span class="token punctuation">,</span> <span class="token class-name">Double</span> d<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LambdaExpressions</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">static</span> <span class="token class-name">Body</span> bod <span class="token operator">=</span> h <span class="token operator">-></span> h <span class="token operator">+</span> <span class="token string">" No Parens!"</span><span class="token punctuation">;</span> <span class="token comment">// [1]</span>  <span class="token keyword">static</span> <span class="token class-name">Body</span> bod2 <span class="token operator">=</span> <span class="token punctuation">(</span>h<span class="token punctuation">)</span> <span class="token operator">-></span> h <span class="token operator">+</span> <span class="token string">" More details"</span><span class="token punctuation">;</span> <span class="token comment">// [2]</span>  <span class="token keyword">static</span> <span class="token class-name">Description</span> desc <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token string">"Short info"</span><span class="token punctuation">;</span> <span class="token comment">// [3]</span>  <span class="token keyword">static</span> <span class="token class-name">Multi</span> mult <span class="token operator">=</span> <span class="token punctuation">(</span>h<span class="token punctuation">,</span> n<span class="token punctuation">)</span> <span class="token operator">-></span> h <span class="token operator">+</span> n<span class="token punctuation">;</span> <span class="token comment">// [4]</span>  <span class="token keyword">static</span> <span class="token class-name">Description</span> moreLines <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token punctuation">&#123;</span> <span class="token comment">// [5]</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"moreLines()"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token string">"from moreLines()"</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>bod<span class="token punctuation">.</span><span class="token function">detailed</span><span class="token punctuation">(</span><span class="token string">"Oh!"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>bod2<span class="token punctuation">.</span><span class="token function">detailed</span><span class="token punctuation">(</span><span class="token string">"Hi!"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>desc<span class="token punctuation">.</span><span class="token function">brief</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>mult<span class="token punctuation">.</span><span class="token function">twoArg</span><span class="token punctuation">(</span><span class="token string">"Pi! "</span><span class="token punctuation">,</span> <span class="token number">3.14159</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>moreLines<span class="token punctuation">.</span><span class="token function">brief</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们从三个接口开始，每个接口都有一个单独的方法（很快就会理解它的重要性）。但是，每个方法都有不同数量的参数，以便演示 Lambda 表达式语法。</p><p>任何 Lambda 表达式的基本语法是：</p><ol><li>参数。</li><li>接着 <code>-&gt;</code>，可视为“产出”。</li><li><code>-&gt;</code> 之后的内容都是方法体。<ul><li><strong>[1]</strong> 当只用一个参数，可以不需要括号 <code>()</code>。 然而，这是一个特例。</li><li><strong>[2]</strong> 正常情况使用括号 <code>()</code> 包裹参数。 为了保持一致性，也可以使用括号 <code>()</code> 包裹单个参数，虽然这种情况并不常见。</li><li><strong>[3]</strong> 如果没有参数，则必须使用括号 <code>()</code> 表示空参数列表。</li><li><strong>[4]</strong> 对于多个参数，将参数列表放在括号 <code>()</code> 中。</li></ul></li></ol><p>到目前为止，所有 Lambda 表达式方法体都是单行。 该表达式的结果自动成为 Lambda 表达式的返回值，在此处使用 <strong>return</strong> 关键字是非法的。 这是 Lambda 表达式简化相应语法的另一种方式。</p><p><strong>[5]</strong> 如果在 Lambda 表达式中确实需要多行，则必须将这些行放在花括号中。 在这种情况下，就需要使用 <strong>return</strong>。</p><p>Lambda 表达式通常比<strong>匿名内部类</strong>产生更易读的代码，因此我们将在本书中尽可能使用它们。</p><h2 id="递归">递归</h2><p>递归函数是一个自我调用的函数。可以编写递归的 Lambda 表达式，但需要注意：递归方法必须是实例变量或静态变量，否则会出现编译时错误。 我们将为每个案例创建一个示例。</p><p>这两个示例都需要一个接受 <strong>int</strong> 型参数并生成 <strong>int</strong> 的接口：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// functional/IntCall.java</span><span class="token keyword">interface</span> <span class="token class-name">IntCall</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">int</span> <span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">int</span> arg<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>整数 n 的阶乘将所有小于或等于 n 的正整数相乘。 阶乘函数是一个常见的递归示例：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// functional/RecursiveFactorial.java</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RecursiveFactorial</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">static</span> <span class="token class-name">IntCall</span> fact<span class="token punctuation">;</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    fact <span class="token operator">=</span> n <span class="token operator">-></span> n <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">?</span> <span class="token number">1</span> <span class="token operator">:</span> n <span class="token operator">*</span> fact<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>      <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>fact<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">/* Output 1126241207205040403203628803628800 */</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里，<code>fact</code> 是一个静态变量。 注意使用三元 <strong>if-else</strong>。 递归函数将一直调用自己，直到 <code>i == 0</code>。所有递归函数都有“停止条件”，否则将无限递归并产生异常。</p><p>我们可以将 <code>Fibonacci</code> 序列用递归的 Lambda 表达式来实现，这次使用实例变量：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// functional/RecursiveFibonacci.java</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RecursiveFibonacci</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">IntCall</span> fib<span class="token punctuation">;</span>    <span class="token class-name">RecursiveFibonacci</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        fib <span class="token operator">=</span> n <span class="token operator">-></span> n <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">?</span> <span class="token number">0</span> <span class="token operator">:</span>                n <span class="token operator">==</span> <span class="token number">1</span> <span class="token operator">?</span> <span class="token number">1</span> <span class="token operator">:</span>                        fib<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> fib<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">int</span> <span class="token function">fibonacci</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> fib<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">RecursiveFibonacci</span> rf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RecursiveFibonacci</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>rf<span class="token punctuation">.</span><span class="token function">fibonacci</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">/* Output 11235813213455 */</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>将 <code>Fibonacci</code> 序列中的最后两个元素求和来产生下一个元素。</p><h2 id="方法引用">方法引用</h2><p>Java 8 方法引用没有历史包袱。方法引用组成：类名或对象名，后面跟 <code>::</code> ，然后跟方法名称。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// functional/MethodReferences.java</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span><span class="token keyword">interface</span> <span class="token class-name">Callable</span> <span class="token punctuation">&#123;</span> <span class="token comment">// [1]</span>  <span class="token keyword">void</span> <span class="token function">call</span><span class="token punctuation">(</span><span class="token class-name">String</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">Describe</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">void</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token class-name">String</span> msg<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">// [2]</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MethodReferences</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">hello</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">// [3]</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Hello, "</span> <span class="token operator">+</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Description</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">String</span> about<span class="token punctuation">;</span>    <span class="token class-name">Description</span><span class="token punctuation">(</span><span class="token class-name">String</span> desc<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> about <span class="token operator">=</span> desc<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>    <span class="token keyword">void</span> <span class="token function">help</span><span class="token punctuation">(</span><span class="token class-name">String</span> msg<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">// [4]</span>      <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>about <span class="token operator">+</span> <span class="token string">" "</span> <span class="token operator">+</span> msg<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Helper</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">assist</span><span class="token punctuation">(</span><span class="token class-name">String</span> msg<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">// [5]</span>      <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">Describe</span> d <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Describe</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Callable</span> c <span class="token operator">=</span> d<span class="token operator">::</span><span class="token function">show</span><span class="token punctuation">;</span> <span class="token comment">// [6]</span>    c<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token string">"call()"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [7]</span>    c <span class="token operator">=</span> <span class="token class-name">MethodReferences</span><span class="token operator">::</span><span class="token function">hello</span><span class="token punctuation">;</span> <span class="token comment">// [8]</span>    c<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token string">"Bob"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    c <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Description</span><span class="token punctuation">(</span><span class="token string">"valuable"</span><span class="token punctuation">)</span><span class="token operator">::</span><span class="token function">help</span><span class="token punctuation">;</span> <span class="token comment">// [9]</span>    c<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token string">"information"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    c <span class="token operator">=</span> <span class="token class-name">Helper</span><span class="token operator">::</span><span class="token function">assist</span><span class="token punctuation">;</span> <span class="token comment">// [10]</span>    c<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token string">"Help!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>[1]</strong> 我们从单一方法接口开始（同样，你很快就会了解到这一点的重要性）。</p><p><strong>[2]</strong> <code>show()</code> 的签名（参数类型和返回类型）符合 <strong>Callable</strong> 的 <code>call()</code> 的签名。</p><p><strong>[3]</strong> <code>hello()</code> 也符合 <code>call()</code> 的签名。</p><p><strong>[4]</strong> <code>help()</code> 也符合，它是静态内部类中的非静态方法。</p><p><strong>[5]</strong> <code>assist()</code> 是静态内部类中的静态方法。</p><p><strong>[6]</strong> 我们将 <strong>Describe</strong> 对象的方法引用赋值给 <strong>Callable</strong> ，它没有 <code>show()</code> 方法，而是 <code>call()</code> 方法。 但是，Java 似乎接受用这个看似奇怪的赋值，因为方法引用符合 <strong>Callable</strong> 的 <code>call()</code> 方法的签名。</p><p><strong>[7]</strong> 我们现在可以通过调用 <code>call()</code> 来调用 <code>show()</code>，因为 Java 将 <code>call()</code> 映射到 <code>show()</code>。</p><p><strong>[8]</strong> 这是一个<strong>静态</strong>方法引用。</p><p><strong>[9]</strong> 这是 <strong>[6]</strong> 的另一个版本：对已实例化对象的方法的引用，有时称为<em>绑定方法引用</em>。</p><p><strong>[10]</strong> 最后，获取静态内部类中静态方法的引用与 <strong>[8]</strong> 中通过外部类引用相似。</p><p>上例只是简短的介绍，我们很快就能看到方法引用的所有不同形式。</p><p>TODO ：此章较难之后继续研究。2020年10月16日</p>]]></content>
      
      
      <categories>
          
          <category> 函数式编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 函数式编程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java集合</title>
      <link href="2020/10/12/Java-01-%E9%9B%86%E5%90%88-Achieve/"/>
      <url>2020/10/12/Java-01-%E9%9B%86%E5%90%88-Achieve/</url>
      
        <content type="html"><![CDATA[<p>了解有关Java集合类库的基本知识，以及对典型用法的重点介绍</p><p>参考资料:《OnJava8》</p><hr><blockquote><p>如果一个程序只包含固定数量的且其生命期都是已知的对象，那么这是一个非常简单程序。</p></blockquote><p>通常，程序总是根据运行时才知道的某些条件去创建新对象。在此之前，不会知道所需对象的数量，甚至不知道确切的类型。为解决这个普遍的编程问题，需要在任意时刻和任意位创建任意数量的对象。所以，就不能依靠创建命名的引用来持有每一个对象：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">MyType</span> aReference<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>因为你不知道实际上会需要多少这样的引用。</p><p>大多数语言都提供某种方法来解决这个基本问题。Java有多种方式进行对象的引用。例如前面曾经学习过的数组，它是编译器支持的类型。数组是保存一组对象的最有效的方式，如果你想保存一组基本类型数据，也推荐使用这种方式。但是数组具有固定的尺寸而在更一般的情况中，你在写程序时并不知道将需要多少个对象，或者是否需要更复杂的方式来存储对象，因此数组尺寸固定这一限制显得过于受限了。</p><p>Java 实用类库还提供了一套相当完整的容器类来解决这个问题，其中基本的类型是<strong>List</strong>、<strong>Set</strong>、 <strong>Queue</strong>和<strong>Map</strong>。这些对象类型也称为集合类，集合提供了完善的方法来保存对象，你可以使用这些工具来解决数量惊人的问题。</p><p>集合还有其他一些特性。例如，<strong>Set</strong>对于每个值都只保存一个对象，<strong>Map</strong>是允许你将某些对象与其他一些对象关联起来的关联数组，Java 集合类都可以自动地调整自己的尺寸。因此，与数组不同，在编程时，你可以将任意数量的对象放置到集合中，并且不需要担心集合应该设置为多大。</p><p>即使在Java中没有直接的关键字支持，集合类仍旧是可以显著增强你的编程能力的基本工具。</p><h2 id="泛型和类型安全的集合">泛型和类型安全的集合</h2><p>使用 Java 5之前的集合的一个主要问题就是编译器允许你向集合中插入不正确的类型。例如，考虑一个 Apple对象的集合，我们使用最基本最可靠的集合 <strong>ArrayList</strong>。现在，你可以把<strong>ArrayList</strong>当作“可以自动扩充自身尺寸的数组”来看待。使用 <strong>ArrayList</strong>相当简单：创建一个实例，用<code>add()</code>插入对象；然后用<code>get()</code>访问这些对象，此时需要使用索引，就像数组一样，但是不需要方括号。 <strong>ArrayList</strong>还有一个 <code>size()</code>方法，使你可以知道已经有多少元素添加了进来，从而不会不小心因索引越界而引发错误。</p><p>在本例中， <strong>Apple</strong>和 <strong>Orange</strong>都放置在了集合中，然后将它们取出。正常情况下，Java编译器会报告警告信息，因为这个示例没有使用泛型。在这里，我们使用特定的注解来抑制了警告信息。注解以“@”符号开头，可以接受参数，这里的<code>@SuppressWarnings</code>注解及其参数表示只抑制“unchecked（不受检查的异常）”类型的警告信息：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// collections/ApplesAndOrangesWithoutGenerics.java</span><span class="token comment">// Simple collection use (suppressing compiler warnings)</span><span class="token comment">// &#123;ThrowsException&#125;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Apple</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">long</span> counter<span class="token punctuation">;</span>  <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">long</span> id <span class="token operator">=</span> counter<span class="token operator">++</span><span class="token punctuation">;</span>  <span class="token keyword">public</span> <span class="token keyword">long</span> <span class="token function">id</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> id<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">Orange</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ApplesAndOrangesWithoutGenerics</span> <span class="token punctuation">&#123;</span>  <span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token string">"unchecked"</span><span class="token punctuation">)</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">ArrayList</span> apples <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>      apples<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Apple</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// No problem adding an Orange to apples:</span>    apples<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Orange</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name">Object</span> apple <span class="token operator">:</span> apples<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">Apple</span><span class="token punctuation">)</span> apple<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">id</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// Orange is detected only at run time</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">/* Output:___[ Error Output ]___Exception in thread "main"java.lang.ClassCastException: Orange cannot be cast toApple        at ApplesAndOrangesWithoutGenerics.main(ApplesAndOrangesWithoutGenerics.java:23)*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>Apple</strong> 和 <strong>Orange</strong> 是截然不同的，它们除了都是 <strong>Object</strong> 之外没有任何共同点（如果一个类没有显式地声明继承自哪个类，那么它就自动继承自 <strong>Object</strong>）。因为 <strong>ArrayList</strong> 保存的是 <strong>Object</strong> ，所以不仅可以通过 <strong>ArrayList</strong> 的 <code>add()</code> 方法将 <strong>Apple</strong> 对象放入这个集合，而且可以放入 <strong>Orange</strong> 对象，这无论在编译期还是运行时都不会有问题。当使用 <strong>ArrayList</strong> 的 <code>get()</code> 方法来取出你认为是 <strong>Apple</strong> 的对象时，得到的只是 <strong>Object</strong> 引用，必须将其转型为 <strong>Apple</strong>。然后需要将整个表达式用括号括起来，以便在调用 <strong>Apple</strong> 的 <code>id()</code> 方法之前，强制执行转型。否则，将会产生语法错误。</p><p>在运行时，当尝试将 <strong>Orange</strong> 对象转为 <strong>Apple</strong> 时，会出现输出中显示的错误。</p><p>Java 泛型来创建类可能很复杂。但是，使用预先定义的泛型类却相当简单。例如，要定义一个用于保存 <strong>Apple</strong> 对象的 <strong>ArrayList</strong> ，只需要使用 <strong>ArrayList&lt;Apple&gt;</strong> 来代替 <strong>ArrayList</strong> 。尖括号括起来的是<em>类型参数</em>（可能会有多个），它指定了这个集合实例可以保存的类型。</p><p>通过使用泛型，就可以在编译期防止将错误类型的对象放置到集合中。下面还是这个示例，但是使用了泛型：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// collections/ApplesAndOrangesWithGenerics.java</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ApplesAndOrangesWithGenerics</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Apple</span><span class="token punctuation">></span></span> apples <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>      apples<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Apple</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// Compile-time error:</span>    <span class="token comment">// apples.add(new Orange());</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name">Apple</span> apple <span class="token operator">:</span> apples<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>apple<span class="token punctuation">.</span><span class="token function">id</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">/* Output:012*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在 <strong>apples</strong> 定义的右侧，可以看到 <code>new ArrayList&lt;&gt;()</code> 。这有时被称为“菱形语法”（diamond syntax）。在 Java 7 之前，必须要在两端都进行类型声明，如下所示：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Apple</span><span class="token punctuation">></span></span> apples <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Apple</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>随着类型变得越来越复杂，这种重复产生的代码非常混乱且难以阅读。程序员发现所有类型信息都可以从左侧获得，因此，编译器没有理由强迫右侧再重复这些。虽然<em>类型推断</em>（type inference）只是个很小的请求，Java 语言团队仍然欣然接受并进行了改进。</p><p>有了 <strong>ArrayList</strong> 声明中的类型指定，编译器会阻止将 <strong>Orange</strong> 放入 <strong>apples</strong> ，因此，这会成为一个编译期错误而不是运行时错误。</p><p>使用泛型，从 <strong>List</strong> 中获取元素不需要强制类型转换。因为 <strong>List</strong> 知道它持有什么类型，因此当调用 <code>get()</code> 时，它会替你执行转型。因此，使用泛型，你不仅知道编译器将检查放入集合的对象类型，而且在使用集合中的对象时也可以获得更清晰的语法。</p><p>当指定了某个类型为泛型参数时，并不仅限于只能将确切类型的对象放入集合中。向上转型也可以像作用于其他类型一样作用于泛型：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// collections/GenericsAndUpcasting.java</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">GrannySmith</span> <span class="token keyword">extends</span> <span class="token class-name">Apple</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">Gala</span> <span class="token keyword">extends</span> <span class="token class-name">Apple</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">Fuji</span> <span class="token keyword">extends</span> <span class="token class-name">Apple</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">Braeburn</span> <span class="token keyword">extends</span> <span class="token class-name">Apple</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GenericsAndUpcasting</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Apple</span><span class="token punctuation">></span></span> apples <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    apples<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">GrannySmith</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    apples<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Gala</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    apples<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Fuji</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    apples<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Braeburn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name">Apple</span> apple <span class="token operator">:</span> apples<span class="token punctuation">)</span>      <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>apple<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">/* Output:GrannySmith@15db9742Gala@6d06d69cFuji@7852e922Braeburn@4e25154f*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>因此，可以将 <strong>Apple</strong> 的子类型添加到被指定为保存 <strong>Apple</strong> 对象的集合中。</p><p>程序的输出是从 <strong>Object</strong> 默认的 <code>toString()</code> 方法产生的，该方法打印类名，后边跟着对象的散列码的无符号十六进制表示（这个散列码是通过 <code>hashCode()</code> 方法产生的）。</p><h2 id="基本概念">基本概念</h2><p>Java集合类库采用“持有对象”（holding objects）的思想，并将其分为两个不同的概念，表示为类库的基本接口：</p><ol><li><strong>集合（Collection）</strong> ：一个独立元素的序列，这些元素都服从一条或多条规则。<strong>List</strong> 必须以插入的顺序保存元素， <strong>Set</strong> 不能包含重复元素， <strong>Queue</strong> 按照<em>排队规则</em>来确定对象产生的顺序（通常与它们被插入的顺序相同）。</li><li><strong>映射（Map）</strong> ： 一组成对的“键值对”对象，允许使用键来查找值。 <strong>ArrayList</strong> 使用数字来查找对象，因此在某种意义上讲，它是将数字和对象关联在一起。 <strong>map</strong> 允许我们使用一个对象来查找另一个对象，它也被称作<em>关联数组</em>（associative array），因为它将对象和其它对象关联在一起；或者称作<em>字典</em>（dictionary），因为可以使用一个键对象来查找值对象，就像在字典中使用单词查找定义一样。 <strong>Map</strong> 是强大的编程工具。</li></ol><p>尽管并非总是可行，但在理想情况下，你编写的大部分代码都在与这些接口打交道，并且唯一需要指定所使用的精确类型的地方就是在创建的时候。因此，可以像下面这样创建一个 <strong>List</strong> ：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Apple</span><span class="token punctuation">></span></span> apples <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>请注意， <strong>ArrayList</strong> 已经被向上转型为了 <strong>List</strong> ，这与之前示例中的处理方式正好相反。使用接口的目的是，如果想要改变具体实现，只需在创建时修改它就行了，就像下面这样：</p><p>TODO ： 暂不理解“使用接口的目的是，如果想要改变具体实现，只需在创建时修改它就行了”这句话的意义。2020年10月12日</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Apple</span><span class="token punctuation">></span></span> apples <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>因此，应该创建一个具体类的对象，将其向上转型为对应的接口，然后在其余代码中都是用这个接口。</p><p>这种方式并非总是有效的，因为某些具体类有额外的功能。例如， <strong>LinkedList</strong> 具有 <strong>List</strong> 接口中未包含的额外方法，而 <strong>TreeMap</strong> 也具有在 <strong>Map</strong> 接口中未包含的方法。如果需要使用这些方法，就不能将它们向上转型为更通用的接口。</p><p><strong>Collection</strong> 接口概括了序列的概念——一种存放一组对象的方式。下面是个简单的示例，用 <strong>Integer</strong> 对象填充了一个 <strong>Collection</strong> （这里用 <strong>ArrayList</strong> 表示），然后打印集合中的每个元素：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// collections/SimpleCollection.java</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SimpleCollection</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> c <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>      c<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Autoboxing</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> i <span class="token operator">:</span> c<span class="token punctuation">)</span>      <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token string">", "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">/* Output:0, 1, 2, 3, 4, 5, 6, 7, 8, 9,*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这个例子仅使用了 <strong>Collection</strong> 中的方法（即 <code>add()</code> ），所以使用任何继承自 <strong>Collection</strong> 的类的对象都可以正常工作。但是 <strong>ArrayList</strong> 是最基本的序列类型。</p><p><code>add()</code> 方法的名称就表明它是在 <strong>Collection</strong> 中添加一个新元素。但是，文档中非常详细地叙述到 <code>add()</code> “要确保这个 <strong>Collection</strong> 包含指定的元素。”这是因为考虑到了 <strong>Set</strong> 的含义，因为在 <strong>Set</strong>中，只有当元素不存在时才会添加元素。在使用 <strong>ArrayList</strong> ，或任何其他类型的 <strong>List</strong> 时，<code>add()</code> 总是表示“把它放进去”，因为 <strong>List</strong> 不关心是否存在重复元素。</p><p>TODO ：不理解“要确保这个 <strong>Collection</strong> 包含指定的元素。”的必要。2020年10月12日</p><p>可以使用 <em>for-in</em> 语法来遍历所有的 <strong>Collection</strong> ，就像这里所展示的那样。在本章的后续部分，还将学习到一个更灵活的概念，<em>迭代器</em>。</p><h2 id="添加元素组">添加元素组</h2><p>TODO ：此小节不理解。2020年10月12日</p><p>在 <strong>java.util</strong> 包中的 <strong>Arrays</strong> 和 <strong>Collections</strong> 类中都有很多实用的方法，可以在一个 <strong>Collection</strong> 中添加一组元素。</p><p><code>Arrays.asList()</code> 方法接受一个数组或是逗号分隔的元素列表（使用可变参数），并将其转换为 <strong>List</strong> 对象。 <code>Collections.addAll()</code> 方法接受一个 <strong>Collection</strong> 对象，以及一个数组或是一个逗号分隔的列表，将其中元素添加到 <strong>Collection</strong> 中。下边的示例展示了这两个方法，以及更通用的 、所有 <strong>Collection</strong> 类型都包含的<code>addAll()</code> 方法：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// collections/AddingGroups.java</span><span class="token comment">// Adding groups of elements to Collection objects</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AddingGroups</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> collection <span class="token operator">=</span>      <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Integer</span><span class="token punctuation">[</span><span class="token punctuation">]</span> moreInts <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">10</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    collection<span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span>moreInts<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// Runs significantly faster, but you can't</span>    <span class="token comment">// construct a Collection this way:</span>    <span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span>collection<span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">,</span> <span class="token number">14</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span>collection<span class="token punctuation">,</span> moreInts<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// Produces a list "backed by" an array:</span>    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> list <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">,</span><span class="token number">17</span><span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">,</span><span class="token number">19</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    list<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">99</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// OK -- modify an element</span>    <span class="token comment">// list.add(21); // Runtime error; the underlying</span>                     <span class="token comment">// array cannot be resized.</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>Collection</strong> 的构造器可以接受另一个 <strong>Collection</strong>，用它来将自身初始化。因此，可以使用 <code>Arrays.asList()</code> 来为这个构造器产生输入。但是， <code>Collections.addAll()</code> 运行得更快，而且很容易构建一个不包含元素的 <strong>Collection</strong> ，然后调用 <code>Collections.addAll()</code> ，因此这是首选方式。</p><p><code>Collection.addAll()</code> 方法只能接受另一个 <strong>Collection</strong> 作为参数，因此它没有 <code>Arrays.asList()</code> 或 <code>Collections.addAll()</code> 灵活。这两个方法都使用可变参数列表。</p><p>也可以直接使用 <code>Arrays.asList()</code> 的输出作为一个 <strong>List</strong> ，但是这里的底层实现是数组，没法调整大小。如果尝试在这个 <strong>List</strong> 上调用 <code>add()</code> 或 <code>remove()</code>，由于这两个方法会尝试修改数组大小，所以会在运行时得到“Unsupported Operation（不支持的操作）”错误：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// collections/AsListInference.java</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Snow</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">Powder</span> <span class="token keyword">extends</span> <span class="token class-name">Snow</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">Light</span> <span class="token keyword">extends</span> <span class="token class-name">Powder</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">Heavy</span> <span class="token keyword">extends</span> <span class="token class-name">Powder</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">Crusty</span> <span class="token keyword">extends</span> <span class="token class-name">Snow</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">Slush</span> <span class="token keyword">extends</span> <span class="token class-name">Snow</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AsListInference</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Snow</span><span class="token punctuation">></span></span> snow1 <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span>      <span class="token keyword">new</span> <span class="token class-name">Crusty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Slush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Powder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//- snow1.add(new Heavy()); // Exception</span>    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Snow</span><span class="token punctuation">></span></span> snow2 <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span>      <span class="token keyword">new</span> <span class="token class-name">Light</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Heavy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//- snow2.add(new Slush()); // Exception</span>    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Snow</span><span class="token punctuation">></span></span> snow3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span>snow3<span class="token punctuation">,</span>      <span class="token keyword">new</span> <span class="token class-name">Light</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Heavy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Powder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    snow3<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Crusty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// Hint with explicit type argument specification:</span>    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Snow</span><span class="token punctuation">></span></span> snow4 <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Snow</span><span class="token punctuation">></span></span><span class="token function">asList</span><span class="token punctuation">(</span>       <span class="token keyword">new</span> <span class="token class-name">Light</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Heavy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Slush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//- snow4.add(new Powder()); // Exception</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在 <strong>snow4</strong> 中，注意 <code>Arrays.asList()</code> 中间的“暗示”（即 <code>&lt;Snow&gt;</code> ），告诉编译器 <code>Arrays.asList()</code> 生成的结果 <strong>List</strong> 类型的实际目标类型是什么。这称为<em>显式类型参数说明</em>（explicit type argument specification）。</p><h2 id="集合的打印">集合的打印</h2><p>必须使用 <code>Arrays.toString()</code> 来生成数组的可打印形式。但是打印集合无需任何帮助。下面是一个例子，这个例子中也介绍了基本的Java集合：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// collections/PrintingCollections.java</span><span class="token comment">// Collections print themselves automatically</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PrintingCollections</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">static</span> <span class="token class-name">Collection</span> <span class="token function">fill</span><span class="token punctuation">(</span><span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> collection<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    collection<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"rat"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    collection<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"cat"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    collection<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"dog"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    collection<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"dog"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> collection<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">static</span> <span class="token class-name">Map</span> <span class="token function">fill</span><span class="token punctuation">(</span><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">></span></span> map<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"rat"</span><span class="token punctuation">,</span> <span class="token string">"Fuzzy"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"cat"</span><span class="token punctuation">,</span> <span class="token string">"Rags"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"dog"</span><span class="token punctuation">,</span> <span class="token string">"Bosco"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"dog"</span><span class="token punctuation">,</span> <span class="token string">"Spot"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> map<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">TreeSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">LinkedHashSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">TreeMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">LinkedHashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">/* Output:[rat, cat, dog, dog][rat, cat, dog, dog][rat, cat, dog][cat, dog, rat][rat, cat, dog]&#123;rat=Fuzzy, cat=Rags, dog=Spot&#125;&#123;cat=Rags, dog=Spot, rat=Fuzzy&#125;&#123;rat=Fuzzy, cat=Rags, dog=Spot&#125;*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这显示了Java集合库中的两个主要类型。它们的区别在于集合中的每个“槽”（slot）保存的元素个数。 <strong>Collection</strong> 类型在每个槽中只能保存一个元素。此类集合包括： <strong>List</strong> ，它以特定的顺序保存一组元素； <strong>Set</strong> ，其中元素不允许重复； <strong>Queue</strong> ，只能在集合一端插入对象，并从另一端移除对象（就本例而言，这只是查看序列的另一种方式，因此并没有显示它）。 <strong>Map</strong> 在每个槽中存放了两个元素，即键和与之关联的值。</p><p>默认的打印行为，使用集合提供的 <code>toString()</code> 方法即可生成可读性很好的结果。 <strong>Collection</strong> 打印出的内容用方括号括住，每个元素由逗号分隔。 <strong>Map</strong> 则由大括号括住，每个键和值用等号连接（键在左侧，值在右侧）。</p><p>第一个 <code>fill()</code> 方法适用于所有类型的 <strong>Collection</strong> ，这些类型都实现了 <code>add()</code> 方法以添加新元素。</p><p><strong>ArrayList</strong> 和 <strong>LinkedList</strong> 都是 <strong>List</strong> 的类型，从输出中可以看出，它们都按插入顺序保存元素。两者之间的区别不仅在于执行某些类型的操作时的性能，而且 <strong>LinkedList</strong> 包含的操作多于 <strong>ArrayList</strong> 。本章后面将对这些内容进行更全面的探讨。</p><p><strong>HashSet</strong> ， <strong>TreeSet</strong> 和 <strong>LinkedHashSet</strong> 是 <strong>Set</strong> 的类型。从输出中可以看到， <strong>Set</strong> 仅保存每个相同项中的一个，并且不同的 <strong>Set</strong> 实现存储元素的方式也不同。 <strong>HashSet</strong> 使用相当复杂的方法存储元素。现在只需要知道，这种技术是检索元素的最快方法，因此，存储顺序看上去没有什么意义（通常只关心某事物是否是 <strong>Set</strong> 的成员，而存储顺序并不重要）。如果存储顺序很重要，则可以使用 <strong>TreeSet</strong> ，它将按比较结果的升序保存对象）或 <strong>LinkedHashSet</strong> ，它按照被添加的先后顺序保存对象。</p><p><strong>Map</strong> （也称为关联数组）使用键来查找对象，就像一个简单的数据库。所关联的对象称为值。 假设有一个 <strong>Map</strong> 将美国州名与它们的首府联系在一起，如果想要俄亥俄州（Ohio）的首府，可以用“Ohio”作为键来查找，几乎就像使用数组下标一样。正是由于这种行为，对于每个键， <strong>Map</strong> 只存储一次。</p><p><code>Map.put(key, value)</code> 添加一个所想要添加的值并将它与一个键（用来查找值）相关联。 <code>Map.get(key)</code> 生成与该键相关联的值。上面的示例仅添加键值对，并没有执行查找。这将在稍后展示。</p><p>请注意，这里没有指定（或考虑） <strong>Map</strong> 的大小，因为它会自动调整大小。 此外， <strong>Map</strong> 还知道如何打印自己，它会显示相关联的键和值。</p><p>本例使用了 <strong>Map</strong> 的三种基本风格： <strong>HashMap</strong> ， <strong>TreeMap</strong> 和 <strong>LinkedHashMap</strong> 。</p><p>键和值保存在 <strong>HashMap</strong> 中的顺序不是插入顺序，因为 <strong>HashMap</strong> 实现使用了非常快速的算法来控制顺序。 <strong>TreeMap</strong> 通过比较结果的升序来保存键， <strong>LinkedHashMap</strong> 在保持 <strong>HashMap</strong> 查找速度的同时按键的插入顺序保存键。</p><h2 id="列表List">列表List</h2><p><strong>List</strong>承诺将元素保存在特定的序列中。 <strong>List</strong> 接口在 <strong>Collection</strong> 的基础上添加了许多方法，允许在 <strong>List</strong> 的中间插入和删除元素。</p><p>有两种类型的 <strong>List</strong> ：</p><ul><li>基本的 <strong>ArrayList</strong> ，擅长随机访问元素，但在 <strong>List</strong> 中间插入和删除元素时速度较慢。</li><li><strong>LinkedList</strong> ，它通过代价较低的在 <strong>List</strong> 中间进行的插入和删除操作，提供了优化的顺序访问。 <strong>LinkedList</strong> 对于随机访问来说相对较慢，但它具有比 <strong>ArrayList</strong> 更大的特征集。</li></ul><p>TODO ：特征集？2020年10月12日</p><p>下面的示例导入 <strong>typeinfo.pets</strong> ，超前使用了类型信息一章中的类库。这个类库包含了 <strong>Pet</strong> 类层次结构，以及用于随机生成 <strong>Pet</strong> 对象的一些工具类。此时不需要了解完整的详细信息，只需要知道两点：</p><ol><li>有一个 <strong>Pet</strong> 类，以及 <strong>Pet</strong> 的各种子类型。</li><li>静态的 <code>Pets.arrayList()</code> 方法返回一个填充了随机选取的 <strong>Pet</strong> 对象的 <strong>ArrayList</strong>：</li></ol><pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">&#x2F;&#x2F; collections&#x2F;ListFeatures.javaimport typeinfo.pets.*;import java.util.*;public class ListFeatures &#123;  public static void main(String[] args) &#123;    Random rand &#x3D; new Random(47);    List&lt;Pet&gt; pets &#x3D; Pets.list(7);    System.out.println(&quot;1: &quot; + pets);    Hamster h &#x3D; new Hamster();    pets.add(h); &#x2F;&#x2F; Automatically resizes    System.out.println(&quot;2: &quot; + pets);    System.out.println(&quot;3: &quot; + pets.contains(h));    pets.remove(h); &#x2F;&#x2F; Remove by object    Pet p &#x3D; pets.get(2);    System.out.println(&quot;4: &quot; +  p + &quot; &quot; + pets.indexOf(p));    Pet cymric &#x3D; new Cymric();    System.out.println(&quot;5: &quot; + pets.indexOf(cymric));    System.out.println(&quot;6: &quot; + pets.remove(cymric));    &#x2F;&#x2F; Must be the exact object:    System.out.println(&quot;7: &quot; + pets.remove(p));    System.out.println(&quot;8: &quot; + pets);    pets.add(3, new Mouse()); &#x2F;&#x2F; Insert at an index    System.out.println(&quot;9: &quot; + pets);    List&lt;Pet&gt; sub &#x3D; pets.subList(1, 4);    System.out.println(&quot;subList: &quot; + sub);    System.out.println(&quot;10: &quot; + pets.containsAll(sub));    Collections.sort(sub); &#x2F;&#x2F; In-place sort    System.out.println(&quot;sorted subList: &quot; + sub);    &#x2F;&#x2F; Order is not important in containsAll():    System.out.println(&quot;11: &quot; + pets.containsAll(sub));    Collections.shuffle(sub, rand); &#x2F;&#x2F; Mix it up    System.out.println(&quot;shuffled subList: &quot; + sub);    System.out.println(&quot;12: &quot; + pets.containsAll(sub));    List&lt;Pet&gt; copy &#x3D; new ArrayList&lt;&gt;(pets);    sub &#x3D; Arrays.asList(pets.get(1), pets.get(4));    System.out.println(&quot;sub: &quot; + sub);    copy.retainAll(sub);    System.out.println(&quot;13: &quot; + copy);    copy &#x3D; new ArrayList&lt;&gt;(pets); &#x2F;&#x2F; Get a fresh copy    copy.remove(2); &#x2F;&#x2F; Remove by index    System.out.println(&quot;14: &quot; + copy);    copy.removeAll(sub); &#x2F;&#x2F; Only removes exact objects    System.out.println(&quot;15: &quot; + copy);    copy.set(1, new Mouse()); &#x2F;&#x2F; Replace an element    System.out.println(&quot;16: &quot; + copy);    copy.addAll(2, sub); &#x2F;&#x2F; Insert a list in the middle    System.out.println(&quot;17: &quot; + copy);    System.out.println(&quot;18: &quot; + pets.isEmpty());    pets.clear(); &#x2F;&#x2F; Remove all elements    System.out.println(&quot;19: &quot; + pets);    System.out.println(&quot;20: &quot; + pets.isEmpty());    pets.addAll(Pets.list(4));    System.out.println(&quot;21: &quot; + pets);    Object[] o &#x3D; pets.toArray();    System.out.println(&quot;22: &quot; + o[3]);    Pet[] pa &#x3D; pets.toArray(new Pet[0]);    System.out.println(&quot;23: &quot; + pa[3].id());  &#125;&#125;&#x2F;* Output:1: [Rat, Manx, Cymric, Mutt, Pug, Cymric, Pug]2: [Rat, Manx, Cymric, Mutt, Pug, Cymric, Pug, Hamster]3: true4: Cymric 25: -16: false7: true8: [Rat, Manx, Mutt, Pug, Cymric, Pug]9: [Rat, Manx, Mutt, Mouse, Pug, Cymric, Pug]subList: [Manx, Mutt, Mouse]10: truesorted subList: [Manx, Mouse, Mutt]11: trueshuffled subList: [Mouse, Manx, Mutt]12: truesub: [Mouse, Pug]13: [Mouse, Pug]14: [Rat, Mouse, Mutt, Pug, Cymric, Pug]15: [Rat, Mutt, Cymric, Pug]16: [Rat, Mouse, Cymric, Pug]17: [Rat, Mouse, Mouse, Pug, Cymric, Pug]18: false19: []20: true21: [Manx, Cymric, Rat, EgyptianMau]22: EgyptianMau23: 14*&#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>打印行都编了号，因此可从输出追溯到源代码。 第 1 行输出展示了原始的由 <strong>Pet</strong> 组成的 <strong>List</strong> 。 与数组不同， <strong>List</strong> 可以在创建后添加或删除元素，并自行调整大小。这正是它的重要价值：一种可修改的序列。在第 2 行输出中可以看到添加一个 <strong>Hamster</strong> 的结果，该对象将被追加到列表的末尾。</p><p>可以使用 <code>contains()</code> 方法确定对象是否在列表中。如果要删除一个对象，可以将该对象的引用传递给 <code>remove()</code> 方法。同样，如果有一个对象的引用，可以使用 <code>indexOf()</code> 在 <strong>List</strong> 中找到该对象所在位置的下标号，如第 4 行输出所示中所示。</p><p>当确定元素是否是属于某个 <strong>List</strong> ，寻找某个元素的索引，以及通过引用从 <strong>List</strong> 中删除元素时，都会用到 <code>equals()</code> 方法（根类 <strong>Object</strong> 的一个方法）。每个 <strong>Pet</strong> 被定义为一个唯一的对象，所以即使列表中已经有两个 <strong>Cymrics</strong> ，如果再创建一个新的 <strong>Cymric</strong> 对象并将其传递给 <code>indexOf()</code> 方法，结果仍为 <strong>-1</strong> （表示未找到），并且尝试调用 <code>remove()</code> 方法来删除这个对象将返回 <strong>false</strong> 。对于其他类， <code>equals()</code> 的定义可能有所不同。例如，如果两个 <strong>String</strong> 的内容相同，则这两个 <strong>String</strong> 相等。因此，为了防止出现意外，请务必注意 <strong>List</strong> 行为会根据 <code>equals()</code> 行为而发生变化。</p><p>第 7、8 行输出展示了删除与 <strong>List</strong> 中的对象完全匹配的对象是成功的。</p><p>可以在 <strong>List</strong> 的中间插入一个元素，就像在第 9 行输出和它之前的代码那样。但这会带来一个问题：对于 <strong>LinkedList</strong> ，在列表中间插入和删除都是廉价操作（在本例中，除了对列表中间进行的真正的随机访问），但对于 <strong>ArrayList</strong> ，这可是代价高昂的操作。这是否意味着永远不应该在 <strong>ArrayList</strong> 的中间插入元素，并最好是转换为 <strong>LinkedList</strong> ？不，它只是意味着你应该意识到这个问题，如果你开始在某个 <strong>ArrayList</strong> 中间执行很多插入操作，并且程序开始变慢，那么你应该看看你的 <strong>List</strong> 实现有可能就是罪魁祸首（发现此类瓶颈的最佳方式是使用分析器 profiler）。优化是一个很棘手的问题，最好的策略就是置之不顾，直到发现必须要去担心它了（尽管去理解这些问题总是一个很好的主意）。</p><p><code>subList()</code> 方法可以轻松地从更大的列表中创建切片，当将切片结果传递给原来这个较大的列表的 <code>containsAll()</code> 方法时，很自然地会得到 <strong>true</strong>。请注意，顺序并不重要，在第 11、12 行输出中可以看到，在 <strong>sub</strong> 上调用直观命名的 <code>Collections.sort()</code> 和 <code>Collections.shuffle()</code> 方法，不会影响 <code>containsAll()</code> 的结果。 <code>subList()</code> 所产生的列表的幕后支持就是原始列表。因此，对所返回列表的更改都将会反映在原始列表中，反之亦然。</p><p><code>retainAll()</code> 方法实际上是一个“集合交集”操作，在本例中，它保留了同时在 <strong>copy</strong> 和 <strong>sub</strong> 中的所有元素。请再次注意，所产生的结果行为依赖于 <code>equals()</code> 方法。</p><p>第 14 行输出展示了使用索引号来删除元素的结果，与通过对象引用来删除元素相比，它显得更加直观，因为在使用索引时，不必担心 <code>equals()</code> 的行为。</p><p><code>removeAll()</code> 方法也是基于 <code>equals()</code> 方法运行的。 顾名思义，它会从 <strong>List</strong> 中删除在参数 <strong>List</strong> 中的所有元素。</p><p><code>set()</code> 方法的命名显得很不合时宜，因为它与 <strong>Set</strong> 类存在潜在的冲突。在这里使用“replace”可能更适合，因为它的功能是用第二个参数替换索引处的元素（第一个参数）。</p><p>第 17 行输出表明，对于 <strong>List</strong> ，有一个重载的 <code>addAll()</code> 方法可以将新列表插入到原始列表的中间位置，而不是仅能用 <strong>Collection</strong> 的 <code>addAll()</code> 方法将其追加到列表的末尾。</p><p>第 18 - 20 行输出展示了 <code>isEmpty()</code> 和 <code>clear()</code> 方法的效果。</p><p>第 22、23 行输出展示了如何使用 <code>toArray()</code> 方法将任意的 <strong>Collection</strong> 转换为数组。这是一个重载方法，其无参版本返回一个 <strong>Object</strong> 数组，但是如果将目标类型的数组传递给这个重载版本，那么它会生成一个指定类型的数组（假设它通过了类型检查）。如果参数数组太小而无法容纳 <strong>List</strong> 中的所有元素（就像本例一样），则 <code>toArray()</code> 会创建一个具有合适尺寸的新数组。 <strong>Pet</strong> 对象有一个 <code>id()</code> 方法，可以在所产生的数组中的对象上调用这个方法。</p><h2 id="迭代器Iterators">迭代器Iterators</h2><p>在任何集合中，都必须有某种方式可以插入元素并再次获取它们。毕竟，保存事物是集合最基本的工作。对于 <strong>List</strong> ， <code>add()</code> 是插入元素的一种方式， <code>get()</code> 是获取元素的一种方式。</p><p>如果从更高层次的角度考虑，会发现这里有个缺点：要使用集合，必须对集合的确切类型编程。这一开始可能看起来不是很糟糕，但是考虑下面的情况：如果原本是对 <strong>List</strong> 编码的，但是后来发现如果能够将相同的代码应用于 <strong>Set</strong> 会更方便，此时应该怎么做？或者假设想从一开始就编写一段通用代码，它不知道或不关心它正在使用什么类型的集合，因此它可以用于不同类型的集合，那么如何才能不重写代码就可以应用于不同类型的集合？</p><p>迭代器（也是一种设计模式）的概念实现了这种抽象。迭代器是一个对象，它在一个序列中移动并选择该序列中的每个对象，而客户端程序员不知道或不关心该序列的底层结构。另外，迭代器通常被称为轻量级对象（lightweight object）：创建它的代价小。因此，经常可以看到一些对迭代器有些奇怪的约束。例如，Java 的 <strong>Iterator</strong> 只能单向移动。这个 <strong>Iterator</strong> 只能用来：</p><ol><li>使用 <code>iterator()</code> 方法要求集合返回一个 <strong>Iterator</strong>。 <strong>Iterator</strong> 将准备好返回序列中的第一个元素。</li><li>使用 <code>next()</code> 方法获得序列中的下一个元素。</li><li>使用 <code>hasNext()</code> 方法检查序列中是否还有元素。</li><li>使用 <code>remove()</code> 方法将迭代器最近返回的那个元素删除。</li></ol><p>为了观察它的工作方式，这里再次使用 <strong>Pet</strong> 工具：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// collections/SimpleIteration.java</span><span class="token keyword">import</span> <span class="token namespace">typeinfo<span class="token punctuation">.</span>pets<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SimpleIteration</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Pet</span><span class="token punctuation">></span></span> pets <span class="token operator">=</span> <span class="token class-name">Pets</span><span class="token punctuation">.</span><span class="token function">list</span><span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Iterator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Pet</span><span class="token punctuation">></span></span> it <span class="token operator">=</span> pets<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>it<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token class-name">Pet</span> p <span class="token operator">=</span> it<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span><span class="token function">id</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">":"</span> <span class="token operator">+</span> p <span class="token operator">+</span> <span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// A simpler approach, when possible:</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name">Pet</span> p <span class="token operator">:</span> pets<span class="token punctuation">)</span>      <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span><span class="token function">id</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">":"</span> <span class="token operator">+</span> p <span class="token operator">+</span> <span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// An Iterator can also remove elements:</span>    it <span class="token operator">=</span> pets<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">6</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      it<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      it<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>pets<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">/* Output:0:Rat 1:Manx 2:Cymric 3:Mutt 4:Pug 5:Cymric 6:Pug 7:Manx 8:Cymric 9:Rat 10:EgyptianMau 11:Hamster0:Rat 1:Manx 2:Cymric 3:Mutt 4:Pug 5:Cymric 6:Pug 7:Manx 8:Cymric 9:Rat 10:EgyptianMau 11:Hamster[Pug, Manx, Cymric, Rat, EgyptianMau, Hamster]*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>有了 <strong>Iterator</strong> ，就不必再为集合中元素的数量操心了。这是由 <code>hasNext()</code> 和 <code>next()</code> 关心的事情。</p><p>如果只是想向前遍历 <strong>List</strong> ，并不打算修改 <strong>List</strong> 对象本身，那么使用 for-in 语法更加简洁。</p><p><strong>Iterator</strong> 还可以删除由 <code>next()</code> 生成的最后一个元素，这意味着在调用 <code>remove()</code> 之前必须先调用 <code>next()</code> 。[^4]</p><p>在集合中的每个对象上执行操作，这种思想十分强大，并且贯穿于本书。</p><p>现在考虑创建一个 <code>display()</code> 方法，它不必知晓集合的确切类型：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// collections/CrossCollectionIteration.java</span><span class="token keyword">import</span> <span class="token namespace">typeinfo<span class="token punctuation">.</span>pets<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CrossCollectionIteration</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">display</span><span class="token punctuation">(</span><span class="token class-name">Iterator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Pet</span><span class="token punctuation">></span></span> it<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>it<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token class-name">Pet</span> p <span class="token operator">=</span> it<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span><span class="token function">id</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">":"</span> <span class="token operator">+</span> p <span class="token operator">+</span> <span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Pet</span><span class="token punctuation">></span></span> pets <span class="token operator">=</span> <span class="token class-name">Pets</span><span class="token punctuation">.</span><span class="token function">list</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Pet</span><span class="token punctuation">></span></span> petsLL <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span>pets<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">HashSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Pet</span><span class="token punctuation">></span></span> petsHS <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span>pets<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">TreeSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Pet</span><span class="token punctuation">></span></span> petsTS <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TreeSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span>pets<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">display</span><span class="token punctuation">(</span>pets<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">display</span><span class="token punctuation">(</span>petsLL<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">display</span><span class="token punctuation">(</span>petsHS<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">display</span><span class="token punctuation">(</span>petsTS<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">/* Output:0:Rat 1:Manx 2:Cymric 3:Mutt 4:Pug 5:Cymric 6:Pug 7:Manx0:Rat 1:Manx 2:Cymric 3:Mutt 4:Pug 5:Cymric 6:Pug 7:Manx0:Rat 1:Manx 2:Cymric 3:Mutt 4:Pug 5:Cymric 6:Pug 7:Manx5:Cymric 2:Cymric 7:Manx 1:Manx 3:Mutt 6:Pug 4:Pug 0:Rat*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>display()</code> 方法不包含任何有关它所遍历的序列的类型信息。这也展示了 <strong>Iterator</strong> 的真正威力：能够将遍历序列的操作与该序列的底层结构分离。出于这个原因，我们有时会说：迭代器统一了对集合的访问方式。</p><p>我们可以使用 <strong>Iterable</strong> 接口生成上一个示例的更简洁版本，该接口描述了“可以产生 <strong>Iterator</strong> 的任何东西”：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// collections/CrossCollectionIteration2.java</span><span class="token keyword">import</span> <span class="token namespace">typeinfo<span class="token punctuation">.</span>pets<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CrossCollectionIteration2</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">display</span><span class="token punctuation">(</span><span class="token class-name">Iterable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Pet</span><span class="token punctuation">></span></span> ip<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">Iterator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Pet</span><span class="token punctuation">></span></span> it <span class="token operator">=</span> ip<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>it<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token class-name">Pet</span> p <span class="token operator">=</span> it<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span><span class="token function">id</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">":"</span> <span class="token operator">+</span> p <span class="token operator">+</span> <span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Pet</span><span class="token punctuation">></span></span> pets <span class="token operator">=</span> <span class="token class-name">Pets</span><span class="token punctuation">.</span><span class="token function">list</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Pet</span><span class="token punctuation">></span></span> petsLL <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span>pets<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">HashSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Pet</span><span class="token punctuation">></span></span> petsHS <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span>pets<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">TreeSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Pet</span><span class="token punctuation">></span></span> petsTS <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TreeSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span>pets<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">display</span><span class="token punctuation">(</span>pets<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">display</span><span class="token punctuation">(</span>petsLL<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">display</span><span class="token punctuation">(</span>petsHS<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">display</span><span class="token punctuation">(</span>petsTS<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">/* Output:0:Rat 1:Manx 2:Cymric 3:Mutt 4:Pug 5:Cymric 6:Pug 7:Manx 0:Rat 1:Manx 2:Cymric 3:Mutt 4:Pug 5:Cymric 6:Pug 7:Manx 0:Rat 1:Manx 2:Cymric 3:Mutt 4:Pug 5:Cymric 6:Pug 7:Manx 5:Cymric 2:Cymric 7:Manx 1:Manx 3:Mutt 6:Pug 4:Pug 0:Rat */</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里所有的类都是 <strong>Iterable</strong> ，所以现在对 <code>display()</code> 的调用显然更简单。</p><h2 id="ListIterator">ListIterator</h2><p><strong>ListIterator</strong> 是一个更强大的 <strong>Iterator</strong> 子类型，它只能由各种 <strong>List</strong> 类生成。 <strong>Iterator</strong> 只能向前移动，而 <strong>ListIterator</strong> 可以双向移动。它可以生成迭代器在列表中指向位置的后一个和前一个元素的索引，并且可以使用 <code>set()</code> 方法替换它访问过的最近一个元素。可以通过调用 <code>listIterator()</code> 方法来生成指向 <strong>List</strong> 开头处的 <strong>ListIterator</strong> ，还可以通过调用 <code>listIterator(n)</code> 创建一个一开始就指向列表索引号为 <strong>n</strong> 的元素处的 <strong>ListIterator</strong> 。 下面的示例演示了所有这些能力：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// collections/ListIteration.java</span><span class="token keyword">import</span> <span class="token namespace">typeinfo<span class="token punctuation">.</span>pets<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ListIteration</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Pet</span><span class="token punctuation">></span></span> pets <span class="token operator">=</span> <span class="token class-name">Pets</span><span class="token punctuation">.</span><span class="token function">list</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">ListIterator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Pet</span><span class="token punctuation">></span></span> it <span class="token operator">=</span> pets<span class="token punctuation">.</span><span class="token function">listIterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>it<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>it<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span>        <span class="token string">", "</span> <span class="token operator">+</span> it<span class="token punctuation">.</span><span class="token function">nextIndex</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span>        <span class="token string">", "</span> <span class="token operator">+</span> it<span class="token punctuation">.</span><span class="token function">previousIndex</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"; "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// Backwards:</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>it<span class="token punctuation">.</span><span class="token function">hasPrevious</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>it<span class="token punctuation">.</span><span class="token function">previous</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">id</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>pets<span class="token punctuation">)</span><span class="token punctuation">;</span>    it <span class="token operator">=</span> pets<span class="token punctuation">.</span><span class="token function">listIterator</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>it<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      it<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      it<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token class-name">Pets</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>pets<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">/* Output:Rat, 1, 0; Manx, 2, 1; Cymric, 3, 2; Mutt, 4, 3; Pug, 5, 4; Cymric, 6, 5; Pug, 7, 6; Manx, 8, 7; 7 6 5 4 3 2 1 0 [Rat, Manx, Cymric, Mutt, Pug, Cymric, Pug, Manx][Rat, Manx, Cymric, Cymric, Rat, EgyptianMau, Hamster, EgyptianMau]*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>Pets.get()</code> 方法用来从位置 3 开始替换 <strong>List</strong> 中的所有 Pet 对象。</p><h2 id="链表LinkedList">链表LinkedList</h2><p><strong>LinkedList</strong> 也像 <strong>ArrayList</strong> 一样实现了基本的 <strong>List</strong> 接口，但它在 <strong>List</strong> 中间执行插入和删除操作时比 <strong>ArrayList</strong> 更高效。然而,它在随机访问操作效率方面却要逊色一些。</p><p><strong>LinkedList 还添加了一些方法，使其可以被用作栈、队列或双端队列（deque）</strong> 。在这些方法中，有些彼此之间可能只是名称有些差异，或者只存在些许差异，以使得这些名字在特定用法的上下文环境中更加适用（特别是在 <strong>Queue</strong> 中）。例如：</p><ul><li><code>getFirst()</code> 和 <code>element()</code> 是相同的，它们都返回列表的头部（第一个元素）而并不删除它，如果 <strong>List</strong> 为空，则抛出 <strong>NoSuchElementException</strong> 异常。 <code>peek()</code> 方法与这两个方法只是稍有差异，它在列表为空时返回 <strong>null</strong> 。</li><li><code>removeFirst()</code> 和 <code>remove()</code> 也是相同的，它们删除并返回列表的头部元素，并在列表为空时抛出 <strong>NoSuchElementException</strong> 异常。 <code>poll()</code> 稍有差异，它在列表为空时返回 <strong>null</strong> 。</li><li><code>addFirst()</code> 在列表的开头插入一个元素。</li><li><code>offer()</code> 与 <code>add()</code> 和 <code>addLast()</code> 相同。 它们都在列表的尾部（末尾）添加一个元素。</li><li><code>removeLast()</code> 删除并返回列表的最后一个元素。</li></ul><p>下面的示例展示了这些功能之间基本的相似性和差异性。它并不是重复执行 <strong>ListFeatures.java</strong> 中所示的行为：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// collections/LinkedListFeatures.java</span><span class="token keyword">import</span> <span class="token namespace">typeinfo<span class="token punctuation">.</span>pets<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LinkedListFeatures</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Pet</span><span class="token punctuation">></span></span> pets <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token class-name">Pets</span><span class="token punctuation">.</span><span class="token function">list</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>pets<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// Identical:</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"pets.getFirst(): "</span> <span class="token operator">+</span> pets<span class="token punctuation">.</span><span class="token function">getFirst</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"pets.element(): "</span> <span class="token operator">+</span> pets<span class="token punctuation">.</span><span class="token function">element</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// Only differs in empty-list behavior:</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"pets.peek(): "</span> <span class="token operator">+</span> pets<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// Identical; remove and return the first element:</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"pets.remove(): "</span> <span class="token operator">+</span> pets<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"pets.removeFirst(): "</span> <span class="token operator">+</span> pets<span class="token punctuation">.</span><span class="token function">removeFirst</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// Only differs in empty-list behavior:</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"pets.poll(): "</span> <span class="token operator">+</span> pets<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>pets<span class="token punctuation">)</span><span class="token punctuation">;</span>        pets<span class="token punctuation">.</span><span class="token function">addFirst</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Rat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"After addFirst(): "</span> <span class="token operator">+</span> pets<span class="token punctuation">)</span><span class="token punctuation">;</span>        pets<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span><span class="token class-name">Pets</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"After offer(): "</span> <span class="token operator">+</span> pets<span class="token punctuation">)</span><span class="token punctuation">;</span>        pets<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">Pets</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"After add(): "</span> <span class="token operator">+</span> pets<span class="token punctuation">)</span><span class="token punctuation">;</span>        pets<span class="token punctuation">.</span><span class="token function">addLast</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Hamster</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"After addLast(): "</span> <span class="token operator">+</span> pets<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"pets.removeLast(): "</span> <span class="token operator">+</span> pets<span class="token punctuation">.</span><span class="token function">removeLast</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">/* Output:[Rat, Manx, Cymric, Mutt, Pug]pets.getFirst(): Ratpets.element(): Ratpets.peek(): Ratpets.remove(): Ratpets.removeFirst(): Manxpets.poll(): Cymric[Mutt, Pug]After addFirst(): [Rat, Mutt, Pug]After offer(): [Rat, Mutt, Pug, Cymric]After add(): [Rat, Mutt, Pug, Cymric, Pug]After addLast(): [Rat, Mutt, Pug, Cymric, Pug, Hamster]pets.removeLast(): Hamster*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>Pets.list()</code> 的结果被传递给 <strong>LinkedList</strong> 的构造器，以便使用它来填充 <strong>LinkedList</strong> 。如果查看 <strong>Queue</strong> 接口就会发现，它在 <strong>LinkedList</strong> 的基础上添加了 <code>element()</code> ， <code>offer()</code> ， <code>peek()</code> ， <code>poll()</code> 和 <code>remove()</code> 方法，以使其可以成为一个 <strong>Queue</strong> 的实现。</p><h2 id="堆栈Stack">堆栈Stack</h2><p>堆栈是“后进先出”（LIFO）集合。它有时被称为叠加栈（pushdown stack），因为最后“压入”（push）栈的元素，第一个被“弹出”（pop）栈。经常用来类比栈的事物是带有弹簧支架的自助餐厅托盘。最后装入的托盘总是最先拿出来使用的。</p><p>Java 1.0 中附带了一个 <strong>Stack</strong> 类，结果设计得很糟糕（为了向后兼容，我们永远坚持 Java 中的旧设计错误）。Java 6 添加了 <strong>ArrayDeque</strong> ，其中包含直接实现堆栈功能的方法：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// collections/StackTest.java</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StackTest</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Deque</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> stack <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayDeque</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> s <span class="token operator">:</span> <span class="token string">"My dog has fleas"</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>stack<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">/* Output:fleas has dog My*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>即使它是作为一个堆栈在使用，我们仍然必须将其声明为 <strong>Deque</strong> 。有时一个名为 <strong>Stack</strong> 的类更能把事情讲清楚：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// onjava/Stack.java</span><span class="token comment">// A Stack class built with an ArrayDeque</span><span class="token keyword">package</span> <span class="token namespace">onjava</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Deque</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">ArrayDeque</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">private</span> <span class="token class-name">Deque</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> storage <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayDeque</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">push</span><span class="token punctuation">(</span><span class="token class-name">T</span> v<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> storage<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>  <span class="token keyword">public</span> <span class="token class-name">T</span> <span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> storage<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>  <span class="token keyword">public</span> <span class="token class-name">T</span> <span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> storage<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>  <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> storage<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>  <span class="token annotation punctuation">@Override</span>  <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> storage<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里引入了使用泛型的类定义的最简单的可能示例。类名称后面的 告诉编译器这是一个参数化类型，而其中的类型参数 <strong>T</strong> 会在使用类时被实际类型替换。基本上，这个类是在声明“我们在定义一个可以持有 <strong>T</strong> 类型对象的 <strong>Stack</strong> 。” <strong>Stack</strong> 是使用 <strong>ArrayDeque</strong> 实现的，而 <strong>ArrayDeque</strong> 也被告知它将持有 <strong>T</strong> 类型对象。注意， <code>push()</code> 接受类型为 <strong>T</strong> 的对象，而 <code>peek()</code> 和 <code>pop()</code> 返回类型为 <strong>T</strong> 的对象。 <code>peek()</code> 方法将返回栈顶元素，但并不将其从栈顶删除，而 <code>pop()</code> 删除并返回顶部元素。</p><p>如果只需要栈的行为，那么使用继承是不合适的，因为这将产生一个具有 <strong>ArrayDeque</strong> 的其它所有方法的类（<strong>Java 1.0</strong> 设计者在创建 <strong>java.util.Stack</strong> 时，就犯了这个错误）。使用组合，可以选择要公开的方法以及如何命名它们。</p><p>下面将使用 <strong>StackTest.java</strong> 中的相同代码来演示这个新的 <strong>Stack</strong> 类：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// collections/StackTest2.java</span><span class="token keyword">import</span> <span class="token namespace">onjava<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StackTest2</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> stack <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> s <span class="token operator">:</span> <span class="token string">"My dog has fleas"</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>stack<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">/* Output:fleas has dog My*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果想在自己的代码中使用这个 <strong>Stack</strong> 类，当在创建其实例时，就需要完整指定包名，或者更改这个类的名称；否则，就有可能会与 <strong>java.util</strong> 包中的 <strong>Stack</strong> 发生冲突。例如，如果我们在上面的例子中导入 <strong>java.util.</strong>*，那么就必须使用包名来防止冲突：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// collections/StackCollision.java</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StackCollision</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    onjava<span class="token punctuation">.</span><span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> stack <span class="token operator">=</span> <span class="token keyword">new</span> onjava<span class="token punctuation">.</span><span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name">String</span> s <span class="token operator">:</span> <span class="token string">"My dog has fleas"</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">)</span>      stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>stack<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    java<span class="token punctuation">.</span>util<span class="token punctuation">.</span><span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> stack2 <span class="token operator">=</span>      <span class="token keyword">new</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span><span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name">String</span> s <span class="token operator">:</span> <span class="token string">"My dog has fleas"</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">)</span>      stack2<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>stack2<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>stack2<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">/* Output:fleas has dog Myfleas has dog My*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>尽管已经有了 <strong>java.util.Stack</strong> ，但是 <strong>ArrayDeque</strong> 可以产生更好的 <strong>Stack</strong> ，因此更可取。</p><p>还可以使用显式导入来控制对“首选” <strong>Stack</strong> 实现的选择：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">onjava<span class="token punctuation">.</span></span><span class="token class-name">Stack</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>现在,任何对 <strong>Stack</strong> 的引用都将选择 <strong>onjava</strong> 版本，而在选择 <strong>java.util.Stack</strong> 时，必须使用全限定名称（full qualification）。</p><h2 id="集合Set">集合Set</h2><p><strong>Set</strong> 不保存重复的元素。 如果试图将相同对象的多个实例添加到 <strong>Set</strong> 中，那么它会阻止这种重复行为。 <strong>Set</strong> 最常见的用途是测试归属性，可以很轻松地询问某个对象是否在一个 <strong>Set</strong> 中。因此，查找通常是 <strong>Set</strong> 最重要的操作，因此通常会选择 <strong>HashSet</strong> 实现，该实现针对快速查找进行了优化。</p><p><strong>Set</strong> 具有与 <strong>Collection</strong> 相同的接口，因此没有任何额外的功能，不像前面两种不同类型的 <strong>List</strong> 那样。实际上， <strong>Set</strong> 就是一个 <strong>Collection</strong> ，只是行为不同。（这是继承和多态思想的典型应用：表现不同的行为。）<strong>Set</strong> 根据对象的“值”确定归属性。</p><p>下面是使用存放 <strong>Integer</strong> 对象的 <strong>HashSet</strong> 的示例：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// collections/SetOfInteger.java</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SetOfInteger</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Random</span> rand <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token number">47</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> intset <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            intset<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>rand<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>intset<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">/* Output:[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29]*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在 0 到 29 之间的 10000 个随机整数被添加到 <strong>Set</strong> 中，因此可以想象每个值都重复了很多次。但是从结果中可以看到，每一个数只有一个实例出现在结果中。</p><p>早期 Java 版本中的 <strong>HashSet</strong> 产生的输出没有可辨别的顺序。这是因为出于对速度的追求， <strong>HashSet</strong> 使用了散列。由 <strong>HashSet</strong> 维护的顺序与 <strong>TreeSet</strong> 或 <strong>LinkedHashSet</strong> 不同，因为它们的实现具有不同的元素存储方式。 <strong>TreeSet</strong> 将元素存储在红-黑树数据结构中，而 <strong>HashSet</strong> 使用散列函数。 <strong>LinkedHashSet</strong> 因为查询速度的原因也使用了散列，但是看起来使用了链表来维护元素的插入顺序。看起来散列算法好像已经改变了，现在 <strong>Integer</strong> 按顺序排序。但是，您不应该依赖此行为：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// collections/SetOfString.java</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SetOfString</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> colors <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      colors<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"Yellow"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      colors<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"Blue"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      colors<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"Red"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      colors<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"Red"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      colors<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"Orange"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      colors<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"Yellow"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      colors<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"Blue"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      colors<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"Purple"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>colors<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">/* Output:[Red, Yellow, Blue, Purple, Orange]*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>String</strong> 对象似乎没有排序。要对结果进行排序，一种方法是使用 <strong>TreeSet</strong> 而不是 <strong>HashSet</strong> ：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// collections/SortedSetOfString.java</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SortedSetOfString</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> colors <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TreeSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            colors<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"Yellow"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            colors<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"Blue"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            colors<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"Red"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            colors<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"Red"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            colors<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"Orange"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            colors<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"Yellow"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            colors<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"Blue"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            colors<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"Purple"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>colors<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">/* Output:[Blue, Orange, Purple, Red, Yellow]*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>最常见的操作之一是使用 <code>contains()</code> 测试成员归属性，但也有一些其它操作，这可能会让你想起在小学学过的维恩图：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// collections/SetOperations.java</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SetOperations</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> set1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span>set1<span class="token punctuation">,</span> <span class="token string">"A B C D E F G H I J K L"</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        set1<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"M"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"H: "</span> <span class="token operator">+</span> set1<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string">"H"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"N: "</span> <span class="token operator">+</span> set1<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string">"N"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> set2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span>set2<span class="token punctuation">,</span> <span class="token string">"H I J K L"</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"set2 in set1: "</span> <span class="token operator">+</span> set1<span class="token punctuation">.</span><span class="token function">containsAll</span><span class="token punctuation">(</span>set2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        set1<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token string">"H"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"set1: "</span> <span class="token operator">+</span> set1<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"set2 in set1: "</span> <span class="token operator">+</span> set1<span class="token punctuation">.</span><span class="token function">containsAll</span><span class="token punctuation">(</span>set2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        set1<span class="token punctuation">.</span><span class="token function">removeAll</span><span class="token punctuation">(</span>set2<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"set2 removed from set1: "</span> <span class="token operator">+</span> set1<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span>set1<span class="token punctuation">,</span> <span class="token string">"X Y Z"</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"'X Y Z' added to set1: "</span> <span class="token operator">+</span> set1<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">/* Output:H: trueN: falseset2 in set1: trueset1: [A, B, C, D, E, F, G, I, J, K, L, M]set2 in set1: falseset2 removed from set1: [A, B, C, D, E, F, G, M]'X Y Z' added to set1: [A, B, C, D, E, F, G, M, X, Y, Z]*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这些方法名都是自解释的，JDK 文档中还有一些其它的方法。</p><p>能够产生每个元素都唯一的列表是相当有用的功能。例如，假设想要列出上面的 <strong>SetOperations.java</strong> 文件中的所有单词，通过使用本书后面介绍的 <code>java.nio.file.Files.readAllLines()</code> 方法，可以打开一个文件，并将其作为一个 <strong>List&lt;String&gt;</strong> 读取，每个 <strong>String</strong> 都是输入文件中的一行：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// collections/UniqueWords.java</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>nio<span class="token punctuation">.</span>file<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UniqueWords</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> lines <span class="token operator">=</span> <span class="token class-name">Files</span><span class="token punctuation">.</span><span class="token function">readAllLines</span><span class="token punctuation">(</span><span class="token class-name">Paths</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"SetOperations.java"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> words <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TreeSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> line <span class="token operator">:</span> lines<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> word <span class="token operator">:</span> line<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"\\W+"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>word<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    words<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>word<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>words<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">/* Output:[A, B, C, Collections, D, E, F, G, H, HashSet, I, J, K,L, M, N, Output, Set, SetOperations, String, System, X,Y, Z, add, addAll, added, args, class, collections,contains, containsAll, false, from, import, in, java,main, new, out, println, public, remove, removeAll,removed, set1, set2, split, static, to, true, util,void]*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们逐步浏览文件中的每一行，并使用 <code>String.split()</code> 将其分解为单词，这里使用正则表达式 <strong>\\ W +</strong> ，这意味着它会依据一个或多个（即 <strong>+</strong> ）非单词字母来拆分字符串。每个结果单词都会添加到 <strong>Set words</strong> 中。因为它是 <strong>TreeSet</strong> ，所以对结果进行排序。这里，排序是按字典顺序（lexicographically）完成的，因此大写和小写字母位于不同的组中。如果想按字母顺序（alphabetically）对其进行排序，可以向 <strong>TreeSet</strong> 构造器传入 <strong>String.CASE_INSENSITIVE_ORDER</strong> 比较器（比较器是一个建立排序顺序的对象）：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// collections/UniqueWordsAlphabetic.java</span><span class="token comment">// Producing an alphabetic listing</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>nio<span class="token punctuation">.</span>file<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UniqueWordsAlphabetic</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> lines <span class="token operator">=</span> <span class="token class-name">Files</span><span class="token punctuation">.</span><span class="token function">readAllLines</span><span class="token punctuation">(</span><span class="token class-name">Paths</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"SetOperations.java"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> words <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TreeSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span>CASE_INSENSITIVE_ORDER<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> line <span class="token operator">:</span> lines<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> word <span class="token operator">:</span> line<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"\\W+"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>word<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    words<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>word<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>words<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">/* Output:[A, add, addAll, added, args, B, C, class, collections,contains, containsAll, D, E, F, false, from, G, H,HashSet, I, import, in, J, java, K, L, M, main, N, new,out, Output, println, public, remove, removeAll,removed, Set, set1, set2, SetOperations, split, static,String, System, to, true, util, void, X, Y, Z]*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="映射Map">映射Map</h2><p>将对象映射到其他对象的能力是解决编程问题的有效方法。例如，考虑一个程序，它被用来检查 Java 的 <strong>Random</strong> 类的随机性。理想情况下， <strong>Random</strong> 会产生完美的数字分布，但为了测试这一点，则需要生成大量的随机数，并计算落在各种范围内的数字个数。 <strong>Map</strong> 可以很容易地解决这个问题。在本例中，键是 <strong>Random</strong> 生成的数字，而值是该数字出现的次数：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// collections/Statistics.java</span><span class="token comment">// Simple demonstration of HashMap</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Statistics</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">Random</span> rand <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token number">47</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">></span></span> m <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token comment">// Produce a number between 0 and 20:</span>      <span class="token keyword">int</span> r <span class="token operator">=</span> rand<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token class-name">Integer</span> freq <span class="token operator">=</span> m<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [1]</span>      m<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>r<span class="token punctuation">,</span> freq <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">?</span> <span class="token number">1</span> <span class="token operator">:</span> freq <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">/* Output:&#123;0=481, 1=502, 2=489, 3=508, 4=481, 5=503, 6=519,7=471, 8=468, 9=549, 10=513, 11=531, 12=521, 13=506,14=477, 15=497, 16=533, 17=509, 18=478, 19=464&#125;*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>**[1]**自动包装机制将随机生成的 <strong>int</strong> 转换为可以与 <strong>HashMap</strong> 一起使用的 <strong>Integer</strong> 引用（不能使用基本类型的集合）。如果键不在集合中，则 <code>get()</code> 返回 <strong>null</strong> （这意味着该数字第一次出现）。否则， <code>get()</code> 会为键生成与之关联的 <strong>Integer</strong> 值，然后该值被递增（自动包装机制再次简化了表达式，但实际上确实发生了对 <strong>Integer</strong> 的装箱和拆箱）。</p><p>接下来的示例将使用一个 <strong>String</strong> 描述来查找 <strong>Pet</strong> 对象。它还展示了通过使用 <code>containsKey()</code> 和 <code>containsValue()</code> 方法去测试一个 <strong>Map</strong> ，以查看它是否包含某个键或某个值：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// collections/PetMap.java</span><span class="token keyword">import</span> <span class="token namespace">typeinfo<span class="token punctuation">.</span>pets<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PetMap</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Pet</span><span class="token punctuation">></span></span> petMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    petMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"My Cat"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Cat</span><span class="token punctuation">(</span><span class="token string">"Molly"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    petMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"My Dog"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span><span class="token string">"Ginger"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    petMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"My Hamster"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Hamster</span><span class="token punctuation">(</span><span class="token string">"Bosco"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>petMap<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Pet</span> dog <span class="token operator">=</span> petMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"My Dog"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>dog<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>petMap<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span><span class="token string">"My Dog"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>petMap<span class="token punctuation">.</span><span class="token function">containsValue</span><span class="token punctuation">(</span>dog<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">/* Output:&#123;My Dog=Dog Ginger, My Cat=Cat Molly, My Hamster=Hamster Bosco&#125;Dog Gingertruetrue*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>Map</strong> 与数组和其他的 <strong>Collection</strong> 一样，可以轻松地扩展到多个维度，只需要创建一个值为 <strong>Map</strong> 的 <strong>Map</strong>（这些 <strong>Map</strong> 的值可以是其他集合，甚至是其他 <strong>Map</strong>）。因此，能够很容易地将集合组合起来以快速生成强大的数据结构。例如，假设你正在追踪有多个宠物的人，只需要一个 <strong>Map&lt;Person, List&lt;Pet&gt;&gt;</strong> 即可：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// collections/MapOfList.java</span><span class="token comment">// &#123;java collections.MapOfList&#125;</span><span class="token keyword">package</span> <span class="token namespace">collections</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">typeinfo<span class="token punctuation">.</span>pets<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MapOfList</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Person</span><span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">Pet</span><span class="token punctuation">></span><span class="token punctuation">></span></span> petPeople <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">static</span> <span class="token punctuation">&#123;</span>        petPeople<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"Dawn"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span>                        <span class="token keyword">new</span> <span class="token class-name">Cymric</span><span class="token punctuation">(</span><span class="token string">"Molly"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                        <span class="token keyword">new</span> <span class="token class-name">Mutt</span><span class="token punctuation">(</span><span class="token string">"Spot"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        petPeople<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"Kate"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span>                        <span class="token keyword">new</span> <span class="token class-name">Cat</span><span class="token punctuation">(</span><span class="token string">"Shackleton"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                        <span class="token keyword">new</span> <span class="token class-name">Cat</span><span class="token punctuation">(</span><span class="token string">"Elsie May"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                        <span class="token keyword">new</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span><span class="token string">"Margrett"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        petPeople<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"Marilyn"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span>                        <span class="token keyword">new</span> <span class="token class-name">Pug</span><span class="token punctuation">(</span><span class="token string">"Louie aka Louis Snorkelstein Dupree"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                        <span class="token keyword">new</span> <span class="token class-name">Cat</span><span class="token punctuation">(</span><span class="token string">"Stanford"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                        <span class="token keyword">new</span> <span class="token class-name">Cat</span><span class="token punctuation">(</span><span class="token string">"Pinkola"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        petPeople<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"Luke"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span>                        <span class="token keyword">new</span> <span class="token class-name">Rat</span><span class="token punctuation">(</span><span class="token string">"Fuzzy"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                        <span class="token keyword">new</span> <span class="token class-name">Rat</span><span class="token punctuation">(</span><span class="token string">"Fizzy"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        petPeople<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"Isaac"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Rat</span><span class="token punctuation">(</span><span class="token string">"Freckly"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"People: "</span> <span class="token operator">+</span> petPeople<span class="token punctuation">.</span><span class="token function">keySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Pets: "</span> <span class="token operator">+</span> petPeople<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Person</span> person <span class="token operator">:</span> petPeople<span class="token punctuation">.</span><span class="token function">keySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>person <span class="token operator">+</span> <span class="token string">" has:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Pet</span> pet <span class="token operator">:</span> petPeople<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>person<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"    "</span> <span class="token operator">+</span> pet<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">/* Output:People: [Person Dawn, Person Kate, Person Isaac, Person Marilyn, Person Luke]Pets: [[Cymric Molly, Mutt Spot], [Cat Shackleton, Cat Elsie May, Dog Margrett], [Rat Freckly], [Pug Louie aka Louis Snorkelstein Dupree, Cat Stanford, Cat Pinkola],[Rat Fuzzy, Rat Fizzy]]Person Dawn has:    Cymric Molly    Mutt SpotPerson Kate has:    Cat Shackleton    Cat Elsie May    Dog MargrettPerson Isaac has:    Rat FrecklyPerson Marilyn has:    Pug Louie aka Louis Snorkelstein Dupree    Cat Stanford    Cat PinkolaPerson Luke has:    Rat Fuzzy    Rat Fizzy*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>Map</strong> 可以返回由其键组成的 <strong>Set</strong> ，由其值组成的 <strong>Collection</strong> ，或者其键值对的 <strong>Set</strong> 。 <code>keySet()</code> 方法生成由在 <strong>petPeople</strong> 中的所有键组成的 <strong>Set</strong> ，它在 for-in 语句中被用来遍历该 <strong>Map</strong> 。</p><h2 id="队列Queue">队列Queue</h2><p>队列是一个典型的“先进先出”（FIFO）集合。 即从集合的一端放入事物，再从另一端去获取它们，事物放入集合的顺序和被取出的顺序是相同的。队列通常被当做一种可靠的将对象从程序的某个区域传输到另一个区域的途径。队列在并发编程中尤为重要，因为它们可以安全地将对象从一个任务传输到另一个任务。</p><p><strong>LinkedList</strong> 实现了 <strong>Queue</strong> 接口，并且提供了一些方法以支持队列行为，因此 <strong>LinkedList</strong> 可以用作 <strong>Queue</strong> 的一种实现。 通过将 <strong>LinkedList</strong> 向上转换为 <strong>Queue</strong> ，下面的示例使用了在 <strong>Queue</strong> 接口中与 <strong>Queue</strong> 相关(Queue-specific)的方法：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// collections/QueueDemo.java</span><span class="token comment">// Upcasting to a Queue from a LinkedList</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">QueueDemo</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">printQ</span><span class="token punctuation">(</span><span class="token class-name">Queue</span> queue<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>queue<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>queue<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Queue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> queue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Random</span> rand <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token number">47</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            queue<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span>rand<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token function">printQ</span><span class="token punctuation">(</span>queue<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Queue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Character</span><span class="token punctuation">></span></span> qc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">char</span> c <span class="token operator">:</span> <span class="token string">"Brontosaurus"</span><span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            qc<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token function">printQ</span><span class="token punctuation">(</span>qc<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">/* Output:8 1 1 1 5 14 3 1 0 1B r o n t o s a u r u s*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>offer()</code> 是与 <strong>Queue</strong> 相关的方法之一，它在允许的情况下，在队列的尾部插入一个元素，或者返回 <strong>false</strong> 。 <code>peek()</code> 和 <code>element()</code> 都返回队头元素而不删除它，但是如果队列为空，则 <code>element()</code> 抛出 <strong>NoSuchElementException</strong> ，而 <code>peek()</code> 返回 <strong>null</strong> 。 <code>poll()</code> 和 <code>remove()</code> 都删除并返回队头元素，但如果队列为空，<code>poll()</code> 返回 <strong>null</strong> ，而 <code>remove()</code> 抛出 <strong>NoSuchElementException</strong> 。</p><p>自动包装机制会自动将 <code>nextInt()</code> 的 <strong>int</strong> 结果转换为 <strong>queue</strong> 所需的 <strong>Integer</strong> 对象，并将 <strong>char c</strong> 转换为 <strong>qc</strong> 所需的 <strong>Character</strong> 对象。 <strong>Queue</strong> 接口窄化了对 <strong>LinkedList</strong> 方法的访问权限，因此只有适当的方法才能使用，因此能够访问到的 <strong>LinkedList</strong> 的方法会变少（这里实际上可以将 <strong>Queue</strong> 强制转换回 <strong>LinkedList</strong> ，但至少我们不鼓励这样做）。</p><p>TODO ：不了解自动包装机制。2020年10月13日</p><p>与 <strong>Queue</strong> 相关的方法提供了完整而独立的功能。 也就是说，对于 <strong>Queue</strong> 所继承的 <strong>Collection</strong> ，在不需要使用它的任何方法的情况下，就可以拥有一个可用的 <strong>Queue</strong> 。</p><h2 id="优先级队列PriorityQueue">优先级队列PriorityQueue</h2><p>先进先出（FIFO）描述了最典型的队列规则（queuing discipline）。队列规则是指在给定队列中的一组元素的情况下，确定下一个弹出队列的元素的规则。先进先出声明的是下一个弹出的元素应该是等待时间最长的元素。</p><p>优先级队列声明下一个弹出的元素是最需要的元素（具有最高的优先级）。例如，在机场，当飞机临近起飞时，这架飞机的乘客可以在办理登机手续时排到队头。如果构建了一个消息传递系统，某些消息比其他消息更重要，应该尽快处理，而不管它们何时到达。在Java 5 中添加了 <strong>PriorityQueue</strong> ，以便自动实现这种行为。</p><p>当在 <strong>PriorityQueue</strong> 上调用 <code>offer()</code> 方法来插入一个对象时，该对象会在队列中被排序。默认的排序使用队列中对象的自然顺序（natural order），但是可以通过提供自己的 <strong>Comparator</strong> 来修改这个顺序。 <strong>PriorityQueue</strong> 确保在调用 <code>peek()</code> ， <code>poll()</code> 或 <code>remove()</code> 方法时，获得的元素将是队列中优先级最高的元素。</p><p>让 <strong>PriorityQueue</strong> 与 <strong>Integer</strong> ， <strong>String</strong> 和 <strong>Character</strong> 这样的内置类型一起工作易如反掌。在下面的示例中，第一组值与前一个示例中的随机值相同，可以看到它们从 <strong>PriorityQueue</strong> 中弹出的顺序与前一个示例不同：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// collections/PriorityQueueDemo.java</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PriorityQueueDemo</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">PriorityQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> priorityQueue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PriorityQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Random</span> rand <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token number">47</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            priorityQueue<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span>rand<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">QueueDemo</span><span class="token punctuation">.</span><span class="token function">printQ</span><span class="token punctuation">(</span>priorityQueue<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> ints <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token number">25</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">,</span> <span class="token number">14</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">14</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">,</span> <span class="token number">21</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        priorityQueue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PriorityQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span>ints<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">QueueDemo</span><span class="token punctuation">.</span><span class="token function">printQ</span><span class="token punctuation">(</span>priorityQueue<span class="token punctuation">)</span><span class="token punctuation">;</span>        priorityQueue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PriorityQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span>ints<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">reverseOrder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        priorityQueue<span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span>ints<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">QueueDemo</span><span class="token punctuation">.</span><span class="token function">printQ</span><span class="token punctuation">(</span>priorityQueue<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> fact <span class="token operator">=</span> <span class="token string">"EDUCATION SHOULD ESCHEW OBFUSCATION"</span><span class="token punctuation">;</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> strings <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span>fact<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">PriorityQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> stringPQ <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PriorityQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span>strings<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">QueueDemo</span><span class="token punctuation">.</span><span class="token function">printQ</span><span class="token punctuation">(</span>stringPQ<span class="token punctuation">)</span><span class="token punctuation">;</span>        stringPQ <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PriorityQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span>strings<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">reverseOrder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        stringPQ<span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span>strings<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">QueueDemo</span><span class="token punctuation">.</span><span class="token function">printQ</span><span class="token punctuation">(</span>stringPQ<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Character</span><span class="token punctuation">></span></span> charSet <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">char</span> c <span class="token operator">:</span> fact<span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            charSet<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Autoboxing</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">PriorityQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Character</span><span class="token punctuation">></span></span> characterPQ <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PriorityQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span>charSet<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">QueueDemo</span><span class="token punctuation">.</span><span class="token function">printQ</span><span class="token punctuation">(</span>characterPQ<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">/* Output:0 1 1 1 1 1 3 5 8 14 1 1 2 3 3 9 9 14 14 18 18 20 21 22 23 25 25 25 25 23 22 21 20 18 18 14 14 9 9 3 3 2 1 1       A A B C C C D D E E E F H H I I L N N O O O O S S S T T U U U W W U U U T T S S S O O O O N N L I I H H F E E E D D C C C B A A         A B C D E F H I L N O S T U W */</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>PriorityQueue</strong> 是允许重复的，最小的值具有最高的优先级（如果是 <strong>String</strong> ，空格也可以算作值，并且比字母的优先级高）。为了展示如何通过提供自己的 <strong>Comparator</strong> 对象来改变顺序，第三个对 <strong>PriorityQueue&lt;Integer&gt;</strong> 构造器的调用，和第二个对 <strong>PriorityQueue&lt;String&gt;</strong> 的调用使用了由 <code>Collections.reverseOrder()</code> （Java 5 中新添加的）产生的反序的 <strong>Comparator</strong> 。</p><p>最后一部分添加了一个 <strong>HashSet</strong> 来消除重复的 <strong>Character</strong>。</p><p><strong>Integer</strong> ， <strong>String</strong> 和 <strong>Character</strong> 可以与 <strong>PriorityQueue</strong> 一起使用，因为这些类已经内置了自然排序。如果想在 <strong>PriorityQueue</strong> 中使用自己的类，则必须包含额外的功能以产生自然排序，或者必须提供自己的 <strong>Comparator</strong> 。</p><h2 id="集合与迭代器">集合与迭代器</h2><p>TODO ：本节有许多问题不理解，需要巩固。2020年10月13日</p><p><strong>Collection</strong> 是所有序列集合共有的根接口。它可能会被认为是一种“附属接口”（incidental interface），即因为要表示其他若干个接口的共性而出现的接口。此外，<strong>java.util.AbstractCollection</strong> 类提供了 <strong>Collection</strong> 的默认实现，使得你可以创建 <strong>AbstractCollection</strong> 的子类型，而其中没有不必要的代码重复。</p><p>使用接口描述的一个理由是它可以使我们创建更通用的代码。通过针对接口而非具体实现来编写代码，我们的代码可以应用于更多类型的对象。因此，如果所编写的方法接受一个 <strong>Collection</strong> ，那么该方法可以应用于任何实现了 <strong>Collection</strong> 的类——这也就使得一个新类可以选择去实现 <strong>Collection</strong> 接口，以便该方法可以使用它。标准 C++ 类库中的集合并没有共同的基类——集合之间的所有共性都是通过迭代器实现的。在 Java 中，遵循 C++ 的方式看起来似乎很明智，即用迭代器而不是 <strong>Collection</strong> 来表示集合之间的共性。但是，这两种方法绑定在了一起，因为实现 <strong>Collection</strong> 就意味着需要提供 <code>iterator()</code> 方法：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// collections/InterfaceVsIterator.java</span><span class="token keyword">import</span> <span class="token namespace">typeinfo<span class="token punctuation">.</span>pets<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">InterfaceVsIterator</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">display</span><span class="token punctuation">(</span><span class="token class-name">Iterator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Pet</span><span class="token punctuation">></span></span> it<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>it<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Pet</span> p <span class="token operator">=</span> it<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span><span class="token function">id</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">":"</span> <span class="token operator">+</span> p <span class="token operator">+</span> <span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">display</span><span class="token punctuation">(</span><span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Pet</span><span class="token punctuation">></span></span> pets<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Pet</span> p <span class="token operator">:</span> pets<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span><span class="token function">id</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">":"</span> <span class="token operator">+</span> p <span class="token operator">+</span> <span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Pet</span><span class="token punctuation">></span></span> petList <span class="token operator">=</span> <span class="token class-name">Pets</span><span class="token punctuation">.</span><span class="token function">list</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Pet</span><span class="token punctuation">></span></span> petSet <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span>petList<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Pet</span><span class="token punctuation">></span></span> petMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedHashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> names <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">"Ralph, Eric, Robin, Lacey, "</span> <span class="token operator">+</span> <span class="token string">"Britney, Sam, Spot, Fluffy"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">", "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> names<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            petMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>names<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> petList<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token function">display</span><span class="token punctuation">(</span>petList<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">display</span><span class="token punctuation">(</span>petSet<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">display</span><span class="token punctuation">(</span>petList<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">display</span><span class="token punctuation">(</span>petSet<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>petMap<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>petMap<span class="token punctuation">.</span><span class="token function">keySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">display</span><span class="token punctuation">(</span>petMap<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">display</span><span class="token punctuation">(</span>petMap<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">/* Output:0:Rat 1:Manx 2:Cymric 3:Mutt 4:Pug 5:Cymric 6:Pug 7:Manx 0:Rat 1:Manx 2:Cymric 3:Mutt 4:Pug 5:Cymric 6:Pug 7:Manx 0:Rat 1:Manx 2:Cymric 3:Mutt 4:Pug 5:Cymric 6:Pug 7:Manx 0:Rat 1:Manx 2:Cymric 3:Mutt 4:Pug 5:Cymric 6:Pug 7:Manx &#123;Ralph=Rat, Eric=Manx, Robin=Cymric, Lacey=Mutt, Britney=Pug, Sam=Cymric, Spot=Pug, Fluffy=Manx&#125;[Ralph, Eric, Robin, Lacey, Britney, Sam, Spot, Fluffy]0:Rat 1:Manx 2:Cymric 3:Mutt 4:Pug 5:Cymric 6:Pug 7:Manx 0:Rat 1:Manx 2:Cymric 3:Mutt 4:Pug 5:Cymric 6:Pug 7:Manx */</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>两个版本的 <code>display()</code> 方法都可以使用 <strong>Map</strong> 或 <strong>Collection</strong> 的子类型来工作。 而且<strong>Collection</strong> 接口和 <strong>Iterator</strong> 都将 <code>display()</code> 方法与低层集合的特定实现解耦。</p><p>在本例中，这两种方式都可以奏效。事实上， <strong>Collection</strong> 要更方便一点，因为它是 <strong>Iterable</strong> 类型，因此在 <code>display(Collection)</code> 的实现中可以使用 for-in 构造，这使得代码更加清晰。</p><p>当需要实现一个不是 <strong>Collection</strong> 的外部类时，由于让它去实现 <strong>Collection</strong> 接口可能非常困难或麻烦，因此使用 <strong>Iterator</strong> 就会变得非常吸引人。例如，如果我们通过继承一个持有 <strong>Pet</strong> 对象的类来创建一个 <strong>Collection</strong> 的实现，那么我们必须实现 <strong>Collection</strong> 所有的方法，即使我们不在 <code>display()</code> 方法中使用它们，也必须这样做。虽然这可以通过继承 <strong>AbstractCollection</strong> 而很容易地实现，但是无论如何还是要被强制去实现 <code>iterator()</code> 和 <code>size()</code> 方法，这些方法 <strong>AbstractCollection</strong> 没有实现，但是 <strong>AbstractCollection</strong> 中的其它方法会用到：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// collections/CollectionSequence.java</span><span class="token keyword">import</span> <span class="token namespace">typeinfo<span class="token punctuation">.</span>pets<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CollectionSequence</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractCollection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Pet</span><span class="token punctuation">></span></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">Pet</span><span class="token punctuation">[</span><span class="token punctuation">]</span> pets <span class="token operator">=</span> <span class="token class-name">Pets</span><span class="token punctuation">.</span><span class="token function">array</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> pets<span class="token punctuation">.</span>length<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">Iterator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Pet</span><span class="token punctuation">></span></span> <span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Iterator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Pet</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">// [1]</span>            <span class="token keyword">private</span> <span class="token keyword">int</span> index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">return</span> index <span class="token operator">&lt;</span> pets<span class="token punctuation">.</span>length<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token class-name">Pet</span> <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">return</span> pets<span class="token punctuation">[</span>index<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">// Not implemented</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">UnsupportedOperationException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">CollectionSequence</span> c <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CollectionSequence</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">InterfaceVsIterator</span><span class="token punctuation">.</span><span class="token function">display</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">InterfaceVsIterator</span><span class="token punctuation">.</span><span class="token function">display</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">/* Output:0:Rat 1:Manx 2:Cymric 3:Mutt 4:Pug 5:Cymric 6:Pug 7:Manx 0:Rat 1:Manx 2:Cymric 3:Mutt 4:Pug 5:Cymric 6:Pug 7:Manx */</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>remove()</code> 方法是一个“可选操作”。 这里可以不必实现它，如果你调用它，它将抛出异常。</p><p><strong>[1]</strong> 你可能会认为，因为 <code>iterator()</code> 返回 <strong>Iterator&lt;Pet&gt;</strong> ，匿名内部类定义可以使用菱形语法，Java可以推断出类型。但这不起作用，类型推断仍然非常有限。</p><p>这个例子表明，如果实现了 <strong>Collection</strong> ，就必须实现 <code>iterator()</code> ，并且只拿实现 <code>iterator()</code> 与继承 <strong>AbstractCollection</strong> 相比，花费的代价只有略微减少。但是，如果类已经继承了其他的类，那么就不能再继承 <strong>AbstractCollection</strong> 了。在这种情况下，要实现 <strong>Collection</strong> ，就必须实现该接口中的所有方法。此时，继承并提供创建迭代器的能力要容易得多：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// collections/NonCollectionSequence.java</span><span class="token keyword">import</span> <span class="token namespace">typeinfo<span class="token punctuation">.</span>pets<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">PetSequence</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">protected</span> <span class="token class-name">Pet</span><span class="token punctuation">[</span><span class="token punctuation">]</span> pets <span class="token operator">=</span> <span class="token class-name">Pets</span><span class="token punctuation">.</span><span class="token function">array</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">NonCollectionSequence</span> <span class="token keyword">extends</span> <span class="token class-name">PetSequence</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">public</span> <span class="token class-name">Iterator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Pet</span><span class="token punctuation">></span></span> <span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Iterator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Pet</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">private</span> <span class="token keyword">int</span> index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>      <span class="token annotation punctuation">@Override</span>      <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> index <span class="token operator">&lt;</span> pets<span class="token punctuation">.</span>length<span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      <span class="token annotation punctuation">@Override</span>      <span class="token keyword">public</span> <span class="token class-name">Pet</span> <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> pets<span class="token punctuation">[</span>index<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>      <span class="token annotation punctuation">@Override</span>      <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">// Not implemented</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">UnsupportedOperationException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">NonCollectionSequence</span> nc <span class="token operator">=</span>      <span class="token keyword">new</span> <span class="token class-name">NonCollectionSequence</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">InterfaceVsIterator</span><span class="token punctuation">.</span><span class="token function">display</span><span class="token punctuation">(</span>nc<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">/* Output:0:Rat 1:Manx 2:Cymric 3:Mutt 4:Pug 5:Cymric 6:Pug7:Manx*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>生成 <strong>Iterator</strong> 是将序列与消费该序列的方法连接在一起耦合度最小的方式，并且与实现 <strong>Collection</strong> 相比，它在序列类上所施加的约束也少得多。</p><h2 id="for-in和迭代器">for-in和迭代器</h2><p>到目前为止，for-in 语法主要用于数组，但它也适用于任何 <strong>Collection</strong> 对象。实际上在使用 <strong>ArrayList</strong> 时，已经看到了一些使用它的示例，下面是一个更通用的证明：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// collections/ForInCollections.java</span><span class="token comment">// All collections work with for-in</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ForInCollections</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> cs <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span>cs<span class="token punctuation">,</span> <span class="token string">"Take the long way home"</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> s <span class="token operator">:</span> cs<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"'"</span> <span class="token operator">+</span> s <span class="token operator">+</span> <span class="token string">"' "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">/* Output:'Take' 'the' 'long' 'way' 'home'*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>由于 <strong>cs</strong> 是一个 <strong>Collection</strong> ，因此该代码展示了使用 for-in 是所有 <strong>Collection</strong> 对象的特征。</p><p>这样做的原因是 Java 5 引入了一个名为 <strong>Iterable</strong> 的接口，该接口包含一个能够生成 <strong>Iterator</strong> 的 <code>iterator()</code> 方法。for-in 使用此 <strong>Iterable</strong> 接口来遍历序列。因此，如果创建了任何实现了 <strong>Iterable</strong> 的类，都可以将它用于 for-in 语句中：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// collections/IterableClass.java</span><span class="token comment">// Anything Iterable works with for-in</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">IterableClass</span> <span class="token keyword">implements</span> <span class="token class-name">Iterable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">protected</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> words <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">"And that is how "</span> <span class="token operator">+</span>            <span class="token string">"we know the Earth to be banana-shaped."</span>    <span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">Iterator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> <span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Iterator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">private</span> <span class="token keyword">int</span> index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">return</span> index <span class="token operator">&lt;</span> words<span class="token punctuation">.</span>length<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">return</span> words<span class="token punctuation">[</span>index<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">// Not implemented</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">UnsupportedOperationException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> s <span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name">IterableClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>s <span class="token operator">+</span> <span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">/* Output:And that is how we know the Earth to be banana-shaped.*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>iterator()</code> 返回的是实现了 <strong>Iterator&lt;String&gt;</strong> 的匿名内部类的实例，该匿名内部类可以遍历数组中的每个单词。在主方法中，可以看到 <strong>IterableClass</strong> 确实可以用于 for-in 语句。</p><p>在 Java 5 中，许多类都是 <strong>Iterable</strong> ，主要包括所有的 <strong>Collection</strong> 类（但不包括各种 <strong>Maps</strong> ）。 例如，下面的代码可以显示所有的操作系统环境变量：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// collections/EnvironmentVariables.java</span><span class="token comment">// &#123;VisuallyInspectOutput&#125;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">EnvironmentVariables</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name">Map</span><span class="token punctuation">.</span><span class="token class-name">Entry</span> entry<span class="token operator">:</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">getenv</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>entry<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">": "</span> <span class="token operator">+</span>        entry<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>TODO ：未学完。2020年10月13日</p><h2 id="小结">小结</h2><p>Java 提供了许多保存对象的方法：</p><ol><li>数组将数字索引与对象相关联。它保存类型明确的对象，因此在查找对象时不必对结果做类型转换。它可以是多维的，可以保存基本类型的数据。虽然可以在运行时创建数组，但是一旦创建数组，就无法更改数组的大小。</li><li><strong>Collection</strong> 保存单一的元素，而 <strong>Map</strong> 包含相关联的键值对。使用 Java 泛型，可以指定集合中保存的对象的类型，因此不能将错误类型的对象放入集合中，并且在从集合中获取元素时，不必进行类型转换。各种 <strong>Collection</strong> 和各种 <strong>Map</strong> 都可以在你向其中添加更多的元素时，自动调整其尺寸大小。集合不能保存基本类型，但自动装箱机制会负责执行基本类型和集合中保存的包装类型之间的双向转换。</li><li>像数组一样， <strong>List</strong> 也将数字索引与对象相关联，因此，数组和 <strong>List</strong> 都是有序集合。</li><li>如果要执行大量的随机访问，则使用 <strong>ArrayList</strong> ，如果要经常从表中间插入或删除元素，则应该使用 <strong>LinkedList</strong> 。</li><li>队列和堆栈的行为是通过 <strong>LinkedList</strong> 提供的。</li><li><strong>Map</strong> 是一种将对象（而非数字）与对象相关联的设计。 <strong>HashMap</strong> 专为快速访问而设计，而 <strong>TreeMap</strong> 保持键始终处于排序状态，所以没有 <strong>HashMap</strong> 快。 <strong>LinkedHashMap</strong> 按插入顺序保存其元素，但使用散列提供快速访问的能力。</li><li><strong>Set</strong> 不接受重复元素。 <strong>HashSet</strong> 提供最快的查询速度，而 <strong>TreeSet</strong> 保持元素处于排序状态。 <strong>LinkedHashSet</strong> 按插入顺序保存其元素，但使用散列提供快速访问的能力。</li><li>不要在新代码中使用遗留类 <strong>Vector</strong> ，<strong>Hashtable</strong> 和 <strong>Stack</strong> 。</li></ol><p>Java 集合框架简图，黄色为接口，绿色为抽象类，蓝色为具体类。虚线箭头表示实现关系，实线箭头表示继承关系。</p><p>![collection](E:\OneDrive - lanqilu\我的图片库\blogimg\Java持有对象\collection.png)![map](E:\OneDrive - lanqilu\我的图片库\blogimg\Java持有对象\map.png)</p><h3 id="简单集合分类">简单集合分类</h3><p>可以看到，实际上只有四个基本的集合组件： <strong>Map</strong> ， <strong>List</strong> ， <strong>Set</strong> 和 <strong>Queue</strong> ，它们各有两到三个实现版本（<strong>Queue</strong> 的 <strong>java.util.concurrent</strong> 实现未包含在此图中）。最常使用的集合用黑色粗线线框表示。</p><p>虚线框表示接口，实线框表示普通的（具体的）类。带有空心箭头的虚线表示特定的类实现了一个接口。实心箭头表示某个类可以生成箭头指向的类的对象。例如，任何 <strong>Collection</strong> 都可以生成 <strong>Iterator</strong> ， <strong>List</strong> 可以生成 <strong>ListIterator</strong> （也能生成普通的 <strong>Iterator</strong> ，因为 <strong>List</strong> 继承自 <strong>Collection</strong> ）。</p><p>下面的示例展示了各种不同的类在方法上的差异。程序的输出还展示了在每个类或接口中所实现的接口：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// collections/CollectionDifferences.java</span><span class="token keyword">import</span> <span class="token namespace">onjava<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CollectionDifferences</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">CollectionMethodDifferences</span><span class="token punctuation">.</span><span class="token function">main</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>除 <strong>TreeSet</strong> 之外的所有 <strong>Set</strong> 都具有与 <strong>Collection</strong> 完全相同的接口。<strong>List</strong> 和 <strong>Collection</strong> 存在着明显的不同，尽管 <strong>List</strong> 所要求的方法都在 <strong>Collection</strong> 中。另一方面，在 <strong>Queue</strong> 接口中的方法是独立的，在创建具有 <strong>Queue</strong> 功能的实现时，不需要使用 <strong>Collection</strong> 方法。最后， <strong>Map</strong> 和 <strong>Collection</strong> 之间唯一的交集是 <strong>Map</strong> 可以使用 <code>entrySet()</code> 和 <code>values()</code> 方法来产生 <strong>Collection</strong> 。</p><p>请注意，标记接口 <strong>java.util.RandomAccess</strong> 附加到了 <strong>ArrayList</strong> 上，但不附加到 <strong>LinkedList</strong> 上。这为根据特定 <strong>List</strong> 动态改变其行为的算法提供了信息。</p><p>从面向对象的继承层次结构来看，这种组织结构确实有些奇怪。但是，当了解了 <strong>java.util</strong> 中更多的有关集合的内容后，就会发现除了继承结构有点奇怪外，还有更多的问题。集合类库一直以来都是设计难题——解决这些问题涉及到要去满足经常彼此之间互为牵制的各方面需求。所以要做好准备，在各处做出妥协。</p><p>尽管存在这些问题，但 Java 集合仍是在日常工作中使用的基本工具，它可以使程序更简洁、更强大、更有效。你可能需要一段时间才能熟悉集合类库的某些方面，但我想你很快就会找到自己的路子，来获得和使用这个类库中的类。</p>]]></content>
      
      
      <categories>
          
          <category> Java中级 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java类型系统</title>
      <link href="2020/08/08/Java-03-%E7%B1%BB%E5%9E%8B%E7%B3%BB%E7%BB%9F/"/>
      <url>2020/08/08/Java-03-%E7%B1%BB%E5%9E%8B%E7%B3%BB%E7%BB%9F/</url>
      
        <content type="html"><![CDATA[<p>本文以基于类的面向对象编程为基础，介绍高效使用 Java 静态类型系统所需知道的其他概念。</p><hr><p>静态类型语言的变量类型是确定的，如果把不兼容类型的值赋给变量，会导致编译时错误。Java 是一种静态类型语言。只在运行时检查类型兼容性的语言叫作动态类型语言，JavaScript 便是一种动态类型语言。</p><p>Java 的类型系统不仅涉及类和基本类型，还涉及与类的基本概念相关的其他引用类型，但这些引用类型有些不同，javac 或 JVM 往往会使用特殊的方式处理。</p><p>我们已经介绍了数组和类，它们是使用最广泛的两种 Java 引用类型。本章先介绍另一种重要的引用类型——接口。然后介绍 Java 的泛型，泛型在 Java 的类型系统中扮演着重要角色。掌握这些知识后，我们再介绍 Java 中编译时和运行时类型之间的区别。</p><p>为了完整介绍 Java 的引用类型，我们要介绍两种特殊的类和接口——枚举和注解。本章最后介绍嵌套类型和 Java 8 引入的 lambda 表达式。</p><h2 id="接口">接口</h2><p>一个 Java 类只能继承一个类。这对我们要编写的面向对象程序来说是个相当严格的限制。Java 的设计者知道这一点，但他们也是为了确保Java 实现面向对象编程的方式比其他语言（例如 C++）简单。他们选择的方式是提出接口这个概念。和类一样，接口定义一种新的引用类型。如“接口”这个名称所示，接口的作用只是描绘 API，因此，接口提供类型的描述信息，以及实现这个 API 的类应该提供的方法（和签名）。</p><p>一般来说，Java 的接口不为它描述的方法提供实现代码。这些方法是强制要实现的——想实现接口的类必须实现这些方法。</p><p>不过，接口可能想把 API 中的某些方法标记为可选，如果实现接口的类不想实现就不用实现。这种机制通过 <code>default</code> 关键字实现，接口必须为可选的方法提供默认实现，未实现这些方法的类会使用默认实现。</p><blockquote><p>接口中的可选方法是 Java 8 的新功能，之前的版本中没有。</p></blockquote><p>接口不能直接实例化，也不能创建这种接口类型的成员。接口必须通过类实现，而且类要提供所需的方法主体。这个类的实例既属于这个类定义的类型，也属于这个接口定义的类型。不属于同一个类或超类的对象，通过实现同一个接口，也能属于同一种类型。</p><h3 id="定义接口">定义接口</h3><p>定义接口的方式和定义类差不多，不过所有（非默认的）方法都是抽象方法，而且关键字<code>class</code> 要换成 <code>interface</code>。例如，下述代码定义了一个名为 <code>Centered</code> 的接口：</p><pre class="line-numbers language-Java、" data-language="Java、"><code class="language-Java、">interface Centered &#123;   void setCenter(double x, double y);   double getCenterX();   double getCenterY(); &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>接口的成员有些限制：</p><ul><li>接口中所有强制方法都隐式使用 <code>abstract</code> 声明，不能有方法主体，要使用分号。可以使用 <code>abstract</code> 修饰符，但一般习惯省略。</li><li>接口定义公开的 API。接口中的所有成员都隐式使用 <code>public</code> 声明，而且习惯省略不必要的 <code>public</code> 修饰符。如果在接口中使用 <code>protected</code> 或 <code>private</code> 定义方法，会导致编译时错误。</li><li>接口不能定义任何实例字段。字段是实现细节，而接口是规格不是实现。在接口中只能定义同时使用 <code>static</code> 和 <code>final</code> 声明的常量。</li><li>接口不能实例化，因此不定义构造方法。</li><li>接口中可以包含嵌套类型。嵌套类型隐式使用 <code>public</code> 和 <code>static</code> 声明。</li><li>从 Java 8 开始，接口中可以包含静态方法。</li></ul><h3 id="扩展接口">扩展接口</h3><p>接口可以扩展其他接口，而且和类的定义一样，接口的定义可以包含一个 <code>extends</code> 子句。接口扩展另一个接口时，会继承父接口中的所有方法和常量，而且可以定义新方法和常量。不过，和类不同的是，接口的 <code>extends</code> 子句可以包含<strong>多个</strong>父接口。例如，下述接口扩展了其他接口：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">interface</span> <span class="token class-name">Positionable</span> <span class="token keyword">extends</span> <span class="token class-name">Centered</span> <span class="token punctuation">&#123;</span>   <span class="token keyword">void</span> <span class="token function">setUpperRightCorner</span><span class="token punctuation">(</span><span class="token keyword">double</span> x<span class="token punctuation">,</span> <span class="token keyword">double</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">double</span> <span class="token function">getUpperRightX</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">double</span> <span class="token function">getUpperRightY</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span> <span class="token keyword">interface</span> <span class="token class-name">Transformable</span> <span class="token keyword">extends</span> <span class="token class-name">Scalable</span><span class="token punctuation">,</span> <span class="token class-name">Translatable</span><span class="token punctuation">,</span> <span class="token class-name">Rotatable</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span> <span class="token keyword">interface</span> <span class="token class-name">SuperShape</span> <span class="token keyword">extends</span> <span class="token class-name">Positionable</span><span class="token punctuation">,</span> <span class="token class-name">Transformable</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>扩展多个接口的接口，会继承每个父接口中的所有方法和常量，而且可以定义属于自己的方法和常量。实现这个接口的类必须实现这个接口直接定义的抽象方法，以及从所有父接口中继承的全部抽象方法。</p><h3 id="实现接口">实现接口</h3><p>类使用 <code>extends</code> 指定超类，类似地，类使用 <code>implements</code> 列出它支持的一个或多个接口。<code>implements</code> 是一个 Java 关键字，可以出现在类声明中，但要放在 <code>extends</code> 子句后面。<code>implements</code> 关键字后面是这个类要实现的一组接口，接口之间使用逗号分隔。</p><p>类在 <code>implements</code> 子句中声明接口时，表明这个类要为接口中的每个强制方法提供实现（即主体）。如果实现接口的类没有为接口中的每个强制方法提供实现，那么这个类从接口中继承未实现的抽象方法，而且这个类本身必须使用 <code>abstract</code> 声明。如果类实现多个接口，必须实现每个接口中的所有强制方法（否则这个类要使用 <code>abstract</code> 声明）。</p><p>下述代码展示了如何定义 <code>CenteredRectangle</code> 类，这个类扩展第定义的 <code>Rectangle</code> 类，而且实现 <code>Centered</code> 接口：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CenteredRectangle</span> <span class="token keyword">extends</span> <span class="token class-name">Rectangle</span> <span class="token keyword">implements</span> <span class="token class-name">Centered</span> <span class="token punctuation">&#123;</span>   <span class="token comment">// 新实例字段 </span>  <span class="token keyword">private</span> <span class="token keyword">double</span> cx<span class="token punctuation">,</span> cy<span class="token punctuation">;</span>    <span class="token comment">// 构造方法 </span>  <span class="token keyword">public</span> <span class="token class-name">CenteredRectangle</span><span class="token punctuation">(</span><span class="token keyword">double</span> cx<span class="token punctuation">,</span> <span class="token keyword">double</span> cy<span class="token punctuation">,</span> <span class="token keyword">double</span> w<span class="token punctuation">,</span> <span class="token keyword">double</span> h<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>     <span class="token keyword">super</span><span class="token punctuation">(</span>w<span class="token punctuation">,</span> h<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">this</span><span class="token punctuation">.</span>cx <span class="token operator">=</span> cx<span class="token punctuation">;</span>     <span class="token keyword">this</span><span class="token punctuation">.</span>cy <span class="token operator">=</span> cy<span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span>    <span class="token comment">// 继承了Rectangle类中的所有方法 </span>  <span class="token comment">// 但要为Centered接口中的所有方法提供实现 </span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setCenter</span><span class="token punctuation">(</span><span class="token keyword">double</span> x<span class="token punctuation">,</span> <span class="token keyword">double</span> y<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> cx <span class="token operator">=</span> x<span class="token punctuation">;</span> cy <span class="token operator">=</span> y<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>   <span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">getCenterX</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> cx<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>   <span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">getCenterY</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> cy<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>假设我们按照 <code>CenteredRectangle</code> 类的实现方式实现了 <code>CenteredCircle</code> 和 <code>CenteredSquare</code>类。每个类都扩展 <code>Shape</code> 类，所以如前所示，这些类的实例都可以当成 <code>Shape</code> 类的实例。因为每个类都实现了 <code>Centered</code> 接口，所以这些实例还可以当成 <code>Centered</code> 类型的实例。下述代码演示了对象既可以作为类类型的成员，也可以作为接口类型的成员：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Shape</span><span class="token punctuation">[</span><span class="token punctuation">]</span> shapes <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Shape</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>     <span class="token comment">// 创建一个数组，保存形状对象 </span> <span class="token comment">// 创建一些Centered类型的形状，存储在这个Shape[]类型的数组中 </span><span class="token comment">// 不用校正，因为都是放大转换 </span>shapes<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CenteredCircle</span><span class="token punctuation">(</span><span class="token number">1.0</span><span class="token punctuation">,</span> <span class="token number">1.0</span><span class="token punctuation">,</span> <span class="token number">1.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> shapes<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CenteredSquare</span><span class="token punctuation">(</span><span class="token number">2.5</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span> shapes<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CenteredRectangle</span><span class="token punctuation">(</span><span class="token number">2.3</span><span class="token punctuation">,</span> <span class="token number">4.5</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 计算这些形状的平均面积 </span><span class="token comment">// 以及到原点的平均距离 </span><span class="token keyword">double</span> totalArea <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token keyword">double</span> totalDistance <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> shapes<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>   totalArea <span class="token operator">+=</span> shapes<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">area</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// 计算这些形状的面积 </span>   <span class="token comment">// 注意，一般来说，使用instanceof判断对象的运行时类型经常表明设计有问题 </span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>shapes<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token keyword">instanceof</span> <span class="token class-name">Centered</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">// 形状属于Centered类型 </span>    <span class="token comment">// 注意，把Shape类型转换成Centered类型要校正 </span>    <span class="token comment">// （不过，把CenteredSquare类型转换成Centered类型不用校正） </span>    <span class="token class-name">Centered</span> c <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Centered</span><span class="token punctuation">)</span> shapes<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>      <span class="token keyword">double</span> cx <span class="token operator">=</span> c<span class="token punctuation">.</span><span class="token function">getCenterX</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 获取中心点的坐标 </span>    <span class="token keyword">double</span> cy <span class="token operator">=</span> c<span class="token punctuation">.</span><span class="token function">getCenterY</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 计算到原点的距离 </span>    totalDistance <span class="token operator">+=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">sqrt</span><span class="token punctuation">(</span>cx<span class="token operator">*</span>cx <span class="token operator">+</span> cy<span class="token operator">*</span>cy<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Average area: "</span> <span class="token operator">+</span> totalArea<span class="token operator">/</span>shapes<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Average distance: "</span> <span class="token operator">+</span> totalDistance<span class="token operator">/</span>shapes<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>在 Java 中，接口和类一样，也是数据类型。如果一个类实现了一个接口，那么这个类的实例可以赋值给这个接口类型的变量。</p></blockquote><p>看过这个示例之后，别错误地认为必须先把 <code>CenteredRectangle</code> 对象赋值给 <code>Centered</code> 类型的变量才能调用 <code>setCenter()</code> 方法，或者要先赋值给 <code>Shape</code> 类型的变量才能调用 <code>area()</code>方法。<code>CenteredRectangle</code> 类定义了 <code>setCenter()</code> 方法，而且从超类 <code>Rectangle</code> 中继承了<code>area()</code> 方法，所以始终可以调用这两个方法。</p><h3 id="实现多个接口">实现多个接口</h3><p>假设我们不仅想通过中心点摆放形状对象，也想通过右上角摆放形状对象，而且还想放大和缩小形状。还记得吗？虽然一个类只能扩展一个超类，但可以实现任意多个接口。假设我们已经定义好了合适的 <code>UpperRightCornered</code> 和 <code>Scalable</code> 接口，那么可以按照下述方式声明类：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SuperDuperSquare</span> <span class="token keyword">extends</span> <span class="token class-name">Shape</span>   <span class="token keyword">implements</span> <span class="token class-name">Centered</span><span class="token punctuation">,</span> <span class="token class-name">UpperRightCornered</span><span class="token punctuation">,</span> <span class="token class-name">Scalable</span> <span class="token punctuation">&#123;</span>   <span class="token comment">// 类的成员省略了 </span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>一个类实现多个接口只是表明这个类要实现所有接口中的全部抽象方法（即强制方法）。</p><h3 id="默认方法">默认方法</h3><p>Java 8 出现后，接口中的方法可以包含实现了。本节介绍这种方法——在接口描述的 API中通过可选的方法表示，一般叫作默认方法。首先说明为什么需要这种默认机制。</p><h4 id="向后兼容性">向后兼容性</h4><p>Java 平台始终关注向后兼容性。这意味着，为前一版平台编写（或者已经编译）的代码在最新版平台中必须能继续使用。这个原则让开发团队坚信，升级 JDK 或 JRE 后不会破坏之前能正常运行的应用。</p><p>向后兼容性是 Java 平台的一大优势，但是为此，Java 平台有诸多约束。其中一个约束是，新发布的接口不能添加新的强制方法。</p><p>例如，假设我们要升级 <code>Positionable</code> 接口，添加获取和设定左下角顶点的功能：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Positionable</span> <span class="token keyword">extends</span> <span class="token class-name">Centered</span> <span class="token punctuation">&#123;</span>   <span class="token keyword">void</span> <span class="token function">setUpperRightCorner</span><span class="token punctuation">(</span><span class="token keyword">double</span> x<span class="token punctuation">,</span> <span class="token keyword">double</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">double</span> <span class="token function">getUpperRightX</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">double</span> <span class="token function">getUpperRightY</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">void</span> <span class="token function">setLowerLeftCorner</span><span class="token punctuation">(</span><span class="token keyword">double</span> x<span class="token punctuation">,</span> <span class="token keyword">double</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">double</span> <span class="token function">getLowerLeftX</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">double</span> <span class="token function">getLowerLeftY</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>重新定义接口之后，如果尝试在为旧接口编写的代码中使用这个新接口，不会成功，因为现有的代码中没有 <code>setLowerLeftCorner()</code>、<code>getLowerLeftX()</code> 和 <code>getLowerLeftY()</code> 这三个强制方法。</p><blockquote><p>在你的代码中可以轻易地看到效果。编译一个依赖接口的类文件，在接口中添加一个新的强制方法，然后使用新版接口和旧的类文件尝试运行程序。你会看到程序崩溃，抛出 <code>NoClassDefError</code> 异常。</p></blockquote><p>Java 8 的设计者注意到了这个缺陷，因为设计者的目标之一是升级 Java 核心中的集合库，引入使用 lambda 表达式的方法。</p><p>若想解决这个问题，需要一种新机制。这种机制必须要允许向接口中添加可选的新方法，而不破坏向后兼容性。</p><h4 id="实现默认方法">实现默认方法</h4><p>在接口中添加新方法而不破坏向后兼容性，这需要为接口的旧实现提供一些新实现，以便接口能继续使用。这个机制是默认方法，在 JDK 8 中首次添加到 Java 平台。</p><blockquote><p>默认方法（有时也叫可选方法）可以添加到任何接口中。默认方法必须包含实现，即默认实现，写在接口定义中。</p></blockquote><p>默认方法的基本行为如下：</p><ul><li>实现接口的类可以（但不是必须）实现默认方法；</li><li>如果实现接口的类实现了默认方法，那么使用这个类中的实现；</li><li>如果找不到其他实现，就使用默认实现。</li></ul><p><code>sort()</code> 方法是默认方法的一例，JDK 8 把它添加到 <code>java.util.List</code> 接口中，定义如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">interface</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">></span></span> <span class="token punctuation">&#123;</span>   <span class="token comment">// 省略了其他成员 </span>   <span class="token keyword">public</span> <span class="token keyword">default</span> <span class="token keyword">void</span> <span class="token function">sort</span><span class="token punctuation">(</span><span class="token class-name">Comparator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> <span class="token class-name">E</span><span class="token punctuation">></span></span> c<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>     <span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">></span></span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>因此，从 Java 8 开始，实现 List 接口的对象都有一个名为 <code>sort()</code> 的实例方法，使用合适的 <code>Comparator</code> 排序列表。因为返回类型是 <code>void</code>，所以我们猜测这是就地排序，而事实确实如此。</p><h3 id="标记接口">标记接口</h3><p>有时，定义全空的接口很有用。类实现这种接口时只需在 <code>implements</code> 子句中列出这个接口，而不用实现任何方法。此时，这个类的任何实例都是这个接口的有效实例。Java 代码可以使用 <code>instanceof</code> 运算符检查实例是否属于这个接口，因此这种技术是为对象提供额外信息的有力方式。</p><p><code>java.io.Serializable</code> 接口就是一种标记接口。实现 <code>Serializable</code> 接口的类告诉<code>ObjectOutputStream</code> 类，这个类的实例可以安全地序列化。<code>java.util.RandomAccess</code> 也是标记接口：<code>java.util.List</code> 接口实现了这个接口，表明这个接口能快速随机访问列表中的元素。例如，<code>ArrayList</code> 类实现了 <code>RandomAccess</code> 接口，而 <code>LinkedList</code> 类没实现。注重随机访问操作性能的算法可以使用下述方式测试 <code>RandomAccess</code>：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 排序任意长度的列表元素之前，我们或许想确认列表是否支持快速随机访问 </span><span class="token comment">// 如果不支持，先创建一个支持随机访问的副本再排序，速度可能更快 </span><span class="token comment">// 注意，使用java.util.Collections.sort()时不必这么做 </span><span class="token class-name">List</span> l <span class="token operator">=</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">;</span> <span class="token comment">// 随意一个列表 </span><span class="token keyword">if</span> <span class="token punctuation">(</span>l<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">2</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token punctuation">(</span>l <span class="token keyword">instanceof</span> <span class="token class-name">RandomAccess</span><span class="token punctuation">)</span><span class="token punctuation">)</span> l <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span>l<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">sortListInPlace</span><span class="token punctuation">(</span>l<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>后面会看到，Java 的类型系统和类型的名称联系紧密，这种方式叫作名义类型（nominal typing）。标记接口是个很好的例子，因为它除了名称什么都没有。</p><h2 id="Java泛型">Java泛型</h2><p>Java 平台的一大优势是它提供的标准库。标准库提供了大量有用的功能，特别是实现了健壮的通用数据结构。这些实现使用起来相当简单，而且文档编写良好。虽然这些库一直很有用，但在早期版本中有相当大的不足——数据结构（经常叫作容器）完全隐藏了存储其中的数据类型。</p><blockquote><p>数据隐藏和封装是面向对象编程的重要原则，但在这种情况下，容器的不透明会为开发者带来很多问题。</p></blockquote><h3 id="介绍泛型">介绍泛型</h3><p>如果想构建一个由 Shape 实例组成的集合，可以把这个集合保存在一个 List 对象中，如下所示：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">List</span> shapes <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 创建一个List对象，保存形状 </span> <span class="token comment">// 指定中心点，创建一些形状，保存在这个列表中 </span>shapes<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">CenteredCircle</span><span class="token punctuation">(</span><span class="token number">1.0</span><span class="token punctuation">,</span> <span class="token number">1.0</span><span class="token punctuation">,</span> <span class="token number">1.0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 这是合法的Java代码，但不是好的设计方式 </span>shapes<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">CenteredSquare</span><span class="token punctuation">(</span><span class="token number">2.5</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// List.get()返回Object对象，所以要想得到CenteredCircle对象，必须校正 </span><span class="token class-name">CenteredCircle</span> c <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">CentredCircle</span><span class="token punctuation">)</span>shapes<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 下面这行代码会导致运行时失败 </span><span class="token class-name">CenteredCircle</span> c <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">CentredCircle</span><span class="token punctuation">)</span>shapes<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上述代码有个问题，为了取回有用的形状对象形式，必须校正，因为 List 不知道其中的对象是什么类型。不仅如此，其实可以把不同类型的对象放在同一个容器中，一切都能正常运行，但是如果做了不合法的校正，程序就会崩溃。</p><p>我们真正需要的是一种知道所含元素类型的 List。这样，如果把不合法的参数传给 List 的方法，javac 就能检测到，导致编译出错，而不用等到运行时才发现问题。</p><p>为了解决这个问题，Java 提供了一种句法，指明某种类型是一个容器，这个容器中保存着其他引用类型的实例。容器中保存的负载类型（payload type）在尖括号中指定：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 创建一个由CenteredCircle对象组成的List </span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">CenteredCircle</span><span class="token punctuation">></span></span> shapes <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">CenteredCircle</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 指定中心点，创建一些形状，保存在这个列表中 </span>shapes<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">CenteredCircle</span><span class="token punctuation">(</span><span class="token number">1.0</span><span class="token punctuation">,</span> <span class="token number">1.0</span><span class="token punctuation">,</span> <span class="token number">1.0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 下面这行代码会导致编译出错 </span>shapes<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">CenteredSquare</span><span class="token punctuation">(</span><span class="token number">2.5</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// List&lt;CenteredCircle>.get()返回一个CenteredCircle对象，无需校正 </span><span class="token class-name">CenteredCircle</span> c <span class="token operator">=</span> shapes<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这种句法能让编译器捕获大量不安全的代码，根本不能靠近运行时。当然，这正是静态类型系统的关键所在——使用编译时信息协助排除大量运行时问题。</p><p>容器类型一般叫作泛型（generic type），使用下述方式声明：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">interface</span> <span class="token class-name">Box</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> <span class="token punctuation">&#123;</span>   <span class="token keyword">void</span> <span class="token function">box</span><span class="token punctuation">(</span><span class="token class-name">T</span> t<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token class-name">T</span> <span class="token function">unbox</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>上述代码表明，<code>Box</code> 接口是通用结构，可以保存任意类型的负载。这不是一个完整的接口，更像是一系列接口的通用描述，每个接口对应的类型都能用在 <code>T</code> 的位置上。</p><h3 id="泛型和类型参数">泛型和类型参数</h3><p>我们已经知道如何使用泛型增强程序的安全性——使用编译时信息避免简单的类型错误。本节深入介绍泛型的特性。</p><p><code>&lt;T&gt;</code> 句法有个专门的名称——类型参数（type parameter）。因此，泛型还有一个名称——参数化类型（parameterized type）。这表明，容器类型（例如 <code>List</code>）由其他类型（负载类型）参数化。把类型写为 <code>Map&lt;String, Integer&gt;</code> 时，我们就为类型参数指定了具体的值。</p><p>定义有参数的类型时，要使用一种不对类型参数做任何假设的方式指定具体的值。所以<code>List</code> 类型使用通用的方式 <code>List&lt;E&gt;</code> 声明，而且自始至终都使用类型参数 <code>E</code> 作占位符，代表程序员使用 <code>List</code> 数据结构时负载的真实类型。</p><p>类型参数可以在方法的签名和主体中使用，就像是真正的类型一样，例如：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">interface</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">></span></span> <span class="token keyword">extends</span> <span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">></span></span> <span class="token punctuation">&#123;</span>   <span class="token keyword">boolean</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">E</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token class-name">E</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// 其他方法省略了 </span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意，类型参数 E 既可以作为返回类型的参数，也可以作为方法参数类型的参数。我们不假设负载类型有任何具体的特性，只对一致性做了基本假设，即存入的类型和后来取回的类型一致。</p><h3 id="菱形句法">菱形句法</h3><p>创建泛型的实例时，赋值语句的右侧会重复类型参数的值。一般情况下，这个信息是不必要的，因为编译器能推导出类型参数的值。在 Java 的现代版本中，可以使用菱形句法省略重复的类型值。</p><p>下面通过一个示例说明如何使用菱形句法，这个例子改自之前的示例：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 使用菱形句法创建一个由CenteredCircle对象组成的List </span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">CenteredCircle</span><span class="token punctuation">></span></span> shapes <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>对这种冗长的赋值语句来说，这是个小改进，能少输入几个字符。本章末尾介绍 lambda 表达式时会再次讨论类型推导。</p><h3 id="类型擦除">类型擦除</h3><p>Java 平台十分看重向后兼容性。Java 5 添加的泛型又是一个会导致向后兼容性问题的新语言特性。</p><p>问题的关键是，如何让类型系统既能使用旧的非泛型集合类又能使用新的泛型集合类。设计者选择的解决方式是使用校正：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">List</span> someThings <span class="token operator">=</span> <span class="token function">getSomeThings</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 这种校正不安全，但我们知道someThings的内容确实是字符串 </span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> myStrings <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span><span class="token punctuation">)</span>someThings<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>上述代码表明，作为类型，<code>List</code> 和 <code>List&lt;String&gt;</code> 是兼容的，至少在某种程度上是兼容的。Java 通过类型擦除实现这种兼容性。这表明，泛型的类型参数只在编译时可见——javac会去掉类型参数，而且在字节码中不体现出来。</p><p>非泛型的 List 一般叫作原始类型（raw type）。就算现在有泛型了，Java 也完全能处理类型的原始形式。不过，这么做几乎就表明代码的质量不高。</p><p>类型擦除机制扩大了 javac 和 JVM 使用的类型系统之间的区别。</p><p>类型擦除还能禁止使用某些其他定义方式，如果没有这个机制，代码看起来是合法的。在下述代码中，我们想使用两个稍微不同的数据结构计算订单数量：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 不会编译 </span><span class="token keyword">interface</span> <span class="token class-name">OrderCounter</span> <span class="token punctuation">&#123;</span>   <span class="token comment">// 把名称映射到由订单号组成的列表上 </span>  <span class="token keyword">int</span> <span class="token function">totalOrders</span><span class="token punctuation">(</span><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span><span class="token punctuation">></span></span> orders<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 把名称映射到目前已下订单的总数上 </span>  <span class="token keyword">int</span> <span class="token function">totalOrders</span><span class="token punctuation">(</span><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">></span></span> orders<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="枚举和注解">枚举和注解</h2><p>Java 有两种特殊形式的类和接口，在类型系统中扮演着特定的角色。这两种类型是枚举类型（enumerated type）和注解类型（annotation type），一般直接称为枚举和注解。</p><h3 id="枚举">枚举</h3><p>枚举是类的变种，功能有限，而且允许使用的值很少。</p><blockquote><p>类的对象只有有限个，确定的。如果枚举只有一个对象，则可以作为一种单例模式的实现方式。</p></blockquote><p>例如，假设我们想定义一个类型，表示三原色红绿蓝，而且希望这个类型只有这三个可以使用的值。我们可以使用 <code>enum</code> 关键字定义这个类型：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">enum</span> <span class="token class-name">PrimaryColor</span> <span class="token punctuation">&#123;</span>   <span class="token comment">// 实例列表末尾的分号是可选的 </span>  RED<span class="token punctuation">,</span> GREEN<span class="token punctuation">,</span> BLUE <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>PrimaryColor 类型的实例可以按照静态字段的方式引用：<code>PrimaryColor.RED</code>、<code>PrimaryColor.GREEN</code> 和 <code>PrimaryColor.BLUE</code>。</p><p>例如，假设我们要定义一个枚举，包含前几个正多边形（等边等角的形状），而且想为这些形状指定一些属性（在方法中指定）。我们可以使用接收一个参数的枚举实现这个需求，如下所示：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">enum</span> <span class="token class-name">RegularPolygon</span> <span class="token punctuation">&#123;</span>   <span class="token comment">// 有参数的枚举必须使用分号 </span>  <span class="token function">TRIANGLE</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">SQUARE</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">PENTAGON</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">HEXAGON</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Shape</span> shape<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">Shape</span> <span class="token function">getShape</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>     <span class="token keyword">return</span> shape<span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span>    <span class="token keyword">private</span> <span class="token class-name">RegularPolygon</span><span class="token punctuation">(</span><span class="token keyword">int</span> sides<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>     <span class="token keyword">switch</span> <span class="token punctuation">(</span>sides<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>       <span class="token keyword">case</span> <span class="token number">3</span><span class="token operator">:</span>         <span class="token comment">// 假设这些形状的构造方法接收的参数是边长和角度 </span>        shape <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Triangle</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">60</span><span class="token punctuation">,</span><span class="token number">60</span><span class="token punctuation">,</span><span class="token number">60</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">break</span><span class="token punctuation">;</span>       <span class="token keyword">case</span> <span class="token number">4</span><span class="token operator">:</span>         shape <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Rectangle</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">break</span><span class="token punctuation">;</span>       <span class="token keyword">case</span> <span class="token number">5</span><span class="token operator">:</span>         shape <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Pentagon</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">108</span><span class="token punctuation">,</span><span class="token number">108</span><span class="token punctuation">,</span><span class="token number">108</span><span class="token punctuation">,</span><span class="token number">108</span><span class="token punctuation">,</span><span class="token number">108</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">break</span><span class="token punctuation">;</span>       <span class="token keyword">case</span> <span class="token number">6</span><span class="token operator">:</span>         shape <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Hexagon</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">120</span><span class="token punctuation">,</span><span class="token number">120</span><span class="token punctuation">,</span><span class="token number">120</span><span class="token punctuation">,</span><span class="token number">120</span><span class="token punctuation">,</span><span class="token number">120</span><span class="token punctuation">,</span><span class="token number">120</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">break</span><span class="token punctuation">;</span>     <span class="token punctuation">&#125;</span>   <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>参数（在这个例子中只有一个参数）传入构造方法，创建单个枚举实例。因为枚举实例由Java 运行时创建，而且在外部不能实例化，所以把构造方法声明为私有方法。</p><p>枚举有些特殊的特性：</p><ul><li>都（隐式）扩展 java.lang.Enum 类；</li><li>不能泛型化；</li><li>可以实现接口；</li><li>不能被扩展；</li><li>如果枚举中的所有值都有实现主体，那么只能定义为抽象方法；</li><li>只能有一个私有（或使用默认访问权限）的构造方法。</li></ul><blockquote><p>当需要定义一组常量时，强烈建议使用枚举类</p></blockquote><h3 id="Enum类的主要方法">Enum类的主要方法</h3><p><code>values()</code>方法：返回枚举类型的对象数组。可以遍历所有的枚举值。</p><p><code>valueOf(String objName)</code>：把一个字符串转换为对应的枚举对象</p><h3 id="注解">注解</h3><p>注解是一种特殊的接口。如名称所示，其作用是注解 Java 程序的某个部分。</p><p>注解能为编译器和集成开发环境（Integrated Development Environment，IDE）提供有用的提示。如果开发者把方法的名称拼写错了，而这个方法本来是要覆盖超类的方法，那么，在这个名称拼错的方法上使用 @Override 注解，可以提醒编译器什么地方出错了。</p><p>注解不能改变程序的语义，只能提供可选的元信息。严格说来，这意味着注解不能影响程序的执行，只能为编译器和其他预执行阶段提供信息。</p><p>Java 平 台 在 java.lang 中 定 义 了 为 数 不 多 的 基 本 注 解。 一 开 始 只 支 持 <code>@Override</code>、 <code>@Deprecated</code> 和 <code>@SuppressWarnings</code>，这三个注解的作用分别是：注明方法是覆盖的，注明方法废弃了，以及静默编译器生成的警告。</p><p>后来，Java 7 增加了 <code>@SafeVarargs</code>（为变长参数方法提供增强的警告静默功能），Java 8 增加了 <code>@FunctionalInterface</code>。<code>@FunctionalInterface</code> 表示接口可以用作 lambda 表达式的目标。这是个很有用的标记注解，但不是必须使用的，后文会介绍。</p><p>和普通的接口相比，注解有些特殊的特性：</p><ul><li>都（隐式）扩展 <code>java.lang.annotation.Annotation</code> 接口；</li><li>不能泛型化；</li><li>不能扩展其他接口；</li><li>只能定义没有参数的方法；</li><li>不能定义会抛出异常的方法；</li><li>方法的返回类型有限制；</li><li>方法可以有一个默认返回值。</li></ul><h2 id="嵌套类型">嵌套类型</h2><h2 id="lambda表达式">lambda表达式</h2>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis</title>
      <link href="2020/07/10/Redis/"/>
      <url>2020/07/10/Redis/</url>
      
        <content type="html"><![CDATA[<p>Redis学习记录</p><hr><p>Redis 是当前互联网世界最为流行的 NoSQL ( Not Only SQL) 。 NoSQL 在互联网系统中的作用很大，因为它可以在很大程度上提高互联网系统的性能 。它具备一定持久层的功能，也可以作为一种缓存工具。对于 NoSQL 数据库而言，作为持久层，它存储的数据是半结构化的，这就意味着计算机在读入内存中有更少的规则，读入速度更快。对于那些结构化、多范式规则的数据库系统而言 ， 它更具性能优势。作为缓存，它可以支持大数据存入内存中，只要命中率高，它就能快速响应，因为在内存中的数据读／写 比数据库读／写磁盘的速度快几十到上百倍。</p><p>当前 Redis 已经成为了主要的 NoSQL 工具，其原因如下：</p><ul><li><p>响应快速：Redis 响应非常快，每秒可以执行大约 110 000 个写入操作 ，或者 81 000 个读操作，其速度远超数据库 。 如果存入一些常用的数据，就能有效提高系统的性能。</p></li><li><p>支持 6 种数据类型：它们是字符串 、哈希结构、列表、集合、可排序集合和基数 。比如对于字符串可以存入一些 Java 基础数据类型，哈希可以存储对象，列表可以存储 List 对象等 。 这使得在应用中很容易根据自己的需要选择存储的数据类型，方便开发。对于 Redis 而言，虽然只有 6 种数据类型 ，但是有两大好处 ：一方面可以满足存储各种数据结构体的需要；另外一方面数据类型少，使得规则就少，需要的判断和逻辑就少，这样读／写的速度就更快。</p></li><li><p>操作都是原子的：所有Redis 的操作都是原子的，从而确保当两个客户同时访问Redis 服务器时，得到的是更新后的值（最新值）。在需要高并发的场合可以考虑、使用 Redis 的事务，处理一些需要锁的业务。</p><blockquote><p>原子操作是不可分割的，在执行完毕之前不会被任何其它任务或事件中断。</p></blockquote></li><li><p>MultiUtility工具：Redis 可以在如缓存、消息传递队列中使用（ Redis 支持“发布＋订阅”的消息模式），在应用程序如 Web 应用程序会话、网站页面点击数等任何短暂的数据中使用。</p></li></ul><p>一方面，使用 NoSQL 从数据库中读取数据进行缓存，就可以从内存中读取数据了 ，而不像数据库一样读磁盘。现实是读操作远比写操作要多得多，所以缓存很多常用的数据，提高其命中率有助于整体性能的提高，并且能减缓数据库的压力，对互联网系统架构是十分有利的。</p><p>另 一方面，它也能满足互联网高并发需要高速处理数据的场合，比如抢红包 、商品秒杀等场景，这些场合需要高速处理，并保证并发数据安全和一致性。</p>]]></content>
      
      
      <categories>
          
          <category> Redis </category>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring MVC</title>
      <link href="2020/07/10/SpringMVC/"/>
      <url>2020/07/10/SpringMVC/</url>
      
        <content type="html"><![CDATA[<p>长期以来 Struts2 与 Spring 的结合一直存在很多的问题，比如兼容性和类臃肿。加之近年来 Struts2 漏洞问题频发，导致使用率大减。与此同时，生于 Spring Web 项目的 MVC (Model View Controller ）框架走到了我们的面前，Spring MVC 结构层次清晰，类比较简单，并且与 Spring 的核心 IoC 和 AOP 无缝对接，成为了互联网时代的主流框架。</p><p>MVC 模式把应用程序（输入逻辑、业务逻辑和 UI 逻辑）分成不同的方面，同时提供这些元素之间的松耦合。</p><ul><li>Model （模型），封装了应用程序的数据和由它们组成的 POJO 。</li><li>View （视图） ，负责把模型数据渲染到视图上，将数据以一定的形式展现给用户。</li><li>Controller （控制器），负责处理用户请求，并建立适当的模型把它传递给视图渲染。</li></ul><p>在 Spring MVC 中还可以定义逻辑视图，通过其提供的视图解析器就能够很方便地找到对应的视图进行渲染，或者使用其消息转换的功能，比如在 <code>Controller</code> 的方法内加入注解<code>@ResponseBody</code> 后，Spring MVC 就可以通过其消息转换系统，将数据转换为 JSON，提供给前端 Ajax 请求使用。</p><p>Spring MVC 中的重点在于它的流程和一些重要的注解，包括控制器、视图解析器、视图等重要内容。</p><h2 id="注解">注解</h2><blockquote><p>参考<a href="http://www.iocoder.cn/Spring-Boot/SpringMVC/?self">文档</a></p></blockquote><h3 id="Controller"><code>@Controller</code></h3><p><a href="https://github.com/spring-projects/spring-framework/blob/master/spring-context/src/main/java/org/springframework/stereotype/Controller.java"><code>@Controller</code></a> 注解，添加在类上，表示这是控制器 Controller 对象。属性如下：</p><ul><li><code>name</code> 属性：该 Controller 对象的 Bean 名字。允许空。</li></ul><p><a href="https://github.com/spring-projects/spring-framework/blob/master/spring-web/src/main/java/org/springframework/web/bind/annotation/RestController.java"><code>@RestController</code></a> 注解，添加在类上，是 <code>@Controller</code> 和 <a href="https://github.com/ndimiduk/spring-framework/blob/master/org.springframework.web/src/main/java/org/springframework/web/bind/annotation/ResponseBody.java"><code>@ResponseBody</code></a> 的组合注解，直接使用接口方法的返回结果，经过 JSON/XML 等序列化方式，最终返回。也就是说，无需使用 InternalResourceViewResolver 解析视图，返回 HTML 结果。</p><p>目前主流的架构，都是 <a href="https://blog.csdn.net/fuzhongmin05/article/details/81591072">前后端分离</a> 的架构，后端只需要提供 API 接口，仅仅返回数据。而视图部分的工作，全部交给前端来做。也因此，我们项目中 99.99% 使用 <code>@RestController</code> 注解。</p><h3 id="RequestMapping"><code>@RequestMapping</code></h3><p><a href="https://github.com/spring-projects/spring-framework/blob/master/spring-web/src/main/java/org/springframework/web/bind/annotation/RequestMapping.java"><code>@RequestMapping</code></a> 注解，添加在类或方法上，标记该类/方法对应接口的配置信息。</p><p><code>@RequestMapping</code> 注解的<strong>常用属性</strong>，如下：</p><ul><li><code>path</code> 属性：接口路径。<code>[]</code> 数组，可以填写多个接口路径。</li><li><code>values</code> 属性：和 <code>path</code> 属性相同，是它的别名。</li><li><code>method</code> 属性：请求方法 <a href="https://github.com/spring-projects/spring-framework/blob/master/spring-web/src/main/java/org/springframework/web/bind/annotation/RequestMethod.java">RequestMethod</a> ，可以填写 <code>GET</code>、<code>POST</code>、<code>POST</code>、<code>DELETE</code> 等等。<code>[]</code> 数组，可以填写多个请求方法。如果为空，表示匹配所有请求方法。</li></ul><p><code>@RequestMapping</code> 注解的<strong>不常用属性</strong>，如下：</p><ul><li><code>name</code> 属性：接口名。一般情况下，我们不填写。</li><li><code>params</code> 属性：请求参数需要包含值的<strong>参数名</strong>。可以填写多个参数名。如果为空，表示匹配所有请你求方法。</li><li><code>headers</code> 属性：和 <code>params</code> 类似，只是从参数名变成<strong>请求头</strong>。</li><li><code>consumes</code> 属性：和 <code>params</code> 类似，只是从参数名变成请求头的<strong>提交内容类型</strong>( <a href="https://juejin.im/post/5cb34fc06fb9a068a75d3555">Content-Type</a> )</li><li><code>produces</code> 属性：和 <code>params</code> 类似，只是从参数名变成请求头的( <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Accept">Accept</a> )<strong>可接受类型</strong>。</li></ul><p>考虑到让开发更加方便，Spring 给每种请求方法提供了对应的注解：</p><ul><li><a href="https://github.com/spring-projects/spring-framework/blob/master/spring-web/src/main/java/org/springframework/web/bind/annotation/GetMapping.java"><code>@GetMapping</code></a> 注解：对应 <code>@GET</code> 请求方法的 <code>@RequestMapping</code> 注解。</li><li><a href="https://github.com/spring-projects/spring-framework/blob/master/spring-web/src/main/java/org/springframework/web/bind/annotation/PostMapping.java"><code>@PostMapping</code></a> 注解：对应 <code>@POST</code> 请求方法的 <code>@RequestMapping</code> 注解。</li><li><a href="https://github.com/spring-projects/spring-framework/blob/master/spring-web/src/main/java/org/springframework/web/bind/annotation/PutMapping.java"><code>@PutMapping</code></a> 注解：对应 <code>@PUT</code> 请求方法的 <code>@RequestMapping</code> 注解。</li><li><a href="https://github.com/spring-projects/spring-framework/blob/master/spring-web/src/main/java/org/springframework/web/bind/annotation/DeleteMapping.java"><code>@DeleteMapping</code></a> 注解：对应 <code>@DELETE</code> 请求方法的 <code>@RequestMapping</code> 注解。</li><li>还有其它几个，就不一一列举了。</li></ul><h3 id="RequestParam"><code>@RequestParam</code></h3><p><a href="https://github.com/spring-projects/spring-framework/blob/master/spring-web/src/main/java/org/springframework/web/bind/annotation/RequestParam.java"><code>@RequestParam</code></a> 注解，添加在方法参数上，标记该方法参数对应的请求参数的信息。属性如下：</p><ul><li><code>name</code> 属性：对应的请求参数名。如果为空，则直接使用方法上的参数变量名。</li><li><code>value</code> 属性：和 <code>name</code> 属性相同，是它的别名。</li><li><code>required</code> 属性：参数是否必须传。默认为 <code>true</code> ，表示必传。</li><li><code>defaultValue</code> 属性：参数默认值。</li></ul><p><a href="https://github.com/spring-projects/spring-framework/blob/master/spring-web/src/main/java/org/springframework/web/bind/annotation/PathVariable.java"><code>@PathVariable</code></a> 注解，添加在方法参数上，标记接口路径和方法参数的映射关系。具体的，我们在示例中来看。相比 <code>@RequestParam</code> 注解，少一个 <code>defaultValue</code> 属性。</p>]]></content>
      
      
      <categories>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MyBatis</title>
      <link href="2020/07/10/MyBatis/"/>
      <url>2020/07/10/MyBatis/</url>
      
        <content type="html"><![CDATA[<p>参考《Java EE互联网轻量级框架整合开发》、MyBatis官方文档</p><hr><h2 id="MyBatis概述">MyBatis概述</h2><h3 id="什么是MyBatis">什么是MyBatis</h3><p>MyBatis 是一款优秀的持久层框架，它支持自定义 SQL、存储过程以及高级映射。MyBatis 免除了几乎所有的 JDBC 代码以及设置参数和获取结果集的工作。MyBatis 可以通过简单的 XML 或注解来配置和映射原始类型、接口和 Java POJO（Plain Old Java Objects，普通老式 Java 对象）为数据库中的记录。</p><p>MyBatis 的前身是 Apache 的开源项目iBatis，是一个基于 Java 的持久层框架。MyBatis 的优势在于灵活，它几乎可以代替 JDBC ，同时提供了接口编程。目前 MyBatis 的数据访问层 DAO (Data Access Objects）是不需要实现类的，它只需要一个接口和 XML（或者注解）。MyBatis 提供自动映射、动态 SQL、级联、缓存、注解、代码和 SQL 分离等特性，使用方便，同时也可以对 SQL 进行优化。因为其具有封装少、映射多样化、支持存储过程、可以进行 SQL 优化等特点，使得它取代了 Hibernate 成为了 Java 互联网中首选的持久框架。</p><p>Hibernate 作为一种十分流行的框架，它有其无可替代的优势，这里我们有必要讨论一下它和 MyBatis 的区别。由于 MyBatis 和 Hibernate 都是持久层框架，都会涉及数据库，所以首先定义一个数据库表一一角色表（t_role）</p><pre class="line-numbers language-none"><code class="language-none">ID--&gt;int(12)roleName--&gt;varchar(60)note--&gt;varchar(1024)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>根据这个角色表，我们可以用一个 POJO (Plain Ordinary Java Object ）和这张表定义的字段对应起来</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>learn<span class="token punctuation">.</span>chapterl<span class="token punctuation">.</span>pojo</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Role</span> <span class="token keyword">implements</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span><span class="token class-name">Serializable</span><span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">Integer</span> id<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> roleName<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> note<span class="token punctuation">;</span>    <span class="token comment">/** setter and getter **/</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>无论是 MyBatis 还是 Hibernate 都是依靠某种方法，将数据库的表和 POJO 映射起来的，这样程序员就可以操作 POJO 来完成相关的逻辑了。</p><h3 id="Hibernate-简介">Hibernate 简介</h3><p>要将POJO和数据库映射起来需要给这些框架提供映射规则 ，所以下一步要提供映射的规则。</p><p>在 MyBatis 或者 Hibernate 中可以通过 XML 或者注解提供映射规则， 这里讨论的是XML方式，因为在 MyBatis 中注解方式会受到一定的限制，所以 MyBatis 通常使用 XML方式实现映射关系。</p><p>我们把 POJO 对象和数据库表相互映射的框架称为对象关系映射（ Object Relational Mapping, ORM，或O/RM，或 O/R mapping ）框架。无论 MyBatis 或者 Hibernate 都可以称为 ORM 框架 ，只是 Hibernate 的设计理念是完全面向 POJO 的，而 MyBatis 则不是。Hibernate 基本不再需要编写 SQL 就可以通过映射关系来操作数据库，是一种全表映射的体现：而 MyBatis 则不同，它需要我们提供 SQL 去运行。</p><p>Hibernate 是将 POJO 和数据库表对应的映射文件</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>hibernate-mapping</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>class</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>”com.learn.chapterl.pojo.Role”</span> <span class="token attr-name">table</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>t_role<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>”id”</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>”java.lang.Integer”</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>column</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>”id”/</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>generator</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>identity<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name＝”roleName”</span> <span class="token attr-name">type＝”string”</span> <span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>column</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>role_name<span class="token punctuation">"</span></span> <span class="token attr-name">length</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>60<span class="token punctuation">"</span></span> <span class="token attr-name">not-null</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>note<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>string<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>column</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>note<span class="token punctuation">"</span></span> <span class="token attr-name">length</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>512<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>class</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>hibernate-mapping</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>首先，对 POJO 和表 t_role 进行了映射配置，把两者映射起来了。然后，对 POJO 进行操作，从而影响t_role 表的数据，比如对其增、删、查、改</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//Hibernate 通过 Session 操作数据库数据</span><span class="token class-name">Session</span> session <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token class-name">Transaction</span> tx <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token keyword">try</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//打开 Session</span>    session <span class="token operator">=</span> <span class="token class-name">HibernateUtil</span><span class="token punctuation">.</span><span class="token function">getSessionFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">openSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//事务</span>    tx <span class="token operator">=</span> session<span class="token punctuation">.</span><span class="token function">beginTransaction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//POJO</span>    <span class="token class-name">Role</span> role <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Role</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    role<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    rold<span class="token punctuation">.</span><span class="token function">setRoleName</span><span class="token punctuation">(</span><span class="token string">"rolename1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    role<span class="token punctuation">.</span><span class="token function">setNote</span><span class="token punctuation">(</span><span class="token string">"note1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    session<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span>role<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//保存</span>    <span class="token class-name">Role</span> role2 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Role</span><span class="token punctuation">)</span> session<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">Role</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//查询</span>    role2<span class="token punctuation">.</span><span class="token function">setNote</span><span class="token punctuation">(</span><span class="token string">"修改备注"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    session<span class="token punctuation">.</span><span class="token function">updata</span><span class="token punctuation">(</span>role2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//更新</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>err<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>role2<span class="token punctuation">.</span><span class="token function">getRoleName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    session<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span>role2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//删除</span>    tx<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//提交事务</span><span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> ex<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>tx <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> tx<span class="token punctuation">.</span><span class="token function">isActive</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        tx<span class="token punctuation">.</span><span class="token function">rollback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">//回滚事务</span>    <span class="token punctuation">&#125;</span>    ex<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>session <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> session<span class="token punctuation">.</span><span class="token function">isOpen</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        session<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里我们没有看到 SQL ，那是因为 Hibernate 会根据映射关系来生成对应的 SQL，程序员不用精通 SQL，只要懂得操作 POJO 就能够操作对应数据库的表了。这在管理系统时代是十分有利的 。因为对于管理系统而言，首先在于实现业务逻辑，然后才是性能，所以 Hibernate 成为了那个时代的主流持久框架。</p><h3 id="MyBatis简介">MyBatis简介</h3><p>在移动互联网时代，MyBatis 成为了目前互联网 Java 持久框架的首选，与 Hibernate 消除 SQL 不同，MyBatis 不屏蔽 SQL。不屏蔽 SQL 的优势在于，程序员可以自己制定 SQL规则，无须 Hibernate 自动生成规则，这样能够更加精确地定义 SQL ，从而优化性能 。它更符合移动互联网高并发、大数据、高性能 、 高响应的要求。</p><p>与 Hibernate 一样 ，MyBatis 也需要一个映射文件把 POJO 和数据库的表对应起来。</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">namespace</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.learn.chapterl.mapper.RoleMapper<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resultMap</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>roleMap<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.learn.chapterl.pojo.Role<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>roleName<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>role_name<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>note<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>note<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resultMap</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>getRole<span class="token punctuation">"</span></span> <span class="token attr-name">resultMap</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>roleMap<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        select id, role_name, note from t_role where id = #&#123;id&#125;    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>delete</span> <span class="token attr-name">id</span> <span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>deleteRole<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>int<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    delete from t_role where id = #&#123;id&#125;     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>delete</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>insert</span> <span class="token attr-name">id</span> <span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>insertRole<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.learn.chapterl.pojo.Role<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    insert into t_role(role_name, note) values(#&#123;roleName&#125;, #&#123;note&#125;)     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>insert</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>update</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>updateRole<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.learn.chapterl.pojo.Role<span class="token punctuation">"</span></span> <span class="token punctuation">></span></span>        update t_role set         role name= #&#123;roleName&#125;,         note = #&#123;note&#125;         where id = #&#123;id&#125;     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>update</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mapper</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里的 <code>resultMap</code> 元素用于定义映射规则 ，而实际上 MyBatis 在满足一定的规则下，完成自动映射，而增、删、查、改对应着 insert 、delete 、select、update 四个元素，十分明了 。</p><blockquote><p>注意，<code>mapper</code> 元素中的 <code>namespace</code> 属性，它要和一个接口的全限定名保持一致 ，而里面的 SQL 的 <code>id</code> 也需要和接口定义的方法完全保持一致</p></blockquote><p>定义 MyBatis 映射文件</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>learn<span class="token punctuation">.</span>chapterl<span class="token punctuation">.</span>mapper</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>learn<span class="token punctuation">.</span>chapterl<span class="token punctuation">.</span>pojo<span class="token punctuation">.</span></span><span class="token class-name">Role</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">RoleMapper</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token class-name">Role</span> <span class="token function">getRole</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">deletRole</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">insertRole</span><span class="token punctuation">(</span><span class="token class-name">Role</span> role<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">updateRole</span><span class="token punctuation">(</span><span class="token class-name">Role</span> role<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>对角色类的增、删、 查 、 改</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">SqlSession</span> sqlSession <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token keyword">try</span> <span class="token punctuation">&#123;</span>     sqlSession <span class="token operator">=</span> <span class="token class-name">MyBatisUtil</span><span class="token punctuation">.</span><span class="token function">getSqlSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">RoleMapper</span> roleMapper <span class="token operator">=</span> sqlSession<span class="token punctuation">.</span><span class="token function">getMapper</span><span class="token punctuation">(</span><span class="token class-name">RoleMapper</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token class-name">Role</span> role <span class="token operator">=</span> roleMapper<span class="token punctuation">.</span><span class="token function">getRole</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//查询</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>err<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>role<span class="token punctuation">.</span><span class="token function">getRoleName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     role<span class="token punctuation">.</span><span class="token function">setRoleName</span><span class="token punctuation">(</span><span class="token string">"update role name"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     roleMapper<span class="token punctuation">.</span><span class="token function">updateRole</span><span class="token punctuation">(</span>role<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//更新</span>    <span class="token class-name">Role</span> role2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Role</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     role2<span class="token punctuation">.</span><span class="token function">setNote</span><span class="token punctuation">(</span><span class="token string">"note2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     role2<span class="token punctuation">.</span><span class="token function">setRoleName</span><span class="token punctuation">(</span><span class="token string">"role2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     roleMapper<span class="token punctuation">.</span><span class="token function">insertRole</span><span class="token punctuation">(</span>role<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//插入</span>    roleMapper<span class="token punctuation">.</span><span class="token function">deleteRole</span><span class="token punctuation">(</span><span class="token class-name">S</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//删除</span>    sqlSession<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//提交事务</span><span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> ex<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> ex<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>sqlSession <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>     sqlSession<span class="token punctuation">.</span><span class="token function">rollback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//回滚事务</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span> <span class="token keyword">finally</span><span class="token punctuation">&#123;</span><span class="token comment">//关闭连接</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>sqlSession <span class="token operator">!</span> <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>     sqlSession<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>显然 MyBatis 在业务逻辑上和 Hibernate 是大同小异的。其区别在于，MyBatis 需要提供接口和 SQL ，这意味着它的工作量会 比 Hibernate 大，但是由于自定义 SQL 、 映射关系，所以其灵活性、可优化性就超过了 Hibernate 。互联网可优化性、灵活性是十分重要 的，因为一条 SQL 的性能可能相差十几倍到几十倍，这对于互联网系统是十分重要的 。</p><h3 id="Hibernate-和-MyBatis-的区别">Hibernate 和 MyBatis 的区别</h3><p>Hibernate 和 MyBatis 的增、删、查、改，对于业务逻辑层来说大同小异，对于映射层而言 Hibernate 的配置不需要接口和 SQL ，相反 MyBatis 是需要的。</p><p>对于 Hibernate 而言 ，不需要编写大量的 SQL，就可以完全映射，同时提供了日志、缓存、级联（级联比 MyBatis 强大）等特性， 此外还提供 HQL (Hibernate Query Language ）对 POJO 进行操作，使用十分方便，但是它也有致命的缺陷。</p><p>由于无须 SQL ，当多表关联超过 3 个的时候，通过 Hibernate 的级联会造成太多性能的丢失 ，又或者我现在访问 一个财务的表，然后它会关联财产信息表，财产又分为机械、原料等，显然机械和原料的字段是不一样的，这样关联字段只能根据特定的条件变化而变化，而 Hibernate 无法支持这样的变化 。 遇到存储过程， Hibernate 只能作罢。更为关键的是性能，在管理系统的时代，对于性能的要求不是那么苛刻，但是在互联网时代性能就是系统的根本，响应过慢就会丧失客户，试想一下谁会去用一个经常需要等待超过10 秒以上的应用呢？</p><p>以上的问题 MyBatis 都可以解决，MyBatis 可以自由书写 SQL、支持动态 SQL、处理列表、动态生成表名、支持存储过程。这样就可 以灵活地定义查询语句 ，满足各类需求和性能优化的需要，这些在互联网系统中是十分重要 的。</p><p>但 MyBatis 也有缺陷 。</p><ul><li><p>首先，它要编写 SQL 和映射规则，其工作量稍微大于 Hibernate 。</p></li><li><p>其次，它支持的工具也很有限，不能像 Hibernate 那样有许多的插件可以帮助生成映射代码和关联关系，而即使使用生成工具，往往也需要开发者进一步简化，MyBatis 通过手工编码，工作量相对大些。</p></li></ul><p>所以对于性能要求不太苛刻 的系统，比如管理系统、ERP 等推荐使用 Hibernate；而对于性能要求高、响应快、灵活的系统则推荐使用 MyBatis 。</p><h2 id="获取MyBatis">获取MyBatis</h2><h3 id="GitHub">GitHub</h3><p>GitHub<a href="https://github.com/mybatis/mybatis-3">地址</a></p><p><strong>MyBatis SQL Mapper Framework for Java</strong></p><p>The MyBatis SQL mapper framework makes it easier to use a relational database with object-oriented applications. MyBatis couples objects with stored procedures or SQL statements using a XML descriptor or annotations. Simplicity is the biggest advantage of the MyBatis data mapper over object relational mapping tools.</p><p>是一个Maven项目，点击Releases，选择版本即可下载</p><h3 id="Maven仓库">Maven仓库</h3><p>Maven仓库<a href="https://mvnrepository.com/artifact/org.mybatis/mybatis">地址</a></p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!-- https://mvnrepository.com/artifact/org.mybatis/mybatis --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.mybatis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mybatis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.5.5<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="HelloMyBatis">HelloMyBatis</h2><h3 id="搭建环境">搭建环境</h3><p>1、创建数据库</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">CREATE DATABASE &#96;mybatis&#96;;USE &#96;mybatis&#96;;SET NAMES utf8mb4;SET FOREIGN_KEY_CHECKS &#x3D; 0;-- ------------------------------ Table structure for user-- ----------------------------DROP TABLE IF EXISTS &#96;user&#96;;CREATE TABLE &#96;user&#96;  (  &#96;id&#96; int(0) NOT NULL AUTO_INCREMENT,  &#96;name&#96; varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL,  &#96;pwd&#96; varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL,  PRIMARY KEY (&#96;id&#96;) USING BTREE) ENGINE &#x3D; InnoDB CHARACTER SET &#x3D; utf8 COLLATE &#x3D; utf8_general_ci ROW_FORMAT &#x3D; Dynamic;-- ------------------------------ Records of user-- ----------------------------INSERT INTO &#96;user&#96; VALUES (1, &#39;张三&#39;, &#39;123456&#39;);INSERT INTO &#96;user&#96; VALUES (2, &#39;李四&#39;, &#39;123456&#39;);INSERT INTO &#96;user&#96; VALUES (3, &#39;王五&#39;, &#39;123456&#39;);SET FOREIGN_KEY_CHECKS &#x3D; 1;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2、新建Maven项目</p><p>在IDEA中创建普通的Maven项目，并在pom.xml中导入以下三个依赖</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!--导入依赖--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--mysql依赖--></span>    <span class="token comment">&lt;!-- https://mvnrepository.com/artifact/mysql/mysql-connector-java --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>mysql<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mysql-connector-java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>8.0.21<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--mybatis--></span>    <span class="token comment">&lt;!-- https://mvnrepository.com/artifact/org.mybatis/mybatis --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.mybatis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mybatis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.5.5<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--junit--></span>    <span class="token comment">&lt;!-- https://mvnrepository.com/artifact/junit/junit --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>4.12<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="创建模块">创建模块</h3><p>在父模块下创建mybatis-01的Maven子模块</p><p>1、编写mybatis的核心配置文件</p><p>在mybatis-01模块中的src-&gt;main-&gt;resources中创建mybatis-config.xml文件，导入以下内容</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8" ?></span><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">configuration</span>        <span class="token name">PUBLIC</span> <span class="token string">"-//mybatis.org//DTD Config 3.0//EN"</span>        <span class="token string">"http://mybatis.org/dtd/mybatis-3-config.dtd"</span><span class="token punctuation">></span></span><span class="token comment">&lt;!--核心配置文件--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>environments</span> <span class="token attr-name">default</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>development<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>environment</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>development<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token comment">&lt;!--事物管理--></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>transactionManager</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>JDBC<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dataSource</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>POOLED<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>driver<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.mysql.jdbc.Driver<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>url<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>jdbc:mysql://localhost:3306/mybatis?useSSL=false<span class="token entity named-entity" title="&amp;">&amp;amp;</span>useUnicode=true<span class="token entity named-entity" title="&amp;">&amp;amp;</span>characterEncoding=UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>root<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>123456<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dataSource</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>environment</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>environments</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>并将<code>property</code>中的<code>value</code>进行修改</p><p>2、编写MyBatis工具类</p><p>每个基于 MyBatis 的应用都是以一个 SqlSessionFactory 的实例为核心的。SqlSessionFactory 的实例可以通过 SqlSessionFactoryBuilder 获得。而 SqlSessionFactoryBuilder 则可以从 XML 配置文件或一个预先配置的 Configuration 实例来构建出 SqlSessionFactory 实例。既然有了 SqlSessionFactory，顾名思义，我们可以从中获得 SqlSession 的实例。SqlSession 提供了在数据库执行 SQL 命令所需的所有方法。可以通过 SqlSession 实例来直接执行已映射的 SQL 语句。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 官方文档</span><span class="token class-name">String</span> resource <span class="token operator">=</span> <span class="token string">"org/mybatis/example/mybatis-config.xml"</span><span class="token punctuation">;</span><span class="token class-name">InputStream</span> inputStream <span class="token operator">=</span> <span class="token class-name">Resources</span><span class="token punctuation">.</span><span class="token function">getResourceAsStream</span><span class="token punctuation">(</span>resource<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">SqlSessionFactory</span> sqlSessionFactory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SqlSessionFactoryBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span>inputStream<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyBatisUtils</span> <span class="token punctuation">&#123;</span>    <span class="token comment">/**     * 提升作用域     */</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">SqlSessionFactory</span> sqlSessionFactory<span class="token punctuation">;</span>    <span class="token keyword">static</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 获取sqlSessionFactory对象</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">String</span> resource <span class="token operator">=</span> <span class="token string">"mybatis-config.xml"</span><span class="token punctuation">;</span>            <span class="token class-name">InputStream</span> inputStream <span class="token operator">=</span> <span class="token class-name">Resources</span><span class="token punctuation">.</span><span class="token function">getResourceAsStream</span><span class="token punctuation">(</span>resource<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">SqlSessionFactory</span> sqlSessionFactory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SqlSessionFactoryBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span>inputStream<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">SqlSession</span> <span class="token function">getSqlSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> sqlSessionFactory<span class="token punctuation">.</span><span class="token function">openSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="编写代码">编写代码</h3><p>1、创建pojo包并创建User.java</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 变量名与数据库要对应</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> id<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> pwd<span class="token punctuation">;</span>        <span class="token comment">/*** setter and getter ***/</span>    <span class="token comment">/*** Constructor ***/</span>    <span class="token comment">/*** toString ***/</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2、 在dao包中创建接口</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">UserDao</span> <span class="token punctuation">&#123;</span>    <span class="token comment">/**     * 获取用户列表     */</span>    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">></span></span> <span class="token function">getUserList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>3、创建UserMapper.xml文件</p>]]></content>
      
      
      <categories>
          
          <category> MyBatis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> MyBatis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL</title>
      <link href="2020/07/07/MySQL/"/>
      <url>2020/07/07/MySQL/</url>
      
        <content type="html"><![CDATA[<blockquote><p>参考书籍《SQL必知必会》第4版 Ben Forta 著</p></blockquote><h2 id="数据库简介">数据库简介</h2><h3 id="数据库（DB，Data-Base）">数据库（DB，Data Base）</h3><p>保存有组织的数据的容器（通常是一个文件或一组文件）。</p><p>表（table） ：某种特定类型数据的结构化清单。存储在表中的数据是同一种类型的数据或清单。</p><p>列（column） ：表中的一个字段。所有表都是由一个或多个列组成的。</p><p>行（row） ：表中的一个记录。表中的数据是按行存储的，所保存的每个记录存储在自己的行内。</p><blockquote><p>如果将表想象为网格，网格中垂直的列为表列，水平行为表行。</p></blockquote><p>主键（primary key）：一列（或一组列），其值能够<strong>唯一标识</strong>表中每一行。顾客表可以使用顾客编号，而订单表可以使用订单ID。雇员表可以使用雇员ID 或雇员社会安全号。</p><p>表中的任何列都可以作为主键，只要它满足以下条件：</p><ul><li>任意两行都不具有相同的主键值；</li><li>每一行都必须具有一个主键值（主键列不允许NULL 值）；</li><li>主键列中的值不允许修改或更新；</li><li>主键值不能重用（如果某行从表中删除，它的主键不能赋给以后的新行）。</li></ul><blockquote><p>主键通常定义在表的一列上，但并不是必需这么做，也可以一起使用多个列作为主键。</p><p>在使用多列作为主键时，上述条件必须应用到所有列，所有列值的组合必须是唯一的（但单个列的值可以不唯一）。</p></blockquote><p>分为关系型数据库和非关系型数据库</p><ul><li><a href="https://baike.baidu.com/item/%E5%85%B3%E7%B3%BB%E5%9E%8B%E6%95%B0%E6%8D%AE%E5%BA%93/8999831">关系型数据库</a>：SQL（Structured Query Language）指采用了<a href="https://baike.baidu.com/item/%E5%85%B3%E7%B3%BB%E6%A8%A1%E5%9E%8B/3189329">关系模型</a>来组织数据的数据库，其以行和列的形式存储数据，以便于用户理解，关系型数据库这一系列的行和列被称为表，一组表组成了<a href="https://baike.baidu.com/item/%E6%95%B0%E6%8D%AE%E5%BA%93/103728">数据库</a>。</li><li><a href="https://baike.baidu.com/item/NoSQL/8828247?fromtitle=%E9%9D%9E%E5%85%B3%E7%B3%BB%E5%9E%8B%E6%95%B0%E6%8D%AE%E5%BA%93&amp;fromid=6376860&amp;fr=aladdin">非关系型数据库</a>：NoSQL（Not Only SQL），对象存储，通过对象的属性来决定。</li></ul><h3 id="数据库管理系统（DBMS，Database-Management-System）">数据库管理系统（DBMS，Database Management System）</h3><p>数据库管理软件，科学有效的管理数据。MySQL是一种DBMS，即它是一种数据库软件。</p><h3 id="MySQL">MySQL</h3><p>优点：</p><ul><li>成本，MySQL是开放源代码的，一般可以免费使用（甚至可以免费修改）。</li><li>性能，MySQL执行很快（非常快）。</li><li>可信赖，某些非常重要和声望很高的公司、站点使用MySQL， 这些公司和站点都用MySQL来处理自己的重要数据。</li><li>简单，MySQL很容易安装和使用。</li></ul><p>5.7版本稳定</p><h2 id="MySQL的安装">MySQL的安装</h2><h3 id="Windows下的安装">Windows下的安装</h3><p>官网<a href="https://dev.mysql.com/downloads/mysql/">下载地址</a>，选择下载ZIP Archive</p><img src="http://img.whl123456.top/image/MySQL官网下载.png" alt="MySQL官网下载" style="zoom:50%;" /><ol><li><p>压缩包下载完成后解压到自己指定的文件夹中</p></li><li><p>编辑环境变量，将MySQL下的bin目录添加到Path</p></li><li><p>在<code>D:\安装路径\mysql-8.0.20</code>下新建<code>my.ini</code>配置文件</p></li><li><p>编辑<code>my.ini</code>文件</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token punctuation">[</span>mysql<span class="token punctuation">]</span><span class="token comment"># 设置mysql客户端默认字符集</span>default-character-set<span class="token operator">=</span>utf8 <span class="token punctuation">[</span>mysqld<span class="token punctuation">]</span><span class="token comment">#设置3306端口</span>port <span class="token operator">=</span> <span class="token number">3306</span> <span class="token comment"># 设置mysql的安装目录</span><span class="token assign-left variable">basedir</span><span class="token operator">=</span>D:<span class="token punctuation">\</span>Develop<span class="token punctuation">\</span>MySQL<span class="token punctuation">\</span>mysql-8.0.20<span class="token comment"># 允许最大连接数</span><span class="token assign-left variable">max_connections</span><span class="token operator">=</span><span class="token number">200</span><span class="token comment"># 服务端使用的字符集默认为8比特编码的latin1字符集</span>character-set-server<span class="token operator">=</span>utf8<span class="token comment"># 创建新表时将使用的默认存储引擎</span>default-storage-engine<span class="token operator">=</span>INNODB<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>路径选择自己安装目录，<code>data</code>目录不要自己创建，参考<a href="https://www.jb51.net/article/172172.htm">文章</a></p></blockquote></li><li><p>安装MySQL服务：在<strong>管理员模式</strong>下启动命令行终端（cmd），执行<code>mysqld -install</code>命令，安装成功则显示<code>Service successfully installed.</code></p></li><li><p>初始化数据库文件：再输入<code>mysqld --initialize-insecure --user=mysql</code>，等待一会不报错且在安装目录中生成<code>data</code>文件则表示成功</p></li><li><p>启动MySQL：键入<code>net start mysql</code>启动服务，显示<code>MySQL服务已启动成功</code></p></li><li><p>进入MySQL管理界面：在启动成功MySQL服务后，输入命令<code>mysql -u root -p</code>，Enter password：时直接回车</p></li><li><p>设置用户和密码：进入SQL命令行后输入。</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">update mysql.user <span class="token builtin class-name">set</span> <span class="token assign-left variable">authentication_string</span><span class="token operator">=</span>MD5<span class="token punctuation">(</span><span class="token string">'123456'</span><span class="token punctuation">)</span> where <span class="token assign-left variable">User</span><span class="token operator">=</span><span class="token string">'root'</span> and <span class="token assign-left variable">Host</span><span class="token operator">=</span><span class="token string">'locahost'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>在 MySQL5.7 中<code>user</code>表的<code>password</code>已换成了<code>authentication_string</code>。</p><p><code>password()</code>加密函数已经在 8.0.11 中移除了，可以使用<code>MD5()</code>函数代替。</p></blockquote></li><li><p>刷新权限：<code>FLUSH PRIVILEGES;</code></p></li><li><p>重启MySQL：退出MySQL命令行，输入<code>quit</code>，再在命令行中输入<code>net stop mysql</code>关闭MySQL之后启动<code>net start mysql</code></p></li></ol><h2 id="使用Navicat进行可视化操作">使用Navicat进行可视化操作</h2><p>连接号Navicat后，选择新建查询，输入SQL建表语句进行创建一个school表</p><pre class="line-numbers language-SQL" data-language="SQL"><code class="language-SQL">CREATE DATABASE &#96;school&#96; CHARACTER SET utf8 COLLATE utf8_general_ci;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="http://img.whl123456.top/image/Navicat%E5%88%9B%E5%BB%BA%E8%A1%A8.png" alt="Navicat创建表"></p><p><img src="http://img.whl123456.top/image/Navicat%E5%8F%AF%E8%A7%86%E5%8C%96%E6%93%8D%E4%BD%9C%E8%A1%A8.png" alt="Navicat可视化操作表"></p><h2 id="SQL语句">SQL语句</h2><ol><li><p>查看当前所有数据库：<code>SHOW DATABASES;</code></p></li><li><p>打开指定的库：<code>USE 库名;</code></p></li><li><p>查看当前的所有表：<code>SHOW TABLES;</code></p></li><li><p>查看其他库的所有表：<code>SHOW TABLES FROM 库名;</code></p></li><li><p>创建表</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> 表名<span class="token punctuation">(</span>列名 列类型<span class="token punctuation">,</span>列名 列类型<span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>查看表结构：<code>DESC 表名;</code></p></li><li><p>查看数据库版本：</p><ul><li>登录到MySQL<code>SELECT VERSION();</code></li><li>没有登录MySQL命令行中<code>mysql -V</code></li></ul></li></ol><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SHOW</span> <span class="token keyword">DATABASES</span><span class="token punctuation">;</span> <span class="token comment">--查看所有的数据库</span><span class="token keyword">USE</span> 数据库名 <span class="token comment">--切换数据库</span><span class="token keyword">SHOW</span> <span class="token keyword">TABLES</span><span class="token punctuation">;</span> <span class="token comment">--查看数据库中所有的表</span><span class="token keyword">DESCRIBE</span> 表名<span class="token punctuation">;</span> <span class="token comment">--显示表中信息</span><span class="token keyword">CREATE</span> <span class="token keyword">DATABASES</span> 数据库名<span class="token punctuation">;</span> <span class="token comment">--创建数据库</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="语法规范">语法规范</h3><p><strong>SQL</strong>（Structured Query Language）结构化查询语言的缩写。</p><ol><li>不区分大小写，建议关键字大写，表名、列名小写</li><li>多条SQL 语句必须以分号（;）分隔。每条命令建议用分号结尾</li><li>每条命令根据需要进行缩进和换行</li><li>注释<ul><li>单行注释1：#单行注释（这种形式很少得到支持）</li><li>单行注释2：-- 单行注释</li><li>多行注释：/*多行注释*/</li></ul></li></ol><p>关键字（keyword）：作为SQL 组成部分的保留字。关键字不能用作表或列的名字。</p><h3 id="检索数据">检索数据</h3><h4 id="SELECT-语句"><code>SELECT</code> 语句</h4><p>最经常使用的SQL 语句大概就是 <code>SELECT</code> 语句了。它的用途是从一个或多个表中检索信息。</p><h4 id="检索单个列">检索单个列</h4><p>利用<code>SELECT</code>语句从Products 表中检索一个名为prod_name的列。所需的列名写在<code>SELECT</code>关键字之后，用<code>FROM</code> 关键字指出从哪个表中检索数据。</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> prod_name <span class="token keyword">FROM</span> Products<span class="token punctuation">;</span> <span class="token comment">/* 输出结果prod_name -------------------Fish bean bag toyBird bean bag toyRabbit bean bag toy8 inch teddy bear12 inch teddy bear18 inch teddy bearRaggedy AnnKing dollQueen doll*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="检索多个列">检索多个列</h4><p>要想从一个表中检索多个列，仍然使用相同的<code>SELECT</code> 语句。唯一的不同是必须在<code>SELECT</code> 关键字后给出多个列名，列名之间必须以逗号分隔。</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> prod_id<span class="token punctuation">,</span> prod_name<span class="token punctuation">,</span> prod_price <span class="token keyword">FROM</span> Products<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>与前一个例子一样，这条语句使用 <code>SELECT</code> 语句从表 Products 中选择数据。在这个例子中，指定了 3 个列名，列名之间用逗号分隔。此语句的输出如下：</p><pre class="line-numbers language-none"><code class="language-none">prod_id       prod_name                prod_price ---------     --------------------     ----------BNBG01        Fish bean bag toy        3.4900 BNBG02        Bird bean bag toy        3.4900 BNBG03        Rabbit bean bag toy      3.4900 BR01          8 inch teddy bear        5.9900 BR02          12 inch teddy bear       8.9900 BR03          18 inch teddy bear       11.9900 RGAN01        Raggedy Ann              4.9900 RYL01         King doll                9.4900 RYL02         Queen dool               9.4900<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="检索所有列">检索所有列</h4><p>除了指定所需的列外（如上所述，一个或多个列），<code>SELECT</code> 语句还可以检索所有的列而不必逐个列出它们。在实际列名的位置使用星号（<code>*</code>）通配符可以做到这点，如下所示</p><pre class="line-numbers language-none"><code class="language-none">SELECT * FROM Products;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>一般而言，除非你确实需要表中的每一列，否则最好别使用<code>*</code>通配符。虽然使用通配符能让你自己省事，不用明确列出所需列，但检索不需要的列通常会降低检索和应用程序的性能。</p><p>使用通配符有一个大优点。由于不明确指定列名（因为星号检索每一列），所以能检索出名字未知的列。</p></blockquote><h4 id="检索不同的值">检索不同的值</h4><p>使用 DISTINCT 关键字，它指示数据库只返回不同的值</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token keyword">DISTINCT</span> vend_id <span class="token keyword">FROM</span> Products<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><code>SELECT DISTINCT vend_id</code> 告诉 DBMS 只返回不同（具有唯一性）的vend_id 行，所以正如下面的输出，只有 3 行。如果使用 <code>DISTINCT</code> 关键字，它必须直接放在列名的前面。</p><pre class="line-numbers language-none"><code class="language-none">vend_id ----------BRS01DLL01FNG01<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><code>DISTINCT</code> 关键字作用于所有的列，不仅仅是跟在其后的那一列。例如，你指定 <code>SELECT DISTINCT vend_id, prod_price</code>，除非指定的两列完全相同，否则所有的行都会被检索出来</p></blockquote><h4 id="限制结果">限制结果</h4><p>SELECT 语句返回指定表中所有匹配的行，很可能是每一行。如果你只想返回第一行或者一定数量的行，该怎么办呢？这是可行的，然而遗憾的是，各种数据库中的这一 SQL 实现并不相同。</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> prod_name <span class="token keyword">FROM</span> Products<span class="token punctuation">;</span><span class="token comment">/* 输出结果prod_name -------------------Fish bean bag toyBird bean bag toyRabbit bean bag toy8 inch teddy bear12 inch teddy bear18 inch teddy bearRaggedy AnnKing dollQueen doll*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果使用 MySQL、MariaDB、PostgreSQL 或者 SQLite，需要使用 <code>LIMIT</code> 子句，像这样：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> prod_name <span class="token keyword">FROM</span> Products <span class="token keyword">LIMIT</span> <span class="token number">5</span><span class="token punctuation">;</span><span class="token comment">/* 输出结果prod_name -------------------Fish bean bag toyBird bean bag toyRabbit bean bag toy8 inch teddy bear12 inch teddy bear*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上述代码使用 SELECT 语句来检索单独的一列数据。LIMIT 5 指示 MySQL等 DBMS 返回不超过 5 行的数据。</p><p>为了得到后面的 5 行数据，需要指定从哪儿开始以及检索的行数</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> prod_name <span class="token keyword">FROM</span> Products <span class="token keyword">LIMIT</span> <span class="token number">5</span> <span class="token keyword">OFFSET</span> <span class="token number">5</span><span class="token punctuation">;</span><span class="token comment">/* 输出结果prod_name -------------------18 inch teddy bearRaggedy AnnKing dollQueen doll*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>LIMIT 5 OFFSET 5</code> 指示 MySQL 等 DBMS 返回从第 5 行起的 5 行数据。第一个数字是检索的行数，第二个数字是指从哪儿开始（从0开始计数）。</p><p>Products 表中只有 9 种产品，所以只返回了 4 行数据。</p><h3 id="排序检索数据">排序检索数据</h3><p>如何使用 <code>SELECT</code> 语句的 <code>ORDER BY</code> 子句，根据需要排序检索出的数据。</p><h4 id="排序数据">排序数据</h4><p>SQL 语句返回某个数据库表的单个列。但其输出，并没有特定的顺序。</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> prod_name <span class="token keyword">FROM</span> Products<span class="token punctuation">;</span><span class="token comment">/* 输出结果prod_name -------------------Fish bean bag toyBird bean bag toyRabbit bean bag toy8 inch teddy bear12 inch teddy bear18 inch teddy bearRaggedy AnnKing dollQueen doll*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其实，检索出的数据并不是随机显示的。如果不排序，数据一般将以它在底层表中出现的顺序显示，这有可能是数据最初添加到表中的顺序。但是，如果数据随后进行过更新或删除，那么这个顺序将会受到 DBMS 重用回收存储空间的方式的影响。因此，如果不明确控制的话，则最终的结果不能（也不应该）依赖该排序顺序。关系数据库设计理论认为，如果不明确规定排序顺序，则不应该假定检索出的数据的顺序有任何意义。</p><blockquote><p>子句：SQL 语句由子句构成，有些子句是必需的，有些则是可选的。一个子句通常由一个关键字加上所提供的数据组成。子句的例子如 <code>SELECT</code> 语句的 <code>FROM</code> 子句。</p></blockquote><p>为了明确地排序用 <code>SELECT</code> 语句检索出的数据，可使用 <code>ORDER BY</code> 子句。<code>ORDER BY</code> 子句取一个或多个列的名字，据此对输出进行排序。</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> prod_name <span class="token keyword">FROM</span> Products <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> prod_name<span class="token punctuation">;</span><span class="token comment">/* 输出结果prod_name -------------------12 inch teddy bear18 inch teddy bear8 inch teddy bearBird bean bag toyFish bean bag toyKing dollQueen dollRabbit bean bag toyRaggedy Ann*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>注意：在指定一条 <code>ORDER BY</code> 子句时，应该<strong>保证它是 <code>SELECT</code> 语句中最后一条子句</strong>。如果它不是最后的子句，将会出现错误消息</p></blockquote><h4 id="按多个列排序">按多个列排序</h4><p>经常需要按不止一个列进行数据排序。例如，如果要显示雇员名单，可能希望按姓和名排序（首先按姓排序，然后在每个姓中再按名排序）。如果多个雇员有相同的姓，这样做很有用。</p><p>要按多个列排序，简单指定列名，列名之间用逗号分开即可（就像选择多个列时那样）。</p><p>下面的代码检索 3 个列，并按其中两个列对结果进行排序——首先按价格，然后按名称排序。</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> prod_id<span class="token punctuation">,</span> prod_price<span class="token punctuation">,</span> prod_name <span class="token keyword">FROM</span> Products<span class="token keyword">ORDER</span> <span class="token keyword">BY</span> prod_price<span class="token punctuation">,</span> prod_name<span class="token punctuation">;</span><span class="token comment">/* 输出结果prod_id     prod_price     prod_name -------     ----------     -------------------- BNBG02      3.4900         Bird bean bag toy BNBG01      3.4900         Fish bean bag toy BNBG03      3.4900         Rabbit bean bag toy RGAN01      4.9900         Raggedy Ann BR01        5.9900         8 inch teddy bear BR02        8.9900         12 inch teddy bear RYL01       9.4900         King doll RYL02       9.4900         Queen doll BR03        11.9900        18 inch teddy bear*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上述例子中的输出，仅在多个行具有相同的 <code>prod_price</code> 值时才对产品按 <code>prod_name</code> 进行排序。如果 <code>prod_price</code> 列中所有的值都是唯一的，则不会按 <code>prod_name</code> 排序。</p><h4 id="按列位置排序">按列位置排序</h4><p>除了能用列名指出排序顺序外，<code>ORDER BY</code> 还支持按相对列位置进行排序。</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> prod_id<span class="token punctuation">,</span> prod_price<span class="token punctuation">,</span> prod_name <span class="token keyword">FROM</span> Products <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">;</span><span class="token comment">/* 输出结果prod_id     prod_price     prod_name -------     ----------     -------------------- BNBG02      3.4900         Bird bean bag toy BNBG01      3.4900         Fish bean bag toy BNBG03      3.4900         Rabbit bean bag toy RGAN01      4.9900         Raggedy Ann BR01        5.9900         8 inch teddy bear BR02        8.9900         12 inch teddy bear RYL01       9.4900         King doll RYL02       9.4900         Queen doll BR03        11.9900        18 inch teddy bear*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>ORDER BY 2</code>表示按 <code>SELECT</code> 清单中的第二个列 <code>prod_price</code> 进行排序。<code>ORDER BY 2，3</code> 表示先按 <code>prod_price</code>，再按 <code>prod_name</code> 进行排序。</p><p>这一技术的主要好处在于不用重新输入列名。但它也有缺点。</p><ul><li>首先，不明确给出列名有可能造成错用列名排序。</li><li>其次，在对 <code>SELECT</code> 清单进行更改时容易错误地对数据进行排序（忘记对 <code>ORDER BY</code> 子句做相应的改动）。</li><li>最后，如果进行排序的列不在 <code>SELECT</code> 清单中，显然不能使用这项技术。如果有必要，可以混合使用实际列名和相对列位置。</li></ul><h4 id="指定排序方向">指定排序方向</h4><p>数据排序不限于升序排序（从 A 到 Z），这只是默认的排序顺序。还可以使用 <code>ORDER BY</code> 子句进行降序（从 Z 到 A）排序。为了进行降序排序，必须指定 <code>DESC</code> 关键字。</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> prod_id<span class="token punctuation">,</span> prod_price<span class="token punctuation">,</span> prod_name <span class="token keyword">FROM</span> Products <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> prod_price <span class="token keyword">DESC</span><span class="token punctuation">;</span><span class="token comment">/* 输出结果prod_id     prod_price     prod_name -------     ----------     -------------------- BR03        11.9900        18 inch teddy bear RYL01       9.4900         King doll RYL02       9.4900         Queen doll BR02        8.9900         12 inch teddy bear BR01        5.9900         8 inch teddy bear RGAN01      4.9900         Raggedy Ann BNBG01      3.4900         Fish bean bag toy BNBG02      3.4900         Bird bean bag toy BNBG03      3.4900         Rabbit bean bag toy*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> prod_id<span class="token punctuation">,</span> prod_price<span class="token punctuation">,</span> prod_name <span class="token keyword">FROM</span> Products <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> prod_price <span class="token keyword">DESC</span><span class="token punctuation">,</span> prod_name<span class="token punctuation">;</span><span class="token comment">/* 输出结果prod_id     prod_price     prod_name -------     ----------     -------------------- BR03        11.9900        18 inch teddy bear RYL01       9.4900         King doll RYL02       9.4900         Queen doll BR02        8.9900         12 inch teddy bearBR01        5.9900         8 inch teddy bear RGAN01      4.9900         Raggedy Ann BNBG02      3.4900         Bird bean bag toy BNBG01      3.4900         Fish bean bag toy BNBG03      3.4900         Rabbit bean bag toy*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>DESC</code> 关键字只应用到直接位于其前面的列名。在上例中，只对 <code>prod_price</code>列指定 DESC，对 <code>prod_name</code> 列不指定。因此，<code>prod_price</code> 列以降序排序，而 <code>prod_name</code> 列（在每个价格内）仍然按标准的升序排序。</p><p>如果想在多个列上进行降序排序，必须对每一列指定 <code>DESC</code> 关键字。</p><p>请注意，<code>DESC</code> 是 <code>DESCENDING</code> 的缩写，这两个关键字都可以使用。与 <code>DESC</code>相对的是 <code>ASC</code>（或 <code>ASCENDING</code>），在升序排序时可以指定它。但实际上，<code>ASC</code> 没有多大用处，因为升序是默认的（如果既不指定 <code>ASC</code> 也不指定<code>DESC</code>，则假定为 <code>ASC</code>）。</p><h3 id="过滤数据">过滤数据</h3><p>如何使用 <code>SELECT</code> 语句的 <code>WHERE</code> 子句指定搜索条件</p><h4 id="使用-WHERE-子句">使用 <code>WHERE</code> 子句</h4><p>数据库表一般包含大量的数据，很少需要检索表中的所有行。通常只会根据特定操作或报告的需要提取表数据的子集。只检索所需数据需要指定搜索条件（search criteria），搜索条件也称为过滤条件（filter condition）。</p><p>在 <code>SELECT</code> 语句中，数据根据 <code>WHERE</code> 子句中指定的搜索条件进行过滤。<code>WHERE</code> 子句在表名（<code>FROM</code> 子句）之后给出</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> prod_name<span class="token punctuation">,</span> prod_price <span class="token keyword">FROM</span> Products <span class="token keyword">WHERE</span> prod_price <span class="token operator">=</span> <span class="token number">3.49</span><span class="token punctuation">;</span><span class="token comment">/* 输出结果prod_name               prod_price-------------------     ---------- Fish bean bag toy       3.49 Bird bean bag toy       3.49 Rabbit bean bag toy     3.49*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>检查这一列的值是否为指定值，据此过滤数据。不过，SQL 不止能测试等于，还能做更多的事情。</p><blockquote><p>在同时使用 <code>ORDER BY</code> 和 <code>WHERE</code> 子句时，应该让 <code>ORDER BY</code> 位于<code>WHERE</code> 之后，否则将会产生错误</p></blockquote><h4 id="WHERE-子句操作符"><code>WHERE</code> 子句操作符</h4><table><thead><tr><th>操作符</th><th>说明</th><th>操作符</th><th>说明</th></tr></thead><tbody><tr><td>=</td><td>等于</td><td>&gt;</td><td>大于</td></tr><tr><td>&lt;&gt;</td><td>不等于</td><td>&gt;=</td><td>大于等于</td></tr><tr><td>!=</td><td>不等于</td><td>!&gt;</td><td>不大于</td></tr><tr><td>&lt;</td><td>小于</td><td>BETEEN</td><td>在指定的两个值之间</td></tr><tr><td>&lt;=</td><td>小于等于</td><td>IS NULL</td><td>为NULL值</td></tr><tr><td>!&lt;</td><td>不小于</td><td></td><td></td></tr></tbody></table><h4 id="检查单个值">检查单个值</h4><p>列出所有价格小于 10 美元的产品</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> prod_name<span class="token punctuation">,</span> prod_price <span class="token keyword">FROM</span> Products <span class="token keyword">WHERE</span> prod_price <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token comment">/*输出结果prod_name               prod_price -------------------     ---------- Fish bean bag toy       3.49 Bird bean bag toy       3.49 Rabbit bean bag toy     3.49 8 inch teddy bear       5.99 12 inch teddy bear      8.99 Raggedy Ann             4.99 King doll               9.49 Queen doll              9.49*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="不匹配检查">不匹配检查</h4><p>列出所有不是供应商 DLL01 制造的产品</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> vend_id<span class="token punctuation">,</span> prod_name <span class="token keyword">FROM</span> Products <span class="token keyword">WHERE</span> vend_id <span class="token operator">&lt;></span> <span class="token string">'DLL01'</span><span class="token punctuation">;</span><span class="token comment">/*输出结果vend_id        prod_name ----------     ------------------ BRS01          8 inch teddy bearBRS01          12 inch teddy bear BRS01          18 inch teddy bear FNG01          King doll FNG01          Queen doll*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="范围值检查">范围值检查</h4><p>要检查某个范围的值，可以使用 <code>BETWEEN</code> 操作符。其语法与其他 <code>WHERE</code>子句的操作符稍有不同，因为它需要两个值，即范围的开始值和结束值。例如，<code>BETWEEN</code> 操作符可用来检索价格在 5 美元和 10 美元之间的所有产品，或在指定的开始日期和结束日期之间的所有日期。</p><p>检索价格在 5 美元和 10美元之间的所有产品</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> prod_name<span class="token punctuation">,</span> prod_price <span class="token keyword">FROM</span> Products <span class="token keyword">WHERE</span> prod_price <span class="token operator">BETWEEN</span> <span class="token number">5</span> <span class="token operator">AND</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token comment">/*输出结果prod_name               prod_price -------------------     ---------- 8 inch teddy bear       5.99 12 inch teddy bear      8.99 King doll               9.49 Queen doll              9.49*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在使用 BETWEEN 时，必须指定两个值——所需范围的低端值和高端值。这两个值必须用 AND 关键字分隔。BETWEEN 匹配范围中所有的值，<strong>包括</strong>指定的开始值和结束值。</p><h4 id="空值检查">空值检查</h4><p>在创建表时，表设计人员可以指定其中的列能否不包含值。在一个列不包含值时，称其包含空值 NULL。</p><blockquote><p>NULL ：无值（no value），它与字段包含 0、空字符串或仅仅包含空格不同。</p></blockquote><p>确定值是否为 NULL，不能简单地检查是否= NULL。<code>SELECT</code> 语句有一个特殊的 <code>WHERE</code> 子句，可用来检查具有 NULL 值的列。这个 <code>WHERE</code> 子句就是 <code>IS NULL</code> 子句。</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> prod_name<span class="token keyword">FROM</span> Products <span class="token keyword">WHERE</span> prod_price <span class="token operator">IS</span> <span class="token boolean">NULL</span><span class="token punctuation">;</span><span class="token comment">/*输出结果prod_name-------------------N/A*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> cust_name <span class="token keyword">FROM</span> CUSTOMERS <span class="token keyword">WHERE</span> cust_email <span class="token operator">IS</span> <span class="token boolean">NULL</span><span class="token punctuation">;</span><span class="token comment">/*输出结果cust_name ---------- Kids Place The Toy Store*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>通过过滤选择不包含指定值的所有行时，你可能希望返回含 NULL 值的行。但是这做不到。因为未知（unknown）有特殊的含义，数据库不知道它们是否匹配，所以在进行匹配过滤或非匹配过滤时，不会返回这些结果。</p><p>过滤数据时，一定要验证被过滤列中含 NULL 的行确实出现在返回的数据中。</p></blockquote><h3 id="高级数据过滤">高级数据过滤</h3><p>如何组合 WHERE 子句以建立功能更强、更高级的搜索条件，以及学习如何使用 NOT 和 IN 操作符</p><h4 id="组合-WHERE-子句">组合 <code>WHERE</code> 子句</h4><h5 id="AND操作符"><code>AND</code>操作符</h5><p>要通过不止一个列进行过滤，可以使用 AND 操作符给 WHERE 子句附加条件。</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> prod_id<span class="token punctuation">,</span> prod_price<span class="token punctuation">,</span> prod_name<span class="token keyword">FROM</span> Products <span class="token keyword">WHERE</span> vend_id <span class="token operator">=</span> <span class="token string">'DLL01'</span> <span class="token operator">AND</span> prod_price <span class="token operator">&lt;=</span> <span class="token number">4</span><span class="token punctuation">;</span><span class="token comment">/*输出结果prod_id     prod_price   prod_name -------     ----------   -------------------- BNBG02      3.49         Bird bean bag toy BNBG01      3.49         Fish bean bag toy BNBG03      3.49         Rabbit bean bag toy*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>AND</code> 指示 DBMS 只返回满足所有给定条件的行。</p><h5 id="OR操作符"><code>OR</code>操作符</h5><p><code>OR</code> 操作符与 <code>AND</code> 操作符正好相反，它指示 DBMS 检索匹配任一条件的行。</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> prod_name<span class="token punctuation">,</span> prod_price <span class="token keyword">FROM</span> Products <span class="token keyword">WHERE</span> vend_id <span class="token operator">=</span> <span class="token string">'DLL01'</span> <span class="token operator">OR</span> vend_id <span class="token operator">=</span> <span class="token string">'BRS01'</span><span class="token punctuation">;</span><span class="token comment">/*输出结果prod_name               prod_price -------------------     ---------- 8 inch teddy bear    5.9912 inch teddy bear    8.9918 inch teddy bear    11.99Fish bean bag toy    3.49Bird bean bag toy    3.49Rabbit bean bag toy  3.49Raggedy Ann            4.99*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="求值顺序">求值顺序</h5><p>WHERE 子句可以包含任意数目的 <code>AND</code> 和 <code>OR</code> 操作符。允许两者结合以进行复杂、高级的过滤。</p><p>SQL（像多数语言一样）在处理 <code>OR</code> 操作符前，优先处理 <code>AND</code> 操作符。圆括号具有比 AND 或 OR 操作符更高的求值顺序</p><h4 id="IN-操作符"><code>IN</code> 操作符</h4><p><code>IN</code> 操作符用来指定条件范围，范围中的每个条件都可以进行匹配。<code>IN</code> 取一组由逗号分隔、括在圆括号中的合法值。</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> prod_name<span class="token punctuation">,</span> prod_price <span class="token keyword">FROM</span> Products <span class="token keyword">WHERE</span> vend_id <span class="token operator">IN</span> <span class="token punctuation">(</span> <span class="token string">'DLL01'</span><span class="token punctuation">,</span> <span class="token string">'BRS01'</span> <span class="token punctuation">)</span> <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> prod_name<span class="token punctuation">;</span><span class="token comment">/*输出结果prod_name               prod_price -------------------     ---------- 12 inch teddy bear      8.9918 inch teddy bear      11.998 inch teddy bear       5.99Bird bean bag toy       3.49Fish bean bag toy       3.49Rabbit bean bag toy     3.49Raggedy Ann             4.99*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>此 <code>SELECT</code> 语句检索由供应商 DLL01 和 BRS01 制造的所有产品。<code>IN</code> 操作符后跟由逗号分隔的合法值，这些值必须括在圆括号中。</p><p>同样的<code>OR</code>操作符也可以实现</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> prod_name<span class="token punctuation">,</span> prod_price <span class="token keyword">FROM</span> Products <span class="token keyword">WHERE</span> vend_id <span class="token operator">=</span> <span class="token string">'DLL01'</span> <span class="token operator">OR</span> vend_id <span class="token operator">=</span> <span class="token string">'BRS01'</span> <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> prod_name<span class="token punctuation">;</span><span class="token comment">/*输出结果prod_name               prod_price -------------------     ---------- 12 inch teddy bear      8.9918 inch teddy bear      11.998 inch teddy bear       5.99Bird bean bag toy       3.49Fish bean bag toy       3.49Rabbit bean bag toy     3.49Raggedy Ann             4.99*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>为什么要使用 <code>IN</code> 操作符？其优点如下。</p><ul><li>在有很多合法选项时，<code>IN</code> 操作符的语法更清楚，更直观。</li><li>在与其他 <code>AND</code> 和 <code>OR</code> 操作符组合使用 <code>IN</code> 时，求值顺序更容易管理。</li><li><code>IN</code> 操作符一般比一组 <code>OR</code> 操作符执行得更快（在上面这个合法选项很少的例子中，你看不出性能差异）。</li><li><code>IN</code> 的最大优点是可以包含其他 <code>SELECT</code> 语句，能够更动态地建立<code>WHERE</code> 子句。</li></ul><h4 id="NOT-操作符"><code>NOT</code> 操作符</h4><p><code>WHERE</code> 子句中的 <code>NOT</code> 操作符有且只有一个功能，那就是否定其后所跟的任何条件。</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> prod_name <span class="token keyword">FROM</span> Products <span class="token keyword">WHERE</span> <span class="token operator">NOT</span> vend_id <span class="token operator">=</span> <span class="token string">'DLL01'</span> <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> prod_name<span class="token punctuation">;</span><span class="token comment">/*输出结果prod_name ------------------ 12 inch teddy bear 18 inch teddy bear 8 inch teddy bear King doll Queen doll*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>NOT</code> 否定跟在其后的条件匹配非 DLL01 之外的所有东西</p><blockquote><p>同样也可以使用<code>&lt;&gt;</code>操作符来完成</p><p>对于简单的 <code>WHERE</code> 子句，使用 <code>NOT</code> 确实没有什么优势。但在更复杂的子句中，<code>NOT</code> 是非常有用的。例如，在与 <code>IN</code> 操作符联合使用时，<code>NOT</code> 可以非常简单地找出与条件列表不匹配的行。</p></blockquote><h3 id="用通配符进行过滤">用通配符进行过滤</h3><h4 id="LIKE-操作符"><code>LIKE</code> 操作符</h4><p>通配符：用来匹配值的一部分的特殊字符。</p><p>搜索模式：由字面值、通配符或两者组合构成的搜索条件。</p><p>通配符本身实际上是 SQL 的 <code>WHERE</code> 子句中有特殊含义的字符，SQL 支持几种通配符。为在搜索子句中使用通配符，必须使用 LIKE 操作符。<code>LIKE</code>指示 DBMS，后跟的搜索模式利用通配符匹配而不是简单的相等匹配进行比较。</p><p>通配符搜索只能用于文本字段（字符串），非文本数据类型字段不能使用通配符搜索。</p><h5 id="百分号（-）通配符">百分号（<code>%</code>）通配符</h5><p>最常使用的通配符是百分号（<code>%</code>）。在搜索串中，<code>%</code>表示任何字符出现任意次数。</p><p>找出所有以词 Fish 起头的产品</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> prod_id<span class="token punctuation">,</span> prod_name  <span class="token keyword">FROM</span> Products  <span class="token keyword">WHERE</span> prod_name <span class="token operator">LIKE</span> <span class="token string">'Fish%'</span><span class="token punctuation">;</span><span class="token comment">/*输出结果prod_id     prod_name  -------     ------------------    BNBG01      Fish bean bag toy*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>%</code>告诉 DBMS 接受 Fish 之后的任意字符，不管它有多少字符</p><blockquote><p>区分大小写：根据 DBMS 的不同及其配置，搜索可以是区分大小写的。如果区分大小写，则’fish%'与 Fish bean bag toy 就不匹配。MySQL默认不区分大小写</p></blockquote><p>通配符可在搜索模式中的任意位置使用，并且可以使用多个通配符。</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> prod_id<span class="token punctuation">,</span> prod_name  <span class="token keyword">FROM</span> Products  <span class="token keyword">WHERE</span> prod_name <span class="token operator">LIKE</span> <span class="token string">'%bean bag%'</span><span class="token punctuation">;</span><span class="token comment">/*输出结果prod_id      prod_name --------     --------------------  BNBG01       Fish bean bag toy  BNBG02       Bird bean bag toy  BNBG03       Rabbit bean bag toy*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>搜索模式<code>%bean bag%</code>表示匹配任何位置上包含文本 bean bag 的值，不论它之前或之后出现什么字符。</p><p>通配符也可以出现在搜索模式字符之间。</p><blockquote><p>需要特别注意，除了能匹配一个或多个字符外，<code>%</code>还能匹配 0 个字符。<code>%</code>代表搜索模式中给定位置的 0 个、1 个或多个字符。</p></blockquote><blockquote><p>通配符<code>%</code>看起来像是可以匹配任何东西，但有个例外，这就是 <code>NULL</code>。</p></blockquote><h5 id="下划线（-）通配符">下划线（<code>_</code>）通配符</h5><p>另一个有用的通配符是下划线（<code>_</code>）。下划线的用途与<code>%</code>一样，但它只匹配单个字符，而不是多个字符。</p><h4 id="使用通配符的技巧">使用通配符的技巧</h4><p>通配符搜索的处理一般要比前面讨论的其他搜索所花时间更长。</p><ul><li>不要过度使用通配符。如果其他操作符能达到相同的目的，应该使用其他操作符。</li><li>在确实需要使用通配符时，也尽量不要把它们用在搜索模式的开始处。把通配符置于开始处，搜索起来是最慢的。</li><li>仔细注意通配符的位置。如果放错地方，可能不会返回想要的数据。</li></ul><h3 id="用正则表达式进行搜索">用正则表达式进行搜索</h3><p>正则表达式是用来匹配文本的特殊的串（字符集合）</p><p>MySQL用<code>WHERE</code>子句对正则表达式提供了初步的支持，允许你指定正则表达式，过滤<code>SELECT</code>检索出的数据。</p><h4 id="基本字符匹配">基本字符匹配</h4><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> prod_name<span class="token keyword">FROM</span> products<span class="token keyword">WHERE</span> prod_name <span class="token operator">REGEXP</span> <span class="token string">'12'</span><span class="token keyword">ORDER</span> <span class="token keyword">BY</span> prod_name<span class="token punctuation">;</span><span class="token comment">/*输出结果prod_name-------=12 inch teddy bear*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>除关键字<code>LIKE</code>被<code>REGEXP</code>替代外，这条语句看上去非常像使用<code>LIKE</code>的语句。</p><p>它告诉MySQL：<code>REGEXP</code>后所跟的东西作为正则表达式处理。</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> prod_name<span class="token keyword">FROM</span> products<span class="token keyword">WHERE</span> prod_name <span class="token operator">REGEXP</span> <span class="token string">'1. inch teddy bear'</span><span class="token keyword">ORDER</span> <span class="token keyword">BY</span> prod_name<span class="token punctuation">;</span><span class="token comment">/*输出结果prod_name-------=12 inch teddy bear18 inch teddy bear*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>.</code>是正则表达式语言中一个特殊的字符，它表示匹配任意一个字符</p><h4 id="进行OR匹配">进行OR匹配</h4><p>为搜索两个串之一（或者为这个串，或者为另一个串），使用<code>|</code></p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> prod_name<span class="token keyword">FROM</span> products<span class="token keyword">WHERE</span> prod_name <span class="token operator">REGEXP</span> <span class="token string">'12|18'</span><span class="token keyword">ORDER</span> <span class="token keyword">BY</span> prod_name<span class="token punctuation">;</span><span class="token comment">/*输出结果prod_name-------=12 inch teddy bear18 inch teddy bear*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用|从功能上类似于在<code>SELECT</code>语句中使用<code>OR</code>语句，多个OR条件可并入单个正则表达式。</p><h4 id="匹配几个字符之一">匹配几个字符之一</h4><p>匹配任何单一字符。但是，如果你只想匹配特定的字符，怎么办？可通过指定一组用<code>[]</code>括起来的字符来完成，如下所示：</p><pre class="line-numbers language-SQL" data-language="SQL"><code class="language-SQL">SELECT prod_nameFROM productsWHERE prod_name REGEXP &#39;[128] inch&#39;ORDER BY prod_name;&#x2F;*输出结果prod_name-------&#x3D;12 inch teddy bear18 inch teddy bear8 inch teddy bear*&#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>[128]</code>定义一组字符，的意思是匹配包含1或2或8</p><h4 id="匹配范围">匹配范围</h4><p>集合可用来定义要匹配的一个或多个字符，如<code>[0-9]</code>、<code>[a-z]</code></p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> prod_name<span class="token keyword">FROM</span> products<span class="token keyword">WHERE</span> prod_name <span class="token operator">REGEXP</span> <span class="token string">'[1-7] inch'</span><span class="token keyword">ORDER</span> <span class="token keyword">BY</span> prod_name<span class="token punctuation">;</span><span class="token comment">/*输出结果prod_name--------12 inch teddy bear*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="匹配特殊字符">匹配特殊字符</h4><p>正则表达式使用中会占据一些字符，例如<code>.</code>、<code>|</code>等，如果要匹配这些字符则需要转义使用<code>\\</code></p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> vend_name<span class="token keyword">FROM</span> vendors<span class="token keyword">WHERE</span> vend_name <span class="token operator">REGEXP</span> <span class="token string">'\\.'</span><span class="token keyword">ORDER</span> <span class="token keyword">BY</span> vend_name<span class="token punctuation">;</span><span class="token comment">/*输出结果vend_name--------Doll House Inc.Furball Inc.*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>\\</code>也用来引用元字符（具有特殊含义的字符）</p><table><thead><tr><th>字符</th><th>说明</th></tr></thead><tbody><tr><td><code>\\f</code></td><td>换页</td></tr><tr><td><code>\\n</code></td><td>换行</td></tr><tr><td><code>\\r</code></td><td>回车</td></tr><tr><td><code>\\t</code></td><td>制表</td></tr><tr><td><code>\\v</code></td><td>纵向制表</td></tr><tr><td><code>\\\</code></td><td>反斜杠（<code>\</code>）字符本身</td></tr></tbody></table><h4 id="匹配字符类">匹配字符类</h4><p>存在找出你自己经常使用的数字、所有字母字符或所有数字字母字符等的匹配。为更方便工作，可以使用预定义的字符集，称为字符类</p><table><thead><tr><th>类</th><th>说明</th></tr></thead><tbody><tr><td><code>[:alnum:]</code></td><td>任意字母和数字（同<code>[a-zA-Z0-9]</code>）</td></tr><tr><td><code>[:alpha:]</code></td><td>任意字符（同<code>[a-zA-Z]</code>）</td></tr><tr><td><code>[:blank:]</code></td><td>空格和制表（同<code>[\\t]</code>）</td></tr><tr><td><code>[:cntrl:]</code></td><td>ASCII控制字符（ASCII 0到31和127）</td></tr><tr><td><code>[:digit:]</code></td><td>任意数字（同<code>[0-9]</code>）</td></tr><tr><td><code>[:graph:]</code></td><td>与<code>[:print:]</code>相同，但不包括空格</td></tr><tr><td><code>[:lower:]</code></td><td>任意小写字母（同<code>[a-z]</code>）</td></tr><tr><td><code>[:print:]</code></td><td>任意可打印字符</td></tr><tr><td><code>[:punct:]</code></td><td>既不在<code>[:alnum:]</code>又不在<code>[:cntrl:]</code>中的任意字符</td></tr><tr><td><code>[:space:]</code></td><td>包括空格在内的任意空白字符（同<code>[\\f\\n\\r\\t\\v]</code>）</td></tr><tr><td><code>[:upper:]</code></td><td>任意大写字母（同<code>[A-Z]</code>）</td></tr><tr><td><code>[:xdigit:]</code></td><td>任意十六进制数字（同<code>[a-fA-F0-9]</code>）</td></tr></tbody></table><h4 id="匹配多个实例">匹配多个实例</h4><p>你可能需要寻找所有的数，不管数中包含多少数字，或者你可能想寻找一个单词并且还能够适应一个尾随的s（如果存在），等等。</p><table><thead><tr><th>元字符</th><th>说明</th></tr></thead><tbody><tr><td><code>*</code></td><td>0个或多个匹配</td></tr><tr><td><code>+</code></td><td>1个或多个匹配（等于<code>&#123;1,&#125;</code>）</td></tr><tr><td><code>？</code></td><td>0个或1个匹配（等于<code>&#123;0,1&#125;</code>）</td></tr><tr><td><code>&#123;n&#125;</code></td><td>指定数目的匹配</td></tr><tr><td><code>&#123;n,&#125;</code></td><td>不少于指定数目的匹配</td></tr><tr><td><code>&#123;n,m&#125;</code></td><td>匹配数目的范围（m不超过255）</td></tr></tbody></table><h4 id="定位符">定位符</h4><p>匹配特定位置的文本</p><table><thead><tr><th>元字符</th><th>说明</th></tr></thead><tbody><tr><td><code>^</code></td><td>文本的开始</td></tr><tr><td><code>$</code></td><td>文本的结尾</td></tr><tr><td><code>[[:&lt;:]]</code></td><td>词的开始</td></tr><tr><td><code>[[:&gt;:]]</code></td><td>词的结尾</td></tr></tbody></table><h3 id="数据库定义语言（DDL）">数据库定义语言（DDL）</h3><h4 id="操作数据库">操作数据库</h4><p>CRUD：增(Create)查(Retrieve)改(Update)删(Delete)</p><h5 id="查-Retrieve">查(Retrieve)</h5><p><code>SHOW DATABASES;</code>查询所有数据库的名称</p><p><code>SHOW CREATE DATABASE &lt;数据库名称&gt;;</code>查询某个数据库的字符集(查询某个数据库的创建语句)</p><h5 id="增-Create">增(Create)</h5><p><code>CREATE DATABASE &lt;数据库名称&gt;;</code>创建数据库</p><p><code>CREATE DATABASE IF NOT EXISTS &lt;数据库名称&gt;;</code>创建前先进行判断</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">CREATE DATABASE IF NOT EXISTS &lt;数据库名称&gt; CHARACTER SET &lt;字符集&gt;;-- 创建指定字符集数据库<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="改-Update">改(Update)</h5><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">ALTER DATABASE &lt;数据库名称&gt; CHARACTER SET utf8;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="删-Delete">删(Delete)</h5><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">DROP DATABASE IF EXISTS &lt;数据库名称&gt;;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="操作表">操作表</h4><h3 id="数据库操作语言（DML）">数据库操作语言（DML）</h3><h3 id="数据库查询语言（DQL）">数据库查询语言（DQL）</h3><p>查询表中的数据</p><h4 id="基础查询">基础查询</h4><p>语法：<code>SELECT 查询列表 FROM 表名;</code></p><blockquote><p>可以查询表中的字段、常量值、表达式、函数</p><p>查询结果是一个虚拟的表格</p></blockquote><p><strong>查询表中的单个字段</strong></p><p>实例<code>SELECT last_name FROM employees;</code></p><p><strong>查询表中的多个字段</strong></p><p>实例<code>SELECT last_name,salary,email FROM employees;</code></p><p><strong>查询表中的所有字段</strong></p><p><code>SELECT * FROM employees;</code></p><h3 id="数据库控制语言（DCL）">数据库控制语言（DCL）</h3><h2 id="示例数据">示例数据</h2><p>建表语句</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- -----------------------------------------</span><span class="token comment">-- Sams Teach Yourself SQL in 10 Minutes</span><span class="token comment">-- http://forta.com/books/0672336073/</span><span class="token comment">-- Example table creation scripts for MySQL.</span><span class="token comment">-- -----------------------------------------</span><span class="token comment">-- ----------------------</span><span class="token comment">-- Create Customers table</span><span class="token comment">-- ----------------------</span><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> Customers<span class="token punctuation">(</span>  cust_id      <span class="token keyword">char</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>  <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token punctuation">,</span>  cust_name    <span class="token keyword">char</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span>  <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token punctuation">,</span>  cust_address <span class="token keyword">char</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span>  <span class="token boolean">NULL</span> <span class="token punctuation">,</span>  cust_city    <span class="token keyword">char</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span>  <span class="token boolean">NULL</span> <span class="token punctuation">,</span>  cust_state   <span class="token keyword">char</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>   <span class="token boolean">NULL</span> <span class="token punctuation">,</span>  cust_zip     <span class="token keyword">char</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>  <span class="token boolean">NULL</span> <span class="token punctuation">,</span>  cust_country <span class="token keyword">char</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span>  <span class="token boolean">NULL</span> <span class="token punctuation">,</span>  cust_contact <span class="token keyword">char</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span>  <span class="token boolean">NULL</span> <span class="token punctuation">,</span>  cust_email   <span class="token keyword">char</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span> <span class="token boolean">NULL</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">-- -----------------------</span><span class="token comment">-- Create OrderItems table</span><span class="token comment">-- -----------------------</span><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> OrderItems<span class="token punctuation">(</span>  order_num  <span class="token keyword">int</span>          <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token punctuation">,</span>  order_item <span class="token keyword">int</span>          <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token punctuation">,</span>  prod_id    <span class="token keyword">char</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>     <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token punctuation">,</span>  quantity   <span class="token keyword">int</span>          <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token punctuation">,</span>  item_price <span class="token keyword">decimal</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">-- -------------------</span><span class="token comment">-- Create Orders table</span><span class="token comment">-- -------------------</span><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> Orders<span class="token punctuation">(</span>  order_num  <span class="token keyword">int</span>      <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token punctuation">,</span>  order_date <span class="token keyword">datetime</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token punctuation">,</span>  cust_id    <span class="token keyword">char</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">-- ---------------------</span><span class="token comment">-- Create Products table</span><span class="token comment">-- ---------------------</span><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> Products<span class="token punctuation">(</span>  prod_id    <span class="token keyword">char</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>      <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token punctuation">,</span>  vend_id    <span class="token keyword">char</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>      <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token punctuation">,</span>  prod_name  <span class="token keyword">char</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span>     <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token punctuation">,</span>  prod_price <span class="token keyword">decimal</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span>  <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token punctuation">,</span>  prod_desc  <span class="token keyword">text</span>          <span class="token boolean">NULL</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">-- --------------------</span><span class="token comment">-- Create Vendors table</span><span class="token comment">-- --------------------</span><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> Vendors<span class="token punctuation">(</span>  vend_id      <span class="token keyword">char</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token punctuation">,</span>  vend_name    <span class="token keyword">char</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token punctuation">,</span>  vend_address <span class="token keyword">char</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span> <span class="token boolean">NULL</span> <span class="token punctuation">,</span>  vend_city    <span class="token keyword">char</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span> <span class="token boolean">NULL</span> <span class="token punctuation">,</span>  vend_state   <span class="token keyword">char</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>  <span class="token boolean">NULL</span> <span class="token punctuation">,</span>  vend_zip     <span class="token keyword">char</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token boolean">NULL</span> <span class="token punctuation">,</span>  vend_country <span class="token keyword">char</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span> <span class="token boolean">NULL</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">-- -------------------</span><span class="token comment">-- Define primary keys</span><span class="token comment">-- -------------------</span><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> Customers <span class="token keyword">ADD</span> <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span>cust_id<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> OrderItems <span class="token keyword">ADD</span> <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span>order_num<span class="token punctuation">,</span> order_item<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> Orders <span class="token keyword">ADD</span> <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span>order_num<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> Products <span class="token keyword">ADD</span> <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span>prod_id<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> Vendors <span class="token keyword">ADD</span> <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span>vend_id<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">-- -------------------</span><span class="token comment">-- Define foreign keys</span><span class="token comment">-- -------------------</span><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> OrderItems <span class="token keyword">ADD</span> <span class="token keyword">CONSTRAINT</span> FK_OrderItems_Orders <span class="token keyword">FOREIGN</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span>order_num<span class="token punctuation">)</span> <span class="token keyword">REFERENCES</span> Orders <span class="token punctuation">(</span>order_num<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> OrderItems <span class="token keyword">ADD</span> <span class="token keyword">CONSTRAINT</span> FK_OrderItems_Products <span class="token keyword">FOREIGN</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span>prod_id<span class="token punctuation">)</span> <span class="token keyword">REFERENCES</span> Products <span class="token punctuation">(</span>prod_id<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> Orders <span class="token keyword">ADD</span> <span class="token keyword">CONSTRAINT</span> FK_Orders_Customers <span class="token keyword">FOREIGN</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span>cust_id<span class="token punctuation">)</span> <span class="token keyword">REFERENCES</span> Customers <span class="token punctuation">(</span>cust_id<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> Products <span class="token keyword">ADD</span> <span class="token keyword">CONSTRAINT</span> FK_Products_Vendors <span class="token keyword">FOREIGN</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span>vend_id<span class="token punctuation">)</span> <span class="token keyword">REFERENCES</span> Vendors <span class="token punctuation">(</span>vend_id<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>具体数据</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- -------------------------------------------</span><span class="token comment">-- Sams Teach Yourself SQL in 10 Minutes</span><span class="token comment">-- http://forta.com/books/0672336073/</span><span class="token comment">-- Example table population scripts for MySQL.</span><span class="token comment">-- -------------------------------------------</span><span class="token comment">-- ------------------------</span><span class="token comment">-- Populate Customers table</span><span class="token comment">-- ------------------------</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> Customers<span class="token punctuation">(</span>cust_id<span class="token punctuation">,</span> cust_name<span class="token punctuation">,</span> cust_address<span class="token punctuation">,</span> cust_city<span class="token punctuation">,</span> cust_state<span class="token punctuation">,</span> cust_zip<span class="token punctuation">,</span> cust_country<span class="token punctuation">,</span> cust_contact<span class="token punctuation">,</span> cust_email<span class="token punctuation">)</span><span class="token keyword">VALUES</span><span class="token punctuation">(</span><span class="token string">'1000000001'</span><span class="token punctuation">,</span> <span class="token string">'Village Toys'</span><span class="token punctuation">,</span> <span class="token string">'200 Maple Lane'</span><span class="token punctuation">,</span> <span class="token string">'Detroit'</span><span class="token punctuation">,</span> <span class="token string">'MI'</span><span class="token punctuation">,</span> <span class="token string">'44444'</span><span class="token punctuation">,</span> <span class="token string">'USA'</span><span class="token punctuation">,</span> <span class="token string">'John Smith'</span><span class="token punctuation">,</span> <span class="token string">'sales@villagetoys.com'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> Customers<span class="token punctuation">(</span>cust_id<span class="token punctuation">,</span> cust_name<span class="token punctuation">,</span> cust_address<span class="token punctuation">,</span> cust_city<span class="token punctuation">,</span> cust_state<span class="token punctuation">,</span> cust_zip<span class="token punctuation">,</span> cust_country<span class="token punctuation">,</span> cust_contact<span class="token punctuation">)</span><span class="token keyword">VALUES</span><span class="token punctuation">(</span><span class="token string">'1000000002'</span><span class="token punctuation">,</span> <span class="token string">'Kids Place'</span><span class="token punctuation">,</span> <span class="token string">'333 South Lake Drive'</span><span class="token punctuation">,</span> <span class="token string">'Columbus'</span><span class="token punctuation">,</span> <span class="token string">'OH'</span><span class="token punctuation">,</span> <span class="token string">'43333'</span><span class="token punctuation">,</span> <span class="token string">'USA'</span><span class="token punctuation">,</span> <span class="token string">'Michelle Green'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> Customers<span class="token punctuation">(</span>cust_id<span class="token punctuation">,</span> cust_name<span class="token punctuation">,</span> cust_address<span class="token punctuation">,</span> cust_city<span class="token punctuation">,</span> cust_state<span class="token punctuation">,</span> cust_zip<span class="token punctuation">,</span> cust_country<span class="token punctuation">,</span> cust_contact<span class="token punctuation">,</span> cust_email<span class="token punctuation">)</span><span class="token keyword">VALUES</span><span class="token punctuation">(</span><span class="token string">'1000000003'</span><span class="token punctuation">,</span> <span class="token string">'Fun4All'</span><span class="token punctuation">,</span> <span class="token string">'1 Sunny Place'</span><span class="token punctuation">,</span> <span class="token string">'Muncie'</span><span class="token punctuation">,</span> <span class="token string">'IN'</span><span class="token punctuation">,</span> <span class="token string">'42222'</span><span class="token punctuation">,</span> <span class="token string">'USA'</span><span class="token punctuation">,</span> <span class="token string">'Jim Jones'</span><span class="token punctuation">,</span> <span class="token string">'jjones@fun4all.com'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> Customers<span class="token punctuation">(</span>cust_id<span class="token punctuation">,</span> cust_name<span class="token punctuation">,</span> cust_address<span class="token punctuation">,</span> cust_city<span class="token punctuation">,</span> cust_state<span class="token punctuation">,</span> cust_zip<span class="token punctuation">,</span> cust_country<span class="token punctuation">,</span> cust_contact<span class="token punctuation">,</span> cust_email<span class="token punctuation">)</span><span class="token keyword">VALUES</span><span class="token punctuation">(</span><span class="token string">'1000000004'</span><span class="token punctuation">,</span> <span class="token string">'Fun4All'</span><span class="token punctuation">,</span> <span class="token string">'829 Riverside Drive'</span><span class="token punctuation">,</span> <span class="token string">'Phoenix'</span><span class="token punctuation">,</span> <span class="token string">'AZ'</span><span class="token punctuation">,</span> <span class="token string">'88888'</span><span class="token punctuation">,</span> <span class="token string">'USA'</span><span class="token punctuation">,</span> <span class="token string">'Denise L. Stephens'</span><span class="token punctuation">,</span> <span class="token string">'dstephens@fun4all.com'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> Customers<span class="token punctuation">(</span>cust_id<span class="token punctuation">,</span> cust_name<span class="token punctuation">,</span> cust_address<span class="token punctuation">,</span> cust_city<span class="token punctuation">,</span> cust_state<span class="token punctuation">,</span> cust_zip<span class="token punctuation">,</span> cust_country<span class="token punctuation">,</span> cust_contact<span class="token punctuation">)</span><span class="token keyword">VALUES</span><span class="token punctuation">(</span><span class="token string">'1000000005'</span><span class="token punctuation">,</span> <span class="token string">'The Toy Store'</span><span class="token punctuation">,</span> <span class="token string">'4545 53rd Street'</span><span class="token punctuation">,</span> <span class="token string">'Chicago'</span><span class="token punctuation">,</span> <span class="token string">'IL'</span><span class="token punctuation">,</span> <span class="token string">'54545'</span><span class="token punctuation">,</span> <span class="token string">'USA'</span><span class="token punctuation">,</span> <span class="token string">'Kim Howard'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">-- ----------------------</span><span class="token comment">-- Populate Vendors table</span><span class="token comment">-- ----------------------</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> Vendors<span class="token punctuation">(</span>vend_id<span class="token punctuation">,</span> vend_name<span class="token punctuation">,</span> vend_address<span class="token punctuation">,</span> vend_city<span class="token punctuation">,</span> vend_state<span class="token punctuation">,</span> vend_zip<span class="token punctuation">,</span> vend_country<span class="token punctuation">)</span><span class="token keyword">VALUES</span><span class="token punctuation">(</span><span class="token string">'BRS01'</span><span class="token punctuation">,</span><span class="token string">'Bears R Us'</span><span class="token punctuation">,</span><span class="token string">'123 Main Street'</span><span class="token punctuation">,</span><span class="token string">'Bear Town'</span><span class="token punctuation">,</span><span class="token string">'MI'</span><span class="token punctuation">,</span><span class="token string">'44444'</span><span class="token punctuation">,</span> <span class="token string">'USA'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> Vendors<span class="token punctuation">(</span>vend_id<span class="token punctuation">,</span> vend_name<span class="token punctuation">,</span> vend_address<span class="token punctuation">,</span> vend_city<span class="token punctuation">,</span> vend_state<span class="token punctuation">,</span> vend_zip<span class="token punctuation">,</span> vend_country<span class="token punctuation">)</span><span class="token keyword">VALUES</span><span class="token punctuation">(</span><span class="token string">'BRE02'</span><span class="token punctuation">,</span><span class="token string">'Bear Emporium'</span><span class="token punctuation">,</span><span class="token string">'500 Park Street'</span><span class="token punctuation">,</span><span class="token string">'Anytown'</span><span class="token punctuation">,</span><span class="token string">'OH'</span><span class="token punctuation">,</span><span class="token string">'44333'</span><span class="token punctuation">,</span> <span class="token string">'USA'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> Vendors<span class="token punctuation">(</span>vend_id<span class="token punctuation">,</span> vend_name<span class="token punctuation">,</span> vend_address<span class="token punctuation">,</span> vend_city<span class="token punctuation">,</span> vend_state<span class="token punctuation">,</span> vend_zip<span class="token punctuation">,</span> vend_country<span class="token punctuation">)</span><span class="token keyword">VALUES</span><span class="token punctuation">(</span><span class="token string">'DLL01'</span><span class="token punctuation">,</span><span class="token string">'Doll House Inc.'</span><span class="token punctuation">,</span><span class="token string">'555 High Street'</span><span class="token punctuation">,</span><span class="token string">'Dollsville'</span><span class="token punctuation">,</span><span class="token string">'CA'</span><span class="token punctuation">,</span><span class="token string">'99999'</span><span class="token punctuation">,</span> <span class="token string">'USA'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> Vendors<span class="token punctuation">(</span>vend_id<span class="token punctuation">,</span> vend_name<span class="token punctuation">,</span> vend_address<span class="token punctuation">,</span> vend_city<span class="token punctuation">,</span> vend_state<span class="token punctuation">,</span> vend_zip<span class="token punctuation">,</span> vend_country<span class="token punctuation">)</span><span class="token keyword">VALUES</span><span class="token punctuation">(</span><span class="token string">'FRB01'</span><span class="token punctuation">,</span><span class="token string">'Furball Inc.'</span><span class="token punctuation">,</span><span class="token string">'1000 5th Avenue'</span><span class="token punctuation">,</span><span class="token string">'New York'</span><span class="token punctuation">,</span><span class="token string">'NY'</span><span class="token punctuation">,</span><span class="token string">'11111'</span><span class="token punctuation">,</span> <span class="token string">'USA'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> Vendors<span class="token punctuation">(</span>vend_id<span class="token punctuation">,</span> vend_name<span class="token punctuation">,</span> vend_address<span class="token punctuation">,</span> vend_city<span class="token punctuation">,</span> vend_state<span class="token punctuation">,</span> vend_zip<span class="token punctuation">,</span> vend_country<span class="token punctuation">)</span><span class="token keyword">VALUES</span><span class="token punctuation">(</span><span class="token string">'FNG01'</span><span class="token punctuation">,</span><span class="token string">'Fun and Games'</span><span class="token punctuation">,</span><span class="token string">'42 Galaxy Road'</span><span class="token punctuation">,</span><span class="token string">'London'</span><span class="token punctuation">,</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span><span class="token string">'N16 6PS'</span><span class="token punctuation">,</span> <span class="token string">'England'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> Vendors<span class="token punctuation">(</span>vend_id<span class="token punctuation">,</span> vend_name<span class="token punctuation">,</span> vend_address<span class="token punctuation">,</span> vend_city<span class="token punctuation">,</span> vend_state<span class="token punctuation">,</span> vend_zip<span class="token punctuation">,</span> vend_country<span class="token punctuation">)</span><span class="token keyword">VALUES</span><span class="token punctuation">(</span><span class="token string">'JTS01'</span><span class="token punctuation">,</span><span class="token string">'Jouets et ours'</span><span class="token punctuation">,</span><span class="token string">'1 Rue Amusement'</span><span class="token punctuation">,</span><span class="token string">'Paris'</span><span class="token punctuation">,</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span><span class="token string">'45678'</span><span class="token punctuation">,</span> <span class="token string">'France'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">-- -----------------------</span><span class="token comment">-- Populate Products table</span><span class="token comment">-- -----------------------</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> Products<span class="token punctuation">(</span>prod_id<span class="token punctuation">,</span> vend_id<span class="token punctuation">,</span> prod_name<span class="token punctuation">,</span> prod_price<span class="token punctuation">,</span> prod_desc<span class="token punctuation">)</span><span class="token keyword">VALUES</span><span class="token punctuation">(</span><span class="token string">'BR01'</span><span class="token punctuation">,</span> <span class="token string">'BRS01'</span><span class="token punctuation">,</span> <span class="token string">'8 inch teddy bear'</span><span class="token punctuation">,</span> <span class="token number">5.99</span><span class="token punctuation">,</span> <span class="token string">'8 inch teddy bear, comes with cap and jacket'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> Products<span class="token punctuation">(</span>prod_id<span class="token punctuation">,</span> vend_id<span class="token punctuation">,</span> prod_name<span class="token punctuation">,</span> prod_price<span class="token punctuation">,</span> prod_desc<span class="token punctuation">)</span><span class="token keyword">VALUES</span><span class="token punctuation">(</span><span class="token string">'BR02'</span><span class="token punctuation">,</span> <span class="token string">'BRS01'</span><span class="token punctuation">,</span> <span class="token string">'12 inch teddy bear'</span><span class="token punctuation">,</span> <span class="token number">8.99</span><span class="token punctuation">,</span> <span class="token string">'12 inch teddy bear, comes with cap and jacket'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> Products<span class="token punctuation">(</span>prod_id<span class="token punctuation">,</span> vend_id<span class="token punctuation">,</span> prod_name<span class="token punctuation">,</span> prod_price<span class="token punctuation">,</span> prod_desc<span class="token punctuation">)</span><span class="token keyword">VALUES</span><span class="token punctuation">(</span><span class="token string">'BR03'</span><span class="token punctuation">,</span> <span class="token string">'BRS01'</span><span class="token punctuation">,</span> <span class="token string">'18 inch teddy bear'</span><span class="token punctuation">,</span> <span class="token number">11.99</span><span class="token punctuation">,</span> <span class="token string">'18 inch teddy bear, comes with cap and jacket'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> Products<span class="token punctuation">(</span>prod_id<span class="token punctuation">,</span> vend_id<span class="token punctuation">,</span> prod_name<span class="token punctuation">,</span> prod_price<span class="token punctuation">,</span> prod_desc<span class="token punctuation">)</span><span class="token keyword">VALUES</span><span class="token punctuation">(</span><span class="token string">'BNBG01'</span><span class="token punctuation">,</span> <span class="token string">'DLL01'</span><span class="token punctuation">,</span> <span class="token string">'Fish bean bag toy'</span><span class="token punctuation">,</span> <span class="token number">3.49</span><span class="token punctuation">,</span> <span class="token string">'Fish bean bag toy, complete with bean bag worms with which to feed it'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> Products<span class="token punctuation">(</span>prod_id<span class="token punctuation">,</span> vend_id<span class="token punctuation">,</span> prod_name<span class="token punctuation">,</span> prod_price<span class="token punctuation">,</span> prod_desc<span class="token punctuation">)</span><span class="token keyword">VALUES</span><span class="token punctuation">(</span><span class="token string">'BNBG02'</span><span class="token punctuation">,</span> <span class="token string">'DLL01'</span><span class="token punctuation">,</span> <span class="token string">'Bird bean bag toy'</span><span class="token punctuation">,</span> <span class="token number">3.49</span><span class="token punctuation">,</span> <span class="token string">'Bird bean bag toy, eggs are not included'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> Products<span class="token punctuation">(</span>prod_id<span class="token punctuation">,</span> vend_id<span class="token punctuation">,</span> prod_name<span class="token punctuation">,</span> prod_price<span class="token punctuation">,</span> prod_desc<span class="token punctuation">)</span><span class="token keyword">VALUES</span><span class="token punctuation">(</span><span class="token string">'BNBG03'</span><span class="token punctuation">,</span> <span class="token string">'DLL01'</span><span class="token punctuation">,</span> <span class="token string">'Rabbit bean bag toy'</span><span class="token punctuation">,</span> <span class="token number">3.49</span><span class="token punctuation">,</span> <span class="token string">'Rabbit bean bag toy, comes with bean bag carrots'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> Products<span class="token punctuation">(</span>prod_id<span class="token punctuation">,</span> vend_id<span class="token punctuation">,</span> prod_name<span class="token punctuation">,</span> prod_price<span class="token punctuation">,</span> prod_desc<span class="token punctuation">)</span><span class="token keyword">VALUES</span><span class="token punctuation">(</span><span class="token string">'RGAN01'</span><span class="token punctuation">,</span> <span class="token string">'DLL01'</span><span class="token punctuation">,</span> <span class="token string">'Raggedy Ann'</span><span class="token punctuation">,</span> <span class="token number">4.99</span><span class="token punctuation">,</span> <span class="token string">'18 inch Raggedy Ann doll'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> Products<span class="token punctuation">(</span>prod_id<span class="token punctuation">,</span> vend_id<span class="token punctuation">,</span> prod_name<span class="token punctuation">,</span> prod_price<span class="token punctuation">,</span> prod_desc<span class="token punctuation">)</span><span class="token keyword">VALUES</span><span class="token punctuation">(</span><span class="token string">'RYL01'</span><span class="token punctuation">,</span> <span class="token string">'FNG01'</span><span class="token punctuation">,</span> <span class="token string">'King doll'</span><span class="token punctuation">,</span> <span class="token number">9.49</span><span class="token punctuation">,</span> <span class="token string">'12 inch king doll with royal garments and crown'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> Products<span class="token punctuation">(</span>prod_id<span class="token punctuation">,</span> vend_id<span class="token punctuation">,</span> prod_name<span class="token punctuation">,</span> prod_price<span class="token punctuation">,</span> prod_desc<span class="token punctuation">)</span><span class="token keyword">VALUES</span><span class="token punctuation">(</span><span class="token string">'RYL02'</span><span class="token punctuation">,</span> <span class="token string">'FNG01'</span><span class="token punctuation">,</span> <span class="token string">'Queen doll'</span><span class="token punctuation">,</span> <span class="token number">9.49</span><span class="token punctuation">,</span> <span class="token string">'12 inch queen doll with royal garments and crown'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">-- ---------------------</span><span class="token comment">-- Populate Orders table</span><span class="token comment">-- ---------------------</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> Orders<span class="token punctuation">(</span>order_num<span class="token punctuation">,</span> order_date<span class="token punctuation">,</span> cust_id<span class="token punctuation">)</span><span class="token keyword">VALUES</span><span class="token punctuation">(</span><span class="token number">20005</span><span class="token punctuation">,</span> <span class="token string">'2012-05-01'</span><span class="token punctuation">,</span> <span class="token string">'1000000001'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> Orders<span class="token punctuation">(</span>order_num<span class="token punctuation">,</span> order_date<span class="token punctuation">,</span> cust_id<span class="token punctuation">)</span><span class="token keyword">VALUES</span><span class="token punctuation">(</span><span class="token number">20006</span><span class="token punctuation">,</span> <span class="token string">'2012-01-12'</span><span class="token punctuation">,</span> <span class="token string">'1000000003'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> Orders<span class="token punctuation">(</span>order_num<span class="token punctuation">,</span> order_date<span class="token punctuation">,</span> cust_id<span class="token punctuation">)</span><span class="token keyword">VALUES</span><span class="token punctuation">(</span><span class="token number">20007</span><span class="token punctuation">,</span> <span class="token string">'2012-01-30'</span><span class="token punctuation">,</span> <span class="token string">'1000000004'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> Orders<span class="token punctuation">(</span>order_num<span class="token punctuation">,</span> order_date<span class="token punctuation">,</span> cust_id<span class="token punctuation">)</span><span class="token keyword">VALUES</span><span class="token punctuation">(</span><span class="token number">20008</span><span class="token punctuation">,</span> <span class="token string">'2012-02-03'</span><span class="token punctuation">,</span> <span class="token string">'1000000005'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> Orders<span class="token punctuation">(</span>order_num<span class="token punctuation">,</span> order_date<span class="token punctuation">,</span> cust_id<span class="token punctuation">)</span><span class="token keyword">VALUES</span><span class="token punctuation">(</span><span class="token number">20009</span><span class="token punctuation">,</span> <span class="token string">'2012-02-08'</span><span class="token punctuation">,</span> <span class="token string">'1000000001'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">-- -------------------------</span><span class="token comment">-- Populate OrderItems table</span><span class="token comment">-- -------------------------</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> OrderItems<span class="token punctuation">(</span>order_num<span class="token punctuation">,</span> order_item<span class="token punctuation">,</span> prod_id<span class="token punctuation">,</span> quantity<span class="token punctuation">,</span> item_price<span class="token punctuation">)</span><span class="token keyword">VALUES</span><span class="token punctuation">(</span><span class="token number">20005</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'BR01'</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">5.49</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> OrderItems<span class="token punctuation">(</span>order_num<span class="token punctuation">,</span> order_item<span class="token punctuation">,</span> prod_id<span class="token punctuation">,</span> quantity<span class="token punctuation">,</span> item_price<span class="token punctuation">)</span><span class="token keyword">VALUES</span><span class="token punctuation">(</span><span class="token number">20005</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">'BR03'</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">10.99</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> OrderItems<span class="token punctuation">(</span>order_num<span class="token punctuation">,</span> order_item<span class="token punctuation">,</span> prod_id<span class="token punctuation">,</span> quantity<span class="token punctuation">,</span> item_price<span class="token punctuation">)</span><span class="token keyword">VALUES</span><span class="token punctuation">(</span><span class="token number">20006</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'BR01'</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">5.99</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> OrderItems<span class="token punctuation">(</span>order_num<span class="token punctuation">,</span> order_item<span class="token punctuation">,</span> prod_id<span class="token punctuation">,</span> quantity<span class="token punctuation">,</span> item_price<span class="token punctuation">)</span><span class="token keyword">VALUES</span><span class="token punctuation">(</span><span class="token number">20006</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">'BR02'</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">8.99</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> OrderItems<span class="token punctuation">(</span>order_num<span class="token punctuation">,</span> order_item<span class="token punctuation">,</span> prod_id<span class="token punctuation">,</span> quantity<span class="token punctuation">,</span> item_price<span class="token punctuation">)</span><span class="token keyword">VALUES</span><span class="token punctuation">(</span><span class="token number">20006</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">'BR03'</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">11.99</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> OrderItems<span class="token punctuation">(</span>order_num<span class="token punctuation">,</span> order_item<span class="token punctuation">,</span> prod_id<span class="token punctuation">,</span> quantity<span class="token punctuation">,</span> item_price<span class="token punctuation">)</span><span class="token keyword">VALUES</span><span class="token punctuation">(</span><span class="token number">20007</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'BR03'</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">11.49</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> OrderItems<span class="token punctuation">(</span>order_num<span class="token punctuation">,</span> order_item<span class="token punctuation">,</span> prod_id<span class="token punctuation">,</span> quantity<span class="token punctuation">,</span> item_price<span class="token punctuation">)</span><span class="token keyword">VALUES</span><span class="token punctuation">(</span><span class="token number">20007</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">'BNBG01'</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">2.99</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> OrderItems<span class="token punctuation">(</span>order_num<span class="token punctuation">,</span> order_item<span class="token punctuation">,</span> prod_id<span class="token punctuation">,</span> quantity<span class="token punctuation">,</span> item_price<span class="token punctuation">)</span><span class="token keyword">VALUES</span><span class="token punctuation">(</span><span class="token number">20007</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">'BNBG02'</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">2.99</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> OrderItems<span class="token punctuation">(</span>order_num<span class="token punctuation">,</span> order_item<span class="token punctuation">,</span> prod_id<span class="token punctuation">,</span> quantity<span class="token punctuation">,</span> item_price<span class="token punctuation">)</span><span class="token keyword">VALUES</span><span class="token punctuation">(</span><span class="token number">20007</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token string">'BNBG03'</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">2.99</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> OrderItems<span class="token punctuation">(</span>order_num<span class="token punctuation">,</span> order_item<span class="token punctuation">,</span> prod_id<span class="token punctuation">,</span> quantity<span class="token punctuation">,</span> item_price<span class="token punctuation">)</span><span class="token keyword">VALUES</span><span class="token punctuation">(</span><span class="token number">20007</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token string">'RGAN01'</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">4.49</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> OrderItems<span class="token punctuation">(</span>order_num<span class="token punctuation">,</span> order_item<span class="token punctuation">,</span> prod_id<span class="token punctuation">,</span> quantity<span class="token punctuation">,</span> item_price<span class="token punctuation">)</span><span class="token keyword">VALUES</span><span class="token punctuation">(</span><span class="token number">20008</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'RGAN01'</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">4.99</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> OrderItems<span class="token punctuation">(</span>order_num<span class="token punctuation">,</span> order_item<span class="token punctuation">,</span> prod_id<span class="token punctuation">,</span> quantity<span class="token punctuation">,</span> item_price<span class="token punctuation">)</span><span class="token keyword">VALUES</span><span class="token punctuation">(</span><span class="token number">20008</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">'BR03'</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">11.99</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> OrderItems<span class="token punctuation">(</span>order_num<span class="token punctuation">,</span> order_item<span class="token punctuation">,</span> prod_id<span class="token punctuation">,</span> quantity<span class="token punctuation">,</span> item_price<span class="token punctuation">)</span><span class="token keyword">VALUES</span><span class="token punctuation">(</span><span class="token number">20008</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">'BNBG01'</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">3.49</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> OrderItems<span class="token punctuation">(</span>order_num<span class="token punctuation">,</span> order_item<span class="token punctuation">,</span> prod_id<span class="token punctuation">,</span> quantity<span class="token punctuation">,</span> item_price<span class="token punctuation">)</span><span class="token keyword">VALUES</span><span class="token punctuation">(</span><span class="token number">20008</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token string">'BNBG02'</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">3.49</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> OrderItems<span class="token punctuation">(</span>order_num<span class="token punctuation">,</span> order_item<span class="token punctuation">,</span> prod_id<span class="token punctuation">,</span> quantity<span class="token punctuation">,</span> item_price<span class="token punctuation">)</span><span class="token keyword">VALUES</span><span class="token punctuation">(</span><span class="token number">20008</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token string">'BNBG03'</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">3.49</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> OrderItems<span class="token punctuation">(</span>order_num<span class="token punctuation">,</span> order_item<span class="token punctuation">,</span> prod_id<span class="token punctuation">,</span> quantity<span class="token punctuation">,</span> item_price<span class="token punctuation">)</span><span class="token keyword">VALUES</span><span class="token punctuation">(</span><span class="token number">20009</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'BNBG01'</span><span class="token punctuation">,</span> <span class="token number">250</span><span class="token punctuation">,</span> <span class="token number">2.49</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> OrderItems<span class="token punctuation">(</span>order_num<span class="token punctuation">,</span> order_item<span class="token punctuation">,</span> prod_id<span class="token punctuation">,</span> quantity<span class="token punctuation">,</span> item_price<span class="token punctuation">)</span><span class="token keyword">VALUES</span><span class="token punctuation">(</span><span class="token number">20009</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">'BNBG02'</span><span class="token punctuation">,</span> <span class="token number">250</span><span class="token punctuation">,</span> <span class="token number">2.49</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> OrderItems<span class="token punctuation">(</span>order_num<span class="token punctuation">,</span> order_item<span class="token punctuation">,</span> prod_id<span class="token punctuation">,</span> quantity<span class="token punctuation">,</span> item_price<span class="token punctuation">)</span><span class="token keyword">VALUES</span><span class="token punctuation">(</span><span class="token number">20009</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">'BNBG03'</span><span class="token punctuation">,</span> <span class="token number">250</span><span class="token punctuation">,</span> <span class="token number">2.49</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>细胞生物学复习整理</title>
      <link href="2020/06/24/%E7%BB%86%E8%83%9E%E7%94%9F%E7%89%A9%E5%AD%A6/"/>
      <url>2020/06/24/%E7%BB%86%E8%83%9E%E7%94%9F%E7%89%A9%E5%AD%A6/</url>
      
        <content type="html"><![CDATA[<p>选择、名词解释、问答题 以下内容仅供参考</p><hr><h2 id="绪论">绪论</h2><h3 id="名词解释">名词解释</h3><p><strong>细胞生物学</strong>：细胞生物学是研究和揭示细胞基本生命活动规律的科学，它从显微、亚显微与分子水平上研究细胞结构与功能，细胞增殖、分化、代谢、运动、衰老、死亡，以及细胞信号转导，细胞基因表达与调控，细胞起源与进化等重大生命过程。</p><p><strong>细胞</strong>：细胞是生物体结构与功能的基本单位。</p><p><strong>细胞学说</strong>：细胞学说是由施旺和施莱登两人共同提出，并由一系列的学者进行修正的学说，其基本内容包括：细胞是有机体，一切动植物都是由细胞发育而来，并由细胞和细胞产物构成；每个细胞是一个相对独立的单位，既有“它自己”的生命，又对与其他细胞共同组成的整体的生命有所助益；新的细胞可以通过已存在的细胞繁殖产生。</p><h3 id="问答题">问答题</h3><h4 id="细胞生物学的发展历史大致可划分为哪几个阶段">细胞生物学的发展历史大致可划分为哪几个阶段</h4><p>细胞生物学的发展大致可划分为5个阶段：</p><ul><li>细胞的发现</li><li>细胞学说的建立</li><li>细胞学的经典时期</li><li>实验细胞学与细胞学的分支及其发展</li><li>细胞生物学学科的形成与发展</li></ul><h4 id="如何理解细胞是生命活动的基本单位">如何理解细胞是生命活动的基本单位</h4><ul><li>细胞是构成有机体的基本单位；</li><li>细胞是代谢与功能的基本单位；</li><li>细胞是有机体生长与发育的基础；</li><li>细胞是繁殖的基本单位，是遗传的桥梁；</li><li>细胞是生命起源的归宿，是生物进化的起点。</li></ul><p>故细胞是生命活动的基本单位。</p><h4 id="比较真核细胞与原核细胞">比较真核细胞与原核细胞</h4><p>真核细胞与原核细胞最根本的区别可以归纳为两条：</p><ul><li>生物膜系统的分化与演变：</li></ul><p>​       真核细胞以膜系统的分化为基础，首先分化为两个独立的部分——细胞核与细胞质，细胞质内又以膜系统为基础分隔为结构更精细、功能更专一的单位——各种重要的细胞器。细胞内部结构与职能的分工是真核细胞区别于原核细胞的重要标志。细胞骨架为细胞内部空间布局提供了支架。</p><ul><li>遗传信息量与遗传装置的扩增与复杂化：<ul><li>真核细胞的基因组一般远远大于原核细胞的，作为遗传信息载体的DNA 也由原核细胞的环状单倍性变为线状多倍性；</li><li>原核细胞基因表达的调控主要以操纵子的形式来进行，这种简单的调控方式能适应多种不利环境，进行快速调节，真核细胞因细胞核的存在，使表达实现了多层次调控；</li><li>真核生物有不编码任何蛋白质或RNA 的基因间隔序列和内含子；</li><li>真核细胞拥有多条DNA 分子， 并且DNA 与蛋白质形成交替存在的染色质和染色体；</li><li>真核细胞发展出一整套由酶和调控蛋白组成的复杂精密的体系，严格调控细胞增殖，原核细胞的增殖没有严格阶段，也没有染色质与染色体结构的交替，更无纺锤体的出现。</li></ul></li></ul><h4 id="病毒与细胞在起源上的可能关系有几种？目前哪种观点更有说服力，有哪些证据？">病毒与细胞在起源上的可能关系有几种？目前哪种观点更有说服力，有哪些证据？</h4><p>起源上目前存在3种主要观点：</p><ul><li>生物大分子→病毒→细胞</li><li>生物大分子→细胞、病毒</li><li>生物大分子→细胞→病毒</li></ul><p>目前，第二与第三种比较易于接受，第三种观点得到了更多实验结果的支持：</p><ul><li>在原核细胞中，环形DNA 分子的附加体可以质粒的形式在细胞中复制，也可以整合在细菌的染色体中。其行为与细菌病毒λ噬菌体类似。</li><li>真核生物中，尤其是脊椎动物中普遍存在的第二类反转录转座子的两端具有长末端重复序列，其结构与整合于细胞基因组上的反转录病毒十分相似。二者可能有相同的起源。</li><li>已有的证据表明，有些病毒（如腺病毒）的核酸与哺乳动物细胞DNA 某些片段的碱基序列十分相似。</li></ul><h2 id="细胞质膜">细胞质膜</h2><h3 id="名词解释-2">名词解释</h3><p><strong>生物膜</strong>：细胞中所有的膜结构统称生物膜。</p><p><strong>桥粒</strong>：桥粒是连接相邻细胞间的锚定连接方式， 最明显的形态特征是细胞内锚蛋白形成独特的盘状致密斑， 一侧与细胞内的中间丝相连， 另一侧与跨膜黏附性蛋白质相连， 在两个细胞之间形成纽扣样结构， 将相邻细胞铆接在一起。</p><p><strong>脑磷脂</strong>：磷脂酰乙醇胺，是3-磷酸甘油的衍生物。</p><h3 id="问答题-2">问答题</h3><h4 id="质膜是否具流动性？请设计实验证明。">质膜是否具流动性？请设计实验证明。</h4><p>质膜具有流动性。可以使用荧光漂白恢复技术证明：</p><ul><li>首先用荧光物质标记膜蛋白或膜脂</li><li>然后用激光束照射细胞表面某一区域， 使被照射区域的荧光悴灭变暗形成一个漂白斑。</li><li>如果悴灭区域的亮度逐渐增加， 最后恢复到与周围的荧光光强度相等，则说明质膜具有流动性。</li></ul><h4 id="简述生物膜的基本成分与结构模型">简述生物膜的基本成分与结构模型</h4><p>生物膜的基本成分有膜脂和膜蛋白</p><ul><li>膜脂是生物膜的基本组成成分，主要包括甘油磷脂、鞘脂和固醇3种基本类型</li><li>膜蛋白赋予生物膜非常重要的生物学功能。根据膜蛋白分离的难易程度及其与脂分子的结合方式，可分为：外在膜蛋白、内在膜蛋白和脂锚定膜蛋白3种基本类型。</li></ul><p>生物膜的结构模型根据提出顺序有“蛋白质—脂质—蛋白质” 的三明治式模型、单位膜模型、流动镶嵌模型和脂筏模型。<br>流动镶嵌模型主要强调：</p><ul><li>膜的流动性， 即膜蛋白和膜脂均可侧向运动。</li><li>膜蛋白分布的不对称性， 有的结合在膜表面， 有的嵌入或横跨脂双分子层。</li></ul><p>脂筏模型是对膜流动性的新的理解。在甘油磷脂为主体的生物膜上， 胆固醇、鞘磷脂等富集区域形成相对有序的脂相， 如同漂浮在脂双层上的“脂筏”一样载着执行某些特定生物学功能的各种膜蛋白。</p><h4 id="什么是去垢剂？分为哪几类？去垢剂的主要作用是什么？">什么是去垢剂？分为哪几类？去垢剂的主要作用是什么？</h4><p>去垢剂是一端亲水、一端疏水的两性小分子，是分离与研究膜蛋白的常用试剂。</p><p>去垢剂分为离子型去垢剂（如SDS）和非离子型去垢剂（如Triton X-100）两种类型。</p><p>去垢剂可以插入膜脂， 与膜脂或膜蛋白的跨膜结构域等疏水部位结合， 形成可溶性的微粒。多用于膜蛋白的分离与纯化。</p><h4 id="生物膜的不对称性主要体现在哪几个方面？生物学意义是什么？">生物膜的不对称性主要体现在哪几个方面？生物学意义是什么？</h4><p>生物膜的不对称性主要体现在：</p><ul><li>同一种膜脂在脂双层中的分布不同</li><li>同一种膜蛋白在脂双层中的分布都有特定的方向或拓扑学特征</li><li>糖蛋白和糖脂的糖基部分均位于细胞质膜的外侧</li></ul><p>生物膜的不对称性的生物学意义：</p><ul><li>糖脂的不对称分布是完成其生理功能的结构基础；</li><li>磷脂分子不对称分布的原因和生物学意义还不很清楚；</li><li>膜蛋白的不对称性是生物膜完成复杂的在时间与空间上有序的各种生理功能的保证。</li></ul><h4 id="根据功能不同，细胞连接可以分为哪几类？各有什么特点？">根据功能不同，细胞连接可以分为哪几类？各有什么特点？</h4><p>可分为：封闭连接、锚定连接、通讯连接</p><ul><li>封闭连接：将相邻上皮细胞的质膜紧密地连接在一起， 阻止溶液中的小分子沿细胞间隙从细胞一侧渗透到另一侧。紧密连接是这种连接的典型代表。</li><li>锚定连接：通过细胞膜蛋白及细胞骨架系统将相邻细胞， 或细胞与胞外基质间黏着起来。根据直接参与细胞连接的细胞骨架纤维类型的不同，锚定连接又分为与中间丝相关的锚定连接与肌动蛋白纤维相关的锚定连接。前者包括桥粒和半桥粒；后者主要有黏着带和黏着斑。当细胞形成组织后，由于细胞间或者细胞与胞外基质间通过锚点连接分散作用力。从而增强细胞承受机械力的能力。</li><li>通讯连接：介导相邻细胞间的物质转运、化学或电信号的传递， 主要包括动物细胞间的间隙连接、神经元之间或神经元与效应细胞之间的化学突触和植物细胞间的胞间连丝。</li></ul><h2 id="物质的跨膜运输">物质的跨膜运输</h2><h3 id="名词解释-3">名词解释</h3><p><strong>载体（蛋白）</strong>：膜上一类转运蛋白，可特异的、可逆的与特定的溶质分子结合，通过一系列构象改变介导溶质分子的跨膜转运。</p><p><strong>网格蛋白</strong>：由3个二聚体形成三脚蛋白复合体，每个二聚体包括1条相对分子质最为1.8×10<sup>5</sup> 的重链和1条3.5×10<sup>4</sup>~4×10<sup>4</sup>的轻链，是包被的结构单位。</p><p><strong>膜泡运输</strong>：大分子及颗粒物质不能直接通过细胞膜，而是通过一系列膜囊泡形成和融合来完成转运过程，称膜泡运输。</p><p><strong>水孔蛋白</strong>：是一类具有6个α螺旋区的蛋白质家族， 通常形成四聚体的膜蛋白以行使其转运水或甘油等分子的功能。</p><h3 id="问答题-3">问答题</h3><h4 id="简述被动运输与主动运输二者之间有哪些相同点和不同点。">简述被动运输与主动运输二者之间有哪些相同点和不同点。</h4><p>相同点：都需要蛋白质载体</p><p>不同点：</p><ul><li>主动运输需要消耗能量，而被动运输不需要消耗能量;</li><li>被动运输是顺电化学梯度或浓度梯度，而主动运输一般是逆着电化学梯度或浓度梯度</li></ul><h4 id="离子通道可以分为哪几种？作用机制分别是什么？">离子通道可以分为哪几种？作用机制分别是什么？</h4><p>离子通道可分为三种，分别是电压门通道、配体门通道和应力激活通道</p><ul><li>电压门通道：带电荷的蛋白质结构域会随跨膜电位梯度的改变而发生相应的移动， 从而使离子通道开启或关闭。</li><li>配体门通道：细胞内外的某些小分子配体与通道蛋白结合继而引起通道蛋白构象改变， 从而使离子通道开启或关闭。</li><li>应力激活通道：通道蛋白感应应力而改变构象，从而开启通道形成离子流， 产生电信号</li></ul><h4 id="根据能量来源的不同，主动运输可以分为哪几类？">根据能量来源的不同，主动运输可以分为哪几类？</h4><p>由ATP 直接提供能量（ATP 驱动泵）、间接提供能量（协同转运或偶联转运蛋白）以及光驱动泵3种基本类型。</p><h4 id="简述钠钾泵（钠钾ATP酶）的特点及其主要生理功能。">简述钠钾泵（钠钾ATP酶）的特点及其主要生理功能。</h4><p>特点：</p><ul><li>由2 个α和2个β亚基组成四聚体</li><li>每个循环消耗一个ATP 分子，可以逆着电化学梯度泵出3个Na<sup>+</sup>和泵入2个K<sup>+</sup></li><li>由ATP 直接提供能量的主动转运，而非协同转运</li></ul><p>Na<sup>+</sup>-K<sup>+</sup>泵主要生理功能：</p><ul><li>维持细胞膜电位：每一个工作循环下来，Na<sup>+</sup>-K<sup>+</sup>泵将从细胞泵出3 个Na<sup>+</sup>并泵入2个K<sup>+</sup>， 对膜电位的形成起到了一定作用。</li><li>维持动物细胞渗透平衡：Na<sup>+</sup>-K<sup>+</sup>泵不断地将Na<sup>+</sup>泵到胞外维持了细胞的渗透平衡。还有Cl<sup>-</sup>（靠膜电位停留在胞外） 参与维持动物细胞渗透压平衡。</li><li>吸收营养：动物细胞对葡萄糖或氨基酸等有机物吸收的能量由蕴藏在Na<sup>+</sup>电化学梯度中的势能提供。</li></ul><h4 id="以LDL为例，简述受体介导的胞吞作用的过程。">以LDL为例，简述受体介导的胞吞作用的过程。</h4><ul><li>胆固醇在血液中的运输通过与磷脂和蛋白质结合形成低密度脂蛋白（LDL）</li><li>LDL与细胞表面的LDL受体特异地结合形成受体——LDL复合物</li><li>通过网格蛋白包被膜泡的内化作用进入细胞</li><li>经脱包被作用并与胞内体融合</li><li>胞内体的低pH环境可引起LDL与受体分离</li><li>胞内体以出芽的方式形成含有受体的小囊泡，返回细胞质膜，受体重复使用</li><li>含有LDL 的胞内体与溶酶体融合，LDL被水解， 释放出胆固醇和脂肪酸供细胞利用。</li></ul><p><img src="http://img.whl123456.top/image/image-20200701003128757.png" alt="LDL通过受体介导的胞吞作用进入细胞 P82"></p><h2 id="细胞质基质与内膜系统">细胞质基质与内膜系统</h2><h3 id="名词解释-4">名词解释</h3><p><strong>内膜系统</strong>：是指在结构、功能乃至发生上相互关联、由单层膜包被的细胞器或细胞结构。主要包括内质网、高尔基体、溶酶体、胞内体和分泌泡等。</p><p><strong>细胞质基质</strong>：在真核细胞的细胞质中，除去可分辨的细胞器以外的胶状物质，占据着细胞膜内、细胞核外的细胞内空间，称细胞质基质。</p><p><strong>分子伴侣</strong>：存在于细胞质基质或细胞器中，可以识别正在合成或部分折叠的多肽，并与之某些部位结合，协助其转运、正确折叠或装配的一类蛋白质，但其本身不参与终产物的形成。</p><p><strong>蛋白酶体</strong>：是细胞内降解蛋白质的大分子复合体，由约50种蛋白质亚基组成相对分子质量为2×10<sup>6</sup> ~ 2.4×10<sup>6</sup>，富含ATP 依赖的蛋白酶活性，其功能然若细胞内蛋白质破碎机。</p><p><strong>微体</strong>：过氧化物酶体又称微体，是由单层膜围绕的内含一种或几种氧化酶类的细胞器。</p><h3 id="问答题-4">问答题</h3><h4 id="细胞质基质的主要功能是什么？">细胞质基质的主要功能是什么？</h4><ol><li>完成许多中间代谢过程：如糖酵解过程、磷酸戊糖途径、糖醋酸途径、糖原的合成与部分分解过程等。</li><li>为某些蛋白质合成和脂肪酸合成提供场所</li><li>与细胞质骨架的相关功能：<ul><li>细胞质骨架维持细胞的形态、细胞的运动、细胞内的物质运输及能量传递有关；</li><li>细胞质骨架是细胞质基质结构体系的组织者，为细胞质基质中其他成分和细胞器提供锚定位点</li></ul></li><li>与细胞膜的相关功能：<ul><li>细胞内的各种膜相细胞器使细胞质基质产生区室化，从而通过生物膜结构将蛋白质等生物大分子限定在膜的二维平面上，促进反应高效而有序地进行；</li><li>依靠细胞膜或细胞器膜上的泵蛋白和离子通道维持细胞内外跨膜的离子梯度，依靠细胞膜某些协同转运蛋白调节细胞质基质的pH ，维持细胞内环境稳定。</li></ul></li><li>与蛋白质的修饰和选择性降解等方面有关：<ul><li>蛋白质的修饰：辅酶或辅基与酶的共价结合；磷酸化与去磷酸化；蛋白质糖基化作用；甲基化修饰；酰基化。</li><li>控制蛋白质的寿命</li><li>降解变性和错误折叠的蛋白质</li><li>帮助变性或错误折叠的蛋白质重新折叠，形成正确的分子构象</li></ul></li></ol><h4 id="简述蛋白质降解的泛素化途径。">简述蛋白质降解的泛素化途径。</h4><ul><li>泛素活化酶(E1) 通过形成酰基－腺甘酸中介物使泛素分子C端被激活， 该反应需要ATP；</li><li>转移活化的泛素分子与泛素结合酶(E2) 的半胱氨酸残基结合；</li><li>异肽键形成，即与E2结合的泛素羧基和靶蛋白赖氨酸侧链的氨基之间形成异肽键，该反应由泛素连接酶(E3)催化完成。</li></ul><p>重复上述步骤，形成具有寡聚泛素链的泛素化靶蛋白。泛素化标签被蛋白酶体帽识别，并利用ATP 水解提供的能量驱动泛素分子的切除和靶蛋白解折叠，去折叠的蛋白质转移至蛋白酶体核心腔内被降解。</p><p><img src="http://img.whl123456.top/image/image-20200701003429215.png" alt="P116"></p><h4 id="内质网可以分为哪2类？详细说明内质网的功能有哪些？">内质网可以分为哪2类？详细说明内质网的功能有哪些？</h4><p>内质网可分为糙面内质网和光面内质网</p><ol><li>蛋白质的合成是糙面内质网的主要功能。在糙面内质网上，多肽链边延伸边穿过内质网膜进入内质网腔，以这类方式合成的蛋白质主要包括：向细胞外分泌的蛋白质；膜的整合蛋白；细胞器中的可溶性驻留蛋白。</li><li>光面内质网是脂质合成的重要场所。内质网合成细胞需要包括磷脂和胆固醇在内的几乎全部膜脂，其中最主要的磷脂是磷脂酰胆碱（卵磷脂）。</li><li>蛋白质修饰与加工。<ul><li>发生在内质网和高尔基体的蛋白质糖基化；</li><li>在内质网发生二硫键的形成；</li><li>蛋白质折叠和多亚基蛋白的装配；</li><li>在内质网、高尔基体和分泌泡发生特异性的蛋白质水解切割；</li><li>在内质网的胞质侧发生的蛋白质修饰酰基化；</li><li>少数蛋白发生，新生肽的脯氨酸和赖氨酸要进行羟基化，形成羟脯氨酸和羟赖氨酸。</li></ul></li><li>新生多肽的折叠与组装。<ul><li>内质网中有一种蛋白二硫键异构酶（PDI），它附着在内质网膜腔面上，可以切断二硫键，从而帮助新合成的蛋白质重新形成二硫键并产生正确折叠的构象。</li><li>内质网含有一种结合蛋白(Bip)，是属于Hsp70家族的分子伴侣，在内质网中有两个作用：Bip同进入内质网的未折叠蛋白质的疏水氨基酸结合，防止多肽链不正确地折叠和聚合，或者识别错误折叠的蛋白质或未装配好的蛋白质亚单位，并促进它们重新折叠与装配；防止新合成的蛋白质在转运过程中变性或断裂。</li></ul></li><li>内质网的其他功能。<ul><li>肝细胞中的光面内质网中还含有一些酶具有解毒作用</li><li>心肌细胞和骨胳肌细胞中含有发达的特化的光面内质网（肌质网）是储存Ca<sup>2+</sup>的细胞器，对Ca<sup>2+</sup>具调节作用。</li><li>某些合成固醇类激素的细胞光面内质网非常丰富，其中含有制造胆固醇并进一步产生固醇类激素的一系列的酶。</li></ul></li></ol><h4 id="N-连接糖基化与O-连接糖基化的主要区别是什么？">N-连接糖基化与O-连接糖基化的主要区别是什么？</h4><table><thead><tr><th>特征</th><th>N-连接</th><th>O-连接</th></tr></thead><tbody><tr><td>合成部位</td><td>糙面内质网和高尔基体</td><td>高尔基体</td></tr><tr><td>合成方式</td><td>来自同—个寡糖前体</td><td>—个个单糖加上去</td></tr><tr><td>与之结合的氨基酸残基</td><td>天冬酰胺</td><td>丝氨酸、苏氨酸、羟赖氨酸、羟脯氨酸</td></tr><tr><td>最终长度</td><td>至少5 个糖残基</td><td>一般1~4个糖残基，但ABO 血型抗原较长</td></tr><tr><td>第一个糖残基</td><td>N-乙酰葡糖胺</td><td>N-乙酰半乳糖胺等</td></tr></tbody></table><h4 id="高尔基体的主要功能包括哪几方面？">高尔基体的主要功能包括哪几方面？</h4><ol><li>高尔基体与细胞的分泌活动：分泌性蛋白、多种细胞质膜上的膜蛋白、溶酶体中的酸性水解酶及胶原等胞外基质成分，其定向转运过程都是通过高尔基体完成的。</li><li>蛋白质的糖基化及其修饰：大多数蛋白质或膜脂的糖基化修饰和与高尔基体有关的多糖的合成，主要发生在高尔基体。</li><li>蛋白酶的水解和其他加工过程：有些多肽，经特异性水解才成为有生物活性的多肽。</li></ol><h4 id="根据处于完成生理功能的阶段的不同，溶酶体可以分为哪几类？溶酶体的功能是什么？结合高尔基体的功能，谈谈溶酶体是如何发生的？">根据处于完成生理功能的阶段的不同，溶酶体可以分为哪几类？溶酶体的功能是什么？结合高尔基体的功能，谈谈溶酶体是如何发生的？</h4><p>大致可分为初级溶酶体、次级溶酶体、残质体</p><p>溶酶体的功能：</p><ol><li>清除无用的生物大分子、衰老的细胞器及衰老损伤和死亡的细胞</li><li>防御功能</li><li>作为细胞内的消化“器官”为细胞提供营养</li><li>在分泌腺细胞中，溶酶体常常摄入分泌颗粒，参与分泌过程的调节</li><li>某些特定细胞程序性死亡，死亡后的细胞被周围吞噬细胞溶酶体消化清除。</li><li>参与受精过程中的顶体反应</li></ol><p>溶酶体的发生：</p><ol><li>溶酶体酶在糙面内质网上合成并经N－连接的糖基化基础修饰，然后转至高尔基体，在高尔基体的顺面膜囊中寡糖链上的甘露糖残基被磷酸化形成甘露糖-6-磷酸(M6P)；</li><li>在高尔基体的反面膜囊和TGN 膜上存在M6P的受体，溶酶体酶与其他蛋白质区分开来，并得以浓缩。</li><li>以出芽的方式形成网格蛋白/AP包被膜泡转运到溶酶体中；</li><li>进入前溶酶体的酸性环境后，M6P受体与M6P分离，并返回高尔基体。</li></ol><h2 id="细胞骨架">细胞骨架</h2><h3 id="名词解释-5">名词解释</h3><p><strong>细胞骨架</strong>：是指存在于真核细胞中的蛋白纤维网架体系。</p><p><strong>微丝</strong>：是指真核细胞中由肌动蛋白组成，直径为7nm的骨架纤维。</p><p><strong>微管</strong>：是指由微管蛋白亚基组装而成的管状结构。</p><p><strong>踏车行为</strong>：是指微丝的正极由于肌动蛋白亚基的不断添加而延长，而负极则由于肌动蛋白亚基去组装而缩短的现象。</p><p><strong>微管组织中心</strong>：是指在活细胞内，能够起始微管的成核作用，并使之延伸的细胞结构，主要包括中心体、纤毛基部、鞭毛基部。</p><h3 id="问答题-5">问答题</h3><h4 id="细胞质骨架包括哪3种结构组分？每一种组分的结构成分包括哪些蛋白？各有什么功能？">细胞质骨架包括哪3种结构组分？每一种组分的结构成分包括哪些蛋白？各有什么功能？</h4><p>细胞骨架主要包括微丝(MF)、微管(MT) 和中间丝(IF) 3种结构组分。</p><h5 id="微丝">微丝</h5><p>结构成分：主要结构成分是肌动蛋白，其在细胞内有两种存在形式，即肌动蛋白单体（又称球状肌动蛋白)和由单体组装而成的纤维状肌动蛋白。</p><p>功能：</p><ul><li>维持细胞形态；</li><li>赋予质膜机械强度；</li><li>细胞运动；</li><li>构成微绒毛、应力纤维；</li><li>参与胞质分裂；</li><li>参与肌肉收缩等</li></ul><h5 id="微管">微管</h5><p>结构成分：α/β-微管蛋白二聚体是细胞质内游离态微管蛋白的主要存在形式， 也是微管组装的基本结构单位</p><p>功能：</p><ul><li>构成细胞的网状支架，维持细胞的形态；</li><li>参与细胞内物质运输；</li><li>细胞器的定位；</li><li>构成纤毛、鞭毛，参与细胞的运动；</li><li>纺锤体和染色体运动;</li></ul><h5 id="中间纤维">中间纤维</h5><p>结构成分，有6种主要类型：</p><ol><li><p>角蛋白，单体分为：酸性角蛋白（Ⅰ型）、中性或碱性角蛋白（Ⅱ型）。通过两者的异二聚体形成角蛋白纤维；</p></li><li><p>Ⅲ型中间丝，波形蛋白、结蛋白、微管成束蛋白、胶质丝酸性蛋白与外周蛋白；</p></li><li><p>Ⅳ型中间丝，包括3种神经丝蛋白亚基和α-介连蛋白；</p></li><li><p>Ⅴ型中间丝蛋白，核纤层蛋白A及其剪切体核纤层蛋白C 与核纤层蛋白B1和B2；</p></li><li><p>Ⅵ型中间丝蛋白，巢蛋白与desmuslin ；</p></li><li><p>晶状体中发现的phakinin/CP49和丝晶蛋白属于“孤儿”类型。</p></li></ol><p>功能：</p><ul><li>细胞抗机械压力的能力；</li><li>角蛋白纤维参与桥粒的形成和维持；</li><li>结蛋白纤维是肌肉Z盘的重要结构组分，对于维持肌肉细胞的收缩装置起重要作用；</li><li>神经元纤维在神经细胞轴突运输中起作用；</li><li>参与传递细胞内机械的或分子的信息；</li><li>中间纤维与mRNA的运输有关；</li><li>与细胞分化有关：形成跨膜信息通道。</li></ul><h4 id="依赖于微管的马达蛋白包括哪几类？各有什么特点？简述微管与细胞内物质运输之间的关系。">依赖于微管的马达蛋白包括哪几类？各有什么特点？简述微管与细胞内物质运输之间的关系。</h4><p>依赖于微管的马达蛋白包括驱动蛋白和胞质动力蛋白</p><p>驱动蛋白特点</p><ol><li>是一条长80nm 的杆状结构，头部一端有两个呈球状的马达结构域，另一端是重链和轻链组成的扇形尾端，中间是重链组成的杆状区。</li><li>驱动蛋白具有许多超家族</li><li>驱动蛋白的行为与其马达结构域在多肽链中的位置有关，大多数以微管为轨道由微管负端向微管正端运送货物，是正端走向的微管发动机</li><li>大部分驱动蛋白可通过多肽链上一段卷曲螺旋相互作用而形成同源二聚体</li></ol><p>细胞质动力蛋白特点</p><ol><li>细胞质动力蛋白是由一个相对分子质量接近1.5×10<sup>6</sup>的巨大蛋白复合物组成，含多个多肽亚单位： 两条具有ATP酶活性的使其沿微管移动的重链，两条中间链和一些轻链。</li><li>动力蛋白是已知马达蛋白中最大、移动速度最快的成员。</li><li>细胞质动力蛋白只有两个重链家族成员，Dync1 h1和Dync1 h2 。</li><li>细胞质动力蛋白以微管为轨道由微管正端向微管负端运送货物，是负端走向的微管发动机</li></ol><p>微管是细胞内物质运输之间的轨道</p><h4 id="影响微丝、微管组装的特异性药物有哪些？各有什么特点？">影响微丝、微管组装的特异性药物有哪些？各有什么特点？</h4><p>影响微丝的有细胞松弛素和鬼笔环肽等。</p><ul><li>细胞松弛素与微丝结合后可以将微丝切断，结合在微丝末端阻抑肌动蛋白在该部位的聚合，但对微丝的解聚没有明显影响，因而用细胞松弛素处理细胞可以破坏微丝的网络结构，并阻止细胞的运动。</li><li>鬼笔环肽与微丝表面有强亲和力，但不与肌动蛋白单体结合，能阻止微丝的解聚，使其保持稳定状态。</li></ul><p>影响微管的有秋水仙素和紫杉醇等</p><ul><li>秋水仙素与微管蛋白亚基结合组装到微管末端后，其他的微管蛋白亚基很难再在该处进行组装，但不影响该微管的去组装，从而导致细胞内微管网络的解体。</li><li>紫杉醇与微管结合后可以阻止微管的去组装，但不影响微管末端的组装微管不停地组装，不会解聚，其结果使细胞周期的运行被终止。</li></ul><h4 id="简述骨骼肌细胞的结构组分以及肌肉收缩的滑动模型理论。">简述骨骼肌细胞的结构组分以及肌肉收缩的滑动模型理论。</h4><p>骨骼肌细胞的结构组分</p><p>骨骼肌细胞是由数百条更细的肌原纤维组成的集束，每根肌原纤维由称为肌节的收缩单元呈线性重复排列而成。每个肌节都表现出特征性的带型。</p><p>肌原纤维的带状条纹由粗肌丝和细肌丝的纤维有序组装而成。粗肌丝由肌球蛋白组装而成，细肌丝的主要成分是肌动蛋白，辅以原肌球蛋白和肌钙蛋白。肌球蛋白的头部突出于粗肌丝的表面，并可与细肌丝上肌动蛋白亚基结合，构成粗肌丝与细肌丝之间的横桥。</p><p>除此之外还有将细肌丝锚定于Z 盘或质膜上的CapZ、α-辅肌动蛋白和纽蛋白；在肌节中起结构作用的肌联蛋白、伴肌动蛋白和肌营养不良蛋白。</p><p>滑动模型理论：肌肉收缩时肌节缩短，但在肌节内并无粗／细肌丝的长度变化，而只是由神经冲动引发的细肌丝与粗肌丝之间的相对滑动所致。基本过程如下：P205</p><ol><li>动作电位的产生</li><li>Ca<sup>2+</sup>的释放</li><li>原肌球蛋白位移</li><li>细肌丝与粗肌丝之间的相对滑动<ul><li>在初始状态，组成粗肌丝的肌球蛋白的头部（马达结构域） 没有结合ATP 时，该肌球蛋白的头部与细肌丝结合，并成僵直状态。</li><li>ATP 结合到肌球蛋白的头部导致与肌动蛋白纤维的结合力下降， 肌球蛋白与肌动蛋白分开；</li><li>ATP 水解为ADP+Pi，ATP 水解释放出的能量被肌球蛋白吸收， 导致进一步的构象变化， 头部结构域向前抬升， 并结合到靠近细肌丝正极端的一个肌动蛋白亚基上；</li><li>Pi释放，肌球蛋白颈部结构域发生构象变化，头部与细丝的角度发生变化，拉动细肌丝导致细肌丝相对于粗肌丝的滑动；</li><li>ADP 释放，肌球蛋白的头部结构域与细肌丝之间又回到僵直状态。</li></ul></li></ol><h4 id="简述中间纤维（中间丝）的组装模式，并简要介绍中间纤维与核纤层蛋白之间的联系。">简述中间纤维（中间丝）的组装模式，并简要介绍中间纤维与核纤层蛋白之间的联系。</h4><p>中间纤维的组装模式</p><ol><li>两个单体的杆状区以平行排列的方式形成双股螺旋的二聚体；</li><li>两个二聚体以反向平行和半分子交错的形式组装成四聚体；</li><li>四聚体之间在纵向（首尾） 和侧向相互作用，最终组装成横截面由32个中间丝蛋白分子组成，长度不等的中间丝。</li></ol><p>中间纤维与核纤层蛋白之间的联系</p><p>由Ⅴ型中间丝蛋白组装而成的核纤层结构在核膜的内侧呈正交网状排列。核纤层与内核膜上的核纤层蛋白受体相连，是核膜的重要支撑结构，也是染色质的重要锚定位点。</p><h2 id="细胞核">细胞核</h2><h3 id="名词解释-6">名词解释</h3><p><strong>核小体</strong>：是染色质的基本单位，直径约10nm 的球形小体，由组蛋白和200bp左右的DNA组成。</p><p><strong>核定位信号</strong>：亲核蛋白上含有的特殊氨基酸序列，以保证整个蛋白质能够通过核孔复合体被转运到细胞核内。</p><p><strong>染色质</strong>：指间期细胞核内由DNA、组蛋白、非组蛋白及少量RNA组成的线性复合结构, 是间期细胞遗传物质存在的形式。</p><p><strong>动粒</strong>：在主缢痕处两个染色单体的外侧表面部位的特殊结构，它与染色体微管接触，是微管蛋白的组织中心。</p><p><strong>多线染色体</strong>：在某些细胞有丝分裂期间，DNA 多次复制而细胞不分裂。产生的子染色体并行排列，且体细胞内同源染色体配对，紧密结合在一起从而阻止染色质纤维进一步聚缩，形成体积很大的多线染色体。</p><p><strong>核纤层</strong>：主要由3种核纤层蛋白构成的中间纤维网络片层结构，紧贴内层核膜下，与胞质中间丝、核基质有密切联系。</p><h3 id="问答题-6">问答题</h3><h4 id="细胞核由哪几部分组成？主要功能是什么？">细胞核由哪几部分组成？主要功能是什么？</h4><p>细胞核主要由核被膜、核纤层、染色质、核仁及核体组成。</p><p>细胞核的主要功能：</p><ul><li>是遗传信息的主要贮存库；</li><li>是遗传信息的复制和传递的场所；</li><li>进行遗传信息的表达，是细胞生命活动的控制枢纽。</li></ul><h4 id="什么是核孔复合体？简述核孔复合体的结构组成，以及核孔复合体的运输功能有什么特点？">什么是核孔复合体？简述核孔复合体的结构组成，以及核孔复合体的运输功能有什么特点？</h4><p>核孔复合体是在核被膜上由多种核孔蛋白构成的联系核质和细胞质的复杂隧道结构。</p><p>核孔复合体的结构组成：核孔复合体主要由胞质环、核质环、辐和栓4部分组成。</p><ul><li>胞质环：位于核孔边缘的胞质面一侧，环上有8条短纤维对称分布伸向胞质。</li><li>核质环：位于核孔边缘的核质面一侧，环上对称地连有8条细长的纤维，向核内伸入50~70nm，在纤维的末端形成一个直径为60nm 的小环，小环由8 个颗粒构成。</li><li>辐：由核孔边缘伸向中心，呈辐射状八重对称，有位于核孔边缘的“柱状亚单位”、穿过核膜伸入双层核膜的膜间腔的“腔内亚单位”和靠近中心的“环带亚单位”的3个结构域。环带亚单位由8个颗粒状结构环绕形成核孔复合体核质交换的通道。</li><li>栓：位于核孔的中心，呈颗粒状或棒状。</li></ul><p>核孔复合体运输功能及特点，核孔复合体是核质交换的双功能、双向性亲水通道。</p><ul><li>双功能表现在核孔复合体有两种运输方式：被动扩散与主动运输。</li><li>双向性表现在既介导蛋白质的入核转运，又介导RNA、核糖核蛋白颗粒(RNP)的出核转运。</li></ul><h4 id="简述染色质组装的两种结构模型。">简述染色质组装的两种结构模型。</h4><p>染色质组装的多级螺旋模型，DNA（压缩7倍）→核小体（压缩6倍）→螺线管（压缩40倍）→超螺线管（压缩5倍）→染色单体</p><p>由DNA与组蛋白组装成核小体，在组蛋白H1的介导下核小体彼此连接形成直径约10nm的核小体串珠结构，在有组蛋白H1存在的情况下，由直径10nm的核小体串珠结构螺旋盘绕，每圈6个核小体，形成外径25~30nm，螺距12nm的螺线管，螺线管进一步螺旋形成直径为0.4μm 的超螺线管，再进一步螺旋折叠形成直径为2~10μm的染色单体。经过四级螺旋组装形成的染色体结构，共压缩了8400倍。</p><p>染色质组装的放射环结构模型，DNA→核小体→螺线管→DNA复制环→微带→染色单体</p><p>螺线管形成DNA复制环，每18个复制环呈放射状平面排列，结合在核基质上形成微带。微带是染色体高级结构的单位，约10<sup>6</sup>个微带沿纵轴构建成子染色体。</p><h4 id="什么是中期染色体的三种功能元件？其主要功能是什么？">什么是中期染色体的三种功能元件？其主要功能是什么？</h4><p>在细胞世代中确保染色体的复制和稳定遗传，染色体起码应具备3种功能元件，构成染色体DNA的这3种关键序列称为染色体DNA的功能元件。</p><p>三种功能元件的主要功能</p><ul><li>自主复制DNA 序列：确保染色体在细胞周期中能够自我复制，维持染色体在细胞世代传递中的连续性。</li><li>着丝粒DNA 序列：使细胞分裂时已完成复制的染色体能平均分配到子细胞中。</li><li>端粒DNA 序列：保持染色体的独立性和稳定性。</li></ul><h4 id="简述核仁的3种基本组分特点及功能，谈谈为什么凡是蛋白质合成旺盛的细胞中核仁都明显偏大。">简述核仁的3种基本组分特点及功能，谈谈为什么凡是蛋白质合成旺盛的细胞中核仁都明显偏大。</h4><p>核仁的3种基本组分：纤维中心，致密纤维组分和颗粒组分</p><ul><li>纤维中心（FC）：包埋在颗粒组分内部一个或几个浅染的低电子密度的圆形结构。FC中的染色质不形成核小体结构，也没有组蛋白存在，但存在嗜银蛋白。其中磷蛋白C23可能与核仁中染色质结构的调节有关。是rRNA基因的储存位点。</li><li>致密纤维组分（DFC）：是核仁超微结构中电子密度最高的部分，呈环形或半月形包围FC, 由致密的纤维构成，通常见不到颗粒。转录主要发生在FC与DFC的交界处。</li><li>颗粒组分（GC）：是核仁的主要结构。它由直径15-20 nm的RNP构成。代表核糖体亚基成熟和储存的位点。</li></ul><p>蛋白质的合成需要核糖体，核糖体生物发生与核仁有关。在大小亚基合成时，小亚基所需的18S rRNA直接在核仁中合成，装配完成后从核仁运输出来，在核仁的停留时间较短，大亚基组装所需的28S rRNA、5.8S rRNA可以在核仁中合成但5S rRNA需要从核仁之外的其他部位汇集再进行装配，大亚基合成较慢，过多大亚基滞留在核仁中，故蛋白质合成旺盛的细胞中核仁都明显偏大。</p><h4 id="什么是核基质？什么是核骨架？核骨架的功能是什么">什么是核基质？什么是核骨架？核骨架的功能是什么</h4><p>核基质是指真核细胞的核内除染色质、核膜与核仁外，以蛋白质成分为主的网架结构。</p><p>核骨架广义上包括核基质、核纤层以及染色体骨架，狭义上是指核基质。</p><p>核骨架的功能</p><ol><li>维持细胞核的形态</li><li>为DNA、染色质在核中的空间排列提供支附作用</li><li>核骨架与DNA复制、基因表达及染色体的组装与构建有密切关系。</li></ol><h2 id="蛋白质分选和膜泡运输">蛋白质分选和膜泡运输</h2><h3 id="名词解释-7">名词解释</h3><p><strong>蛋白质分选</strong>：是指在核糖体上合成的蛋白质，通过信号肽，在翻译的同时进入内质网，然后经过各种加工和修饰，使不同去向的蛋白质带上不同的标记，最后经过高尔基体反面膜囊进行分选，包装到不同类型的小泡，并运送到目的地的过程。</p><p><strong>信号肽</strong>：位于蛋白质的N端，一般由16~26个氨基酸残基组成，其中包括疏水核心区、信号肽的C端和N端等3 部分，在蛋白质合成中将核糖体引导到内质网，进入内质网后通常被切除，无严格的专一性。</p><p><strong>膜泡运输</strong>：是蛋白质分选的一种特有的方式，普遍存在于真核细胞中。大分子和颗粒物质被运输时由膜包围形成膜泡，通过一系列膜囊泡的形成和融合来完成转运的过程。</p><h3 id="问答题-7">问答题</h3><h4 id="试述细胞内蛋白质的合成部位及其去向（蛋白质分选的途径）。">试述细胞内蛋白质的合成部位及其去向（蛋白质分选的途径）。</h4><p>核细胞中除线粒体和植物细胞叶绿体中能合成少量蛋白质外，绝大多数蛋白质都是由核基因编码，或在游离核糖体上合成，或在糙面内质网膜结合核糖体上合成。</p><p>核基因编码的蛋白质的分选大体可分2条途径：</p><ul><li>共翻译转运途径：在细胞质基质中多肽链合成起始后，转移到内质网，然后边合成边转入内质网腔，再经高尔基体运输至溶酶体、细胞膜或分泌到细胞外；</li><li>后翻译转运途径：在细胞质基质游离核糖体上完成多肽链的合成，然后转运至膜围绕的细胞器。</li></ul><h4 id="简述信号（肽）假说的主要内容。">简述信号（肽）假说的主要内容。</h4><p>以分泌蛋白N端序列作为信号肽，指导分泌性蛋白质在内质网膜上合成，然后在信号肽引导下蛋白质边合成边通过移位子蛋白复合体进入内质网腔，在蛋白质合成结束之前切除信号肽。其他类型的蛋白质也含有类似的信号序列，指导蛋白质完成定向运输。</p><h4 id="由核基因编码的蛋白质是如何运送到线粒体中去的？">由核基因编码的蛋白质是如何运送到线粒体中去的？</h4><p>在游离核糖体上合成的前体蛋白，与胞质蛋白分子伴侣Hsc70结合，并使其保持未折叠或部分折叠状态，其N端具有基质靶向序列，前体蛋白与内外膜接触点附近的输入受体(Tom20/22) 结合，被转运进入输入孔。</p><p>输入的蛋白进而通过内外膜接触点的输入通道（外膜为Tom40, 内膜为Tim23/17)，线粒体基质分子伴侣Hsc70与输入蛋白结合并水解ATP以驱动基质蛋白的输入。</p><p>输入的基质蛋白其基质靶向序列，在基质蛋白酶作用下被切除， 同时Hsc70 也从新输入的基质蛋白上释放出来，进而折叠，产生活性构象。</p><p><img src="http://img.whl123456.top/image/image-20200701004336084.png" alt="P143"></p><h4 id="转运膜泡表面包被蛋白可以分为哪3类？这3类膜泡类型的特征有什么不同？">转运膜泡表面包被蛋白可以分为哪3类？这3类膜泡类型的特征有什么不同？</h4><p>可分成COPⅡ包被膜泡、COPⅠ包被膜泡和网格蛋白/接头蛋白包被膜泡。</p><p>COPⅡ包被膜泡：由小分子 GTPase Sar1、 Sec23/Sec24、Sec13/Sec31以及大的纤维蛋白Sec16等组成，介导细胞内顺向运输即负责从内质网→高尔基体的物质运输；</p><p>COPⅠ包被膜泡：COPⅠ包被含有7种蛋白亚基包被蛋白复合物的装配与去装配依赖于ARF。负责回收、转运内质网逃逸蛋白返回内质网；介导高尔基体不同区域间的蛋白质运输。</p><p>网格蛋白/接头蛋白包被膜泡：是一类双层包被的膜泡，外层由网格蛋白组成，内层由接头蛋白复合物组成。纯化的网格蛋白分子呈三腿结构，每个分支含一条重链和一条轻链。负责运输途径质膜→内体；高尔基体→内体；高尔基体→溶酶体、植物液泡。</p><h4 id="膜泡运输的关键步骤涉及哪些过程？简述介导转运膜泡与靶膜融合的主要机制。">膜泡运输的关键步骤涉及哪些过程？简述介导转运膜泡与靶膜融合的主要机制。</h4><p>膜泡运输的关键步骤至少涉及如下过程：</p><ul><li><p>供体膜的出芽、装配和断裂，形成不同的包被转运膜泡；</p></li><li><p>在细胞内由马达蛋白驱动、以微管为轨道的膜泡运输；</p></li><li><p>转运膜泡与特定靶膜的锚定和融合。</p></li></ul><p>介导转运膜泡与靶膜融合的主要机制：</p><ol><li><p>在供体膜上的鸟苷酸交换因子(GEF) 识别并结合特异性Rab蛋白， 诱发GTP置换GDP, 鸟苷酸交换引发Rab蛋白构象改变并暴露其共价结合的脂质基团，从而帮助Rab-GTP蛋白锚定在供体膜上，并随膜泡转移，在靶膜上Rab-GTP与Rab效应器结合，这种结合有助于膜泡锚定和v-SNARE 与t-SNARE 的配对 ;</p></li><li><p>v-SNARE 蛋白与同类t-SNARE 胞质结构域相互作用，形成稳定的卷曲SNARE复合体， 将膜泡与靶膜紧密束缚在一起；</p></li><li><p>伴随SNARE复合物形成后，供体膜泡与靶膜随即融合；</p></li><li><p>两膜融合后，NSF联合α-SNAP 蛋白随即与SNARE 复合体结合，然后NSF 催化ATP 水解，驱动SNARE 复合体解离， 游离的SNARE蛋白再用于其他膜泡的融合。</p></li><li><p>具有GTPase活性的Rab蛋白水解与之结合的GTP, 释放可溶性的Rab-GDP 进入细胞质。在细胞质中Rab-GDP与GDP 解离抑制物(GDI)结合，从而防止Rab 蛋白从Rab-GDP复合物中释放出来 ，直至与GEF 发生相互作用。</p></li></ol><p><img src="http://img.whl123456.top/image/image-20200701004811033.png" alt="P152"></p><h2 id="细胞信号转导">细胞信号转导</h2><h3 id="问答题-8">问答题</h3><h4 id="简述细胞信号转导系统的组成及其特性。">简述细胞信号转导系统的组成及其特性。</h4><p>通过细胞表面受体介导的信号通路通常由下列5个步骤组成：</p><ul><li>细胞表面受体特异性识别并结合胞外信号分子（配体），形成受体-配体复合物， 导致受体激活；</li><li>由于激活受体构象改变， 导致信号初级跨膜转导， 靶细胞内产生第二信使或活化的信号蛋白；</li><li>通过胞内第二信使或细胞内信号蛋白复合物的装配， 起始胞内信号放大的级联反应</li><li>细胞应答反应， 如果这种级联反应主要是通过酶的逐级激活， 结果将改变细胞代谢活性， 或者通过基因表达调控蛋白影响细胞基因表达和影响发育， 或者通过细胞骨架蛋白的修饰改变细胞形状或运动；</li><li>由于受体脱敏或受体下调，终止或降低细胞反应。</li></ul><p>信号转导系统的主要特性：</p><ul><li>特异性：细胞受体与胞外配体通过结构互补机制以非共价键结合， 形成受体-配体复合物， 简称具有“结合” 特异性，受体因结合配体而改变构象被激活，介导特定的细胞反应，从而又表现出“ 效应器” 特异性。此外，受体与配体的结合具有饱和性和可逆性的特征。</li><li>放大效应：信号传递至胞内效应器蛋白（通常由酶或离子通道蛋白组成），引发细胞内信号放大的级联反应，如果级联反应主要是通过酶的逐级激活，结果将改变细胞代谢活性。最常见的级联放大作用是通过蛋白质磷酸化实现的。</li><li>网络化与反馈调节机制：细胞信号系统网络化的相互作用是细胞生命活动的重要特征，在细胞内由一系列蛋白质组成的信号转导系统中，细胞对刺激作出适时适度的反应是细胞完成各种生命活动的基础，信号网络化效应有利于克服分子间相互作用的随机性对细胞生命活动的负面干扰。这样的网络特性是由一系列正反馈和负反馈环路组成的，对于及时校正反应的速率和强度是最基本的调控机制。</li><li>整合作用：多细胞生物的每个细胞都处于细胞“社会“ 环境之中，大最的信息以不同组合的方式调节细胞的行为。因此，细胞必须整合不同的信息，对细胞外信号分子的特异性组合作出程序性反应，甚至作出生死抉择，这样才能维持生命活动的有序性。</li></ul><h4 id="细胞信号传递的通路随信号受体存在部位不同可分为几大类？各有什么特点？">细胞信号传递的通路随信号受体存在部位不同可分为几大类？各有什么特点？</h4><p>根据靶细胞上的受体存在的部位，可将受体区分为细胞内受体和细胞表面受体。</p><p>故有细胞内受体介导的信号传递和细胞表面的G蛋白偶联受体介导的信号转导、酶联受体介导的信号转导和其他细胞表面受体介导的信号通路。</p><p>细胞内受体介导的信号传递受体位于细胞质基质或核基质中，主要识别和结合小的脂溶性信号分子，其中NO也可以作为气体信号分子进入靶细胞直接与酶接合。</p><p>细胞表面受体主要识别和结合亲水性信号分子，包括分泌型信号分子或膜结合型信号分子。其又分属三大家族：离子通道偶联受体、G蛋白偶联受体和酶偶联受体。</p><h4 id="概述G蛋白耦联受体介导的信号通路的组成、特点及主要功能。">概述G蛋白耦联受体介导的信号通路的组成、特点及主要功能。</h4><p>信号通路按其效应器蛋白的不同可分为3类：</p><ul><li>激活离子通道的G蛋白偶联受体；</li><li>激活或抑制腺苷酸环化酶，以cAMP为第二信使的G蛋白偶联受体；</li><li>激活磷脂酶C，以IP<sub>3</sub>和DAG作为双信使的G蛋白偶联受体。</li></ul><p><strong>激活离子通道的G蛋白偶联受体所介导的信号通路</strong></p><p>特点：当受体与配体结合被激活后，通过偶联G蛋白的分子开关作用，调控跨膜离子通道的开启与关闭，进而调节靶细胞的活性；</p><p>主要功能：</p><ul><li>心肌细胞上M乙酰胆碱受体激活G蛋白开启K<sup>+</sup>通道；</li><li>Gt蛋白偶联的光敏感受体的活化诱发cGMP门控阳离子通道的关闭。</li></ul><p><strong>激活或抑制腺苷酸环化酶的G蛋白偶联受体所介导的信号通路</strong></p><p>特点：G<sub>α</sub>亚基的首要效应酶腺苷酸环化酶，通过腺苷酸环化酶活性的变化调节靶细胞内第二信使cAMP的水平，进而影响信号通路的下游事件。</p><p>主要功能：</p><ul><li>对肝细胞和肌细胞糖原代谢进行调节；</li><li>对真核细胞基因表达进行调控。</li></ul><p><strong>激活磷脂酶C，以IP<sub>3</sub>和DAG作为双信使的G蛋白偶联受体所介导的信号通路</strong></p><p>特点：胞外信号被膜受体接受后，同时产生两个胞内信使，分别激活IP<sub>3</sub>-Ca<sup>2+</sup>和DAG-PKC两种不同的信号通路。</p><p>主要功能：</p><ul><li>驱动心机细胞收缩；</li><li>引发平滑肌舒张；</li><li>参与众多生理功能涉及细胞“短期生理效应”（细胞分泌、肌肉收缩等），又涉及细胞增殖、分化等“长期生理效应”。</li></ul><h4 id="cAMP信号通路和磷脂酰肌醇信号通路有哪些联系和区别？">cAMP信号通路和磷脂酰肌醇信号通路有哪些联系和区别？</h4><p>两者都属于G蛋白偶联受体所介导的细胞信号通路。</p><p>以cAMP为第二信使的信号通路中，主要是通过cAMP激活蛋白激酶A（PKA）所介导的。</p><p>磷脂酰肌醇信号通路中，胞外信号被膜受体接受后，同时产生两个胞内信使，IP<sub>3</sub>刺激细胞内质网释放Ca<sup>2+</sup>，DAP激活PKC。</p><h4 id="以RTK为例-简述酶联受体介导的信号转导过程。">以RTK为例,简述酶联受体介导的信号转导过程。</h4><ol><li>在静息状态下RTK活性很低，配体的结合导致受体二聚化，当受体二聚化后，激活受体的蛋白酪氨酸激酶的活性，进而在二聚体内彼此交叉磷酸化受体胞内肽段的一个或多个酪氨酸残基（受体自磷酸化）。</li><li>活化的RTK通过磷酸酪氨酸残基可以结合多种细胞质中带有SH2结构域的蛋白，其中一类是接头蛋白，另一类是在信号通路中有关的酶。这两类RTK结合蛋白的结构和功能不同，但他们都具有两个高度保守而无催化活性的结构域SH2和SH3。</li><li>GRB2作为一种接头蛋白既与活化受体上的特异磷酸酪氨酸残基结合又与胞质蛋白鸟苷酸交换因子SOs结合，具有鸟苷酸交换因子活性的Sos蛋白与Ras结合导致活化Ras的构象改变，使非活性的Ras-GDP转换成有活性的Ras-GTP。</li></ol><p>以Ras激活Raf为例：</p><ol start="4"><li>活化是Ras蛋白与Raf（MAPKKK）的N端结构域结合并使其激活。</li><li>活化的Raf结合并磷酸化另一种蛋白激酶MAPKK</li><li>MAPKK磷酸化其唯一底物MAPK并使其激活</li><li>活化的MAPK进入细胞核，可使许多种底物蛋白的丝氨酸/苏氨酸残基磷酸化，包括调节细胞周期和细胞分化的特异性蛋白表达的转录因子，从而修饰它们的活性。</li></ol><p><img src="http://img.whl123456.top/image/image-20200701005128687.png" alt="P177"></p><p><img src="http://img.whl123456.top/image/image-20200701005209361.png" alt="P178"></p><h2 id="细胞增殖调控和细胞分化">细胞增殖调控和细胞分化</h2><h3 id="问答题-9">问答题</h3><h4 id="简述细胞周期各时相的特点。并以MPF为例说明细胞周期的调控特点。">简述细胞周期各时相的特点。并以MPF为例说明细胞周期的调控特点。</h4><p>G<sub>1</sub>期，开始合成细胞生长所需要的各种蛋白质、糖类、脂质等，但不合成细胞核DNA。</p><p>S期，细胞开始合成DNA和新的组蛋白。</p><p>G<sub>2</sub>期，此时细胞核内DNA含量已经增加一倍，其他结构物质和相关的亚细胞结构完成进入M期的必要准备。</p><p>M期，进行有丝分裂或或减数分裂。</p><hr><ol><li><p>MPF即CDK1，或p34<sup>cdc2</sup>激酶，由p34<sup>cdc2</sup>蛋白和周期蛋白B（cyclin B）结合而成。p34<sup>cdc2</sup>蛋白在细胞周期中的含量相对稳定，而周期蛋白B的含量则呈现出周期性变化。周期蛋白B一般在G<sub>1</sub>晚期开始合成，通过S 期，其含量不断增加，达到G<sub>2</sub>期，含量达到最大值。当p34<sup>cdc2</sup>蛋白与周期蛋白B结合后，表现出激酶活性。到G<sub>2</sub>晚期阶段，CDK1活性达到最大值并一直维持到M期的中期阶段。</p></li><li><p>CDK1激酶活性受到很多因素的综合调节。周期蛋白与CDK1结合是CDK1激酶活性表现的前提条件。但是，周期蛋白与CDK1结合是CDK1活化的必要不充分条件，还需要weel/mikl激酶和CDK1活化激酶催化CDK1的Thr14、Tyr15 、Thr161 磷酸化，然后，CDK1在磷酸酶Cdc25C的催化下，其Thr14 和Tyr15 去磷酸化，最终表现出激酶活性。</p></li><li><p>CDK1激酶通过使某些蛋白磷酸化，改变其下游的某些蛋白质的构象从而启动其功能，实现其调控细胞周期的目的。比如，组蛋白H1 磷酸化，促进染色体凝集；核纤层蛋白磷酸化，促进核纤层解聚；核仁蛋白磷酸化，促进核仁解体；p60<sup>c-Src</sup>蛋白磷酸化，促进细胞骨架重排；C-ab 1蛋白磷酸化，促进调整细胞形态等。</p></li><li><p>活化的CDK1促使分裂期细胞在分裂前期执行下列生化事件：</p><ul><li>染色质开始浓缩形成有丝分裂染色体；</li><li>细胞骨架解聚，有丝分裂纺锤体开始装配；</li><li>高尔基复合体、内质网等细胞器解体，形成小的膜泡。</li></ul></li><li><p>在有丝分裂的后期，活化的后期促进因子APC主要介导两类蛋白质降解：后期抑制因子和有丝分裂周期蛋白。前者维持姐妹染色单体粘连，抑制后期启动；后者的降解意味着CDK1失去活性，有丝分裂即将结束，即染色体开始去凝集，核膜重建。</p></li></ol><h4 id="细胞周期中有哪些检验点？各起何作用？">细胞周期中有哪些检验点？各起何作用？</h4><p>G<sub>1</sub>期检验点：在G<sub>1</sub>期的晚期阶段，分裂的细胞可以通过一个特定时期进入 S 期，开始细胞核 DNA 合成，并继续运行直到完成细胞分裂， 这个特定时期称为检验点。在酵母中称为起始点（start），在哺乳动物中称为限制点（R 点）。G<sub>1</sub>期检验点的主要事件包括：DNA 是否损伤， 细胞外环境是否适宜，细胞体积是否足够大等。防止DNA 损伤或突变的细胞进入S期。</p><p>S期检验点：在S期内发生DNA 损伤如DNA 双链发生断裂时，S期内部检验点被激活，从而抑制复制起始点的启动，使DNA 复制速度减慢，S 期延长，同时激活DNA 修复和复制叉的恢复等机制。S 期检验点的主要事件是DNA 复制是否完成。出现损伤或未完成则使DNA 修复或减缓合成速度。</p><p>G<sub>2</sub>期检验点：细胞能否顺利进入M期要受到G<sub>2</sub>期检验点的控制， G<sub>2</sub>期检验点的主要事件包括：DNA 是否损伤， 细胞是否已生长到合适大小，环境因素是否利于细胞分裂等。阻止带有DNA 损伤的细胞进入M期，使得细胞有充足的时间将损伤的DNA 修复。</p><p>中-后期检验点（纺锤体组装检验点）：可以阻止染色体分离，直到姐妹染色单体正确地连接于有丝分裂纺锤体上。纺锤体组装检验点的主要事件包括：监控纺锤体微管与染色单体动粒的连接，染色体在赤道面的队列和向纺锤体两极的分离等。若这些事件未正确完成， 检验点将阻止细胞从分裂中期进入后期。</p><h4 id="什么是细胞分化？细胞分化的本质是什么？举例说明理由。">什么是细胞分化？细胞分化的本质是什么？举例说明理由。</h4><p>在个体发育中，由一种相同的细胞类型经细胞分裂后逐渐在形态、结构和功能上形成稳定性差异，产生不同的细胞类群的过程称为细胞分化。</p><p>细胞分化的本质是基因组在时间和空间上的选择性表达，通过不同基因表达的开启或关闭，最终产生标志性蛋白质。如鸡的输卵管细胞合成卵清蛋白；胰岛β细胞合成胰岛素。</p><h1>自测</h1><h2 id="名词解释-8">名词解释</h2><p><strong>细胞生物学</strong>：<u>细胞生物学是研究和揭示细胞基本生命活动规律的科学，它从显微、亚显微与分子水平上研究细胞结构与功能，细胞增殖、分化、代谢、运动、衰老、死亡，以及细胞信号转导，细胞基因表达与调控，细胞起源与进化等重大生命过程。</u></p><p><strong>细胞</strong>：<u>细胞是生物体结构与功能的基本单位。</u></p><p><strong>细胞学说</strong>：<u>细胞学说是由施旺和施莱登两人共同提出，并由一系列的学者进行修正的学说，其基本内容包括：细胞是有机体，一切动植物都是由细胞发育而来，并由细胞和细胞产物构成；每个细胞是一个相对独立的单位，既有“它自己”的生命，又对与其他细胞共同组成的整体的生命有所助益；新的细胞可以通过已存在的细胞繁殖产生。</u></p><p><strong>生物膜</strong>：<u>细胞中所有的膜结构统称生物膜。</u></p><p><strong>桥粒</strong>：<u>桥粒是连接相邻细胞间的锚定连接方式， 最明显的形态特征是细胞内锚蛋白形成独特的盘状致密斑， 一侧与细胞内的中间丝相连， 另一侧与跨膜黏附性蛋白质相连， 在两个细胞之间形成纽扣样结构， 将相邻细胞铆接在一起。</u></p><p><strong>脑磷脂</strong>：<u>磷脂酰乙醇胺，是3-磷酸甘油的衍生物。</u></p><p><strong>载体（蛋白）</strong>：<u>膜上一类转运蛋白，可特异的、可逆的与特定的溶质分子结合，通过一系列构象改变介导溶质分子的跨膜转运。</u></p><p><strong>网格蛋白</strong>：<u>由3个二聚体形成三脚蛋白复合体，每个二聚体包括1条相对分子质最为1.8×10<sup>5</sup> 的重链和1条3.5×10<sup>4</sup>~4×10<sup>4</sup>的轻链，是包被的结构单位。</u></p><p><strong>水孔蛋白</strong>：<u>是一类具有6个α螺旋区的蛋白质家族， 通常形成四聚体的膜蛋白以行使其转运水或甘油等分子的功能。</u></p><p><strong>内膜系统</strong>：<u>是指在结构、功能乃至发生上相互关联、由单层膜包被的细胞器或细胞结构。主要包括内质网、高尔基体、溶酶体、胞内体和分泌泡等。</u></p><p><strong>细胞质基质</strong>：<u>在真核细胞的细胞质中，除去可分辨的细胞器以外的胶状物质，占据着细胞膜内、细胞核外的细胞内空间，称细胞质基质。</u></p><p><strong>分子伴侣</strong>：<u>存在于细胞质基质或细胞器中，可以识别正在合成或部分折叠的多肽，并与之某些部位结合，协助其转运、正确折叠或装配的一类蛋白质，但其本身不参与终产物的形成。</u></p><p><strong>蛋白酶体</strong>：<u>是细胞内降解蛋白质的大分子复合体，由约50种蛋白质亚基组成相对分子质量为2×10<sup>6</sup> ~ 2.4×10<sup>6</sup>，富含ATP 依赖的蛋白酶活性，其功能然若细胞内蛋白质破碎机。</u></p><p><strong>微体</strong>：<u>过氧化物酶体又称微体，是由单层膜围绕的内含一种或几种氧化酶类的细胞器。</u></p><p><strong>细胞骨架</strong>：<u>是指存在于真核细胞中的蛋白纤维网架体系。</u></p><p><strong>微丝</strong>：<u>是指真核细胞中由肌动蛋白组成，直径为7nm的骨架纤维。</u></p><p><strong>微管</strong>：<u>是指由微管蛋白亚基组装而成的管状结构。</u></p><p><strong>踏车行为</strong>：<u>是指微丝的正极由于肌动蛋白亚基的不断添加而延长，而负极则由于肌动蛋白亚基去组装而缩短的现象。</u></p><p><strong>微管组织中心</strong>：<u>是指在活细胞内，能够起始微管的成核作用，并使之延伸的细胞结构，主要包括中心体、纤毛基部、鞭毛基部。</u></p><p><strong>核小体</strong>：<u>是染色质的基本单位，直径约10nm 的球形小体，由组蛋白和200bp左右的DNA组成。</u></p><p><strong>核定位信号</strong>：<u>亲核蛋白上含有的特殊氨基酸序列，以保证整个蛋白质能够通过核孔复合体被转运到细胞核内。</u></p><p><strong>染色质</strong>：<u>指间期细胞核内由DNA、组蛋白、非组蛋白及少量RNA组成的线性复合结构, 是间期细胞遗传物质存在的形式。</u></p><p><strong>动粒</strong>：<u>在主缢痕处两个染色单体的外侧表面部位的特殊结构，它与染色体微管接触，是微管蛋白的组织中心。</u></p><p><strong>多线染色体</strong>：<u>在某些细胞有丝分裂期间，DNA 多次复制而细胞不分裂。产生的子染色体并行排列，且体细胞内同源染色体配对，紧密结合在一起从而阻止染色质纤维进一步聚缩，形成体积很大的多线染色体。</u></p><p><strong>核纤层</strong>：<u>主要由3种核纤层蛋白构成的中间纤维网络片层结构，紧贴内层核膜下，与胞质中间丝、核基质有密切联系。</u></p><p><strong>蛋白质分选</strong>：<u>是指在核糖体上合成的蛋白质，通过信号肽，在翻译的同时进入内质网，然后经过各种加工和修饰，使不同去向的蛋白质带上不同的标记，最后经过高尔基体反面膜囊进行分选，包装到不同类型的小泡，并运送到目的地的过程。</u></p><p><strong>信号肽</strong>：<u>位于蛋白质的N端，一般由16~26个氨基酸残基组成，其中包括疏水核心区、信号肽的C端和N端等3 部分，在蛋白质合成中将核糖体引导到内质网，进入内质网后通常被切除，无严格的专一性。</u></p><p><strong>膜泡运输</strong>：<u>是蛋白质分选的一种特有的方式，普遍存在于真核细胞中。大分子和颗粒物质被运输时由膜包围形成膜泡，通过一系列膜囊泡的形成和融合来完成转运的过程。</u></p><h2 id="绪论-2">绪论</h2><details><summary>细胞生物学的发展历史大致可划分为哪几个阶段</summary>细胞生物学的发展大致可划分为5个阶段：<ul><li>细胞的发现</li><li>细胞学说的建立</li><li>细胞学的经典时期</li><li>实验细胞学与细胞学的分支及其发展</li><li>细胞生物学学科的形成与发展</li></ul></details><details><summary>如何理解细胞是生命活动的基本单位</summary><ul><li>细胞是构成有机体的基本单位；</li><li>细胞是代谢与功能的基本单位；</li><li>细胞是有机体生长与发育的基础；</li><li>细胞是繁殖的基本单位，是遗传的桥梁；</li><li>细胞是生命起源的归宿，是生物进化的起点。</li></ul><p>故细胞是生命活动的基本单位。</p></details><details><summary>比较真核细胞与原核细胞</summary><p>真核细胞与原核细胞最根本的区别可以归纳为两条：</p><ul><li>生物膜系统的分化与演变：</li></ul><p>​       真核细胞以膜系统的分化为基础，首先分化为两个独立的部分——细胞核与细胞质，细胞质内又以膜系统为基础分隔为结构更精细、功能更专一的单位——各种重要的细胞器。细胞内部结构与职能的分工是真核细胞区别于原核细胞的重要标志。细胞骨架为细胞内部空间布局提供了支架。</p><ul><li>遗传信息量与遗传装置的扩增与复杂化：<ul><li>真核细胞的基因组一般远远大于原核细胞的，作为遗传信息载体的DNA 也由原核细胞的环状单倍性变为线状多倍性；</li><li>原核细胞基因表达的调控主要以操纵子的形式来进行，这种简单的调控方式能适应多种不利环境，进行快速调节，真核细胞因细胞核的存在，使表达实现了多层次调控；</li><li>真核生物有不编码任何蛋白质或RNA 的基因间隔序列和内含子；</li><li>真核细胞拥有多条DNA 分子， 并且DNA 与蛋白质形成交替存在的染色质和染色体；</li><li>真核细胞发展出一整套由酶和调控蛋白组成的复杂精密的体系，严格调控细胞增殖，原核细胞的增殖没有严格阶段，也没有染色质与染色体结构的交替，更无纺锤体的出现。</li></ul></li></ul></details><details><summary>病毒与细胞在起源上的可能关系有几种？目前哪种观点更有说服力，有哪些证据？</summary>起源上目前存在3种主要观点：<ul><li>生物大分子→病毒→细胞</li><li>生物大分子→细胞、病毒</li><li>生物大分子→细胞→病毒</li></ul><p>目前，第二与第三种比较易于接受，第三种观点得到了更多实验结果的支持：</p><ul><li>在原核细胞中，环形DNA 分子的附加体可以质粒的形式在细胞中复制，也可以整合在细菌的染色体中。其行为与细菌病毒λ噬菌体类似。</li><li>真核生物中，尤其是脊椎动物中普遍存在的第二类反转录转座子的两端具有长末端重复序列，其结构与整合于细胞基因组上的反转录病毒十分相似。二者可能有相同的起源。</li><li>已有的证据表明，有些病毒（如腺病毒）的核酸与哺乳动物细胞DNA 某些片段的碱基序列十分相似。</li></ul></details><h2 id="细胞质膜-2">细胞质膜</h2><details><summary>质膜是否具流动性？请设计实验证明。</summary>质膜具有流动性。可以使用荧光漂白恢复技术证明：<ul><li>首先用荧光物质标记膜蛋白或膜脂</li><li>然后用激光束照射细胞表面某一区域， 使被照射区域的荧光悴灭变暗形成一个漂白斑。</li><li>如果悴灭区域的亮度逐渐增加， 最后恢复到与周围的荧光光强度相等，则说明质膜具有流动性。</li></ul></details><details><summary>简述生物膜的基本成分与结构模型</summary>生物膜的基本成分有膜脂和膜蛋白<ul><li>膜脂是生物膜的基本组成成分，主要包括甘油磷脂、鞘脂和固醇3种基本类型</li><li>膜蛋白赋予生物膜非常重要的生物学功能。根据膜蛋白分离的难易程度及其与脂分子的结合方式，可分为：外在膜蛋白、内在膜蛋白和脂锚定膜蛋白3种基本类型。</li></ul><p>生物膜的结构模型根据提出顺序有“蛋白质—脂质—蛋白质” 的三明治式模型、单位膜模型、流动镶嵌模型和脂筏模型。<br>流动镶嵌模型主要强调：</p><ul><li>膜的流动性， 即膜蛋白和膜脂均可侧向运动。</li><li>膜蛋白分布的不对称性， 有的结合在膜表面， 有的嵌入或横跨脂双分子层。</li></ul><p>脂筏模型是对膜流动性的新的理解。在甘油磷脂为主体的生物膜上， 胆固醇、鞘磷脂等富集区域形成相对有序的脂相， 如同漂浮在脂双层上的“脂筏”一样载着执行某些特定生物学功能的各种膜蛋白。</p></details><details><summary>什么是去垢剂？分为哪几类？去垢剂的主要作用是什么？</summary>去垢剂是一端亲水、一端疏水的两性小分子，是分离与研究膜蛋白的常用试剂。<p>去垢剂分为离子型去垢剂（如SDS）和非离子型去垢剂（如Triton X-100）两种类型。</p><p>去垢剂可以插入膜脂， 与膜脂或膜蛋白的跨膜结构域等疏水部位结合， 形成可溶性的微粒。多用于膜蛋白的分离与纯化。</p></details><details><summary>生物膜的不对称性主要体现在哪几个方面？生物学意义是什么？</summary>生物膜的不对称性主要体现在：<ul><li>同一种膜脂在脂双层中的分布不同</li><li>同一种膜蛋白在脂双层中的分布都有特定的方向或拓扑学特征</li><li>糖蛋白和糖脂的糖基部分均位于细胞质膜的外侧</li></ul><p>生物膜的不对称性的生物学意义：</p><ul><li>糖脂的不对称分布是完成其生理功能的结构基础；</li><li>磷脂分子不对称分布的原因和生物学意义还不很清楚；</li><li>膜蛋白的不对称性是生物膜完成复杂的在时间与空间上有序的各种生理功能的保证。</li></ul></details><details><summary>根据功能不同，细胞连接可以分为哪几类？各有什么特点？</summary>可分为：封闭连接、锚定连接、通讯连接<ul><li>封闭连接：将相邻上皮细胞的质膜紧密地连接在一起， 阻止溶液中的小分子沿细胞间隙从细胞一侧渗透到另一侧。紧密连接是这种连接的典型代表。</li><li>锚定连接：通过细胞膜蛋白及细胞骨架系统将相邻细胞， 或细胞与胞外基质间黏着起来。根据直接参与细胞连接的细胞骨架纤维类型的不同，锚定连接又分为与中间丝相关的锚定连接与肌动蛋白纤维相关的锚定连接。前者包括桥粒和半桥粒；后者主要有黏着带和黏着斑。当细胞形成组织后，由于细胞间或者细胞与胞外基质间通过锚点连接分散作用力。从而增强细胞承受机械力的能力。</li><li>通讯连接：介导相邻细胞间的物质转运、化学或电信号的传递， 主要包括动物细胞间的间隙连接、神经元之间或神经元与效应细胞之间的化学突触和植物细胞间的胞间连丝。</li></ul></details><h2 id="物质的跨膜运输-2">物质的跨膜运输</h2><details><summary>简述被动运输与主动运输二者之间有哪些相同点和不同点。</summary>相同点：两者都需要载体参与<p>不同点：</p><ul><li>被动运输不需要能量，而主动运输需要</li><li>被动运输是顺电化学梯度或浓度梯度，而主动运输一般是逆着电化学梯度或浓度梯度</li></ul></details><details><summary>离子通道可以分为哪几种？作用机制分别是什么？</summary>离子通道可分为三种，分别是电压门通道、配体门通道和应力激活通道<ul><li>电压门通道：带电荷的蛋白质结构域会随跨膜电位梯度的改变而发生相应的移动， 从而使离子通道开启或关闭。</li><li>配体门通道：细胞内外的某些小分子配体与通道蛋白结合继而引起通道蛋白构象改变， 从而使离子通道开启或关闭。</li><li>应力激活通道：通道蛋白感应应力而改变构象，从而开启通道形成离子流， 产生电信号</li></ul></details><details><summary>根据能量来源的不同，主动运输可以分为哪几类？</summary>可分为由ATP 直接提供能量( ATP 驱动泵）、间接提供能量（协同转运或偶联转运蛋白）以及光驱动泵。</details><details><summary>简述钠钾泵（钠钾ATP酶）的特点及其主要生理功能。</summary>特点：<ul><li>由2 个α和2个β亚基组成四聚体</li><li>每个循环消耗一个ATP 分子，可以逆着电化学梯度泵出3个Na<sup>+</sup>和泵入2个K<sup>+</sup></li><li>由ATP 直接提供能量的主动转运，而非协同转运</li></ul><p>Na<sup>+</sup>-K<sup>+</sup>泵主要生理功能：</p><ul><li>维持细胞膜电位：每一个工作循环下来，Na<sup>+</sup>-K<sup>+</sup>泵将从细胞泵出3 个Na<sup>+</sup>并泵入2个K<sup>+</sup>， 对膜电位的形成起到了一定作用。</li><li>维持动物细胞渗透平衡：Na<sup>+</sup>-K<sup>+</sup>泵不断地将Na<sup>+</sup>泵到胞外维持了细胞的渗透平衡。还有Cl<sup>-</sup>（靠膜电位停留在胞外） 参与维持动物细胞渗透压平衡。</li><li>吸收营养：动物细胞对葡萄糖或氨基酸等有机物吸收的能量由蕴藏在Na<sup>+</sup>电化学梯度中的势能提供。</li></ul></details><details><summary>以LDL为例，简述受体介导的胞吞作用的过程。</summary><ul><li>胆固醇在血液中的运输通过与磷脂和蛋白质结合形成低密度脂蛋白（LDL）</li><li>LDL与细胞表面的低密度脂蛋白受体特异地结合形成受体——LDL复合物</li><li>通过网格蛋白包被膜泡的内化作用进入细胞</li><li>经脱包被作用并与胞内体融合</li><li>胞内体的低pH环境可引起LDL与受体分离</li><li>胞内体以出芽的方式形成含有受体的小囊泡，返回细胞质膜，受体重复使用</li><li>含有LDL 的胞内体与溶酶体融合，低密度脂蛋白被水解， 释放出胆固醇和脂肪酸供细胞利用。</li></ul></details><h2 id="细胞质基质与内膜系统-2">细胞质基质与内膜系统</h2><details><summary>细胞质基质的主要功能是什么？</summary><ol><li>完成许多中间代谢过程：如糖酵解过程、磷酸戊糖途径、糖醋酸途径、糖原的合成与部分分解过程等。</li><li>为某些蛋白质合成和脂肪酸合成提供场所</li><li>与细胞质骨架的相关功能：<ul><li>细胞质骨架维持细胞的形态、细胞的运动、细胞内的物质运输及能量传递有关；</li><li>细胞质骨架是细胞质基质结构体系的组织者，为细胞质基质中其他成分和细胞器提供锚定位点</li></ul></li><li>与细胞膜的相关功能：<ul><li>细胞内的各种膜相细胞器使细胞质基质产生区室化，从而通过生物膜结构将蛋白质等生物大分子限定在膜的二维平面上，促进反应高效而有序地进行；</li><li>依靠细胞膜或细胞器膜上的泵蛋白和离子通道维持细胞内外跨膜的离子梯度，依靠细胞膜某些协同转运蛋白调节细胞质基质的pH ，维持细胞内环境稳定。</li></ul></li><li>与蛋白质的修饰和选择性降解等方面有关：<ul><li>蛋白质的修饰：辅酶或辅基与酶的共价结合；磷酸化与去磷酸化；蛋白质糖基化作用；甲基化修饰；酰基化。</li><li>控制蛋白质的寿命</li><li>降解变性和错误折叠的蛋白质</li><li>帮助变性或错误折叠的蛋白质重新折叠，形成正确的分子构象</li></ul></li></ol></details><details><summary>简述蛋白质降解的泛素化途径。</summary><ul><li>泛素活化酶(E1) 通过形成酰基－腺甘酸中介物使泛素分子C端被激活， 该反应需要ATP；</li><li>转移活化的泛素分子与泛素结合酶(E2) 的半胱氨酸残基结合；</li><li>异肽键形成，即与E2结合的泛素羧基和靶蛋白赖氨酸侧链的氨基之间形成异肽键，该反应由泛素连接酶(E3)催化完成。</li></ul><p>重复上述步骤，形成具有寡聚泛素链的泛素化靶蛋白。泛素化标签被蛋白酶体帽识别，并利用ATP 水解提供的能量驱动泛素分子的切除和靶蛋白解折叠，去折叠的蛋白质转移至蛋白酶体核心腔内被降解。</p></details><details><summary>内质网可以分为哪2类？详细说明内质网的功能有哪些？</summary>内质网可分为糙面内质网和光面内质网<ol><li>蛋白质的合成是糙面内质网的主要功能。在糙面内质网上，多肽链边延伸边穿过内质网膜进入内质网腔，以这类方式合成的蛋白质主要包括：向细胞外分泌的蛋白质；膜的整合蛋白；细胞器中的可溶性驻留蛋白。</li><li>光面内质网是脂质合成的重要场所。内质网合成细胞需要包括磷脂和胆固醇在内的几乎全部膜脂，其中最主要的磷脂是磷脂酰胆碱（卵磷脂）。</li><li>蛋白质修饰与加工。<ul><li>发生在内质网和高尔基体的蛋白质糖基化；</li><li>在内质网发生二硫键的形成；</li><li>蛋白质折叠和多亚基蛋白的装配；</li><li>在内质网、高尔基体和分泌泡发生特异性的蛋白质水解切割；</li><li>在内质网的胞质侧发生的蛋白质修饰酰基化；</li><li>少数蛋白发生，新生肽的脯氨酸和赖氨酸要进行羟基化，形成羟脯氨酸和羟赖氨酸。</li></ul></li><li>新生多肽的折叠与组装。<ul><li>内质网中有一种蛋白二硫键异构酶（PDI），它附着在内质网膜腔面上，可以切断二硫键，从而帮助新合成的蛋白质重新形成二硫键并产生正确折叠的构象。</li><li>内质网含有一种结合蛋白(Bip)，是属于Hsp70家族的分子伴侣，在内质网中有两个作用：Bip同进入内质网的未折叠蛋白质的疏水氨基酸结合，防止多肽链不正确地折叠和聚合，或者识别错误折叠的蛋白质或未装配好的蛋白质亚单位，并促进它们重新折叠与装配；防止新合成的蛋白质在转运过程中变性或断裂。</li></ul></li><li>内质网的其他功能。<ul><li>肝细胞中的光面内质网中还含有一些酶具有解毒作用</li><li>心肌细胞和骨胳肌细胞中含有发达的特化的光面内质网（肌质网）是储存Ca<sup>2+</sup>的细胞器，对Ca<sup>2+</sup>具调节作用。</li><li>某些合成固醇类激素的细胞光面内质网非常丰富，其中含有制造胆固醇并进一步产生固醇类激素的一系列的酶。</li></ul></li></ol></details><details><summary> N-连接糖基化与O-连接糖基化的主要区别是什么？</summary><table><thead><tr><th>特征</th><th>N-连接</th><th>O-连接</th></tr></thead><tbody><tr><td>合成部位</td><td>糙面内质网和高尔基体</td><td>高尔基体</td></tr><tr><td>合成方式</td><td>来自同—个寡糖前体</td><td>—个个单糖加上去</td></tr><tr><td>与之结合的氨基酸残基</td><td>天冬酰胺</td><td>丝氨酸、苏氨酸、羟赖氨酸、羟脯氨酸</td></tr><tr><td>最终长度</td><td>至少5 个糖残基</td><td>一般1~4个糖残基，但ABO 血型抗原较长</td></tr><tr><td>第一个糖残基</td><td>N-乙酰葡糖胺</td><td>N-乙酰半乳糖胺等</td></tr></tbody></table></details><details><summary>高尔基体的主要功能包括哪几方面？</summary><ol><li>高尔基体与细胞的分泌活动：分泌性蛋白、多种细胞质膜上的膜蛋白、溶酶体中的酸性水解酶及胶原等胞外基质成分，其定向转运过程都是通过高尔基体完成的。</li><li>蛋白质的糖基化及其修饰：大多数蛋白质或膜脂的糖基化修饰和与高尔基体有关的多糖的合成，主要发生在高尔基体。</li><li>蛋白酶的水解和其他加工过程：有些多肽，经特异性水解才成为有生物活性的多肽。</li></ol></details><details><summary>根据处于完成生理功能的阶段的不同，溶酶体可以分为哪几类？溶酶体的功能是什么？结合高尔基体的功能，谈谈溶酶体是如何发生的？</summary><p>大致可分为初级溶酶体、次级溶酶体、残质体</p><p>溶酶体的功能：</p><ol><li>清除无用的生物大分子、衰老的细胞器及衰老损伤和死亡的细胞</li><li>防御功能</li><li>作为细胞内的消化“器官”为细胞提供营养</li><li>在分泌腺细胞中，溶酶体常常摄入分泌颗粒，参与分泌过程的调节</li><li>某些特定细胞程序性死亡，死亡后的细胞被周围吞噬细胞溶酶体消化清除。</li><li>参与受精过程中的顶体反应</li></ol><p>溶酶体的发生：</p><ol><li>溶酶体酶在糙面内质网上合成并经N－连接的糖基化基础修饰，然后转至高尔基体，在高尔基体的顺面膜囊中寡糖链上的甘露糖残基被磷酸化形成甘露糖-6-磷酸(M6P)；</li><li>在高尔基体的反面膜囊和TGN 膜上存在M6P的受体，溶酶体酶与其他蛋白质区分开来，并得以浓缩。</li><li>以出芽的方式形成网格蛋白/AP包被膜泡转运到溶酶体中；</li><li>进入前溶酶体的酸性环境后，M6P受体与M6P分离，并返回高尔基体。</li></ol></details><h2 id="细胞骨架-2">细胞骨架</h2><details><summary>细胞质骨架包括哪3种结构组分？每一种组分的结构成分包括哪些蛋白？各有什么功能？</summary>细胞骨架主要包括微丝(MF)、微管(MT) 和中间丝(IF) 3种结构组分。<p>微丝</p><p>结构成分：主要结构成分是肌动蛋白，其在细胞内有两种存在形式，即肌动蛋白单体（又称球状肌动蛋白)和由单体组装而成的纤维状肌动蛋白。</p><p>功能：</p><ul><li>维持细胞形态；</li><li>赋予质膜机械强度；</li><li>细胞运动；</li><li>构成微绒毛、应力纤维；</li><li>参与胞质分裂；</li><li>参与肌肉收缩等</li></ul><p>微管</p><p>结构成分：α/β-微管蛋白二聚体是细胞质内游离态微管蛋白的主要存在形式， 也是微管组装的基本结构单位</p><p>功能：</p><ul><li>构成细胞的网状支架，维持细胞的形态；</li><li>参与细胞内物质运输；</li><li>细胞器的定位；</li><li>构成纤毛、鞭毛，参与细胞的运动；</li><li>纺锤体和染色体运动;</li></ul><p>中间纤维</p><p>结构成分，有6种主要类型：</p><ol><li><p>角蛋白，单体分为：酸性角蛋白（Ⅰ型）、中性或碱性角蛋白（Ⅱ型）。通过两者的异二聚体形成角蛋白纤维；</p></li><li><p>Ⅲ型中间丝，波形蛋白、结蛋白、微管成束蛋白、胶质丝酸性蛋白与外周蛋白；</p></li><li><p>Ⅳ型中间丝，包括3种神经丝蛋白亚基和α-介连蛋白；</p></li><li><p>Ⅴ型中间丝蛋白，核纤层蛋白A及其剪切体核纤层蛋白C 与核纤层蛋白B1和B2；</p></li><li><p>Ⅵ型中间丝蛋白，巢蛋白与desmuslin ；</p></li><li><p>晶状体中发现的phakinin/CP49和丝晶蛋白属于“孤儿”类型。</p></li></ol><p>功能：</p><ul><li>细胞抗机械压力的能力；</li><li>角蛋白纤维参与桥粒的形成和维持；</li><li>结蛋白纤维是肌肉Z盘的重要结构组分，对于维持肌肉细胞的收缩装置起重要作用；</li><li>神经元纤维在神经细胞轴突运输中起作用；</li><li>参与传递细胞内机械的或分子的信息；</li><li>中间纤维与mRNA的运输有关；与细胞分化有关：形成跨膜信息通道。</li></ul></details><details><summary>依赖于微管的马达蛋白包括哪几类？各有什么特点？简述微管与细胞内物质运输之间的关系。</summary>依赖于微管的马达蛋白包括驱动蛋白和胞质动力蛋白<p>驱动蛋白特点</p><ol><li>是一条长80nm 的杆状结构，头部一端有两个呈球状的马达结构域，另一端是重链和轻链组成的扇形尾端，中间是重链组成的杆状区。</li><li>驱动蛋白具有许多超家族</li><li>驱动蛋白的行为与其马达结构域在多肽链中的位置有关，大多数以微管为轨道由微管负端向微管正端运送货物，是正端走向的微管发动机</li><li>大部分驱动蛋白可通过多肽链上一段卷曲螺旋相互作用而形成同源二聚体</li></ol><p>细胞质动力蛋白特点</p><ol><li>细胞质动力蛋白是由一个相对分子质量接近1.5×10<sup>6</sup>的巨大蛋白复合物组成，含多个多肽亚单位： 两条具有ATP酶活性的使其沿微管移动的重链，两条中间链和一些轻链。</li><li>动力蛋白是已知马达蛋白中最大、移动速度最快的成员。</li><li>细胞质动力蛋白只有两个重链家族成员，Dync1 h1和Dync1 h2 。</li><li>细胞质动力蛋白以微管为轨道由微管正端向微管负端运送货物，是负端走向的微管发动机</li></ol><p>微管是细胞内物质运输之间的轨道</p></details><details><summary>影响微丝、微管组装的特异性药物有哪些？各有什么特点？</summary><p>影响微丝的有细胞松弛素和鬼笔环肽等。</p><ul><li>细胞松弛素与微丝结合后可以将微丝切断，结合在微丝末端阻抑肌动蛋白在该部位的聚合，但对微丝的解聚没有明显影响，因而用细胞松弛素处理细胞可以破坏微丝的网络结构，并阻止细胞的运动。</li><li>鬼笔环肽与微丝表面有强亲和力，但不与肌动蛋白单体结合，能阻止微丝的解聚，使其保持稳定状态。</li></ul><p>影响微管的有秋水仙素和紫杉醇等</p><ul><li>秋水仙素与微管蛋白亚基结合组装到微管末端后，其他的微管蛋白亚基很难再在该处进行组装，但不影响该微管的去组装，从而导致细胞内微管网络的解体。</li><li>紫杉醇与微管结合后可以阻止微管的去组装，但不影响微管末端的组装微管不停地组装，不会解聚，其结果使细胞周期的运行被终止。</li></ul></details><details><summary>简述骨骼肌细胞的结构组分以及肌肉收缩的滑动模型理论。</summary><p>骨骼肌细胞的结构组分</p><p>骨骼肌细胞是由数百条更细的肌原纤维组成的集束，每根肌原纤维由称为肌节的收缩单元呈线性重复排列而成。每个肌节都表现出特征性的带型。肌原纤维的带状条纹由粗肌丝和细肌丝的纤维有序组装而成。粗肌丝由肌球蛋白组装而成，细肌丝的主要成分是肌动蛋白，辅以原肌球蛋白和肌钙蛋白。肌球蛋白的头部突出于粗肌丝的表面，并可与细肌丝上肌动蛋白亚基结合，构成粗肌丝与细肌丝之间的横桥。</p><p>除此之外还有将细肌丝锚定于Z 盘或质膜上的CapZ、α-辅肌动蛋白和纽蛋白；在肌节中起结构作用的肌联蛋白、伴肌动蛋白和肌营养不良蛋白。</p><p>滑动模型理论：肌肉收缩时肌节缩短，但在肌节内并无粗／细肌丝的长度变化，而只是由神经冲动引发的细肌丝与粗肌丝之间的相对滑动所致。基本过程如下：</p><ol><li>动作电位的产生</li><li>Ca<sup>2+</sup>的释放</li><li>原肌球蛋白位移</li><li>细肌丝与粗肌丝之间的相对滑动<ul><li>在初始状态，组成粗肌丝的肌球蛋白的头部（马达结构域） 没有结合ATP 时，该肌球蛋白的头部与细肌丝结合，并成僵直状态。</li><li>ATP 结合到肌球蛋白的头部导致与肌动蛋白纤维的结合力下降， 肌球蛋白与肌动蛋白分开；</li><li>ATP 水解为ADP+Pi，ATP 水解释放出的能量被肌球蛋白吸收， 导致进一步的构象变化， 头部结构域向前抬升， 并结合到靠近细肌丝正极端的一个肌动蛋白亚基上；</li><li>Pi释放，肌球蛋白颈部结构域发生构象变化，头部与细丝的角度发生变化，拉动细肌丝导致细肌丝相对于粗肌丝的滑动；</li><li>ADP 释放，肌球蛋白的头部结构域与细肌丝之间又回到僵直状态。</li></ul></li></ol></details><details><summary>简述中间纤维（中间丝）的组装模式，并简要介绍中间纤维与核纤层蛋白之间的联系。</summary>中间纤维的组装模式<ol><li>两个单体的杆状区以平行排列的方式形成双股螺旋的二聚体；</li><li>两个二聚体以反向平行和半分子交错的形式组装成四聚体；</li><li>四聚体之间在纵向（首尾） 和侧向相互作用，最终组装成横截面由32个中间丝蛋白分子组成，长度不等的中间丝。</li></ol><p>中间纤维与核纤层蛋白之间的联系</p><p>由Ⅴ型中间丝蛋白组装而成的核纤层结构在核膜的内侧呈正交网状排列。核纤层与内核膜上的核纤层蛋白受体相连，是核膜的重要支撑结构，也是染色质的重要锚定位点。</p></details><h2 id="细胞核-2">细胞核</h2><details><summary>细胞核由哪几部分组成？主要功能是什么？</summary>细胞核主要由核被膜、核纤层、染色质、核仁及核体组成。<p>细胞核的主要功能：</p><ul><li>是遗传信息的主要贮存库；</li><li>是遗传信息的复制和传递的场所；</li><li>进行遗传信息的表达，是细胞生命活动的控制枢纽。</li></ul></details><details><summary>什么是核孔复合体？简述核孔复合体的结构组成，以及核孔复合体的运输功能有什么特点？</summary>核孔复合体是在核被膜上由多种核孔蛋白构成的联系核质和细胞质的复杂隧道结构。<p>核孔复合体的结构组成：核孔复合体主要由胞质环、核质环、辐和栓4部分组成。</p><ul><li>胞质环：位于核孔边缘的胞质面一侧，环上有8条短纤维对称分布伸向胞质。</li><li>核质环：位于核孔边缘的核质面一侧，环上对称地连有8条细长的纤维，向核内伸入50~70nm，在纤维的末端形成一个直径为60nm 的小环，小环由8 个颗粒构成。</li><li>辐：由核孔边缘伸向中心，呈辐射状八重对称，有位于核孔边缘的“柱状亚单位”、穿过核膜伸入双层核膜的膜间腔的“腔内亚单位”和靠近中心的“环带亚单位”的3个结构域。环带亚单位由8个颗粒状结构环绕形成核孔复合体核质交换的通道。</li><li>栓：位于核孔的中心，呈颗粒状或棒状。</li></ul><p>核孔复合体运输功能及特点，核孔复合体是核质交换的双功能、双向性亲水通道。</p><ul><li>双功能表现在核孔复合体有两种运输方式：被动扩散与主动运输。</li><li>双向性表现在既介导蛋白质的入核转运，又介导RNA、核糖核蛋白颗粒(RNP)的出核转运。</li></ul></details><details><summary>简述染色质组装的两种结构模型。</summary>染色质组装的多级螺旋模型，DNA（压缩7倍）→核小体（压缩6倍）→螺线管（压缩40倍）→超螺线管（压缩5倍）→染色单体<p>由DNA与组蛋白组装成核小体，在组蛋白H1的介导下核小体彼此连接形成直径约10nm的核小体串珠结构，在有组蛋白H1存在的情况下，由直径10nm的核小体串珠结构螺旋盘绕，每圈6个核小体，形成外径25~30nm，螺距12nm的螺线管，螺线管进一步螺旋形成直径为0.4μm 的超螺线管，再进一步螺旋折叠形成直径为2~10μm的染色单体。经过四级螺旋组装形成的染色体结构，共压缩了8400倍。</p><p>染色质组装的放射环结构模型，DNA→核小体→螺线管→DNA复制环→微带→染色单体</p><p>螺线管形成DNA复制环，每18个复制环呈放射状平面排列，结合在核基质上形成微带。微带是染色体高级结构的单位，约10<sup>6</sup>个微带沿纵轴构建成子染色体。</p></details><details><summary>什么是中期染色体的三种功能元件？其主要功能是什么？</summary><p>在细胞世代中确保染色体的复制和稳定遗传，染色体起码应具备3种功能元件，构成染色体DNA的这3种关键序列称为染色体DNA的功能元件。</p><p>三种功能元件的主要功能</p><ul><li>自主复制DNA 序列：确保染色体在细胞周期中能够自我复制，维持染色体在细胞世代传递中的连续性。</li><li>着丝粒DNA 序列：使细胞分裂时已完成复制的染色体能平均分配到子细胞中。</li><li>端粒DNA 序列：保持染色体的独立性和稳定性。</li></ul></details><details><summary>简述核仁的3种基本组分特点及功能，谈谈为什么凡是蛋白质合成旺盛的细胞中核仁都明显偏大。</summary>核仁的3种基本组分：纤维中心，致密纤维组分和颗粒组分<ul><li>纤维中心（FC）：包埋在颗粒组分内部一个或几个浅染的低电子密度的圆形结构。FC中的染色质不形成核小体结构，也没有组蛋白存在，但存在嗜银蛋白。其中磷蛋白C23可能与核仁中染色质结构的调节有关。是rRNA基因的储存位点。</li><li>致密纤维组分（DFC）：是核仁超微结构中电子密度最高的部分，呈环形或半月形包围FC, 由致密的纤维构成，通常见不到颗粒。转录主要发生在FC与DFC的交界处。</li><li>颗粒组分（GC）：是核仁的主要结构。它由直径15-20 nm的RNP构成。代表核糖体亚基成熟和储存的位点。</li></ul><p>蛋白质的合成需要核糖体，核糖体生物发生与核仁有关。在大小亚基合成时，小亚基所需的18S rRNA直接在核仁中合成，装配完成后从核仁运输出来，在核仁的停留时间较短，大亚基组装所需的28S rRNA、5.8S rRNA可以在核仁中合成但5S rRNA需要从核仁之外的其他部位汇集再进行装配，大亚基合成较慢，过多大亚基滞留在核仁中，故蛋白质合成旺盛的细胞中核仁都明显偏大。</p></details><details><summary>什么是核基质？什么是核骨架？核骨架的功能是什么</summary><p>核基质是指真核细胞的核内除染色质、核膜与核仁外，以蛋白质成分为主的网架结构。</p><p>核骨架广义上包括核基质、核纤层以及染色体骨架，狭义上是指核基质。</p><p>核骨架的功能</p><ol><li>维持细胞核的形态</li><li>为DNA、染色质在核中的空间排列提供支附作用</li><li>核骨架与DNA复制、基因表达及染色体的组装与构建有密切关系。</li></ol></details><h2 id="蛋白质分选和膜泡运输-2">蛋白质分选和膜泡运输</h2><details><summary>试述细胞内蛋白质的合成部位及其去向（蛋白质分选的途径）。</summary>核细胞中除线粒体和植物细胞叶绿体中能合成少量蛋白质外，绝大多数蛋白质都是由核基因编码，或在游离核糖体上合成，或在糙面内质网膜结合核糖体上合成。<p>核基因编码的蛋白质的分选大体可分2条途径：</p><ul><li>共翻译转运途径：在细胞质基质中多肽链合成起始后，转移到内质网，然后边合成边转入内质网腔，再经高尔基体运输至溶酶体、细胞膜或分泌到细胞外；</li><li>后翻译转运途径：在细胞质基质游离核糖体上完成多肽链的合成，然后转运至膜围绕的细胞器。</li></ul></details><details><summary>简述信号（肽）假说的主要内容。</summary>以分泌蛋白N端序列作为信号肽，指导分泌性蛋白质在内质网膜上合成，然后在信号肽引导下蛋白质边合成边通过移位子蛋白复合体进入内质网腔，在蛋白质合成结束之前切除信号肽。其他类型的蛋白质也含有类似的信号序列，指导蛋白质完成定向运输。</details><details><summary>由核基因编码的蛋白质是如何运送到线粒体中去的？</summary>在游离核糖体上合成的前体蛋白，与胞质蛋白分子伴侣Hsc70结合，并使其保持未折叠或部分折叠状态，其N端具有基质靶向序列，前体蛋白与内外膜接触点附近的输入受体(Tom20/22) 结合，被转运进入输入孔，输入的蛋白进而通过内外膜接触点的输入通道（外膜为Tom40, 内膜为Tim23/17)，线粒体基质分子伴侣Hsc70与输入蛋白结合并水解ATP以驱动基质蛋白的输入。输入的基质蛋白其基质靶向序列，在基质蛋白酶作用下被切除， 同时Hsc70 也从新输入的基质蛋白上释放出来，进而折叠，产生活性构象。</details><details><summary>转运膜泡表面包被蛋白可以分为哪3类？这3类膜泡类型的特征有什么不同？</summary>可分成COPⅡ包被膜泡、COPⅠ包被膜泡和网格蛋白/接头蛋白包被膜泡。<p>COPⅡ包被膜泡：由小分子 GTPase Sar1、 Sec23/Sec24、Sec13/Sec31以及大的纤维蛋白Sec16等组成，介导细胞内顺向运输即负责从内质网→高尔基体的物质运输；</p><p>COPⅠ包被膜泡：COPⅠ包被含有7种蛋白亚基包被蛋白复合物的装配与去装配依赖于ARF。负责回收、转运内质网逃逸蛋白返回内质网；介导高尔基体不同区域间的蛋白质运输。</p><p>网格蛋白/接头蛋白包被膜泡：是一类双层包被的膜泡，外层由网格蛋白组成，内层由接头蛋白复合物组成。纯化的网格蛋白分子呈三腿结构，每个分支含一条重链和一条轻链。负责运输途径质膜→内体；高尔基体→内体；高尔基体→溶酶体、植物液泡。</p></details><details><summary>膜泡运输的关键步骤涉及哪些过程？简述介导转运膜泡与靶膜融合的主要机制。</summary><p>膜泡运输的关键步骤至少涉及如下过程：</p><ul><li><p>供体膜的出芽、装配和断裂，形成不同的包被转运膜泡；</p></li><li><p>在细胞内由马达蛋白驱动、以微管为轨道的膜泡运输；</p></li><li><p>转运膜泡与特定靶膜的锚定和融合。</p></li></ul><p>介导转运膜泡与靶膜融合的主要机制：</p><p>在供体膜上的鸟苷酸交换因子(GEF) 识别并结合特异性Rab蛋白， 诱发GTP置换GDP, 鸟苷酸交换引发Rab蛋白构象改变并暴露其共价结合的脂质基团，从而帮助Rab-GTP蛋白锚定在供体膜上，并随膜泡转移，在靶膜上Rab-GTP与Rab效应器结合，这种结合有助于膜泡锚定和v-SNARE 与t-SNARE 的配对 ;</p><p>v-SNARE 蛋白与同类t-SNARE 胞质结构域相互作用，形成稳定的卷曲SNARE复合体， 将膜泡与靶膜紧密束缚在一起， 伴随SNARE复合物形成后，供体膜泡与靶膜随即融合，两膜融合后，NSF联合α-SNAP 蛋白随即与SNARE 复合体结合，然后NSF 催化ATP 水解，驱动SNARE 复合体解离， 游离的SNARE蛋白再用于其他膜泡的融合。</p><p>具有GTPase活性的Rab蛋白水解与之结合的GTP, 释放可溶性的Rab-GDP 进入细胞质。</p><p>在细胞质中Rab-GDP与GDP 解离抑制物(GDI)结合，从而防止Rab 蛋白从Rab-GDP复合物中释放出来 ，直至与GEF 发生相互作用。</p></details><h2 id="细胞信号转导-2">细胞信号转导</h2><details><summary>简述细胞信号转导系统的组成及其特性</summary><p>通过细胞表面受体介导的信号通路通常由下列5个步骤组成：</p><ul><li>细胞表面受体特异性识别并结合胞外信号分子（配体），形成受体-配体复合物， 导致受体激活；</li><li>由于激活受体构象改变， 导致信号初级跨膜转导， 靶细胞内产生第二信使或活化的信号蛋白；</li><li>通过胞内第二信使或细胞内信号蛋白复合物的装配， 起始胞内信号放大的级联反应</li><li>细胞应答反应， 如果这种级联反应主要是通过酶的逐级激活， 结果将改变细胞代谢活性， 或者通过基因表达调控蛋白影响细胞基因表达和影响发育， 或者通过细胞骨架蛋白的修饰改变细胞形状或运动；</li><li>由于受体脱敏或受体下调，终止或降低细胞反应。</li></ul><p>信号转导系统的主要特性：</p><ul><li>特异性：细胞受体与胞外配体通过结构互补机制以非共价键结合， 形成受体-配体复合物， 简称具有“结合” 特异性，受体因结合配体而改变构象被激活，介导特定的细胞反应，从而又表现出“ 效应器” 特异性。此外，受体与配体的结合具有饱和性和可逆性的特征。</li><li>放大效应：信号传递至胞内效应器蛋白（通常由酶或离子通道蛋白组成），引发细胞内信号放大的级联反应，如果级联反应主要是通过酶的逐级激活，结果将改变细胞代谢活性。最常见的级联放大作用是通过蛋白质磷酸化实现的。</li><li>网络化与反馈调节机制：细胞信号系统网络化的相互作用是细胞生命活动的重要特征，在细胞内由一系列蛋白质组成的信号转导系统中，细胞对刺激作出适时适度的反应是细胞完成各种生命活动的基础，信号网络化效应有利于克服分子间相互作用的随机性对细胞生命活动的负面干扰。这样的网络特性是由一系列正反馈和负反馈环路组成的，对于及时校正反应的速率和强度是最基本的调控机制。</li><li>整合作用：多细胞生物的每个细胞都处于细胞“社会“ 环境之中，大最的信息以不同组合的方式调节细胞的行为。因此，细胞必须整合不同的信息，对细胞外信号分子的特异性组合作出程序性反应，甚至作出生死抉择，这样才能维持生命活动的有序性。</li></ul></details><details><summary>细胞信号传递的通路随信号受体存在部位不同可分为几大类？各有什么特点？</summary><p>根据靶细胞上的受体存在的部位，可将受体区分为细胞内受体和细胞表面受体。</p><p>故有细胞内受体介导的信号传递和细胞表面的G蛋白偶联受体介导的信号转导、酶联受体介导的信号转导和其他细胞表面受体介导的信号通路。</p><p>细胞内受体介导的信号传递受体位于细胞质基质或核基质中，主要识别和结合小的脂溶性信号分子，其中NO也可以作为气体信号分子进入靶细胞直接与酶接合。</p><p>细胞表面受体主要识别和结合亲水性信号分子，包括分泌型信号分子或膜结合型信号分子。其又分属三大家族：离子通道偶联受体、G蛋白偶联受体和酶偶联受体。</p></details><details><summary>概述G蛋白耦联受体介导的信号通路的组成、特点及主要功能。</summary><p>信号通路按其效应器蛋白的不同可分为3类：</p><ul><li>激活离子通道的G蛋白偶联受体；</li><li>激活或抑制腺苷酸环化酶，以cAMP为第二信使的G蛋白偶联受体；</li><li>激活磷脂酶C，以IP<sub>3</sub>和DAG作为双信使的G蛋白偶联受体。</li></ul><p><strong>激活离子通道的G蛋白偶联受体所介导的信号通路</strong></p><p>特点：当受体与配体结合被激活后，通过偶联G蛋白的分子开关作用，调控跨膜离子通道的开启与关闭，进而调节靶细胞的活性；</p><p>主要功能：</p><ul><li>心肌细胞上M乙酰胆碱受体激活G蛋白开启K<sup>+</sup>通道；</li><li>Gt蛋白偶联的光敏感受体的活化诱发cGMP门控阳离子通道的关闭。</li></ul><hr><p><strong>激活或抑制腺苷酸环化酶的G蛋白偶联受体所介导的信号通路</strong></p><p>特点：G<sub>α</sub>亚基的首要效应酶腺苷酸环化酶，通过腺苷酸环化酶活性的变化调节靶细胞内第二信使cAMP的水平，进而影响信号通路的下游事件。</p><p>主要功能：</p><ul><li>对肝细胞和肌细胞糖原代谢进行调节；</li><li>对真核细胞基因表达进行调控。</li></ul><hr><p><strong>激活磷脂酶C，以IP<sub>3</sub>和DAG作为双信使的G蛋白偶联受体所介导的信号通路</strong></p><p>特点：胞外信号被膜受体接受后，同时产生两个胞内信使，分别激活IP<sub>3</sub>-Ca<sup>2+</sup>和DAG-PKC两种不同的信号通路。</p><p>主要功能：</p><ul><li>驱动心机细胞收缩；</li><li>引发平滑肌舒张；</li><li>参与众多生理功能涉及细胞“短期生理效应”（细胞分泌、肌肉收缩等），又涉及细胞增殖、分化等“长期生理效应”。</li></ul></details><details><summary>cAMP信号通路和磷脂酰肌醇信号通路有哪些联系和区别？</summary>两者都属于G蛋白偶联受体所介导的细胞信号通路。<p>以cAMP为第二信使的信号通路中，主要是通过cAMP激活蛋白激酶A（PKA）所介导的。</p><p>磷脂酰肌醇信号通路中，胞外信号被膜受体接受后，同时产生两个胞内信使，IP<sub>3</sub>刺激细胞内质网释放Ca<sup>2+</sup>，DAP激活PKC。</p></details><details><summary>以RTK为例,简述酶联受体介导的信号转导过程。</summary><ol><li>在静息状态下RTK活性很低，配体的结合导致受体二聚化，当受体二聚化后，激活受体的蛋白酪氨酸激酶的活性，进而在二聚体内彼此交叉磷酸化受体胞内肽段的一个或多个酪氨酸残基（受体自磷酸化）。</li><li>活化的RTK通过磷酸酪氨酸残基可以结合多种细胞质中带有SH2结构域的蛋白，其中一类是接头蛋白，另一类是在信号通路中有关的酶。这两类RTK结合蛋白的结构和功能不同，但他们都具有两个高度保守而无催化活性的结构域SH2和SH3。</li><li>GRB2作为一种接头蛋白既与活化受体上的特异磷酸酪氨酸残基结合又与胞质蛋白鸟苷酸交换因子SOs结合，具有鸟苷酸交换因子活性的Sos蛋白与Ras结合导致活化Ras的构象改变，使非活性的Ras-GDP转换成有活性的Ras-GTP。</li></ol><p>以Ras激活Raf为例：</p><ol start="4"><li>活化是Ras蛋白与Raf（MAPKKK）的N端结构域结合并使其激活。</li><li>活化的Raf结合并磷酸化另一种蛋白激酶MAPKK</li><li>MAPKK磷酸化其唯一底物MAPK并使其激活</li><li>活化的MAPK进入细胞核，可使许多种底物蛋白的丝氨酸/苏氨酸残基磷酸化，包括调节细胞周期和细胞分化的特异性蛋白表达的转录因子，从而修饰它们的活性。</li></ol></details><h2 id="细胞增殖调控和细胞分化-2">细胞增殖调控和细胞分化</h2><details><summary>简述细胞周期各时相的特点。并以MPF为例说明细胞周期的调控特点。</summary><p>G<sub>1</sub>期，开始合成细胞生长所需要的各种蛋白质、糖类、脂质等，但不合成细胞核DNA。</p><p>S期，细胞开始合成DNA和新的组蛋白。</p><p>G<sub>2</sub>期，此时细胞核内DNA含量已经增加一倍，其他结构物质和相关的亚细胞结构完成进入M期的必要准备。</p><p>M期，进行有丝分裂或或减数分裂。</p><hr><ol><li><p>MPF即CDK1，或p34<sup>cdc2</sup>激酶，由p34<sup>cdc2</sup>蛋白和周期蛋白B（cyclin B）结合而成。p34<sup>cdc2</sup>蛋白在细胞周期中的含量相对稳定，而周期蛋白B的含量则呈现出周期性变化。周期蛋白B一般在G<sub>1</sub>晚期开始合成，通过S 期，其含量不断增加，达到G<sub>2</sub>期，含量达到最大值。当p34<sup>cdc2</sup>蛋白与周期蛋白B结合后，表现出激酶活性。到G<sub>2</sub>晚期阶段，CDK1活性达到最大值并一直维持到M期的中期阶段。</p></li><li><p>CDK1激酶活性受到很多因素的综合调节。周期蛋白与CDK1结合是CDK1激酶活性表现的前提条件。但是，周期蛋白与CDK1结合是CDK1活化的必要不充分条件，还需要weel/mikl激酶和CDK1活化激酶催化CDK1的Thr14、Tyr15 、Thr161 磷酸化，然后，CDK1在磷酸酶Cdc25C的催化下，其Thr14 和Tyr15 去磷酸化，最终表现出激酶活性。</p></li><li><p>CDK1激酶通过使某些蛋白磷酸化，改变其下游的某些蛋白质的构象从而启动其功能，实现其调控细胞周期的目的。比如，组蛋白H1 磷酸化，促进染色体凝集；核纤层蛋白磷酸化，促进核纤层解聚；核仁蛋白磷酸化，促进核仁解体；p60<sup>c-Src</sup>蛋白磷酸化，促进细胞骨架重排；C-ab 1蛋白磷酸化，促进调整细胞形态等。</p></li><li><p>活化的CDK1促使分裂期细胞在分裂前期执行下列生化事件：</p><ul><li>染色质开始浓缩形成有丝分裂染色体；</li><li>细胞骨架解聚，有丝分裂纺锤体开始装配；</li><li>高尔基复合体、内质网等细胞器解体，形成小的膜泡。</li></ul></li><li><p>在有丝分裂的后期，活化的后期促进因子APC主要介导两类蛋白质降解：后期抑制因子和有丝分裂周期蛋白。前者维持姐妹染色单体粘连，抑制后期启动；后者的降解意味着CDK1失去活性，有丝分裂即将结束，即染色体开始去凝集，核膜重建。</p></li></ol></details><details><summary>细胞周期中有哪些检验点？各起何作用？</summary><p>G<sub>1</sub>期检验点：在G<sub>1</sub>期的晚期阶段，分裂的细胞可以通过一个特定时期进入 S 期，开始细胞核 DNA 合成，并继续运行直到完成细胞分裂， 这个特定时期称为检验点。在酵母中称为起始点（start），在哺乳动物中称为限制点（R 点）。G<sub>1</sub>期检验点的主要事件包括：DNA 是否损伤， 细胞外环境是否适宜，细胞体积是否足够大等。防止DNA 损伤或突变的细胞进入S期。</p><p>S期检验点：在S期内发生DNA 损伤如DNA 双链发生断裂时，S期内部检验点被激活，从而抑制复制起始点的启动，使DNA 复制速度减慢，S 期延长，同时激活DNA 修复和复制叉的恢复等机制。S 期检验点的主要事件是DNA 复制是否完成。出现损伤或未完成则使DNA 修复或减缓合成速度。</p><p>G<sub>2</sub>期检验点：细胞能否顺利进入M期要受到G<sub>2</sub>期检验点的控制， G<sub>2</sub>期检验点的主要事件包括：DNA 是否损伤， 细胞是否已生长到合适大小，环境因素是否利于细胞分裂等。阻止带有DNA 损伤的细胞进入M期，使得细胞有充足的时间将损伤的DNA 修复。</p><p>中-后期检验点（纺锤体组装检验点）：可以阻止染色体分离，直到姐妹染色单体正确地连接于有丝分裂纺锤体上。纺锤体组装检验点的主要事件包括：监控纺锤体微管与染色单体动粒的连接，染色体在赤道面的队列和向纺锤体两极的分离等。若这些事件未正确完成， 检验点将阻止细胞从分裂中期进入后期。</p></details><details><summary>什么是细胞分化？细胞分化的本质是什么？举例说明理由。</summary><p>在个体发育中，由一种相同的细胞类型经细胞分裂后逐渐在形态、结构和功能上形成稳定性差异，产生不同的细胞类群的过程称为细胞分化。</p><p>细胞分化的本质是基因组在时间和空间上的选择性表达，通过不同基因表达的开启或关闭，最终产生标志性蛋白质。如鸡的输卵管细胞合成卵清蛋白；胰岛β细胞合成胰岛素。</p></details>]]></content>
      
      
      <categories>
          
          <category> 生物学 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 细胞生物学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>微生物学复习整理</title>
      <link href="2020/06/24/%E5%BE%AE%E7%94%9F%E7%89%A9%E5%AD%A6/"/>
      <url>2020/06/24/%E5%BE%AE%E7%94%9F%E7%89%A9%E5%AD%A6/</url>
      
        <content type="html"><![CDATA[<h2 id="填空、选择、判断、简答、论述">填空、选择、判断、简答、论述</h2><h2 id="绪论">绪论</h2><h3 id="微生物的五大共性">微生物的五大共性</h3><ul><li>体积小，面积大：微生物大小以μm计，但比表面积（表面积/体积）大。由于一个小体积大面积系统必然有一个巨大的营养物质吸收面、代谢废物的排泄面和环境信息的交换面，从而产生其余4个共性，因此，这也是微生物最基本的特征</li><li>吸收多，转化快：这一特性为高速生长繁殖和产生大量代谢物提供了充分的物质基础</li><li>生长旺，繁殖快：这一特性可在短时间内把大量基质转化为有用产品，缩短科研周期，但也有不利的一面，如疾病、粮食霉变。</li><li>适应强，易变异：有些极端微生物能生活在高温、高酸、髙碱、髙盐、高毒、髙压或低温等极端环境中；微生物遗传物质易变异。</li><li>分布广，种类多：微生物的种类多构成了微生物多样性，主要表现在：<ul><li>物种的多样性；</li><li>生理代谢类的多样性；</li><li>代谢产物的多样性；</li><li>遗传基因的多样性；</li><li>生态类型的多样性。</li></ul></li></ul><h3 id="思考题">思考题</h3><h4 id="什么是微生物？习惯上它包括哪几大类群？">什么是微生物？习惯上它包括哪几大类群？</h4><p>微生物是指一切肉眼看不见或看不清的微小生物的总称。它们都是一些个体微小（一般&lt;0.1mm）、构造简单的低等生物。</p><p>习惯上包括三大类群</p><ul><li><p>属于原核类的细菌（真细菌和古生菌）、放线菌、蓝细菌（旧称“蓝绿藻”或“蓝藻”）、枝原体（又称支原体、立克次氏体和衣原体；</p></li><li><p>属于真核类的真菌（酵母菌、霉菌和蕈菌）、原生动物和显微藻类；</p></li><li><p>属于非细胞类的病毒和亚病毒（类病毒、拟病毒和朊病毒）</p></li></ul><h4 id="微生物学发展史如何分期？各期的时间、实质、创始人和特点是什么？我国人民在微生物学发展史上占有什么地位？有什么值得反思？">微生物学发展史如何分期？各期的时间、实质、创始人和特点是什么？我国人民在微生物学发展史上占有什么地位？有什么值得反思？</h4><p>微生物学发展史的分期以及各时期的时间、实质、创始人和特点如下：</p><h5 id="史前期（约8000年前-1676年）——朦胧阶段">史前期（约8000年前~1676年）——朦胧阶段</h5><p>代表人物：<strong>各国劳动人民</strong>。其中尤以我国的制曲、酿酒技术著称</p><p>特点：</p><ul><li>未见细菌等微生物的个体；</li><li>凭实践经验利用微生物的有益活动（进行酿酒、发面、制酱、娘醋、沤肥、轮作、治病等）</li></ul><h5 id="初创期（1676-1861年）——形态描述阶段">初创期（1676~1861年）——形态描述阶段</h5><p>代表人物：<strong>列文虎克</strong>——微生物学的先驱者</p><p>特点：</p><ul><li>自制单式显微镜，观察到细菌等微生物的个体；</li><li>出于个人爱好对一些微生物进行形态描述。</li></ul><h5 id="奠基期（1861-1897年）——生理水平研究阶段">奠基期（1861~1897年）——生理水平研究阶段</h5><p>代表人物：<strong>巴斯德</strong>——微生物学奠基人和<strong>科赫</strong>——细菌学奠基人。</p><p>特点：</p><ul><li>微生物学开始建立；</li><li>创立了一整套独特的微生物学基本研究方法；</li><li>开始运用“实践—理论—实践”的思想方法开展研究</li><li>建立了许多应用性分支学科</li><li>进入寻找人类和动物病原菌的黄金时期</li></ul><h5 id="发展期（1897-1953年）——生化水平研究阶段">发展期（1897~1953年）——生化水平研究阶段</h5><p>代表人物：<strong>E. Buchner</strong>——生物化学的奠基人</p><p>特点：</p><ul><li>对无细胞酵母菌“酒化酶”进行生化研究；</li><li>发现微生物的代谢统一性；</li><li>普通微生物学开始形成；</li><li>开展广泛寻找微生物的有益代谢产物；</li><li>青霉素的发现推动了微生物工业化培养技术的猛进。</li></ul><h5 id="成熟期（1953年-至今）——分子生物学水平研究阶段">成熟期（1953年~至今）——分子生物学水平研究阶段</h5><p>代表人物：<strong>J. Watson</strong>和 <strong>F. Crick</strong>——分子生物学奠基人</p><p>特点：</p><ul><li>广泛运用分子生物学理论和现代研究方法，深刻揭示微生物的各种生命活动规律；</li><li>以基因工程为主导，把传统的工业发酵提高到发酵工程新水平；</li><li>大量理论性、交叉性、应用性和实验性分支学科飞速发展；</li><li>微生物学的基础理论和独特实验技术推动了生命科学各领域飞速发展；</li><li>微生物基因组的研究促进了生物信息学时代的到来。</li></ul><h5 id="我国人民在微生物学发展史上的地位和反思：">我国人民在微生物学发展史上的地位和反思：</h5><p><strong>地位</strong>：我国人民主要在微生物学的史前期有着非常卓越的贡献，凭借经验主观利用微生物为人类生产，并且一些技术改进后至今仍在使用。</p><p><strong>反思</strong>：此前，我国在微生物研究上没有深入，停留在现象应用层，但西方后来从微观角度研究，一步步发现微生物的本质。故对事物的认知不能仅停留在表面，要通过现象看本质。</p><h4 id="简述微生物在现代农业发展中的作用。">简述微生物在现代农业发展中的作用。</h4><p>微生物在现代农业特别在生态农业中有着十分重要的作用。</p><p>例如：</p><ul><li>以菌（含病毒）治害虫和以菌治植病的生物防治技术，</li><li>以菌增肥效（如根瘤菌接种剂）和以菌促生长（如赤霉素）的微生物增产技术，以菌作饲料（饵料）</li><li>以菌作蔬菜（各种食用菌）的单细胞蛋白和食用菌生产技术，</li><li>以菌产能源的沼气发酵技术等</li></ul><h4 id="简述微生物在当代环境保护中的作用。">简述微生物在当代环境保护中的作用。</h4><p>微生物在当代环境保护中的作用如下：</p><ul><li>微生物是地球上重要元素循环中的主要推动者；</li><li>微生物是占地球面积70%以上的海洋和其他水体中光合生产力的基础</li><li>微生物是一切食物链的重要环节，是污水和有机废物处理中的关键角色</li><li>微生物是生态农业中既重要却处于隐形态的环节，是环境污染和监测的重要指示生物等</li></ul><h4 id="为什么说微生物的“体积小、面积大”是决定其他4个共性的关键？">为什么说微生物的“体积小、面积大”是决定其他4个共性的关键？</h4><p>微生物“体积小、面积大”是决定其他4个共性的关键的原因如下：</p><p>微生物体积小，但比表面积（表面积体积）大。由于微生物是一个如此突出的小体积大面积系统，从而赋予它们具有不同于一切大生物的五大共性，因为一个小体积大面积系统，必然有一个巨大的营养物质吸收面、代谢废物的排泄面和环境信息的交换面，并由此而产生其余4个共性。故“体积小，面积大”是决定其他4个共性的关键。</p><h4 id="试讨论微生物的多样性。">试讨论微生物的多样性。</h4><p>微生物的多样性包括以下5个方面：</p><h5 id="物种的多样性">物种的多样性</h5><p>迄今为止，人类已描述过的生物总数约200万种。据估计，微生物的总数约在50万至600万之间，且发现数还在急剧增长。</p><h5 id="生理代谢类型的多样性">生理代谢类型的多样性</h5><p>微生物的生理代谢类型之多，是动、植物所远远不及的。</p><ul><li>分解地球上储量最丰富的初级有机物一天然气、石油、纤维素、木质素的能力为微生物所垄断；</li><li>微生物有着最多样的产能方式，诸如细菌的光合作用，嗜盐菌的紫膜光合作用，自养细菌的化能合成作用，以及各种厌氧产能途径等；</li><li>生物固氮作用；</li><li>合成次生代谢产物等各种复杂有机物的能力；</li><li>对复杂有机分子基团的生物转化能力；</li><li>分解氰、酚、多氯联苯等有毒和剧毒物质的能力；</li><li>抵抗极端环境（热、冷、酸、碱、渗、压和辐射等）的能力；等等。</li></ul><h5 id="代谢产物的多样性">代谢产物的多样性</h5><p>微生物产生的代谢产物种类多，所产酶的种类也是及其丰富的。</p><h5 id="遗传基因的多样性">遗传基因的多样性</h5><p>从基因水平看微生物的多样性，内容更为丰富，这是近年来分子微生物学家正在积极探索的热点领域。在全球性的“人类基因组计划”(HGP) 的有力推动下，微生物基因组测序工作正在迅速开展，并取得了巨大的成就。</p><h5 id="生态类型的多样性">生态类型的多样性</h5><p>微生物广泛分布于地球表层的生物圈（包括土壤圈、水圈、大气圈、岩石圈和冰雪圈）；</p><p>对于那些极端微生物即嗜极菌而言，则更易生活在极热、极冷、极酸、极碱、极盐、极压和极早等的极端环境中；</p><p>此外，微生物与微生物或与其他生物间还存在着众多的相互依存关系，如互生、共生、寄生、抗生和猎食等，如此众多的生态系统类型就会产生出各种相应生态型的微生物。</p><h2 id="原核生物的形态、构造和功能">原核生物的形态、构造和功能</h2><h3 id="填空题">填空题</h3><ol><li>微生物学的先驱者是 <strong><u>列文虎克</u></strong> ，微生物学的奠基人是 <strong><u>巴斯德</u></strong> ，细菌学的奠基人是 <strong><u>科赫</u></strong>，第一个看见并描述微生物的人是 <strong><u>列文虎克</u></strong></li><li>微生物学发展史可分为5期，其分别为 <strong><u>史前期</u></strong>、<strong><u>初创期</u></strong>、<strong><u>奠基期</u></strong>、<strong><u>发展期</u><strong>和</strong><u>成熟期</u></strong>。</li><li>革兰氏阳性细菌细胞壁的主要成分为 <strong><u>肽聚糖</u><strong>和</strong><u>磷壁酸</u></strong>，而革兰氏阴性细菌细胞壁的主要成分则是**<u>脂多糖</u><strong>、</strong><u>磷脂</u><strong>、</strong><u>脂蛋白</u><strong>和</strong><u>肽聚糖</u>**。</li><li>肽聚糖单体是由**<u>N-乙酰葡糖胺</u><strong>和</strong><u>N-乙酰胞壁酸</u><strong>以</strong><u>β-1,4糖苷键</u><strong>结合的</strong><u>双糖单位</u><strong>，以及</strong><u>四肽尾</u><strong>和</strong><u>肽桥</u><strong>3种成分组成的，其中的糖苷键可被</strong><u>溶菌酶</u>**水解。</li><li>革兰氏阳性细菌与革兰氏阴性细菌两者细胞壁在组成成分上主要差异为前者 **<u>肽聚糖</u><strong>含量高，后者</strong><u>脂类</u>**含量高。</li><li>球菌的大小以**<u>直径</u><strong>表示，杆菌的大小以</strong><u>宽×长</u>**表示。</li><li>脂多糖(LPS)是革兰氏**<u>阴性</u><strong>菌细胞壁</strong><u>外壁</u><strong>层的主要成分，它由</strong><u>O-侧链（O-多糖、O-抗原）</u><strong>、</strong><u>核心多糖</u><strong>、</strong><u>类脂A</u>**三部分构成。</li><li>测定细菌、放线菌的大小，一般以**<u>微米</u><strong>单位，而测定病毒的大小则以</strong><u>纳米</u>**为单位。</li><li>用人为方法除尽细胞壁的细菌称为**<u>原生质体</u><strong>，未除尽细胞壁的细菌称为</strong><u>球状体</u><strong>，因在实验室中发生缺壁突变的细菌称为<u><strong>L型细菌</strong></u>，而在自然界长期进化中形成的稳定性缺壁细菌则称为</strong><u>支原体</u>**。</li><li>在芽孢核心的外面有3层结构紧紧包裹着，它们是**<u>孢外壁</u><strong>、</strong><u>芽孢衣</u><strong>、</strong><u>皮层</u>**。</li><li>在芽孢皮层中，存在着**<u>芽孢肽聚糖</u><strong>和</strong><u>DPA-Ca</u>**两种特有的与芽孢耐热性有关的物质。</li><li>蓝细菌是光合微生物，进行**<u>光能无机</u><strong>营养，单细胞蓝细菌以</strong><u>细胞分裂</u><strong>繁殖为主，丝状体种类则以</strong><u>藻殖段</u><strong>繁殖。蓝细菌没有鞭毛，但能进行</strong><u>滑行</u>**运动。</li><li>磷壁酸是<u><strong>G<sup>+</sup></strong></u>菌细胞壁的特有成分，几丁质是**<u>霉菌</u><strong>细胞壁的主要成分，吡啶二羧酸钙（DPA-Ca）主要存在于细菌</strong><u>芽胞</u><strong>结构中，二氨基庚二酸（m-DAP）主要存在于</strong><u>G<sup>-</sup></u><strong>菌的壁中，藻胆素主要存在于</strong><u>蓝细菌</u>**中。</li><li>放线菌个体为**<u>分枝丝状</u><strong>体，根据菌丝在固体培养基上生长的情况，可以分为</strong><u>基内菌丝</u><strong>、</strong><u>气生菌丝</u><strong>、</strong><u>孢子丝</u>**。</li><li>放线菌既可以以**<u>菌丝</u><strong>繁殖，也可以以</strong><u>孢子</u><strong>繁殖，</strong><u>孢子</u>**繁殖是放线菌的主要繁殖方式。</li><li>细菌细胞有一个**<u>连续</u><strong>的细胞膜，它以大量的折皱陷入到细胞内部，陷入细胞内部的质膜物质称为</strong><u>中间体</u>**</li><li>支原体的菌落形态为**<u>典型的“煎鸡蛋”状</u>**。</li><li>在细菌中，存在着4种不同的糖被形式，即**<u>荚膜</u><strong>、</strong><u>微荚膜</u><strong>、</strong><u>黏液层</u><strong>和</strong><u>菌胶团</u>**。</li><li>鞭毛是细菌的运动器官，观察细菌是否着生鞭毛可通过**<u>鞭毛染色</u><strong>或</strong><u>悬滴法</u>**在光学显微镜下观察。</li><li>G<sup>-</sup>细菌的鞭毛是由**<u>基体</u><strong>以及</strong><u>钩形鞘</u><strong>和</strong><u>鞭毛丝</u><strong>3部分构成，在基体上着生</strong><u>L</u><strong>、</strong><u>P</u><strong>、</strong><u>S-M</u><strong>和</strong><u>C</u>**四个与鞭毛旋转有关的环。</li></ol><p><img src="http://img.whl123456.top/image/G+%E5%92%8CG-%E7%BB%86%E8%8F%8C%E7%BB%86%E8%83%9E%E5%A3%81%E6%9E%84%E9%80%A0%E7%9A%84%E6%AF%94%E8%BE%83.png" alt="G+和G-细菌细胞壁构造的比较"></p><h3 id="选择题">选择题</h3><ol><li>G<sup>-</sup>细菌细胞壁的最内层成分是（<strong>肽聚糖</strong>）</li><li>磷壁酸是( <strong>G<sup>+</sup></strong>)细菌细胞壁上的主要成分。</li><li>异染粒是属于细菌的(<strong>磷源类</strong>)类贮藏物。</li><li>下列（ ）物质决定了革兰氏阴性细菌细胞表面抗原的多样性。（<strong>脂多糖的O-多糖</strong>）</li><li>肽聚糖种类的多样性主要反映在( <strong>肽桥</strong> )结构的多样性上</li><li>不是脂多糖的功能的是（ ）<ul><li>G<sup>-</sup>细菌细胞壁成分</li><li><strong>允许物质通过外膜</strong></li><li>抗原功能</li><li>内毒素</li></ul></li><li>在G<sup>-</sup>细菌肽聚糖的四肽尾上，有一个与G<sup>+</sup>细菌不同的 (<strong>二氨基庚二酸</strong> )的氨基酸</li><li>脂多糖(LPS)是G<sup>-</sup>细菌的内毒素，其毒性来自分子中的(<strong>类脂A</strong>)</li><li>球状细菌分裂后排列成链状称为(<strong>链球菌</strong>)</li><li>在芽孢的各层结构中，含DPA-Ca量最高的层次是(<strong>皮层</strong>)</li><li>下列不是原核细胞结构的是(<strong>叶绿体</strong>)</li><li>按鞭毛的着生方式，大肠杆菌属于(<strong>周生鞭毛菌</strong>)</li><li>固氮菌所特有的休眠体构造称为(<strong>孢囊</strong>)</li><li>下列对放线菌的描述中（ ）是错误的<ul><li>放线菌孢子丝形状和孢子表面形状是分类依据。</li><li><strong>大部分放线菌具有生长发育良好的菌丝体，菌丝直径与霉菌类似；</strong></li><li>大部分放线菌是以孢子进行繁殖，菌落特征类似于霉菌；</li><li>所有放线菌细胞的结构与细菌基本相同，不同于霉菌；</li></ul></li><li>在下列微生物中( <strong>蓝细菌</strong> )能进行产氧的光合作用</li><li>下面关于芽孢的叙述，正确的是(<strong>所有芽孢细菌在其生长的一定阶段，均可形成芽孢</strong>)</li><li>细胞内含物中，（<strong>聚-β-羟基丁酸（PHB)</strong>）可以作为生物可降解塑料的良好原料。</li><li>溶菌酶溶解细菌细胞壁的主要原理是(<strong>降解双糖单位中的β-1,4-糖苷键</strong>)</li><li>原核微生物能量代谢及很多合成代谢的部位是（<strong>质膜</strong>）</li><li>（<strong>脂多糖的O-多糖</strong>）物质决定了革兰氏阴性细菌细胞表面抗原的多样性</li><li>细菌芽胞抗热性强是因为含有（<strong>2,6-吡啶二羧酸</strong>）</li><li><em>Bacillusthuringiensis</em>在形成芽胞同时,还能形成一种菱形或正方形的物质，称之为（<strong>伴胞晶体</strong>）</li><li>细菌的鞭毛是（<strong>细菌的一种运动器官</strong>）</li><li>细菌的芽胞是（<strong>细菌生长发育的一个阶段</strong>）</li><li>在下列原核生物分类中,属古细菌类的细菌是（<strong>产甲烷细菌</strong>）</li><li>下列对蓝细菌的描述中（）是错误的<ul><li>又称蓝藻或蓝绿藻</li><li><strong>某些蓝细菌有叶绿体</strong></li><li><strong>通过产氧型或非产氧型光合作用将光能转变成化学能</strong></li><li>某些蓝细菌形成异形胞、静息孢子和链丝段</li><li><strong>某些蓝细菌无鞭毛，但能在固体表面滑行；某些蓝细菌有鞭毛运动</strong></li></ul></li><li>(<strong>立克次氏体</strong>,<strong>衣原体</strong>)是专性活细胞内寄生的原核微生物</li></ol><h3 id="问答题">问答题</h3><h4 id="试用简图表示G-sup-sup-和G-sup-sup-细菌肽聚糖单体构造的差别，并作简要说明">试用简图表示G<sup>+</sup>和G<sup>-</sup>细菌肽聚糖单体构造的差别，并作简要说明</h4><ul><li>G<sup>+</sup>菌四肽尾分子上的第3个氨基酸是L-Lys，而G<sup>-</sup>菌则是m-DAP</li><li>G<sup>+</sup>菌四肽尾的第4氨基酸上有一肽桥(常为甘氨酸五肽)，而G<sup>-</sup>菌则无</li></ul><p><img src="http://img.whl123456.top/image/image-20200624215428756.png" alt=""></p><p>M：N-乙酰胞壁酸</p><p>G：N-乙酰葡糖胺</p><h4 id="试述细菌革兰氏染色的机制。">试述细菌革兰氏染色的机制。</h4><p>革兰氏染色的机制是由于不同细菌细胞壁化学成分的不同而引起的物理性状的差别是导致革兰氏染色反应不同的原因。</p><p>通过结晶紫初染和碘液媒染，在任何细菌的细胞膜内都可形成不溶于水的结晶紫—碘复合物。</p><p>G<sup>+</sup>细菌因壁厚，肽聚糖网的层次多和结构致密，以及不含类脂等原因，故用脱色剂(乙醇)处理后，可把结晶紫—碘复合物仍阻拦在细胞内，故呈现紫色；</p><p>反之，G<sup>-</sup>细菌因细胞壁薄，外膜层类脂含量高(脂多糖、脂蛋白)，以及肽聚糖层薄且交联松散，故用脱色剂乙醇处理后，就可把类脂和结晶紫—碘复合物溶出细胞，这种无色的细胞再经沙黄(番红)复染，就呈现红色。</p><h4 id="试用表解法对细菌的一般构造和特殊构造作一介绍">试用表解法对细菌的一般构造和特殊构造作一介绍</h4><p>一般构造：细胞壁；细胞膜；间体；细胞质；内含物；核区</p><p>特殊构造：糖被（荚膜、微荚膜、黏液层、菌胶团）、鞭毛、菌毛、性毛、芽孢</p><h4 id="请列表比较细菌的鞭毛、菌毛和性毛间的异同。">请列表比较细菌的鞭毛、菌毛和性毛间的异同。</h4><table><thead><tr><th>项目</th><th>鞭毛</th><th>菌毛</th><th>性毛</th></tr></thead><tbody><tr><td>形态</td><td>长，波曲，中空；分鞭毛丝、钩形鞘和基体3部分</td><td>短，直，细，中空；构造简单</td><td>较长，较直，中空；构造简单</td></tr><tr><td>数目</td><td>一至数十条</td><td>一般有250-300 条</td><td>一至少数几条</td></tr><tr><td>着生部位</td><td>端生，周生，侧生</td><td>周生</td><td>不定</td></tr><tr><td>成分</td><td>鞭毛蛋白</td><td>菌毛蛋白</td><td>性毛蛋白</td></tr><tr><td>功能</td><td>运动</td><td>黏附</td><td>传递遗传物质</td></tr><tr><td>代表菌</td><td>大肠杆菌，芽孢杆菌，梭菌，弧菌，假单胞菌等</td><td>G<sup>-</sup>致病菌等</td><td>G<sup>-</sup>细菌的雄性菌株</td></tr></tbody></table><h4 id="渗透调节皮层膨胀学说是如何解释芽孢耐热机制的？">渗透调节皮层膨胀学说是如何解释芽孢耐热机制的？</h4><p>芽孢的耐热性在于芽孢衣对多价阳离子和水分的透性很差，以及皮层的离子强度很高，从而使皮层产生极高的渗透压去夺取芽孢核心中的水分，其结果导致皮层的充分膨胀，而作为芽孢的生命部分—芽孢核心的细胞质却发生高度失水，并由此变得高度耐热了</p><h4 id="试列表比较G-sup-sup-与G-sup-sup-细菌间的10种主要差别">试列表比较G<sup>+</sup>与G<sup>-</sup>细菌间的10种主要差别</h4><table><thead><tr><th>项目</th><th>G<sup>+</sup>细菌</th><th>G<sup>-</sup>细菌</th></tr></thead><tbody><tr><td>革兰氏染色</td><td>紫色</td><td>红色</td></tr><tr><td>细胞壁肽聚糖层</td><td>厚</td><td>薄</td></tr><tr><td>磷壁酸含量</td><td>高</td><td>无</td></tr><tr><td>细胞壁外膜</td><td>无</td><td>有</td></tr><tr><td>脂多糖层</td><td>无</td><td>有</td></tr><tr><td>鞭毛结构</td><td>基体上只有2环</td><td>基体上有4环</td></tr><tr><td>产毒素</td><td>外毒素为主</td><td>内毒素为主</td></tr><tr><td>细胞抗机械强度</td><td>强</td><td>弱</td></tr><tr><td>细胞壁抗溶菌酶</td><td>弱</td><td>强</td></tr><tr><td>抗青霉索、磺胺</td><td>弱</td><td>强</td></tr><tr><td>抗链霉素、氯霉素、四环素</td><td>强</td><td>弱</td></tr><tr><td>抗碱性染料</td><td>弱</td><td>强</td></tr><tr><td>抗阴离子去污剂</td><td>弱</td><td>强</td></tr><tr><td>抗叠氮化钠</td><td>弱</td><td>强</td></tr><tr><td>抗干旱</td><td>强</td><td>弱</td></tr><tr><td>产芽孢</td><td>有的种产</td><td>不产</td></tr><tr><td>去除细胞壁</td><td>较易(可制成厚生质体)</td><td>较难(制成球状体)</td></tr></tbody></table><h4 id="以链霉菌为例，描述这类典型放线菌的菌丝、孢子和菌落的一般特征">以链霉菌为例，描述这类典型放线菌的菌丝、孢子和菌落的一般特征</h4><h5 id="菌丝">菌丝</h5><p>当其孢子落在固体基质表面并发芽后，就不断伸长、分枝并以放射状向基质表面和内层扩展，形成大量色浅、较细的具有吸收营养和排泄代谢废物功能的基内菌丝体，同时在其又不断向上空间方向分化出颜色较深、直径较粗的分枝菌丝，这就是气生菌丝体。不久，大部分气生菌丝体成熟，分化成孢子丝，并通过横割分裂方式，产生成串的分生孢子。</p><h5 id="孢子">孢子</h5><p>链霉菌孢子丝的形态多样，有直、波曲、钩状、螺旋状和轮生(一级轮生或二级轮生)等多种， 其颜色十分丰富，且与其表面纹饰相关。</p><p>孢子表面纹饰在电镜下清晰可见，表面有光滑、褶皱、疣、刺、发或鳞片状，刺又有粗细、大小、长短和疏密之分。一般凡属直或波曲的孢子丝， 其孢子表面均呈光滑状， 若为螺旋状的孢子丝， 则孢子表面会因种而异， 有光滑、刺状或毛发状的。</p><h5 id="菌落">菌落</h5><ul><li><p>在固体培养基上</p><ul><li>小型、干燥、不透明、表面呈致密的丝绒状，上有一薄层彩色的＂干粉＂；</li><li>菌落和培养基的连接紧密，难以挑取；</li><li>菌落的正反面颜色常不一致，以及在菌落边缘的琼脂平面有变形的现象；等等。</li></ul></li><li><p>在液体培养基上（内）</p><p>常可见到在液面与瓶壁交界处粘贴着一圈菌苔，培养液清而不混，其中悬浮着许多珠状菌丝团，一些大型菌丝团则沉在瓶底等现象。</p></li></ul><h2 id="真核微生物的形态、构造和功能">真核微生物的形态、构造和功能</h2><h3 id="填空题-2">填空题</h3><ol><li>一些酵母菌芽殖后，子细胞不马上脱离母细胞，而是中间以狭小面积相连、形成状如藕节的**<u>假菌丝</u>**</li><li>真菌是不含有**<u>叶绿素</u><strong>，</strong><u>异养吸收型</u><strong>营养，以</strong><u>无性或有性孢子</u>**进行繁殖的真核微生物</li><li>酵母菌的无性繁殖方式主要有**<u>芽殖</u><strong>、</strong><u>裂殖</u>**</li><li>丝状真菌的无隔菌丝是由**<u>单个</u><strong>细胞组成,有隔菌丝是由</strong><u>多个</u>**细胞组成</li><li>酵母菌细胞壁呈**<u>三明治</u><strong>结构，外层为</strong><u>甘露聚糖</u><strong>，内层为</strong><u>葡聚糖</u><strong>，中间夹有</strong><u>蛋白质</u>**</li><li>以下各类真核微生物的细胞壁主要成分分别是：酵母菌为**<u>葡聚糖</u><strong>，低等真菌为</strong><u>纤维素</u><strong>，高等真菌为</strong><u>几丁质</u>**</li><li>真菌子囊果的种类有 <strong><u>闭囊壳</u></strong>、<strong><u>子囊壳</u></strong>、**<u>子囊盘</u>**三种</li><li>真核生物鞭毛杆的横切面为<u><strong>9+2</strong></u>型，其基体横切面则为<u><strong>9+0</strong></u>型</li><li>真菌卵孢子是由两个大小不同的配子囊经结合后形成的，其中小型配子囊叫 <strong><u>雄器</u></strong>，大型配子囊叫 <strong><u>藏卵器</u></strong>。</li><li>真菌生长在基质内的菌丝叫 <u><strong>基内（营养或一级）菌丝</strong></u>，其功能主要是 <strong><u>吸收营养物质</u></strong> ，伸出基质外的菌丝叫 <strong><u>气生菌丝</u></strong> ，其功能主要是 <strong><u>分化成繁殖器官产生孢子</u></strong></li><li>构成丝状真菌营养体的基本单位是 <strong><u>菌丝</u></strong></li><li>担子菌的双核菌丝是靠一种叫 <strong><u>锁状联合</u></strong> 的特殊结构进行细胞分裂,以保证每一个子代细胞都含有来自父母亲本的两个子核。</li><li>霉菌无性繁殖孢子的种类主要有 <strong><u>游动孢子</u></strong>，<strong><u>孢囊孢子</u></strong>，<strong><u>分生孢子</u></strong>，<strong><u>节孢子</u></strong>，**<u>厚垣孢子</u>**五种。</li><li>真菌的有性孢子种类有 <strong><u>卵孢子</u></strong>，<strong><u>接合孢子</u></strong>，<strong><u>子囊孢子</u></strong>，<strong><u>担孢子</u></strong></li></ol><h3 id="选择题-2">选择题</h3><ol><li><p>下列哪一项不是真菌的共同特征</p><ul><li>具有核膜</li><li>能进行有丝分裂</li><li>细胞质中存在细胞器</li><li><strong>能进行减数分裂</strong></li></ul></li><li><p>下面的选项中（<strong>子囊孢子</strong>）是酵母菌可能采取的有性繁殖类型。</p></li><li><p>根霉的无性孢子为（<strong>内生的孢囊孢子</strong> ），曲霉和青霉的无性孢子为（ <strong>外生的分生孢子</strong>  ）</p></li><li><p><strong>肽聚糖</strong>不出现在真核生物的细胞壁中</p></li><li><p>下列（<strong>孢囊孢子</strong>）不是真菌的有性孢子</p></li><li><p>具有假根结构的霉菌是 <strong>根霉属</strong></p></li><li><p>寄生真菌靠吸器吸收养料，吸器存在于 <strong>寄主细胞里面</strong></p></li><li><p>根霉菌的假根是长在 <strong>匍匐菌丝上</strong></p></li><li><p>啤酒酵母菌的生活史属 <strong>单双倍体型</strong></p></li><li><p>木耳（<em>Auricularia</em>）的有性孢子是 <strong>担孢子</strong></p></li><li><p>在真核微生物的“9+2”型鞭毛中，具有ATP酶功能的构造是 <strong>动力蛋白臂</strong></p></li><li><p>酵母菌的菌落特征是 （<strong>较细菌菌落大、厚、较稠、较不透明、有酒香味</strong>）</p></li><li><p>霉菌的菌落特征是（<strong>形态大、蛛网状、绒毛状、干燥、不透明、不易挑起</strong>）</p></li><li><p>锁状联合是担子菌（<strong>双核的次生菌丝</strong> ）的生长方式</p></li><li><p>出芽繁殖的酵母菌细胞，当子细胞离开母细胞时，在母细胞上留下一个（<strong>芽痕</strong>）</p></li><li><p>路德类酵母的生活史属（<strong>双倍体型</strong>）</p></li><li><p>真酵母是指（<strong>具有有性繁殖的酵母菌</strong>）</p></li><li><p>八孢裂殖酵母菌的生活史属（<strong>单倍体型</strong>）</p></li><li><p>霉菌菌丝直径一般为3~10μm，比较放线菌菌丝约粗（<strong>10倍</strong>）</p></li></ol><h3 id="问答题-2">问答题</h3><h4 id="真菌的营养菌丝体可以分化成哪些特殊的形态结构？它们的功能是什么？">真菌的营养菌丝体可以分化成哪些特殊的形态结构？它们的功能是什么？</h4><ol><li><p>匍匐枝和假根：匍匐菌丝是使菌丝向四周蔓延，并在其上可产生孢囊梗，假根能使菌丝固着在基物上，并能吸收营养</p></li><li><p>吸器：寄生真菌侵入寄主细胞内吸收营养；</p></li><li><p>菌环和菌网：某些捕虫类真菌用来捕捉线虫、轮虫等，以获养料；</p></li><li><p>附着枝和附着胞：一些真菌用来将菌丝附着在寄主体表上；</p></li><li><p>菌核和菌索：抗逆不良环境条件</p></li></ol><h4 id="真菌的有性生殖过程可分为哪几个阶段？请说明每个阶段的内容">真菌的有性生殖过程可分为哪几个阶段？请说明每个阶段的内容</h4><p>质配：两个单倍体性细胞相接触，细胞质及内含物融合在一起，但染色体数目仍为单倍体。</p><p>核配：质配后双核细胞中的两个核融合，产生出二倍体的接合子核，染色数目是双倍的。</p><p>减数分裂：双倍体核进行两次连续的核分裂，核的染色体数目减半，形成单倍体的有性孢子。</p><h4 id="图示酿酒酵母的生活史，并说明其生活史特点">图示酿酒酵母的生活史，并说明其生活史特点</h4><p><img src="http://img.whl123456.top/image/image-20200625003944058.png" alt=""></p><p>生活史特点：</p><ul><li>一般情况下都以营养体状态进行出芽繁殖；</li><li>营养体既能以单倍体（n）形式存在，也能以二倍体（2n）形式存在；</li><li>在特定的条件下才进行有性繁殖</li></ul><h4 id="列表比较真菌孢子的类型和主要特点">列表比较真菌孢子的类型和主要特点</h4><p><img src="http://img.whl123456.top/image/image-20200625004023324.png" alt=""></p><h2 id="病毒和亚病毒因子">病毒和亚病毒因子</h2><h3 id="填空题-3">填空题</h3><ol><li>病毒分为**<u>真病毒</u><strong>和</strong><u>亚病毒因子</u>**</li><li>病毒直径很小，通常用**<u>nm</u>**作为度量单位，病毒、细菌和真菌个体直径比约 <strong><u>1:10:100</u></strong></li><li>病毒粒的基本成分是**<u>核酸</u><strong>、</strong><u>蛋白质</u>**</li><li>病毒的核酸位于病毒颗粒的中心，称为 <strong><u>核心或基因组</u></strong>，蛋白质包围后形成 <strong><u>衣壳</u></strong></li><li>病毒粒的对称体制有 <strong><u>螺旋对称</u></strong>、<strong><u>二十面体对称</u></strong>、<strong><u>复合对称</u></strong></li><li>病毒粒大量聚集后可以形成具有一定形态和构造的特殊“群体”，植病毒在细胞内形成 <strong><u>包含体</u></strong>，在植物叶片上形成 <strong><u>枯斑</u></strong>；噬菌体在细菌菌苔上形成 <strong><u>噬菌斑</u></strong>；动物病毒在宿主单层细胞培养物上形成 <strong><u>空斑</u></strong></li><li>T4噬菌体由**<u>头部</u><strong>、</strong><u>颈部</u><strong>、</strong><u>尾部</u>**三部分组成</li><li>噬菌体的繁殖一般分为5个阶段，即 <strong><u>吸附</u></strong>、<strong><u>侵入</u></strong>、<strong><u>增殖（复制与生物合成）</u></strong>、<strong><u>成熟（装配）</u></strong>、 **<u>裂解（释放）</u>**凡是在短时间内连续完成5个阶段的噬菌体称为 **<u>烈性噬菌体</u>**其经历的繁殖过程称为 <strong><u>裂解性周期或增殖性周期</u></strong>，在短时间内不能连续完成5个阶段的噬菌体称为 <strong><u>温和噬菌体</u></strong></li><li>定量描绘烈性噬菌体生长规律的曲线称为 <strong><u>一步生长曲线</u><strong>烈性噬菌体从生长曲线上可以分为 <strong><u>潜伏期</u></strong>、</strong><u>裂解期</u></strong>、**<u>平稳期</u>**三个阶段。</li><li>温和性噬菌体侵入寄主细胞并不立即引起宿主细胞裂解的现象称为 <strong><u>溶源性</u></strong>，带有温和性噬菌体基因组的细菌称为 <strong><u>溶源菌</u></strong>，整合在细菌基因组上的噬菌体基因组称为 <strong><u>前噬菌体</u></strong></li><li>温和性噬菌体侵入宿主细胞后，即可以进行 <strong><u>裂解性</u><strong>循环繁殖，又可以进行</strong><u>溶源性</u><strong>循环繁殖，所以其在宿主细胞内存在的形式有 <strong><u>游离态</u></strong>、</strong><u>整合态</u></strong>、**<u>营养态</u>**三种状态</li><li>人和动物病毒的形态一般为 <strong><u>球状</u></strong>，植物和昆虫的病毒形态一般为 <strong><u>杆状</u></strong>，而原核生物的病毒形态一般为 <strong><u>复合型</u></strong></li><li>TMV病毒粒子的形状为 <strong><u>杆状</u></strong>，所含核酸为 <strong><u>ssRNA</u></strong></li><li>T4噬菌体感染寄主细胞依靠 **<u>尾鞘收缩</u>**将 **<u>头部核酸（DNA）</u>**注入寄主细胞</li><li>病毒是一种无**<u>细胞</u><strong>结构，能通过 <strong><u>细菌过滤器</u></strong>，严格寄生于</strong><u>活细胞</u>**超显微生物</li><li>卫星病毒（拟病毒）是依赖 **<u>辅助病毒</u><strong>进行复制的一种小的</strong><u>RNA</u>**病毒</li></ol><h3 id="选择题-3">选择题</h3><ol><li>没有蛋白质外壳，只有RNA，可以在宿主细胞中自我复制的亚病毒因子是 <strong>类病毒</strong></li><li>下面的叙述中，哪一项不是病毒的特征<ul><li>不具有细胞结构，具有一般化学大分子的特征；</li><li>个体微小，在电子显微镜下才能看见；</li><li>严格的活细胞内寄生；</li><li><strong>对大多数抗生素敏感</strong></li></ul></li><li>溶源菌中的温和噬菌体基因组通常不影响宿主细胞的 <strong>繁殖功能</strong></li><li>病毒的核酸称为基因组，（<strong>蛋白质外壳</strong>）称为衣壳</li><li>CPV是 <strong>质多角体病毒</strong>，NPV是 <strong>核多角体病毒</strong></li><li>与病毒复制过程无关的过程（<strong>减数分裂</strong>）</li><li>噬菌体是侵蚀（<strong>细菌</strong>）的病毒</li><li>类病毒是一类仅含有侵染性（ <strong>RNA</strong> ）的病毒</li><li>病毒显著区别于其他生物的特征是（ <strong>独特的繁殖方式</strong> ）</li><li>病毒物理颗粒计数方法测定的是（<strong>有活力的病毒与无活力病毒数量的总和</strong>）</li><li>描述螺旋对称壳体特征的参数有（<strong>螺旋长度与直径</strong>）</li><li>温和性噬菌体基因组在溶源性细菌内可以下列状态存在（<strong>整合于宿主染色体或质粒形式</strong>）</li><li>T4噬菌体的形态是（<strong>蝌蚪形</strong>），腺病毒的形态是（<strong>球形</strong>），TMV的形态是（<strong>杆状</strong>）</li><li>病毒核心成份是（<strong>核酸</strong>），衣壳的组成成分是（<strong>蛋白质</strong>），包膜的组成成分是（<strong>脂类</strong>）</li><li>在溶源细胞中，原噬菌体以（<strong>整合态</strong>）形式存在于宿主细胞中</li><li>噬菌体是一种感染微生物的病毒，缺乏（<strong>独立代谢的酶体系</strong>）</li></ol><h3 id="问答题-3">问答题</h3><h4 id="简述烈性噬菌体的生活史">简述烈性噬菌体的生活史</h4><ol><li>尾丝与宿主细胞特异性吸附；</li><li>病毒核酸侵入宿主细胞内；</li><li>病毒核酸和蛋白质在宿主细胞内的复制和合成；</li><li>病毒核酸和蛋白质装配；</li><li>大量子代噬菌体裂解释放到宿主细胞外。</li></ol><h4 id="什么是效价？其测定方法有哪些？简述测定噬菌体效价的双层平板法。">什么是效价？其测定方法有哪些？简述测定噬菌体效价的双层平板法。</h4><p>效价：每毫升试样中所含有的具侵染性的噬菌体粒子数</p><p>测定方法有：液体稀释法、玻片快速测定法、单层平板法和双层平板法。</p><p>双层平板法：先在培养皿中倒入底层固体培养基，凝固后再倒入含有宿主细菌和一定稀释度噬菌体的半固体培养基。培养一段时间后，计算噬菌斑的数量。</p><h4 id="什么是一步生长曲线？画出自然裂解的曲线图，图中的各期又有何特点？">什么是一步生长曲线？画出自然裂解的曲线图，图中的各期又有何特点？</h4><p>定量描述烈性噬菌体生长规律的实验曲线，称为一步生长曲线。</p><ul><li>潜伏期：细胞内已经开始装配噬菌体粒子并可用电镜观察到；</li><li>裂解期：宿主细胞迅速裂解溶液中噬菌体粒子急剧增多；</li><li>平稳期：感染后的宿主细胞已全部裂解，溶液中的噬菌体效价达到最高点。</li></ul><p><img src="http://img.whl123456.top/image/clip_image002-1593018096062.jpg" alt=""></p><h4 id="什么是类病毒、拟病毒、卫星病毒、RNA病毒和阮病毒？">什么是类病毒、拟病毒、卫星病毒、RNA病毒和阮病毒？</h4><p>类病毒：一类只含有RNA一种成分，专性寄生在活细胞内的分子病源体。</p><p>拟病毒：指一类包裹在真病毒粒中的有缺陷的类病毒。</p><p>卫星病毒：基因组缺损、必须依赖某形态较大的专一辅助病毒才能复制和表达的小型伴生病毒。</p><p>RNA病毒：遗传物质是核糖核酸RNA的病毒 。</p><p>朊病毒：一类不含核酸的传染性蛋白质。</p><h4 id="谈谈你对“新型冠状病毒”的认识与思考">谈谈你对“新型冠状病毒”的认识与思考</h4><p>型冠状病毒，国际病毒分类委员会将该病毒命名为SARS-CoV-2，属于网巢病毒目冠状病毒科（<em>Betacoronavirus</em>），病毒粒呈圆形或椭圆形，直径约80～120nm。由衣壳（衣壳外有包膜）和ssRNA组成。有三种主要蛋白：包膜蛋白（E蛋白）、膜蛋白（M蛋白）和刺突蛋白（S蛋白）。基因组长度约3万个核苷酸。病毒具有热敏感性，暴露在紫外线下或处于56℃高温环境下30分钟可达到灭活效果。利用乙醚、75%乙醇、含氯消毒剂、过氧乙酸和氯仿等脂溶剂均可有效灭活病毒。</p><p>经历这次肺炎疫情，我深刻的感受到了新冠病毒带给人们的危害。人类也多次在与病毒的斗争中付出惨痛的代价，例如1918年流感大流行。但一个世纪以来，伴随着基础学科的进步，生物学的有关发展，人们对病毒的认识逐渐加深，正因为认识的不断深入，人类才能更好的抑制病毒带来的负面影响。与此同时仍要对自然抱有敬畏之心，要从这次疫情中吸取经验教训，在让全球走出这场风波的同时，更是为全世界打上一针“预防针”。</p><h2 id="微生物的营养和培养基">微生物的营养和培养基</h2><h3 id="填空题-4">填空题</h3><ol><li><p>微生物生长繁殖所需六大营养要素是**<u>碳源</u><strong>、</strong><u>氮源</u><strong>、</strong><u>无机盐</u><strong>、</strong><u>生长因子</u><strong>、 <strong><u>水</u></strong>、</strong><u>能源</u>**</p></li><li><p>根据**<u>碳源</u>**，微生物可分为自养型和异养型。</p></li><li><p>根据**<u>能源</u>**，微生物可分为光能营养型和化能营养型。</p></li><li><p>根据**<u>氢供体</u>**，微生物可分为无机营养型和有机营养型。</p></li><li><p>根据碳源、能源和氢供体性质的不同，微生物的营养类型可分为**<u>光能无机自养</u><strong>、 <strong><u>光能有机异养</u></strong> 、</strong><u>化能无机自养</u>**、 <strong><u>化能有机异养</u></strong></p></li><li><p>设计、配制培养基所要遵循的原则包括**<u>目的明确</u>**、 <strong><u>营养协同</u></strong>、 <strong><u>理化适宜</u></strong>、 <strong><u>经济节约</u></strong></p></li><li><p>按所含成分划分，培养基可分为**<u>天然培养基</u><strong>、 <strong><u>组合培养基</u></strong>、</strong><u>半组合培养基</u>**</p></li><li><p>按物理状态划分，培养基可分为**<u>固体</u>**、 <strong><u>半固体</u></strong>、 <strong><u>液体</u></strong>、  <strong><u>脱水培养基</u></strong></p></li><li><p>按用途划分，培养基可分为**<u>基础</u>** 、<strong><u>加富</u></strong>、 <strong><u>鉴别</u></strong>、 <strong><u>选择</u></strong></p></li><li><p>营养物质进入细胞的方式有**<u>单纯扩散</u>** 、<strong><u>促进扩散</u></strong>、 <strong><u>主动运输</u></strong>、 <strong><u>基团移位</u></strong></p></li><li><p>在营养物质的四种运输方式中,只有**<u>基团移位</u>**运输方式改变了被运输物质的分子结构</p></li><li><p>在营养物质运输中,能逆浓度梯度方向进行营养物运输的运输方式是**<u>主动运输</u><strong>、</strong><u>基团移位</u>**</p></li><li><p>在营养物质运输中顺浓度梯度方向运输营养物质进入微生物细胞的运输方式是**<u>单纯扩散</u><strong>、</strong><u>促进扩散</u>**</p></li><li><p>在营养物质运输中既消耗能量又需要载体的运输方式是**<u>主动运输</u><strong>、</strong><u>基团移位</u>**</p></li><li><p>微生物细胞采用主动运输方式吸收营养物的机制在于，通过消耗**<u>能量</u><strong>使载体蛋白发生</strong><u>构象</u><strong>变化，从而能够</strong><u>逆浓度</u>**梯度从外界摄取营养物。</p></li></ol><h3 id="选择题-4">选择题</h3><ol><li>在含有下列物质的培养基中，大肠杆菌首先利用的碳物质是（<strong>葡萄糖</strong>）</li><li>下列物质可用作生长因子的是（<strong>维生素</strong>）</li><li>一般酵母菌生长最适水活度值为（<strong>0.88</strong>）</li><li>大肠杆菌属于(<strong>化能有机异养</strong> )型的微生物</li><li>蓝细菌和藻类属于( <strong>光能无机自养</strong> )型的微生物。</li><li>硝化细菌属于(<strong>化能无机自养</strong> )型的微生物。</li><li>需要载体但不能进行逆浓度运输的是（<strong>促进扩散</strong>）</li><li>实验室培养细菌常用的的培养基是（<strong>牛肉膏蛋白胨培养基</strong>）</li><li>培养百日咳博德氏苗的培养基中含有血液，这种培养基是（<strong>加富培养基</strong>）</li><li>用来分离固氮菌的培养基中缺乏氮源，这种培养基是一种（<strong>选择培养基</strong>）</li><li>一般细菌适宜的生长pH为（<strong>6.5-7.5</strong>）</li><li>水分子可通过(<strong>单纯扩散</strong>)进入细胞</li></ol><h3 id="问答题-4">问答题</h3><h4 id="什么叫碳源？试从元素水平、化合物水平和培养基原料水平列出微生物的碳源谱">什么叫碳源？试从元素水平、化合物水平和培养基原料水平列出微生物的碳源谱</h4><p>一切能满足微生物生长繁殖所需碳元素的营养源，称为碳源</p><p><img src="http://img.whl123456.top/image/1.png" alt=""></p><h4 id="列表说明微生物的营养类型是如何分类的，并举例说明相应的微生物种类。">列表说明微生物的营养类型是如何分类的，并举例说明相应的微生物种类。</h4><table><thead><tr><th>营养类型</th><th>能源</th><th>氢供体</th><th>基本碳源</th><th>实例</th></tr></thead><tbody><tr><td>光能无机营养型  （光能自养型）</td><td>光</td><td>无机物</td><td>CO<sub>2</sub></td><td>紫硫细菌、绿硫细菌、藻类</td></tr><tr><td>光能有机营养型  （光能异养型）</td><td>光</td><td>有机物</td><td>CO<sub>2</sub>及简单有机物</td><td>红螺细菌</td></tr><tr><td>化能无机营养型  （化能自养型）</td><td>无机物</td><td>无机物</td><td>CO<sub>2</sub></td><td>硝化细菌、硫化细菌</td></tr><tr><td>化能有机营养型  （化能异养型）</td><td>有机物</td><td>有机物</td><td>有机物</td><td>绝大多数细菌和全部真核微生物</td></tr></tbody></table><h4 id="列表比较营养物质的四种跨膜输送形式。">列表比较营养物质的四种跨膜输送形式。</h4><table><thead><tr><th>比较项目</th><th>单纯扩散</th><th>促进扩散</th><th>主动运送</th><th>基团移位</th></tr></thead><tbody><tr><td>特异载体蛋白</td><td>无</td><td>有</td><td>有</td><td>有</td></tr><tr><td>运输速度</td><td>慢</td><td>快</td><td>快</td><td>快</td></tr><tr><td>物质运输方向</td><td>由浓至稀</td><td>由浓至稀</td><td>由稀至浓</td><td>由稀至浓</td></tr><tr><td>平衡时胞内外浓度</td><td>相等</td><td>相等</td><td>胞内浓度高</td><td>胞内浓度高</td></tr><tr><td>运输分子</td><td>无特异性</td><td>特异性</td><td>特异性</td><td>特异性</td></tr><tr><td>能量消耗</td><td>不需要</td><td>不需要</td><td>需要</td><td>需要</td></tr><tr><td>运输后物质的结构</td><td>不变</td><td>不变</td><td>不变</td><td>改变</td></tr></tbody></table><h4 id="什么是鉴别性培养基？以伊红美蓝-EMB-培养基为例，分析鉴别培养基的作用原理。">什么是鉴别性培养基？以伊红美蓝(EMB)培养基为例，分析鉴别培养基的作用原理。</h4><p>鉴定性培养基一类在成分中加有与目的菌的无色代谢产物发生显色反应的指示剂，从而达到只须用肉眼辨别颜色就能方便地从近似菌落中找出目的菌菌落的培养基。</p><p>EMB培养基含有伊红和美蓝两种染料作为指示剂，大肠杆菌可发酵乳糖产酸造成酸性环境时，这两种染料结合形成复合物，使大肠杆菌苗落带金属光泽的深紫色，而与其他不能发酵乳糖产酸的微生物区分开。</p><h2 id="微生物的代谢">微生物的代谢</h2><h3 id="填空题-5">填空题</h3><ol><li><p>微生物的4种糖酵解途径中，**<u>EMP</u>**是存在于大多数生物体内的一条主流代谢途径；</p><p>**<u>ED</u>**是存在于某些缺乏完整EMP途径的微生物中的一种替代途径，为微生物所特有；</p><p>**<u>HMP</u>**是产生4碳、5碳等中间产物，为生物合成提供多种前体物质的途径。</p></li><li><p>同型乳酸发酵是指葡萄糖经**<u>EMP</u>**途径降解为丙酮酸，丙酮酸在乳酸脱氢酶的作用下被NADH还原为乳酸。</p><p>异型乳酸发酵经**<u>HMP</u><strong>途径分解葡萄糖。代谢终产物除乳酸外，还有</strong><u>乙醇或乙酸</u>**</p></li><li><p>代谢是细胞内发生的全部生化反应的总称，主要是由**<u>分解代谢</u>**、 **<u>合成代谢</u>**两个过程组成。</p><p>微生物的分解代谢是指**<u>大分子物质</u><strong>在细胞内降解成</strong><u>小分子物质</u><strong>，并</strong><u>产生</u>**能量的过程；</p><p>合成代谢是指利用**<u>小分子物质</u><strong>在细胞内合成</strong><u>大分子物质</u><strong>，并</strong><u>消耗</u>**能量的过程。</p></li><li><p>产能代谢中，化能微生物通过**<u>底物水平</u><strong>磷酸化和</strong><u>氧化</u>**磷酸化将某种物质氧化而释放的能量储存在ATP等高能分子中；</p><p>光合微生物则通过**<u>光合</u>**磷酸化将光能转变成为化学能储存在ATP中。</p><p>**<u>底物水平</u>**磷酸化既存在于发酵过程中，也存在于呼吸作用过程中。</p></li><li><p>呼吸作用与发酵作用的根本区别是呼吸作用中电子载体不是将电子直接传递给底物降解的中间产物，而是交给**<u>电子传递</u><strong>系统，逐步释放出能量后再交给</strong><u>最终电子受体</u>**</p></li><li><p>生物氧化的形式包括**<u>得氧</u><strong>、</strong><u>脱氢</u><strong>、</strong><u>失电子</u><strong>三种，其过程可分为</strong><u>脱氢</u><strong>、</strong><u>递氢</u><strong>、</strong><u>受氢</u><strong>三个阶段，其功能有</strong><u>产ATP</u><strong>、</strong><u>产[H]</u><strong>、</strong><u>产中间代谢物</u><strong>三种，类型包括</strong><u>呼吸</u><strong>、</strong><u>无氧呼吸</u><strong>、</strong><u>发酵</u>**</p></li><li><p>无氧呼吸的最终电子受体不是氧，而是外源电子受体，像NO<sub>3</sub><sup>-</sup>、NO<sub>2</sub><sup>-</sup>、SO<sub>4</sub><sup>2-</sup>、S<sub>2</sub>O<sub>3</sub><sup>2-</sup>、CO<sub>2</sub>等**<u>无机化合物</u><strong>，或</strong><u>延胡索酸</u>**等有机化合物</p></li><li><p>化能自养微生物氧化**<u>无机物</u><strong>而获得能量和还原力。能量的产生是通过</strong><u>氧化磷酸化</u><strong>形式，电子受体通常是O<sub>2</sub>，还原力的获得是</strong><u>逆呼吸链</u><strong>的方向进行传递，</strong><u>消耗</u>**能量</p></li><li><p>微生物将空气中的N<sub>2</sub>还原为NH<sub>3</sub>的过程称为**<u>生物固氮</u><strong>该过程中根据微生物和其他生物之间相互的关系。固氮体系可以分为</strong><u>自生固氮体系</u><strong>、</strong><u>共生固氮体系</u><strong>、</strong><u>联合固氮体系</u>**三种。</p></li><li><p>次级代谢是微生物生长至**<u>指数期后期</u><strong>或</strong><u>稳定期</u><strong>，以</strong><u>初级代谢产物</u>**为前体，合成一些对微生物自身生命活动无明确生理功能的物质的过程。</p></li><li><p>自养微生物固定CO<sub>2</sub>的途径主要有3条：卡尔文循环途径，可分为**<u>CO<sub>2</sub>的固定(羧化反应)</u><strong>、</strong><u>被固定CO<sub>2</sub>的还原(还原反应)</u>**、 <strong><u>CO<sub>2</sub>受体的再生</u></strong></p></li><li><p><em>Staphylococcus aureus</em>（金黄色葡萄球菌）肽聚糖合成分为3个阶段：细胞质中合成的**<u>“Park”核苷酸</u><strong>，在细胞膜中进一步合成</strong><u>肽聚糖单体分子</u><strong>，然后在细胞膜外壁引物存在下合成肽聚糖。青霉素在细胞膜外抑制</strong><u>转肽酶</u>**的活性从而抑制肽聚糖的合成。</p></li><li><p>固氮酶包括两种组分：组分Ⅰ是**<u>固二氮酶</u><strong>，是一种</strong><u>钼铁蛋白</u><strong>，由4个亚基组成；组分Ⅱ是一种</strong><u>固二氮酶还原酶</u><strong>，是一种</strong><u>铁蛋白</u>**，由两个亚基组成。P1、P2单独存在时，都没有活性，只有形成复合体后才有固氮酶活性。</p></li><li><p>底物脱氢4条途径有中产生还原力为NADH的途径有**<u>EMP</u><strong>、</strong><u>ED</u><strong>、</strong><u>TCA</u><strong>，产NADPH的途径有</strong><u>HMP</u><strong>、</strong><u>ED</u><strong>产FADH2的途径有</strong><u>TCA</u>**。</p></li></ol><h3 id="选择题-5">选择题</h3><ol><li>化能自养微生物的能量来源于（<strong>还原态无机化合物</strong>）</li><li>下列葡萄糖生成丙酮酸的糖酵解途径中，（<strong>EMP途径</strong>）是最普遍的、存在于大多数生物体内的一条主流代谢途径。</li><li>列葡萄糖生成丙酮酸的糖酵解途径中，（<strong>ED途径</strong>）是存在于某些缺乏完整EMP途径的替代途径。</li><li>酵母菌和运动发酵单胞菌乙醇发酵的区别是（<strong>糖酵解途径不同</strong>）</li><li>同型乳酸发酵中葡萄糖生成丙酮酸的途径是（<strong>EMP途径</strong>）</li><li>ATP或GTP的生成与高能化合物的酶催化转换相偶联的产能方式是（<strong>底物水平磷酸化</strong>）</li><li>卡尔文循环途径中CO2固定(羧化反应)的受体是（<strong>核酮糖-1,5-2磷酸</strong>）</li><li>由丙酮酸开始的其他发酵过程中，主要产物是丁酸、丁醇、异丙醇的发酵的是(<strong>丁酸发醇</strong>)</li><li>下列代谢方式中，能量获得最有效的方式是(<strong>有氧呼吸</strong>)</li><li>青霉素抑制金黄色葡萄球菌肽聚糖合成的(<strong>细胞膜外的转肽酶</strong>)</li><li>下面对于好氧呼吸的描述(<strong>电子供体是有机化合物，电子受体是无机化合物</strong>)是正确的。</li><li>无氧呼吸中呼吸链末端的氢受体是(<strong>氧化型无机化合物和少数有机化合物</strong>)</li><li>硝化细菌是(<strong>化能自养菌，氧化亚硝酸生成硝酸获得能量</strong>)</li><li>不能用于解释好氧性固氮菌其固氮酶的抗氧机制的是<ul><li>呼吸保护作用</li><li>构象保护</li><li>膜的分隔作用</li><li><strong>某些固氮酶对氧气不敏感</strong></li></ul></li><li>当一个NADH2分子经代谢并让它的电子通过电子传递链传递后，可产生(<strong>3个ATP分子</strong>)</li><li>微生物从糖酵解途径中可获得(<strong>2</strong>)个ATP分子</li><li>下列光合作用微生物中进行的是非环式光合磷酸化作用的是(<strong>蓝细菌</strong>)</li><li>当进行糖酵解化学反应时，(<strong>从一个葡萄糖分子产生两个丙酮酸分子</strong>)</li><li>延胡索酸呼吸中，(<strong>延胡索酸</strong>)是末端氢受体</li><li>厌氧微生物进行呼吸吗(<strong>进行呼吸，但是不利用氧气</strong>)</li></ol><h3 id="问答题-5">问答题</h3><h4 id="列表比较同型乳酸发酵与异型乳酸发酵">列表比较同型乳酸发酵与异型乳酸发酵</h4><p><img src="http://img.whl123456.top/image/2.png" alt=""></p><h4 id="试述嗜盐菌紫膜光合作用的基本原理">试述嗜盐菌紫膜光合作用的基本原理</h4><p>细菌的视紫红质的功能与叶绿素相似，能吸收光能，并在光量子的驱动下起着质子泵的作用。这时，它将反应中产生的质子一一逐出细胞膜外，从而使紫膜内外形成一个质子梯度差。根据化学渗透学说，这一梯度差（即质子动势）在驱逐H<sup>+</sup>通过ATP酶的孔道进入膜内以达到质子平衡时，就会产生ATP。当环境中O<sub>2</sub>浓度很低时，嗜盐菌无法利用氧化磷酸化来满足其正常需求，若光照条件适宜，它就能合成紫膜，并利用紫膜的光介导ATP合成机制获得必要的能量。</p><h4 id="固氮过程需满足哪些条件？">固氮过程需满足哪些条件？</h4><ul><li>ATP的供应</li><li>还原力[H]及其载体</li><li>固氮酶<ul><li>组分Ⅰ：真正“固氮酶”，又称钼铁蛋白（MF）、钼铁氧还蛋白（MoFd）</li><li>组分Ⅱ：固氮酶还原酶，不含钼只含铁的蛋白，又称铁蛋白、固氮铁氧还蛋白</li></ul></li><li>还原性底物氮</li><li>Mg<sup>2+</sup></li><li>严格的厌氧微环境</li></ul><h4 id="蓝细菌是一类放氧性光合生物，又是一类固氮菌，说明其固氮酶的抗氧保护机制。">蓝细菌是一类放氧性光合生物，又是一类固氮菌，说明其固氮酶的抗氧保护机制。</h4><p>异形胞是部分蓝细菌适应于有氧条件下进行固氮作用的特殊细胞。机制：</p><ul><li>很厚的细胞壁；</li><li>缺乏产氧光合系统Ⅱ；</li><li>有高的脱氢酶和氢化酶活力；</li><li>这还有高的超氧化物歧化酶活力，有解除氧毒害的功能；</li><li>其呼吸强度也高于邻近的营养细胞。</li></ul><p>没有异形胞分化的蓝细菌：</p><ul><li>将固氮作用与光合作用分开进行(黑暗下固氮，光照下进行光合作用)</li><li>在束状群体中央失去光合系统Ⅱ的细胞中进行固氮作用</li><li>提高细胞内过氧化物酶或超氧化物歧化酶活力以解除氧毒害</li></ul><h4 id="细菌酒精发酵与酵母菌的酒精发酵有何异同">细菌酒精发酵与酵母菌的酒精发酵有何异同</h4><p>共同点：葡萄糖降解为丙酮酸，丙酮酸脱羧为乙醛，乙醛再还原成乙醇<br>不同点：</p><ul><li>产生丙酮酸的途径不同：酵母型酒精发酵是通过EMP途径，而细菌酒精发酵是通过ED途径。</li><li>净产ATP不同：与酵母乙醇发酵相比，细菌乙醇发酵净产生ATP只有1个</li><li>菌种不同：参与酵母型酒精发酵的是酿酒酵母，细菌酒精发酵是运动发酵单胞菌等微好氧菌。</li></ul><h4 id="列表比较呼吸、无氧呼吸和发酵的异同点">列表比较呼吸、无氧呼吸和发酵的异同点</h4><table><thead><tr><th>项目</th><th>有氧呼吸</th><th>无氧呼吸</th><th>发酵</th></tr></thead><tbody><tr><td>氧化基质</td><td>有机物</td><td>有机物</td><td>有机物</td></tr><tr><td>氢受体</td><td>O<sub>2</sub></td><td>无机或有机氧化物</td><td>氧化型中间代谢产物  (乙醛、丙酮酸等）</td></tr><tr><td>产物</td><td>CO<sub>2</sub>、H<sub>2</sub>O</td><td>还原型无机或有机氧化物</td><td>还原型中间代谢产物（乙醇、乳酸等）</td></tr><tr><td>产能效率</td><td>高</td><td>中</td><td>低</td></tr><tr><td>产能机制</td><td>氧化磷酸化</td><td>氧化磷酸化</td><td>底物水平磷酸化</td></tr><tr><td>递氢体</td><td>电子传递链  （完整）</td><td>电子传递链（不完整）</td><td>无</td></tr></tbody></table><h2 id="微生物的生长及其控制">微生物的生长及其控制</h2><h3 id="填空题-6">填空题</h3><ol><li>根据微生物与氧气的关系，可将微生物分成**<u>好氧</u><strong>，</strong><u>兼性厌氧</u><strong>，</strong><u>厌氧</u><strong>，</strong><u>微好氧</u><strong>，</strong><u>耐氧</u>**五个类型</li><li>测定微生物生长量的间接方法有**<u>比浊法</u>**， <strong><u>生理指标法</u></strong></li><li>一条典型的生长曲线至少可分为**<u>迟缓期</u><strong>，</strong><u>对数生长期</u>** ，<strong><u>稳定生长期</u></strong> ，**<u>衰亡期</u>**4个生长时期</li><li>控制连续培养的方法有**<u>恒浊法</u>**， <strong><u>恒化法</u></strong></li><li>现代实验室中研究厌氧菌最有效的三大技术是**<u>厌氧罐技术</u><strong>，  <strong><u>厌氧手套箱技术</u></strong>  ，</strong><u>亨盖特滚管技术</u>**</li><li>对玻璃器皿、金属用具等物品可用**<u>高压蒸汽灭菌法</u>**， **<u>干热灭菌法</u>**进行灭菌；而对牛奶或其他液态食品一般采用 **<u>巴氏消毒法</u>**灭菌</li><li>多数细菌生长最适pH是**<u>6.5-7.5</u><strong>，放线菌生长最适pH一般是 <strong><u>7.5-8.0</u></strong>，真菌生长的最适pH一般是</strong><u>5-6</u>**</li><li>杀灭或抑制微生物的物理因素有**<u>高温</u><strong>，  <strong><u>辐射</u></strong> ，</strong><u>超声波</u>** ，<strong><u>渗透压</u></strong> ，<strong><u>干燥</u></strong> 等</li><li>微生物按其生长温度范围可分为**<u>低温型</u><strong>，</strong><u>中温型</u><strong>，</strong><u>高温型</u><strong>3 类，最适生长温度分别为</strong><u>(10-15) ℃</u><strong>，</strong><u>(25-37) ℃</u><strong>，</strong><u>(45-50) ℃</u>**</li><li>抗代谢药物中磺胺类是由于与**<u>对氨基苯甲酸</u><strong>相似，从而竞争性地与二氢叶酸合成酶结合，使其不能合成</strong><u>叶酸</u>**</li></ol><h3 id="选择题-6">选择题</h3><ol><li><p>所有微生物世代时间<strong>不同</strong></p></li><li><p>高温对微生物的致死是因为</p><ul><li>高温使菌体蛋白变性</li><li>高温使核酸变性</li><li>高温破坏细胞膜的透性</li><li><strong>以上都是</strong></li></ul></li><li><p>如果将处于对数期的细菌移至相同组分的新鲜培养基中，该批培养物将处于哪个生长期?<strong>对数期</strong></p></li><li><p>细菌细胞进入稳定期是由于：①细胞已为快速生长作好了准备；②<strong>代谢产生的毒性物质发生了积累</strong>；③<strong>能源已耗尽</strong>；④细胞已衰老且衰老细胞停止分裂；⑤在重新开始生长前需要合成新的蛋白质（<strong>2, 3</strong>）</p></li><li><p>对生活的微生物进行计数的最准确的方法是<strong>平板菌落记数</strong></p></li><li><p>用比浊法测定生物量的特点是<strong>简单快速，但需要大量的细胞</strong></p></li><li><p>下列哪种保存方法会降低食物的水活度<strong>腌肉</strong></p></li><li><p>细胞复制时所有的细胞组分都按比例有规律地增加的现象是<strong>平衡生长</strong></p></li><li><p>最适生长温度低于20℃的微生物被称为<strong>嗜冷菌</strong></p></li><li><p>过氧化氢酶能解除<strong>过氧化氢</strong>的毒性</p></li><li><p>能导致微生物死亡的化学试剂是 <strong>溶菌剂</strong> 、<strong>杀菌剂</strong></p></li><li><p>只能用高压灭菌才能杀死的是<strong>细菌的内生孢子</strong></p></li><li><p>常用的高压灭菌的温度是<strong>121℃</strong></p></li><li><p>巴斯德消毒法可用于 <strong>啤酒</strong>、 <strong>葡萄酒</strong>、<strong>牛奶</strong>的消毒</p></li><li><p>巴氏灭菌的工艺条件是：<strong>(62-63) ℃30 min</strong></p></li><li><p>能通过抑制叶酸合成而抑制细菌生长 <strong>磺胺类药物</strong></p></li><li><p>专性厌氧微生物是由于其细胞内缺少 <strong>SOD</strong>，从而不能解除分子氧对细胞的毒害。</p></li><li><p>使用高压锅灭菌时，打开排汽阀的目的是<strong>排尽锅内冷空气</strong></p></li><li><p>直接显微镜计数用来测定下面所有微生物群体的数目，除了<strong>病毒</strong>之外</p></li><li><p>有人大量使用广谱抗生素，目的在于消炎，可是停药一段时间后，他长期低烧，又找不到体内有炎症的部位，发烧的原因可能是<strong>大肠内菌群失调</strong></p></li></ol><h3 id="问答题-6">问答题</h3><h4 id="图示分批培养中微生物的生长曲线，并说明各个时期的特点。">图示分批培养中微生物的生长曲线，并说明各个时期的特点。</h4><p><img src="http://img.whl123456.top/image/3.png" alt=""></p><p>延滞期特点：生长速率常数等于零；细胞形态变大；RNA含量增加；代谢活力强；对不良条件抵抗能力降低。</p><p>指数期特点：生长速率最大，代时最短；细胞进行平衡生长；酶系活跃，代谢旺盛。</p><p>稳定期特点：细胞生长速率为零；活菌数保持相对稳定，总菌数达最高水平；合成次生代谢产物；细胞内出现储藏物质，芽孢杆菌这时开始形成芽孢。</p><p>衰亡期：细菌死亡数大于增殖数,活菌数明显减少,群体衰落 ；细胞出现多形态,大小不等的 畸形,变成衰退型 ；细胞死亡,出现自溶现象；产生或释放抗生素等次生代谢产物；芽孢释放。</p><h4 id="与分批发酵相比，连续培养有何优点？">与分批发酵相比，连续培养有何优点？</h4><p>由于连续培养中微生物的生长一直保持在对数期，生物量浓度在较长时间内保持恒定，因此单批发酵相比，连续培养：</p><ul><li>能缩短发酵周期，提高设备利用率；</li><li>便于自动控制；</li><li>降低动力消耗体力劳动强度；</li><li>产品质量较稳定。</li></ul><h4 id="试比较灭菌、消毒、防腐和化疗之间的区别。">试比较灭菌、消毒、防腐和化疗之间的区别。</h4><p>灭菌是杀死所有微生物；</p><p>消毒是杀死或消除所有病原微生物，达到防止病原菌传播的目的；</p><p>防腐是利用理化因子使微生物暂不生长；</p><p>化疗是有效地消除宿主体内的微生物。</p><h4 id="什么原因导致抗生素不敏感的抗性菌株的增多">什么原因导致抗生素不敏感的抗性菌株的增多?</h4><ul><li>细胞质膜透性改变，使抗生素不进入细胞；</li><li>通过主动外排系统把进入细胞内的药物主动排出细胞外；</li><li>把药物作用的靶位加以修饰和改变；</li><li>产生一种能使药物失去活性的酶</li><li>形成“救护途径”，通过被药物的代谢途径发生变异，而变为仍能合成原产物的新途径。</li></ul><h4 id="试述影响微生物生长过程中延滞期长短的因素。">试述影响微生物生长过程中延滞期长短的因素。</h4><p>菌种：繁殖速度较快的菌种的延迟期一般较短；</p><p>接种物菌龄：用对数生长期的菌种接种时，其延迟期较短，甚至检查不到延迟期；</p><p>接种量：一般来说，接种量增大可缩短甚至消除延迟期（发酵工业上一般采用1/10的接种量）；</p><p>培养基成分：在营养成分丰富的天然培养基上生长的延滞期比在合成培养基上生长时短；接种后培养基成分有较大变化时，会使延滞期加长，所以发酵工业上尽量使发酵培养基的成分与种子培养基接近。</p><h2 id="微生物遗传变异和育种">微生物遗传变异和育种</h2><h3 id="填空题-7">填空题</h3><ol><li>通过**<u>细菌转化</u><strong>实验，证明</strong><u>DNA</u><strong>是肺炎链球菌的遗传物质；通过</strong><u>噬菌体感染</u><strong>实验，证明</strong><u>DNA</u><strong>是噬菌体的遗传物质；通过</strong><u>植物病毒重建</u><strong>，证明了TMV的遗传物质是</strong><u>RNA</u>**</li><li>紫外线照射能使DNA相邻碱基形成**<u>嘧啶二聚体</u><strong>，从而导致DNA复制产生错误，用紫外线诱变微生物后应在</strong><u>黑暗</u><strong>条件下进行，以防止</strong><u>光复活</u>**现象的产生</li><li>证明基因突变自发性和不对应性的三个经典实验是**<u>变量试验</u>**、 <strong><u>涂布试验</u></strong>、 <strong><u>影印平板培养法</u></strong></li><li>细菌在一般情况下是一套基因，即**<u>单倍体</u><strong>；真核微生物通常是有两套基因又称</strong><u>二倍体</u>**</li><li>**<u>Col</u>**质粒首先发现于大肠杆菌中而得名，该质粒含有编码大肠菌素的基因</li><li>四种引起细菌基因重组的方式是**<u>转化</u>**、 <strong><u>转导</u></strong>、 <strong><u>接合</u></strong>、 <strong><u>原生质体融合</u></strong></li><li>营养缺陷型是微生物遗传学研究中重要的选择标记和育种的重要手段，由于这类突变型在**<u>基本培养基</u>**上不生长，所以是一种负选择标记</li><li>在**<u>普遍</u><strong>转导中，噬菌体可以转导供体染色体的任何部分到受体细胞中；而在</strong><u>局限</u>**转导中，噬菌体总是携带同样的片段到受体细胞中。</li><li>基因突变具有的特性为**<u>自发性</u>**、 <strong><u>不对应性</u></strong>、 <strong><u>稀有性</u></strong>、 <strong><u>独立性</u></strong>、 <strong><u>可诱变性</u></strong>、 <strong><u>稳定性</u></strong>、 <strong><u>可逆性</u></strong></li><li>筛选高产菌株用**<u>琼脂块培养</u><strong>法；筛选抗药性菌株用</strong><u>梯度平板</u>**法</li></ol><h3 id="选择题-7">选择题</h3><ol><li>最小的遗传单位是<strong>基因</strong></li><li>细菌直接摄取外界游离的DNA片段发生变异称为<strong>转化</strong></li><li>由于个别碱基的置换、插入或缺失引起的突变称为<strong>基因突变</strong></li><li>某个碱基的改变，使代表某种氨基酸的密码子变为蛋白质合成的终止密码子(UAA，UAG，UGA)。蛋白质的合成提前终止，产生截短的蛋白质，这种基因突变是<strong>无义突变</strong></li><li>当 <strong>F<sup>-</sup>菌株和F<sup>+</sup>菌株接合</strong>，会发生基因重组，并使F<sup>-</sup>菌株变化F<sup>+</sup>菌株。</li><li>游离于各种微生物细胞质中的小DNA分子称作下列哪种结构<strong>质粒</strong></li><li>诱变育种是指利用各种诱变剂处理微生物细胞，提高基因的随机(<strong>突变频率</strong>)，通过一定的筛选方法获得所需要的高产优质菌株。</li><li>以噬菌体为媒介，把供体细胞的DNA片段带到受体细胞中，使后者获得前者的部分遗传性状的现象叫<strong>转导</strong></li><li>由一种诱变剂引起DNA分子中一个或少数几个核苷酸的增加或缺失，从而引造成突变点以后的全部遗传密码的转录和转译发生错误，由这种突变产生的突变体称为<strong>移码突变</strong></li><li>营养缺陷型菌株是指<strong>丧失了合成某种营养成分能力的菌株</strong>的菌株</li><li>受体菌和供体菌直接接触，而得到DNA片段的过程，称为<strong>接合</strong></li><li>携带核染色体基因的F因子称为<strong>F′菌株</strong></li></ol><h3 id="问答题-7">问答题</h3><h4 id="试比较普遍性转导和局限性转导的异同">试比较普遍性转导和局限性转导的异同</h4><p>相同点：均以噬菌体为媒介，导致遗传物质的转移。</p><p>不同点：</p><table><thead><tr><th>项目</th><th>普遍性转导</th><th>局限性转导</th></tr></thead><tbody><tr><td>能够转导的基因</td><td>供体菌的几乎任何基因</td><td>供体菌的少数基因</td></tr><tr><td>噬菌体的位置</td><td>不整合到寄主染色体上</td><td>整合到寄主染色体上</td></tr><tr><td>转导噬菌体的获得</td><td>可通过裂解反应得到</td><td>只能通过诱导溶源菌得到</td></tr><tr><td>转导子的性质</td><td>属非溶源型，转导的物质，主要是供体菌的DNA</td><td>属缺陷溶源型，转导的物质，有供体的DNA和噬菌体DNA</td></tr></tbody></table><h4 id="试述用艾姆氏（Ames）法检测致癌剂的实验的原理和方法。">试述用艾姆氏（Ames）法检测致癌剂的实验的原理和方法。</h4><p>艾姆氏试验是一种利用细菌营养缺陷型的回复突变来检测环境或食品中是否存在化学致癌剂的简便有效方法。此法测定潜在化学致癌物是基于这样的原理：鼠伤寒沙门氏菌的组氨酸营养缺陷型（his<sup>-</sup>）菌株在基本培养基[-]的平板上不能生长，如发生回复突变变成原养型（his<sup>+</sup>）后则能生长。</p><p>方法大致是在含待测可疑“三致”物例如黄曲霉毒素、二甲氨基偶氮苯（俗名“奶油黄”）、“反应停”等的试样中，加入鼠肝匀浆液，经一段时间保温后，吸入滤纸片中，然后将滤纸片放置于上述平板中央。</p><p>经培养后，出现3种情况：</p><ol><li>在平板上无大量菌落产生，说明试样中不含诱变剂；</li><li>在纸片周围有一抑制圈，其外周出现大量菌落，说明试样中有某种高浓度的诱变剂存在；</li><li>在纸片周围长有大量菌落，说明试样中有浓度适当的诱变剂存在。</li></ol><h4 id="列表比较四种基因重组方式的异同">列表比较四种基因重组方式的异同</h4><table><thead><tr><th>类型</th><th>受体/供体是否接触</th><th>DNA传递媒介</th><th>重组涉及DNA大小</th></tr></thead><tbody><tr><td>转化</td><td>否</td><td>无</td><td>一个或少数几个基因</td></tr><tr><td>转导</td><td>否</td><td>噬菌体</td><td>一个或少数几个基因</td></tr><tr><td>接合</td><td>是</td><td>F因子</td><td>部分染色体</td></tr><tr><td>原生质体融合</td><td>原生质体</td><td>原生质体</td><td>2个细胞的基因组</td></tr></tbody></table><h4 id="比较大肠杆菌的F-sup-sup-、F-sup-sup-、Hfr和F’菌株区别？并图示这四者之间的关系">比较大肠杆菌的F<sup>+</sup>、F<sup>-</sup>、Hfr和F’菌株区别？并图示这四者之间的关系</h4><p>F<sup>+</sup> 菌株：F因子以游离状态存在，可独立于染色体进行自主复制，且细胞表面有相当数量的性菌毛。</p><p>F <sup>-</sup>菌株：不含F因子，无相当数量的性菌毛。</p><p>Hfr菌株：F因子整合在宿主染色体的一定部位，并与宿主染色体同步复制。</p><p>F′菌株：因为F因子整合到染色体上是一种可逆过程，当 F因子从 Hfr菌染色体上脱落时，会出现一定概率的错误基因交换，从而使 F因子带上宿主染色体的遗传因子，这时的 F因子称为F′因子。</p><p>图P222</p><h2 id="微生物的生态">微生物的生态</h2><h3 id="填空题-8">填空题</h3><ol><li>微生物与生物环境间的最典型的5种相互关系为**<u>互生</u><strong>、</strong><u>共生</u><strong>、</strong><u>寄生</u><strong>、</strong><u>拮抗</u><strong>、</strong><u>捕食</u>**</li><li>从热泉中可以分离到**<u>嗜热微生物</u><strong>；从深海中可以分离到</strong><u>嗜冷微生物</u><strong>；从酸矿水中可分离到</strong><u>嗜酸微生物</u><strong>；从石灰水中可分离到</strong><u>嗜碱微生物</u><strong>；从盐湖中可分离到</strong><u>嗜盐微生物</u>**</li><li>微生物间共生关系最典型的例子是菌藻共生而形成的**<u>地衣</u><strong>。其中的菌类一般为真菌中的</strong><u>子囊菌</u><strong>，而藻类一般为</strong><u>绿藻</u><strong>或</strong><u>蓝藻（蓝细菌）</u><strong>。藻类可以为菌类提供</strong><u>有机养料</u><strong>而菌类则可为藻类提供</strong><u>矿质元素</u>**。</li><li>按耐热能力的不同，嗜热微生物可被分成5个不同类群：<strong><u>耐热菌</u></strong>、<strong><u>兼性嗜热菌</u></strong>、<strong><u>专性嗜热菌</u></strong>、<strong><u>极端嗜热菌</u></strong>、<strong><u>超嗜热菌</u></strong></li><li>清水中营养物浓度很低，故清水中微生物以**<u>化能自养</u><strong>微生物和</strong><u>光能自养</u>**微生物为主。</li><li>磷循环包括**<u>可溶性无机磷同化</u><strong>、</strong><u>不溶性磷溶解</u><strong>、</strong><u>有机磷的矿化</u>**</li><li>硝化作用是一个严格**<u>好氧</u><strong>的过程，反硝化作用则需要在</strong><u>厌氧</u>**条件下进行。</li><li>我国卫生部规定的饮用水的标准是：1mL自来水中的细菌（37°，培养24h）总数不可超过**<u>100</u><strong>个，而1000mL自来水中的大肠菌数则不能超过</strong><u>3</u>**个（37℃，48h）。</li><li>污水处理按程度可分为**<u>一级处理</u><strong>、</strong><u>二级处理</u><strong>、</strong><u>三级处理</u>**</li><li>水体的富营养化包括**<u>水华</u><strong>、</strong><u>赤潮</u>**</li></ol><h3 id="选择题-8">选择题</h3><ol><li>和豆科植物共生固氮的微生物是<strong>根瘤菌</strong></li><li>适用于生物冶金的微生物类群主要是<strong>嗜酸微生物</strong></li><li>在白蚁、蟑螂等昆虫肠道和反刍动物的瘤胃内有大量的细菌和原生动物， 这是动物和微生物之间一种<strong>共生关系</strong></li><li>酸矿水的形成是微生物对某些金属和非金属元素转化的结合。下列哪种循环与酸矿水形成有关?<strong>S循环</strong></li><li>酸菜腌制后可以保存相当长的时间,这是人们利用了微生物之间的<strong>拮抗关系</strong></li><li>悉生动物是指已人为接种上（<strong>种或数种已知的纯种微生物</strong>）的无菌动物或无菌植物</li><li>在制作酸菜或青贮饲料时，一般并不人工接种乳酸菌，这是人们利用了植物的<strong>叶面附生微生物</strong></li><li>弗来明发现青霉素是由于观察到在产青霉菌菌落周围不见有革兰阳性细菌 生长，而再深入研究创造奇迹的。这是人类首次观察到的微生物之间的<strong>专一性拮抗关系</strong></li><li>纤维分解菌与自生固氮菌之间由于前者为后者提供碳源，后者为前者提供 氮源而构成了<strong>互生关系</strong></li><li>冬虫夏草是由昆虫和真菌通过<strong>寄生关系</strong>形成的一种名贵中药</li></ol><h3 id="问答题-8">问答题</h3><h4 id="什么是正常菌群？试分析肠道正常菌群与人体的关系。">什么是正常菌群？试分析肠道正常菌群与人体的关系。</h4><p>正常菌群是生活在健康动物各部位、数量大，种类较稳定、一般能发挥有益作用的微生物种群。</p><p>肠道正常菌群对宿主有很多有益作用，包括排阻、抑制外来致病菌、提供维生素等营养，产生有助消化的酶，分解有毒或致癌物质，产生有机酸，促进肠道的蠕动，刺激机体的免疫系统并提高其免疫力以及存在一定程度的固氮作用等。</p><p>肠道正常菌群与人体的关系是一种十分重要又极其复杂的共生关系。正常菌群的微生态平衡是相对的、可变的和有条件的，正常菌群失调时会成为致病菌。</p><h4 id="什么是活性污泥？活性污泥法处理污水的过程非常类似于恒浊的连续培养，两者的不同点在哪里">什么是活性污泥？活性污泥法处理污水的过程非常类似于恒浊的连续培养，两者的不同点在哪里?</h4><p>活性污泥：一种由活细菌、原生动物和其他微生物群聚集在一起组成的凝絮团，在污水处理中具有很强的吸附、分解有机物或毒物的能力。</p><p>不同：活性污泥法是维持曝气池中活性污泥有相对稳定的浓度，实现的方法是回流二次沉淀池沉降的污泥。恒浊连续培养是调控培养器中流人、流出液的流速，使培养液中的微生物浓度基本恒定。前者靠回流维持污泥浓度恒定，后者则靠调控流速维持。</p><h2 id="传染与免疫">传染与免疫</h2><h3 id="填空题-9">填空题</h3><ol><li>B细胞分化会产生两种细胞**<u>浆细胞</u>**、 <strong><u>记忆细胞</u></strong></li><li>人和哺乳动物的中枢免疫器官包括**<u>骨髓</u><strong>、</strong><u>胸腺</u>**</li><li>外周免疫器官主要是**<u>淋巴结</u><strong>、</strong><u>脾脏</u>**</li><li>粒细胞包括**<u>中性粒细胞</u><strong>、 <strong><u>嗜酸性粒细胞</u></strong> 、</strong><u>嗜碱性粒细胞</u>**</li><li>具有免疫原性和反应原性的抗原称为**<u>完全抗原</u><strong>具有</strong><u>反应原性(或免疫反应性)</u><strong>而没有</strong><u>免疫原性</u>**的抗原称为半抗原。</li><li>免疫球蛋白分为**<u>lgM</u>** 、<strong><u>IgG</u></strong>、<strong><u>lgE</u></strong>、 <strong><u>lgA</u></strong>、 **<u>IgD</u>**五类</li><li>细菌毒素可分为**<u>外毒素</u>**、 <strong><u>内毒素</u></strong></li><li>病原菌或病原体的侵袭力由**<u>吸附和侵入能力</u><strong>、</strong><u>繁殖和扩散能力</u><strong>、</strong><u>对宿主防御功能的抵抗能力</u>**三方面组成</li><li>阻挡微生物入侵的有效生理屏障有**<u>皮肤与粘膜</u>**、 <strong><u>血脑屏障</u></strong>、 <strong><u>血胎屏障</u></strong></li><li>炎症的五大主要症状表现为**<u>红</u><strong>、 <strong><u>肿</u></strong> 、</strong><u>热</u>**、 <strong><u>痛</u></strong>、 <strong><u>功能障碍</u></strong></li></ol><h3 id="选择题-9">选择题</h3><ol><li>浆细胞是<strong>产生抗体的细胞</strong></li><li>302医院著名专家姜素椿患上了“非典”，他根据自己掌握的科学知识，建议注射曾患过“非典”被治愈并且没有患其他传染病的人的血清，达到了预期目的，他本人也被治愈。他的这种做法是利用了患者血清中的<strong>抗体</strong></li><li>下列各项中通过接种疫苗能够预防的疾病是<strong>传染病</strong></li><li>以下(  )性质不是抗原必备的<ul><li><strong>必须有一个半抗原表位</strong></li><li>必须与被免疫动物种属不同</li><li>必须相对分子质量大结构复杂</li><li>必须可以被抗原递呈细胞降解</li></ul></li><li>抗体的抗原结合位点位于<strong>重链和轻链的V区</strong></li><li>器官移植的成功是人类医学的伟大成果，因为移植到人体内的器官很不易成活。根据现代免疫学的概念，植入器官的组织细胞相当于<strong>抗原</strong></li><li>抗体发生作用的特点是<strong>抗原消失后，抗体仍然存在于人体内</strong></li><li>早在10世纪，我国人民就已经采用将轻症天花病人的痘浆接种到健康人身上的方法，来预防天花。这里所说的痘浆和这种方法分别属于<strong>抗原</strong> 、<strong>特异性免疫</strong></li><li>自然的非特异免疫的一个重要组分是<strong>白细胞的吞噬</strong></li><li>能用于人工被动免疫的制品有<strong>抗毒素</strong>、 <strong>丙种球蛋白</strong></li></ol><h3 id="问答题-9">问答题</h3><h4 id="机体对细胞内毒素和细菌外毒素的免疫应答有何不同">机体对细胞内毒素和细菌外毒素的免疫应答有何不同</h4><p>细菌外毒素是细菌分泌到胞外的分子，机体对其免疫应答以体液免疫为主，通过B细胞识别、活化并产生抗毒素抗体分子使之灭活。</p><p>细菌内毒素为细菌胞壁成分，机体对其免疫应答以对细菌的细胞免疫为主，包括吞噬杀伤、补体溶菌、以及T细胞介导的细胞免疫。</p><h4 id="表解宿主免疫力的三道防线">表解宿主免疫力的三道防线</h4><p><img src="http://img.whl123456.top/image/5-1593058333493.png" alt=""></p><h4 id="试列表比较B细胞与T细胞的异同处">试列表比较B细胞与T细胞的异同处</h4><table><thead><tr><th>比较项目</th><th>T细胞</th><th>B细胞</th></tr></thead><tbody><tr><td>来源</td><td>骨髓</td><td>骨髓</td></tr><tr><td>成熟部位</td><td>胸腺</td><td>骨髓</td></tr><tr><td>寿命</td><td>数月至数年</td><td>或长（数月至数年）或短（数天至数周）</td></tr><tr><td>运动性</td><td>强</td><td>差</td></tr><tr><td>表面标志</td><td>T细胞受体（TCR）</td><td>补体受体和Ig</td></tr><tr><td>增殖和分化</td><td>在抗原刺激后发生增殖</td><td>抗原刺激下增殖、分化为浆细胞、记忆细胞</td></tr><tr><td>产物</td><td>合成并释放各种淋巴因子</td><td>合成并释放抗体</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 生物学 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 微生物学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>植物生理学复习整理</title>
      <link href="2020/06/22/%E6%A4%8D%E7%89%A9%E7%94%9F%E7%90%86%E5%AD%A6/"/>
      <url>2020/06/22/%E6%A4%8D%E7%89%A9%E7%94%9F%E7%90%86%E5%AD%A6/</url>
      
        <content type="html"><![CDATA[<p>名词解释、简答</p><hr><h1>植物生理学</h1><h2 id="植物的水分代谢">植物的水分代谢</h2><h3 id="名词解释">名词解释</h3><p><strong>水势</strong>($\psi_{\mathrm{w}}$)：每偏摩尔体积水的化学势差。符号：$\psi_{\mathrm{w}}$。</p><p><strong>渗透势</strong>($\psi_\pi$)：由于溶液中溶质颗粒的存在而引起的水势降低值。用负值表示。亦称溶质势（$\psi_\pi$）。</p><p><strong>衬质势</strong>($\psi_m$)：细胞胶体物质亲水性和毛细管对自由水束缚而引起的水势降低值，以负值表示。符号$\psi_m$ 。</p><p><strong>蒸腾作用</strong>：水分以气体状态通过植物体表面从体内散失到体外的现象。</p><p><strong>根压</strong>：植物根部的生理活动使液流从根部上升的压力。</p><p><strong>蒸腾拉力</strong>：由于蒸腾作用产主的一系列水势梯度使导管中水分上升的力量。</p><p><strong>蒸腾速率</strong>：又称蒸腾强度，指植物在单位时间内，单位面积通过蒸腾作用而散失的水分量。（g/dm<sup>2</sup>·h）</p><p><strong>内聚力学说</strong>：又称蒸腾流-内聚力-张力学说。即以水分的内聚力解释水分沿导管上升原因的学说。</p><h3 id="问答题">问答题</h3><h4 id="简述水分的植物生理生态作用">简述水分的植物生理生态作用</h4><ul><li>水分能便植物保持固有的姿态</li><li>水分是重要代谢过程的反应物质和产物</li><li>水是细胞原生质的主要组成成分</li><li>细胞分裂及伸长都需要水分</li><li>水分是植物对物质吸收和运输及生化反应的一种良好溶剂</li><li>可以通过水的理化特性以调节植物周围的大气湿度、温度等。对维持植物体温稳定和降低体温也有重要作用</li></ul><h4 id="利用质壁分离现象可以解决哪些问题">利用质壁分离现象可以解决哪些问题</h4><ul><li>说明原生质层是半透膜。</li><li>判断细胞死活。只有活细胞的原生质层才是半透膜，才有质壁分离现象，如细胞死亡，则不能产主质壁分离现象。</li><li>测定细胞液的渗透势</li></ul><h4 id="蒸腾作用有什么生理意义">蒸腾作用有什么生理意义</h4><ul><li>是植物对水分吸收和运输的主要动力</li><li>促进植物对矿物质和有机物的吸收及其在植物体内的转运</li><li>能够降低叶片的温度，以免灼伤</li></ul><h4 id="气孔开闭机理的假说有哪些？请简述之">气孔开闭机理的假说有哪些？请简述之</h4><ol><li>淀粉–糖变化学说：在光照下保卫细胞进行光合作用合成可溶性糖。另外由于光合作用消耗CO<sub>2</sub>，使保卫细胞pH值升高，淀粉磷酸化酶水解细胞中淀粉形成可溶性糖，细胞水势下降，当保卫细胞水势低于周围的细胞水势时，便吸水迫使气孔张开，在暗中光合作用停止，情况与上述相反，气孔关闭。</li><li>无机离子吸收学说：在光照下，保卫细胞质膜上具有光活化H<sup>+</sup>泵ATP酶，分解光合磷酸化产生的ATP并将H<sup>+</sup>分泌到细胞壁，同时将外面的K<sup>+</sup>吸收到细胞中来，Cl<sup>-</sup>也伴随着K<sup>+</sup>进入，以保证保卫细胞的电中性，保卫细胞中积累较多的K<sup>+</sup>和，降低水势，气孔就张开，反之，则气孔关闭。</li><li>苹果酸生成学说。在光下保卫细胞内的CO<sub>2</sub>被利用，pH值就上升，剩余的CO<sub>2</sub>就转变成重碳酸盐（HCO<sub>3</sub><sup>-</sup>），淀粉通过糖酵解作用产生的磷酸烯醇式丙酮酸在PEP羧化酶作用下与HCO<sub>3</sub><sup>-</sup>作用形成草酰乙酸，然后还原成苹果酸，可作为渗透物降低水势，气孔张开，反之关闭。</li></ol><h2 id="植物的矿质营养">植物的矿质营养</h2><h3 id="名词解释-2">名词解释</h3><p><strong>矿质营养</strong>: 是指植物对氮和矿质元素的吸收、运输与同化的过程。</p><p><strong>灰分元素</strong>：亦称矿质元素，将干燥植物材料燃烧后，剩余一些不能挥发的物质称为灰分元素。</p><p><strong>单盐毒害和离子拮抗</strong>：单盐毒害是指溶液中因只有一种金属离子而对植物之毒害作用的现象；在发生单盐毒害的溶液中加入少量其他金属离子，即能减弱或消除这种单盐毒害，离子间的这种作用称为离子拮抗。</p><p><strong>平衡溶液</strong>：在含有适当比例的多种盐溶液中，各种离子的毒害作用被消除，植物可以正常生长发育，这种溶液称为平衡溶液。</p><p><strong>诱导酶</strong>：又称适应酶，指植物体内本来不含有，但在特定外来物质的诱导下可以生成的酶。如硝酸还原酶可为NO<sub>3</sub><sup>-</sup>所诱导。</p><p><strong>生物固氮</strong>：某些微生物把空气中游离氮固定转化为含氮化合物的过程。</p><h3 id="问答题-2">问答题</h3><h4 id="植物必需的矿质元素要具备哪些条件">植物必需的矿质元素要具备哪些条件</h4><ul><li>缺乏该元素植物生育发生障碍不能完成生活史。</li><li>除去该元素则表现专一的缺乏症，这种缺乏症是可以预防和恢复的。</li><li>该元素在植物营养生理上表现直接的效果而不是间接的。</li></ul><h4 id="为什么把氮称为生命元素">为什么把氮称为生命元素</h4><p>氮在植物生命活动中占据重要地位，它是植物体内许多重要化合物的成分，如核酸（DNA、RNA）、蛋白质（包括酶）、磷脂、叶绿素。光敏色素、维生素B、IAA、CTK、生物碱等都含有氮。</p><p>同时氮也是参与物质代谢和能量代谢的ADP、ATP、CoA、CoQ、FAD、FMN、NAD<sup>+</sup>、NADP<sup>+</sup>、铁卟琳等物质的组分。</p><p>上述物质有些是生物膜、细胞质、细胞核的结构物质，有些是调节生命活动的生理活性物质。</p><p>因此，氮是建造植物体的结构物质，也是植物体进行能量代谢、物质代谢及各种生理活动所必需的起重要作用的生命元素。</p><h4 id="植物细胞吸收矿质元素的方式有哪些">植物细胞吸收矿质元素的方式有哪些</h4><ul><li>被动吸收：包括简单扩散、杜南平衡。不消耗代谢能。</li><li>主动吸收：有载体和质子泵参与，需消耗代谢能。</li><li>胞饮作用：是一种非选择性吸收方式。</li></ul><h4 id="为什么土壤温度过低，植物吸收矿质元素的速率下降">为什么土壤温度过低，植物吸收矿质元素的速率下降</h4><ul><li>因为温度低时代谢弱，能量不足，主动吸收慢</li><li>胞质粘性增大，离子进入困难。其中以对钾和硅酸的吸收影响最大。</li></ul><h4 id="白天和夜晚硝酸盐还原速度是否相同？为什么">白天和夜晚硝酸盐还原速度是否相同？为什么?</h4><p>硝酸盐在昼夜的还原速度不同，白天还原速度显著较夜晚快，这是因为白天光合作用产生的还原力及磷酸丙糖能促进硝酸盐的还原。</p><h4 id="合理施肥增产的原因是什么">合理施肥增产的原因是什么</h4><p>合理施肥增产的实质在于改善光合性能（增大光合面积，提高光合能力，延长光合时间，有利光合产量分配利用等），通过光合过程形成更多的有机物获得高产。</p><h4 id="根外施肥有哪些优点">根外施肥有哪些优点?</h4><ul><li>作物在生育后期根部吸肥能力衰退时或营养临界期时，可根外施肥补充营养 。</li><li>某些肥料易被土壤固定而根外施肥无此毛病，且用量少</li><li>补充植物缺乏的微量元素，用量省、见效快。</li></ul><h2 id="植物的光合作用">植物的光合作用</h2><h3 id="名词解释-3">名词解释</h3><p><strong>光合色素</strong>：指植物体内含有的具有吸收光能并将其用于光合作用的色素，包括叶绿素、类胡萝卜素、藻胆素等。</p><p><strong>原初反应</strong>：包括光能的吸收、传递以及光能向电能的转变，即由光所引起的氧化还原过程。</p><p><strong>红降现象</strong>：当光波大于685nm时，虽然仍被叶绿素大量吸收，但量子效率急剧下降，这种现象被称为红降现象。</p><p><strong>爱默生效应</strong>：如果在长波红光（大于685nm）照射时，再加上波长较短的红光（650nm），则量子产额大增，比分别单独用两种波长的光照射时的总和还要高。</p><p><strong>光合链</strong>：即光合作用中的电子传递。它包括质体醌、细胞色素、质体蓝素、铁氧还蛋白等许多电子传递体，当然还包括光系统Ⅰ和光系统Ⅱ的作用中心。其作用是水的光氧化所产生的电子依次传递，最后传递给NADP<sup>+</sup>。光合链也称Z链。</p><p><strong>光合作用单位</strong>：结合在类囊体膜上，能进行光合作用的最小结构单位。</p><p><strong>作用中心色素</strong>：指具有光化学活性的少数特殊状态的叶绿素a分子。</p><p><strong>聚光色素</strong>：指没有光化学活性，只能吸收光能并将其传递给作用中心色素的色素分子。聚光色素又叫天线色素。</p><p><strong>光能利用率</strong>：单位面积上的植物光合作用所累积的有机物所含的能量，占照射在相同面积地面上的日光能量的百分比。</p><p><strong>光合磷酸化</strong>：叶绿体（或载色体）在光下把无机磷和ADP转化为ATP，并形成高能磷酸键的过程。</p><p><strong>光呼吸</strong>：植物的绿色细胞在光照下吸收氧气，放出CO<sub>2</sub>的过程。光呼吸的主要代谢途径就是乙醇酸的氧化，乙醇酸来源于RuBP的氧化。光呼吸之所以需要光就是因为RuBP的再生需要光。</p><p><strong>光补偿点</strong>：同一叶子在同一时间内，光合过程中吸收的CO<sub>2</sub>和呼吸过程中放出的CO<sub>2</sub>等量时的光照强度。</p><p><strong>CO<sub>2</sub>补偿点</strong>：当光合吸收的CO<sub>2</sub>量与呼吸释放的CO<sub>2</sub>量相等时，外界的CO<sub>2</sub>浓度。</p><p><strong>光饱和点</strong>：增加光照强度，光合速率不再增加时的光照强度。</p><h3 id="问答题-3">问答题</h3><h4 id="植物的叶片为什么是绿色的？秋天树叶为什么会呈现黄色或红色？">植物的叶片为什么是绿色的？秋天树叶为什么会呈现黄色或红色？</h4><p>光合色素主要吸收红光和蓝紫光，对绿光吸收很少，所以植物的时片呈绿色。</p><p>秋天树叶变黄是由于低温抑制了叶绿素的生物合成，已形成的叶绿素也被分解破坏，而类胡萝卜素比较稳定，所以叶片呈现黄色。</p><p>至于红叶，是因为秋天降温，体内积累较多的糖分以适应寒冷，体内可溶性糖多了，就形成较多的花色素，叶子就呈红色。</p><h4 id="提高植物光能利用率的途径和措施有哪些？">提高植物光能利用率的途径和措施有哪些？</h4><ul><li>增加光合面积：①合理密植；②改善株型。</li><li>延长光合时间：①提高复种指数；②延长生育期 ③补充人工光照。</li><li>提高光合速率：①增加田间CO<sub>2</sub> 浓度；②降低光呼吸。</li></ul><h4 id="光合作用的全过程大致分为哪三大步骤？">光合作用的全过程大致分为哪三大步骤？</h4><ul><li>光能的吸收传递和转变为电能过程。</li><li>电能转变为活跃的化学能过程。</li><li>活跃的化学能转变为稳定的化学能过程。</li></ul><h4 id="C-sub-3-sub-途径是谁发现的？分哪几个阶段？每个阶段的作用是什么？">C<sub>3</sub>途径是谁发现的？分哪几个阶段？每个阶段的作用是什么？</h4><p>C<sub>3</sub>途径是卡尔文（Calvin）等人发现的。可分为三个阶段：</p><ul><li>羧化阶段，CO<sub>2</sub>被固定，生成3-磷酸甘油酸，为最初产物；</li><li>还原阶段：利用同化力（NADPH、ATP）将3-磷酸甘油酸还原成3-磷酸甘油醛——光合作用中的第一个三碳糖；</li><li>更新阶段，光合碳循环中形成的3-磷酸甘油醛，经过一系列的转变，再重新形成RuBP的过程。</li></ul><h4 id="C-sub-3-sub-途径的调节方式有哪几个方面？">C<sub>3</sub>途径的调节方式有哪几个方面？</h4><ol><li>酶活化调节：通过改变叶的内部环境，间接地影响酶的活性。如间质中pH的升高，Mg<sup>2+</sup>浓度升高，可激活RuBPCase和Ru5P激酶。</li><li>质量作用的调节，代谢物的浓度可以影响反应的方向和速率。</li><li>转运作用的调节，叶绿体内的光合最初产物——磷酸丙糖，从叶绿体运到细胞质的数量，受细胞质里的Pi数量所控制。Pi充足，进入叶绿体内多，就有利于叶绿体内磷酸丙糖的输出，光合速率就会加快。</li></ol><h4 id="如何解释C-sub-4-sub-植物比C-sub-3-sub-植物的光呼吸低？">如何解释C<sub>4</sub>植物比C<sub>3</sub>植物的光呼吸低？</h4><p>C<sub>4</sub>植物PEP羧化酶对CO<sub>2</sub>亲和力高，固定CO<sub>2</sub>的能力强，在叶肉细胞形成C<sub>4</sub>二羧酸之后，再转运到维管束鞘细胞，脱羧后放出CO<sub>2</sub>，就起到了CO<sub>2</sub> 泵的作用，增加了CO<sub>2</sub>浓度，提高了RuBP羧化酶的活性，有利于CO<sub>2</sub> 的固定和还原，不利于乙醇酸形成，不利于光呼吸进行，所以C<sub>4</sub>植物光呼吸测定值很低。</p><p>而C<sub>3</sub>植物，在叶肉细胞内固定CO<sub>2</sub>，叶肉细胞的CO<sub>2</sub>/O<sub>2</sub>的比值较低，此时，RuBP加氧酶活性增强，有利于光呼吸的进行，而且C<sub>3</sub>植物中RuBP羧化酶对CO<sub>2</sub>亲和力低，光呼吸释放的CO<sub>2</sub>，不易被重新固定。</p><h4 id="如何评价光呼吸的生理功能？">如何评价光呼吸的生理功能？</h4><p>光呼吸是具有一定的生理功能的，也有害处：</p><ul><li>有害的方面：减少了光合产物的形成和累积，不仅不能贮备能量，还要消耗大量能量。</li><li>有益之处：<ul><li>消除了乙醇酸的累积所造成的毒害。</li><li>此过程可以作为丙糖和氨基酸的补充途径。</li><li>防止高光强对叶绿体的破坏，消除了过剩的同化力，保护了光合作用正常进行。</li><li>消耗了O<sub>2</sub>之后，降低了O<sub>2</sub>/CO<sub>2</sub>之比，可提高RuBP羧化酶的活性，有利于碳素同化作用的进行。</li></ul></li></ul><h4 id="简述CAM植物同化CO-sub-2-sub-的特点。">简述CAM植物同化CO<sub>2</sub>的特点。</h4><p>这类植物晚上气孔开放，吸进CO<sub>2</sub>，在PEP羧化酶作用下与PEP结合形成苹果酸累积于液泡中。</p><p>白天气孔关闭，液泡中的苹果酸便运到细胞质，放出CO<sub>2</sub>参与卡尔文循环形成淀粉等。</p><h4 id="作物为什么会出现“午休”现象？">作物为什么会出现“午休”现象？</h4><ul><li>水分在中午供给不上，气孔关闭；</li><li>CO<sub>2</sub>供应不足；</li><li>光合产物淀粉等来不及分解运走，累积在叶肉细胞中，阻碍细胞内CO<sub>2</sub>的运输；</li><li>生理钟调控。</li></ul><h2 id="植物的呼吸作用">植物的呼吸作用</h2><h3 id="名词解释-4">名词解释</h3><p><strong>末端氧化酶</strong>：是指处于生物氧化作用一系列反应的最末端，将底物脱下的氢或电子传递给氧，并形成H<sub>2</sub>O或H<sub>2</sub>O<sub>2</sub>的氧化酶类。</p><p><strong>抗氰呼吸</strong>：某些植物组织对氰化物不敏感的那部分呼吸。即在有氰化物存在的条件下仍有一定的呼吸作用。</p><p><strong>呼吸商</strong>：又称呼吸系数，简称RQ，是指在一定时间内，植物组织释放CO<sub>2</sub>的摩尔数与吸收氧的摩尔数之比。</p><p><strong>呼吸速率</strong>：以单位鲜重、干重或单位面积在单位时间内所放出的CO<sub>2</sub>的重量（或体积）或所吸收O<sub>2</sub>的重量（或体积）来表示。</p><p><strong>糖酵解</strong>：是指在细胞质内所发生的、由葡萄糖分解为丙酮酸的过程。</p><p><strong>三羧酸循环</strong>：丙酮酸在有氧条件下，通过一个包括三羧酸和二羧酸的循环而逐步氧化分解生成CO<sub>2</sub>的过程。又称为柠檬酸环或Krebs环，简称TCA循环。</p><p><strong>戊糖磷酸途径</strong>：简称PPP或HMP。是指在细胞质内进行的一种葡萄糖直接氧化降解的酶促反应过程。</p><p><strong>呼吸链</strong>：呼吸代谢中间产物随电子和质子，沿着一系列有顺序的电子传递体组成的电子传递途径，传递到分子氧的总轨道。</p><p><strong>氧化磷酸化</strong>：是指呼吸链上的氧化过程，伴随着ADP被磷酸化为ATP的作用。</p><h3 id="问答题-4">问答题</h3><h4 id="呼吸作用多条路线论点的内容和意义如何？">呼吸作用多条路线论点的内容和意义如何？</h4><p>植物呼吸代谢多条路线论点是汤佩松先生提出来的，其内容是是：</p><ul><li>呼吸化学途径多样性（EMP、PPP、TCA等）；</li><li>呼吸链电子传递系统的多样性（电子传递主路，几条支路，如抗氰支路）；</li><li>末端氧化酶系统的多样性（细胞色素氧化酶，酚氧化酶，抗坏血酸氧化酶，乙醇酸氧化酶和交替氧化酶）。</li></ul><p>这些多样性，是植物在长期进化过程中对不断变化的外界环境的一种适应性表现，其要点是呼吸代谢（对生理功能）的控制和被控制（酶活性）过程。而且认为该过程受到生长发育和不同环境条件的影响，这个论点，为呼吸代谢研究指出了努力方向。</p><h4 id="戊糖磷酸途径在植物呼吸代谢中具有什么生理意义">戊糖磷酸途径在植物呼吸代谢中具有什么生理意义</h4><p>戊糖磷酸途径中形成的NADPH是细胞内必需NADPH才能进行生物合成反应的主要来源，如脂肪合成。其中间产物核糖和磷酸又是合成核苷酸的原料，植物感病时戊糖磷酸途径所占比例上升，因此，戊糖磷酸途径在植物呼吸代谢中占有特殊的地位。</p><h4 id="呼吸作用糖的分解代谢途径有几种？在细胞的什么部位进行？">呼吸作用糖的分解代谢途径有几种？在细胞的什么部位进行？</h4><p>有EMP、TCA和PPP三种。EMP和PPP在细胞质中进行的。TCA是在线粒体中进行的。</p><h4 id="什么叫末端氧化酶？主要有哪几种？">什么叫末端氧化酶？主要有哪几种？</h4><p>处于生物氧化作用一系列反应的最末端，将底物脱下的氢或电子传递给氧，并形成H<sub>2</sub>O或凡H<sub>2</sub>O<sub>2</sub>的氧化酶都称为末端氧化酶。如：细胞色素氧化酶、交替氧化酶（抗氰氧化酶）、酚氧化酶、抗坏血酸氧化酶、黄素氧化酶等，也有把过氧化氢物和过氧化物酶列入其中。</p><h4 id="抗氰呼吸有何特点？">抗氰呼吸有何特点？</h4><p>已知抗氰呼吸电子传递的途径不通过细胞色素系统，而是由泛醌传递给一个受体（X），再由X直接传递给氧，这样就越过了磷酸化部位Ⅱ、Ⅲ，对氰化物不敏，且P/O比为1或＜1。因此，在进行抗氰呼吸时有大量热能释放。</p><p>抗氰呼吸的强弱除了与植物种类有关外，也与发育状况、外界条件有关。且抗氰呼吸在正常途径受阻时得到加强，所以抗氰呼吸是一种与正常呼吸途径交替进行的适应性过程。</p><h4 id="粮食贮藏时为什么要降低呼吸速率？">粮食贮藏时为什么要降低呼吸速率？</h4><ul><li>因为呼吸速率高会大量消耗有机物；</li><li>呼吸放出的水分又会使粮堆湿度增大，粮食“出汗”，呼吸加强；</li><li>呼吸放出的热量又使粮温增高，反过来又促进呼吸增强，同时高温高湿微生物迅速繁殖，最后导致粮食变质。</li></ul><h4 id="长时间无氧呼吸植物为什么会死亡？">长时间无氧呼吸植物为什么会死亡？</h4><ul><li>无氧呼吸产生酒精，酒精使细胞质的蛋白质变性。</li><li>氧化1mol葡萄糖产生的能量少。要维持正常的生理需要就要消耗更多的有机物，这样体内养分耗损过多。</li><li>没有丙酮酸的有氧分解过程，缺少合成其他物质的原料。</li></ul><h4 id="植物组织受到损伤时呼吸速率为何加快？">植物组织受到损伤时呼吸速率为何加快？</h4><ul><li>一是原来氧化酶与其底物在结构上是隔开的，损伤使原来的间隔破坏，酚类化合物迅速被氧化。</li><li>二是损伤使某些细胞转变为分生状态，形成愈伤组织以修复伤处，这些生长旺盛的细胞比原来的休眠或成熟组织的呼吸速率要快得多。</li></ul><h4 id="低温导致烂秧的原因是什么？">低温导致烂秧的原因是什么？</h4><p>是因为低温破坏了线粒体的结构，呼吸“空转”，缺乏能量引起代谢紊乱的缘故。</p><h4 id="早稻浸种催芽时用温水淋种和翻堆的目的是什么？">早稻浸种催芽时用温水淋种和翻堆的目的是什么？</h4><p>目的就是控制温度和通气，使呼吸作用顺利进行。否则谷堆中部温度过高就会引起“烧芽”现象。</p><h2 id="植物生长物质">植物生长物质</h2><h3 id="名词解释-5">名词解释</h3><p><strong>植物生长物质</strong>：是一些调节植物生长发育的物质。包括植物激素和植物生长调节剂。</p><p><strong>植物激素</strong>：指一些在植物体内合成，并从产生之处运送到别处，对生长发育起显著作用的微量有机物。</p><p><strong>植物生长调节剂</strong>：指一些具有植物激素活性的人工合成的物质。</p><p><strong>极性运输</strong>：只能从植物形态学的上端向下端运输，而不能倒过来运输。</p><p><strong>三重反应</strong>：乙烯可抑制黄化豌豆幼苗上胚轴的伸长生长；促进其加粗生长；地上部分失去负向地性生长（偏上生长）。</p><p><strong>生长抑制剂</strong>：这类物质主要作用于顶端分生组织区，干扰顶端细胞分裂，引起茎伸长的停顿和顶端优势破坏。其作用不能被赤霉素所恢复。</p><p><strong>生长延缓剂</strong>：抑制节间伸长而不破坏顶芽的化合物。其作用可被GA所恢复。</p><h3 id="问答题-5">问答题</h3><h4 id="乙烯促进果实成熟的原因何在？">乙烯促进果实成熟的原因何在？</h4><p>乙烯能增加细胞膜的透性，促使呼吸作用加强某些肉质果实出现呼吸骤变，因而引起果实内的各种有机物质发生急剧变化，使果实甜度增加，酸味减少，涩味消失，香味产主，色泽变艳，果实由硬变软，达到完全成熟。</p><h4 id="生长素与赤霉素之生理作用方面的相互关系如何？">生长素与赤霉素之生理作用方面的相互关系如何？</h4><p>生长素与赤霉素之间存在相辅相成作用。</p><ul><li>GA有抑制IAA氧化酶活性的作用防止IAA的氧化；</li><li>GA能增加蛋白酶的活性，促进蛋白质分解，色氨酸数量增多，有利于IAA的生物合成</li><li>GA促进生长素由束缚型转变为自由型。</li></ul><h4 id="赤霉素在生产上的应用主要有哪些方面？">赤霉素在生产上的应用主要有哪些方面？</h4><ul><li>促进麦芽糖化，GA诱导α-淀粉酶的形成这一发现己被应用到啤酒生产中。</li><li>促进营养生长，如在水稻“三系”的制种过程中，切花生产上等都有应用</li><li>防止脱落，促进单性结实</li><li>打破休眠。</li></ul><h4 id="人们认为植物的休眠与生长是由哪两种激素调节的？如何调节？">人们认为植物的休眠与生长是由哪两种激素调节的？如何调节？</h4><p>植物的生长和休眠是由赤霉素和脱落酸两种激素调节的。它们的合成前体都是甲瓦龙酸，甲瓦龙酸在长日照条件下形成赤霉素，短日照条件下形成脱落酸，因此，夏季日照长，产生赤霉素促进植物生长；而冬季来临前，日照短，产生脱落酸使芽进入休眠。</p><h4 id="生长抑制剂和生长延缓剂抑制生长的作用方式有何不同？">生长抑制剂和生长延缓剂抑制生长的作用方式有何不同？</h4><p>生长抑制剂是抑制顶端分生组织生长，丧失顶端优势，使植株形态发生很大变化，外施GA不能逆转达种抑制反应</p><p>生长延缓剂是抑制茎部近顶端分生组织的细胞伸长，节间缩短，叶数和节数不变，株型紧凑矮小，生殖器官不受影响或影响不大，外施GA可逆转其抑制效应。</p><h2 id="植物的生长生理">植物的生长生理</h2><h3 id="名词解释-6">名词解释</h3><p><strong>生长</strong>：细胞、器官或有机体的数目、大小与重量的不可逆增加，即发育过程中量的变化称为生长。</p><p><strong>分化</strong>：来自同一分子或遗传上同质的细胞转变为形态上、机能上、化学构成上异质的细胞称为分化。</p><p><strong>发育</strong>：在植物生命周期过程中，植物发生大小、形态、结构、功能上的变化，称为发育，发育包括生长与分化两个方面，即生长与分化贯穿在整个发育过程中。</p><p><strong>种子寿命</strong>：从种子成熟到失去发芽能力的时间。</p><p><strong>种子活力</strong>：种子在田间条件（非理想条件）下萌发的速度、整齐度及幼苗健壮生长的潜在能力，它包括种子萌发成苗和对不良环境的忍受力两个方面。种子活力与种子的大小、成熟度有关，也与贮藏条件和贮藏时间有关。</p><p><strong>温周期现象</strong>：植物对昼夜温度周期性变化的反应。</p><p><strong>顶端优势</strong>：植物顶端在生长上占有优势的现象。</p><p><strong>细胞全能性</strong>：指植物体的每个细胞携带一个完整基因组，并具有发育成完整植株的潜在能力。</p><p><strong>光形态建成</strong>：光控制植物生长、发育和分化的过程。</p><p><strong>光敏色素</strong>：植物体内存在的一种吸收红光-远红光可逆转换的光受体（色素蛋白质）。</p><p><strong>生理钟</strong>：又称生物钟。指植物内生节奏调节的近似24小时的周期性变化节律。</p><p><strong>生长大周期</strong>：植物在不同生育时期的生长速率表现出慢-快-慢的变化规律，呈现“S”型的生长曲线，这个过程称生长大周期。</p><p><strong>向性运动</strong>：指外界对植物单向刺激所引起的定向生长运动。</p><p><strong>感性运动</strong>：指外界对植物不定向刺激所引起的运动。</p><h3 id="问答题-6">问答题</h3><h4 id="种子萌发时，有机物质发生哪些生理生化变化？">种子萌发时，有机物质发生哪些生理生化变化？</h4><ul><li>淀粉的转化：淀粉在淀粉酶、麦芽糖酶或淀粉磷酸化酶作用下转变成葡萄糖（或磷酸葡萄糖）。</li><li>脂肪的转化：脂肪在脂肪酶作用下转变为甘油和脂肪酸，再进一步转化为糖。</li><li>蛋白质的转化：胚乳或子叶内贮藏的蛋白质在蛋白酶和肽酶的催化下，分解为氨基酸。</li></ul><h4 id="水稻种子萌发时，表现出“干长根，湿长芽”现象的原因何在？">水稻种子萌发时，表现出“干长根，湿长芽”现象的原因何在？</h4><p>“干长根，湿长芽”现象是由于根和胚芽鞘的生长所要求的含氧量不同所致。</p><p>根的生长，既有细胞的伸长和扩大，也包括细胞分裂，而细胞分裂需要有氧呼吸提供能量和重要的中间产物。因而水多、氧不足时，根的生长受到抑制。但是胚芽鞘的生长，主要是细胞的伸长与扩大，在水层中，水分供应充足，故而芽生长较快。</p><p>此外，“干根湿芽”还与生长素含量有关。在水少供氧充足时，IAA氧化酶活性升高，使IAA含量降低，以至胚芽鞘细胞伸长和扩大受抑制，根生长受影响小。而在有水层的条件下，氧气少，IAA氧化酶活性降低，IAA含量升高，从而促进胚芽鞘细胞的伸长，并且IAA运输到根部，因根对IAA比较敏感，使根的生长受到抑制。</p><p>还有人认为，胚芽鞘呼吸酶以细胞色素氧化酶为主，与O<sub>2</sub>亲和力高，幼根则以抗氰氧化酶为主，与O<sub>2</sub>亲和力较低，因而在水多时，胚芽鞘生长快于幼根。</p><h4 id="高山上的树木为什么比平地生长的矮小？">高山上的树木为什么比平地生长的矮小？</h4><ul><li>高山上水分较少，土壤也较瘠薄，肥力较低，气温也较低，且风力较大，这些因素都不利于树木纵向生长；</li><li>高山顶上因云雾较少，空气中灰尘较少，所以光照较强，紫外光也较多，由于强光特别是紫外光抑制植物生长，因而高山上的树木生长缓慢而矮小。</li></ul><h4 id="试述光对植物生长的影响。">试述光对植物生长的影响。</h4><p>光对植物生长的影响是多方面的，主要有下列几方面：</p><ul><li>光是光合作用的能源和启动者，为植物的生长提供有机营养和能源；</li><li>光控制植物的形态建成，即叶的伸展扩大，茎的高矮，分枝的多少、长度、根冠比等都与光照强弱和光质有关；</li><li>日照时数影响植物生长与休眠。绝大多数多年生植物都是长日照条件促进生长、短日照条件诱导休眠；</li><li>光影响种子萌发，需光种子的萌发受光照的促进，而需暗种子的萌发则受光抑制，</li><li>此外，一些豆科植物叶片的昼开夜合，气孔运动等都受光的调节。</li></ul><h4 id="简述根和地上部分生长的相关性如何？">简述根和地上部分生长的相关性如何？</h4><p>根和地上部分的关系是既互相促进、互相依赖，又互相矛盾、互相制约的。</p><p>根系生长需要地上部供给光合产物、生长素和维生素，而地上部分生长又需根部吸收的水分、矿质，根部合成的多种氨基酸和细胞分裂素等。这就是两者相互依存、互相促进的一面，所以树大根深，根深叶茂。</p><p>但两者又有相互矛盾，相互制约的一面，例如过分旺盛的地上部分的生长会抑制地下部分的生长，只有两者的比例比较适当，才能获得高产。</p><h4 id="常言道：“根深叶茂”是何道理？">常言道：“根深叶茂”是何道理？</h4><p>植物“根深叶茂”原因如下：</p><ul><li>地上部分生长需要的水分和矿物质主要是由根系供给的，另外根系还能合成多种氨基酸、细胞分裂素、生物碱等供应地上部分，因此，根系发育得好，对地上部分生长也有利。</li><li>植物地上部分对根的生长也有促进作用，叶片中制造的糖类、维生素等供应给根以利根的生长。因此，地上部分长不好，根系也长不好。</li></ul><h4 id="一般认为光敏色素分布在细胞什么地方？Pr型和Pfr型的光学特性有何不同？">一般认为光敏色素分布在细胞什么地方？Pr型和Pfr型的光学特性有何不同？</h4><p>一般认为光敏色素与膜系统结合，分布在质膜、线粒体膜、核膜、叶绿体膜和内质网膜上。</p><p>Pr型的吸收高峰在660nm，Pfr型的吸收高峰在730nm，两类型光敏色素在不同光谱作用下可互相转换，当Pr型吸收660nm红光后就转变为Pfr，而Pfr吸收730nm远红光后会转为Pr 型。</p><h4 id="关于光敏色素作用机理的基因调节假说内容如何？">关于光敏色素作用机理的基因调节假说内容如何？</h4><p>在接受红光照射后，Pfr型经过一系列过程，将信号转移到基因，活化或抑制某些特定基因，使转录出单股mRNA的速度发生改变，mRNA翻译成特殊蛋白质（酶），最后表现出形态建成。研究证明，多种酶的活性通过光敏色素受光调节，如PAL、NR等。蛋白质磷酸化受Ca<sup>2+</sup>-CaM调节，它可能是连接光敏色素的光活化和基因表达的中间步骤。</p><h4 id="为什么横放的茎会背地生长，而横放的根却向地生长。">为什么横放的茎会背地生长，而横放的根却向地生长。</h4><p>根和茎横放后，其体内的生长素由于重力的作用，造成背地面少于向地面，由于根较茎对生长的敏感性强，因此，向地面的茎由于生长素浓度高生长快，因此向上弯曲，而向地面的根由于生长素浓度高而生长受抑制，因此根向下弯曲生长。</p><h2 id="植物的生殖生理">植物的生殖生理</h2><h3 id="名词解释-7">名词解释</h3><p><strong>春化作用</strong>：低温促进植物开花的作用。</p><p><strong>去春化作用</strong>：已春化的植物或萌动种子，在春化过程结束之前，如置于高温条件下，春化效果即行消失，这种现象叫去春化作用。</p><p><strong>光周期与光周期现象</strong>：在一天中，白天和黑夜的相对长度叫光周期。植物对光周期的反应叫光周期现象。</p><p><strong>临界日长</strong>：诱导短日植物开花所需的最长日照时数，或诱导长日植物开花所需的最短日照时数。</p><p><strong>长日植物</strong>：日长必须长于临界日长才能开花的植物。</p><p><strong>短日植物</strong>：日长必须小于临界日长才能开花的植物。</p><p><strong>日中性植物</strong>：在任何日照长度下都能开花的植物。</p><p><strong>花粉识别蛋白</strong>：能够感受柱头上感受蛋白的刺激而决定花粉是否萌发，存在于花粉外壁上的一种膜蛋白。识别蛋白是一种糖蛋白。</p><h3 id="问答题-7">问答题</h3><h4 id="说明光周期现象与植物地理起源和分布的关系，以及在生产上的应用？">说明光周期现象与植物地理起源和分布的关系，以及在生产上的应用？</h4><p>植物光周期现象的形成，是长期适应该地区自然光周期的结果。纬度不同，不同光周期类型的植物分布亦不同。</p><ul><li>在低纬度地区，因为没有长日照条件，所以只有短日植物。</li><li>在高纬度地区，适于长日植物生长，所以这里分布着长日植物。</li><li>在中纬度地区（温度），长日照与短日照条件都有，因此长日植物与短日植物均有分布。</li></ul><p>所有这些都与原产地生长季节的日照条件相适应。</p><p>光周期现象可应用于：</p><ul><li>正确地引种栽培<ul><li>了解被引进品种对光周期的反应类型；</li><li>了解原产地与引种地日照条件的差异；</li><li>考虑被引进作物收获的是营养体，还是收获果实或种子。</li></ul></li><li>在育种上应用<ul><li>选育对光周期不敏感的植物；</li><li>杂交时控制光照时间，克服花期不遇。</li></ul></li><li>在蔬菜、花卉栽培上应用<ul><li>栽种叶菜、根菜类，不满足其对光周期的要求则抑制开花；</li><li>收获的是花菜、果菜类，尽量满足对日照的要求，促进开花；</li><li>为使菊花（短日植物）提前开花，可进行遮光处理。</li></ul></li></ul><h4 id="春化作用在农业生产实践中有何应用价值">春化作用在农业生产实践中有何应用价值 ?</h4><ol><li>人工春化处理<ul><li>用于春天补种冬小麦；</li><li>在育种工作中利用春化处理，可以在一年中培育 3~4 代冬性作物，加速育种过程；</li><li>为了避免春季“倒春寒”对春小麦的低温伤害，可对种子进行人工春化处理后适当晚播，使之在缩短生育期的情况下正常成熟。</li></ul></li><li>调种引种，引种时应注意原产地所处的纬度，了解品种对低温的要求。若将北方的品种引种到南方，就可能因当地温度较高而不能顺利通过春化阶段，使植物只进行营养生长而不开花结实，造成不可弥补的损失。</li><li>控制花期<ul><li>如低温处理可以使秋播的一、二年生草本花卉改为春播，当年开花；</li><li>对以营养器官为收获对象的植物，如洋葱、当归等，可用解除春化的方法，抑制开花，延长营养生长，从而增加产量和提高品质。</li></ul></li></ol><h4 id="肉质果实成熟时发生了哪些生理生化变化？">肉质果实成熟时发生了哪些生理生化变化？</h4><ol><li>果实变甜。 果实成熟后期，淀粉可以转变成为可溶性糖，使果实变甜。</li><li>酸味减少。未成熟的果实中积累较多的有机酸。在果实成熟过程中，有机酸含量下降，这是因为：<ul><li>有的转变为糖；</li><li>有的作为呼吸底物氧化为CO<sub>2</sub>和H<sub>2</sub>O；</li><li>有些则被Ca<sup>2+</sup>、K<sup>+</sup>等所中和。</li></ul></li><li>涩味消失。果实成熟时，单宁可被过氧化物酶氧化成无涩味的过氧化物，或单宁凝结成不溶于水的胶状物质，涩味消失。</li><li>香味产生。主要是一些芳香族和脂肪族的酯，还有一些特殊的醛类，如桔子中柠檬醛可以产生香味。</li><li>由硬变软。这与果肉细胞壁中层的果胶质水解为可溶性的果酸有关。</li><li>色泽变艳。果皮由绿色变为黄色，是由干果皮中叶绿素逐渐破坏而失绿，类胡萝素仍存在，呈现黄色，或因花色素形成而呈现红色。</li></ol><h4 id="到了深秋，树木的芽为什么会进入休眠状态？">到了深秋，树木的芽为什么会进入休眠状态？</h4><p>到了秋天导致树木形成休眠芽进入休眠状态的原因，主要是由于日照时数的缩短所引起的。</p><p>秋天的短日照作为进入休眠的信号，这一信号由叶片中的光敏色素感受后，便促进甲羟戊酸合成ABA（脱落酸），并转移到生长点，抑制mRNA和tRNA的生物合成因而也就抑制了蛋白质与酶的生物合成，进而抑制芽的生长，使芽进入休眠状态。</p><h4 id="呼吸跃变与果实贮藏的关系如何？在生产上有何指导意义？">呼吸跃变与果实贮藏的关系如何？在生产上有何指导意义？</h4><p>果实呼吸跃变是果实成熟的一种特征，大多数果实成熟是与呼吸的跃变相伴随的，呼吸跃变结束即意味着果实已达成熟。</p><p>在果实贮藏或运输中，可以通过降低温度，推迟呼吸跃变发生的时间，另一是增加周围CO<sub>2</sub>的浓度，降低呼吸跃变发生的强度，这样就可达到延迟成熟，保持鲜果，防止腐烂的目的。</p><h4 id="论述种子休眠的原因及其解除休眠的措施">论述种子休眠的原因及其解除休眠的措施</h4><p>种子休眠的原因：</p><ul><li>种皮（果皮）的限制；</li><li>种子未完成后熟；</li><li>抑制物质的作用</li></ul><p>解除休眠的措施有：机械破损，温度处理，化学处理，清水冲洗，层积处理</p><h1>自测</h1><h2 id="植物的水分代谢-2">植物的水分代谢</h2><h3 id="名词解释-8">名词解释</h3><p><strong>水势</strong>($\psi_{\mathrm{w}}$)：<u>每偏摩尔体积水的化学势差。</u>符号：$\psi_{\mathrm{w}}$。</p><p><strong>渗透势</strong>($\psi_\pi$)：<u>由于溶液中溶质颗粒的存在而引起的水势降低值。用负值表示。</u>亦称溶质势（$\psi_\pi$）。</p><p><strong>衬质势</strong>($\psi_m$)：<u>细胞胶体物质亲水性和毛细管对自由水束缚而引起的水势降低值，以负值表示。</u>符号$\psi_m$ 。</p><p><strong>蒸腾作用</strong>：<u>水分以气体状态通过植物体表面从体内散失到体外的现象。</u></p><p><strong>根压</strong>：<u>植物根部的生理活动使液流从根部上升的压力。</u></p><p><strong>蒸腾拉力</strong>：<u>由于蒸腾作用产主的一系列水势梯度使导管中水分上升的力量。</u></p><p><strong>蒸腾速率</strong>：<u>又称蒸腾强度，指植物在单位时间内，单位面积通过蒸腾作用而散失的水分量。</u>（g/dm<sup>2</sup>·h）</p><p><strong>内聚力学说</strong>：<u>又称蒸腾流-内聚力-张力学说。即以水分的内聚力解释水分沿导管上升原因的学说。</u></p><h3 id="问答题-8">问答题</h3><h4 id="简述水分的植物生理生态作用-2">简述水分的植物生理生态作用</h4><ul><li><u>水分能便植物保持固有的姿态</u></li><li><u>水分是重要代谢过程的反应物质和产物</u></li><li><u>水是细胞原生质的主要组成成分</u></li><li><u>细胞分裂及伸长都需要水分</u></li><li><u>水分是植物对物质吸收和运输及生化反应的一种良好溶剂</u></li><li><u>可以通过水的理化特性以调节植物周围的大气湿度、温度等。对维持植物体温稳定和降低体温也有重要作用</u></li></ul><h4 id="利用质壁分离现象可以解决哪些问题-2">利用质壁分离现象可以解决哪些问题</h4><ul><li><u>说明原生质层是半透膜。</u></li><li><u>判断细胞死活。只有活细胞的原生质层才是半透膜，才有质壁分离现象，如细胞死亡，则不能产主质壁分离现象。</u></li><li><u>测定细胞液的渗透势</u></li></ul><h4 id="蒸腾作用有什么生理意义-2">蒸腾作用有什么生理意义</h4><ul><li><u>是植物对水分吸收和运输的主要动力</u></li><li><u>促进植物对矿物质和有机物的吸收及其在植物体内的转运</u></li><li><u>能够降低叶片的温度，以免灼伤</u></li></ul><h4 id="气孔开闭机理的假说有哪些？请简述之-2">气孔开闭机理的假说有哪些？请简述之</h4><ol><li><u>淀粉–糖变化学说：在光照下保卫细胞进行光合作用合成可溶性糖。另外由于光合作用消耗CO<sub>2</sub>，使保卫细胞pH值升高，淀粉磷酸化酶水解细胞中淀粉形成可溶性糖，细胞水势下降，当保卫细胞水势低于周围的细胞水势时，便吸水迫使气孔张开，在暗中光合作用停止，情况与上述相反，气孔关闭。</u></li><li><u>无机离子吸收学说：在光照下，保卫细胞质膜上具有光活化H<sup>+</sup>泵ATP酶，分解光合磷酸化产生的ATP并将H<sup>+</sup>分泌到细胞壁，同时将外面的K<sup>+</sup>吸收到细胞中来，Cl<sup>-</sup>也伴随着K<sup>+</sup>进入，以保证保卫细胞的电中性，保卫细胞中积累较多的K<sup>+</sup>和，降低水势，气孔就张开，反之，则气孔关闭。</u></li><li><u>苹果酸生成学说。在光下保卫细胞内的CO<sub>2</sub>被利用，pH值就上升，剩余的CO<sub>2</sub>就转变成重碳酸盐（HCO<sub>3</sub><sup>-</sup>），淀粉通过糖酵解作用产生的磷酸烯醇式丙酮酸在PEP羧化酶作用下与HCO<sub>3</sub><sup>-</sup>作用形成草酰乙酸，然后还原成苹果酸，可作为渗透物降低水势，气孔张开，反之关闭。</u></li></ol><h2 id="植物的矿质营养-2">植物的矿质营养</h2><h3 id="名词解释-9">名词解释</h3><p><strong>矿质营养</strong>: <u>是指植物对氮和矿质元素的吸收、运输与同化的过程。</u></p><p><strong>灰分元素</strong>：<u>亦称矿质元素，将干燥植物材料燃烧后，剩余一些不能挥发的物质称为灰分元素。</u></p><p><strong>单盐毒害和离子拮抗</strong>：<u>单盐毒害是指溶液中因只有一种金属离子而对植物之毒害作用的现象；在发生单盐毒害的溶液中加入少量其他金属离子，即能减弱或消除这种单盐毒害，离子间的这种作用称为离子拮抗。</u></p><p><strong>平衡溶液</strong>：<u>在含有适当比例的多种盐溶液中，各种离子的毒害作用被消除，植物可以正常生长发育，这种溶液称为平衡溶液。</u></p><p><strong>诱导酶</strong>：<u>又称适应酶，指植物体内本来不含有，但在特定外来物质的诱导下可以生成的酶。如硝酸还原酶可为NO<sub>3</sub><sup>-</sup>所诱导。</u></p><p><strong>生物固氮</strong>：<u>某些微生物把空气中游离氮固定转化为含氮化合物的过程。</u></p><h3 id="问答题-9">问答题</h3><h4 id="植物必需的矿质元素要具备哪些条件-2">植物必需的矿质元素要具备哪些条件</h4><ul><li><u>缺乏该元素植物生育发生障碍不能完成生活史。</u></li><li><u>除去该元素则表现专一的缺乏症，这种缺乏症是可以预防和恢复的。</u></li><li><u>该元素在植物营养生理上表现直接的效果而不是间接的。</u></li></ul><h4 id="为什么把氮称为生命元素-2">为什么把氮称为生命元素</h4><p><u>氮在植物生命活动中占据重要地位，它是植物体内许多重要化合物的成分，如核酸（DNA、RNA）、蛋白质（包括酶）、磷脂、叶绿素。光敏色素、维生素B、IAA、CTK、生物碱等都含有氮。</u></p><p><u>同时氮也是参与物质代谢和能量代谢的ADP、ATP、CoA、CoQ、FAD、FMN、NAD<sup>+</sup>、NADP<sup>+</sup>、铁卟琳等物质的组分。</u></p><p><u>上述物质有些是生物膜、细胞质、细胞核的结构物质，有些是调节生命活动的生理活性物质。</u></p><p><u>因此，氮是建造植物体的结构物质，也是植物体进行能量代谢、物质代谢及各种生理活动所必需的起重要作用的生命元素。</u></p><h4 id="植物细胞吸收矿质元素的方式有哪些-2">植物细胞吸收矿质元素的方式有哪些</h4><ul><li><u>被动吸收：包括简单扩散、杜南平衡。不消耗代谢能。</u></li><li><u>主动吸收：有载体和质子泵参与，需消耗代谢能。</u></li><li><u>胞饮作用：是一种非选择性吸收方式。</u></li></ul><h4 id="为什么土壤温度过低，植物吸收矿质元素的速率下降-2">为什么土壤温度过低，植物吸收矿质元素的速率下降</h4><ul><li><u>因为温度低时代谢弱，能量不足，主动吸收慢</u></li><li><u>胞质粘性增大，离子进入困难。其中以对钾和硅酸的吸收影响最大。</u></li></ul><h4 id="白天和夜晚硝酸盐还原速度是否相同？为什么-2">白天和夜晚硝酸盐还原速度是否相同？为什么?</h4><p><u>硝酸盐在昼夜的还原速度不同，白天还原速度显著较夜晚快，这是因为白天光合作用产生的还原力及磷酸丙糖能促进硝酸盐的还原。</u></p><h4 id="合理施肥增产的原因是什么-2">合理施肥增产的原因是什么</h4><p><u>合理施肥增产的实质在于改善光合性能（增大光合面积，提高光合能力，延长光合时间，有利光合产量分配利用等），通过光合过程形成更多的有机物获得高产。</u></p><h4 id="根外施肥有哪些优点-2">根外施肥有哪些优点?</h4><ul><li><u>作物在生育后期根部吸肥能力衰退时或营养临界期时，可根外施肥补充营养 。</u></li><li><u>某些肥料易被土壤固定而根外施肥无此毛病，且用量少</u></li><li><u>补充植物缺乏的微量元素，用量省、见效快。</u></li></ul><h2 id="植物的光合作用-2">植物的光合作用</h2><h3 id="名词解释-10">名词解释</h3><p><strong>光合色素</strong>：<u>指植物体内含有的具有吸收光能并将其用于光合作用的色素，包括叶绿素、类胡萝卜素、藻胆素等。</u></p><p><strong>原初反应</strong>：<u>包括光能的吸收、传递以及光能向电能的转变，即由光所引起的氧化还原过程。</u></p><p><strong>红降现象</strong>：<u>当光波大于685nm时，虽然仍被叶绿素大量吸收，但量子效率急剧下降，这种现象被称为红降现象。</u></p><p><strong>爱默生效应</strong>：<u>如果在长波红光（大于685nm）照射时，再加上波长较短的红光（650nm），则量子产额大增，比分别单独用两种波长的光照射时的总和还要高。</u></p><p><strong>光合链</strong>：<u>即光合作用中的电子传递。它包括质体醌、细胞色素、质体蓝素、铁氧还蛋白等许多电子传递体，当然还包括光系统Ⅰ和光系统Ⅱ的作用中心。其作用是水的光氧化所产生的电子依次传递，最后传递给NADP<sup>+</sup>。光合链也称Z链。</u></p><p><strong>光合作用单位</strong>：<u>结合在类囊体膜上，能进行光合作用的最小结构单位。</u></p><p><strong>作用中心色素</strong>：<u>指具有光化学活性的少数特殊状态的叶绿素a分子。</u></p><p><strong>聚光色素</strong>：<u>指没有光化学活性，只能吸收光能并将其传递给作用中心色素的色素分子。聚光色素又叫天线色素。</u></p><p><strong>光能利用率</strong>：<u>单位面积上的植物光合作用所累积的有机物所含的能量，占照射在相同面积地面上的日光能量的百分比。</u></p><p><strong>光合磷酸化</strong>：<u>叶绿体（或载色体）在光下把无机磷和ADP转化为ATP，并形成高能磷酸键的过程。</u></p><p><strong>光呼吸</strong>：<u>植物的绿色细胞在光照下吸收氧气，放出CO<sub>2</sub>的过程。光呼吸的主要代谢途径就是乙醇酸的氧化，乙醇酸来源于RuBP的氧化。光呼吸之所以需要光就是因为RuBP的再生需要光。</u></p><p><strong>光补偿点</strong>：<u>同一叶子在同一时间内，光合过程中吸收的CO<sub>2</sub>和呼吸过程中放出的CO<sub>2</sub>等量时的光照强度。</u></p><p><strong>CO<sub>2</sub>补偿点</strong>：<u>当光合吸收的CO<sub>2</sub>量与呼吸释放的CO<sub>2</sub>量相等时，外界的CO<sub>2</sub>浓度。</u></p><p><strong>光饱和点</strong>：<u>增加光照强度，光合速率不再增加时的光照强度。</u></p><h3 id="问答题-10">问答题</h3><h4 id="植物的叶片为什么是绿色的？秋天树叶为什么会呈现黄色或红色？-2">植物的叶片为什么是绿色的？秋天树叶为什么会呈现黄色或红色？</h4><p><u>光合色素主要吸收红光和蓝紫光，对绿光吸收很少，所以植物的时片呈绿色。</u></p><p><u>秋天树叶变黄是由于低温抑制了叶绿素的生物合成，已形成的叶绿素也被分解破坏，而类胡萝卜素比较稳定，所以叶片呈现黄色。</u></p><p><u>至于红叶，是因为秋天降温，体内积累较多的糖分以适应寒冷，体内可溶性糖多了，就形成较多的花色素，叶子就呈红色。</u></p><h4 id="提高植物光能利用率的途径和措施有哪些？-2">提高植物光能利用率的途径和措施有哪些？</h4><ul><li><u>增加光合面积：①合理密植；②改善株型。</u></li><li><u>延长光合时间：①提高复种指数；②延长生育期 ③补充人工光照。</u></li><li><u>提高光合速率：①增加田间CO<sub>2</sub> 浓度；②降低光呼吸。</u></li></ul><h4 id="光合作用的全过程大致分为哪三大步骤？-2">光合作用的全过程大致分为哪三大步骤？</h4><ul><li><u>光能的吸收传递和转变为电能过程。</u></li><li><u>电能转变为活跃的化学能过程。</u></li><li><u>活跃的化学能转变为稳定的化学能过程。</u></li></ul><h4 id="C-sub-3-sub-途径是谁发现的？分哪几个阶段？每个阶段的作用是什么？-2">C<sub>3</sub>途径是谁发现的？分哪几个阶段？每个阶段的作用是什么？</h4><p><u>C<sub>3</sub>途径是卡尔文（Calvin）等人发现的。可分为三个阶段：</u></p><ul><li><u>羧化阶段，CO<sub>2</sub>被固定，生成3-磷酸甘油酸，为最初产物；</u></li><li><u>还原阶段：利用同化力（NADPH、ATP）将3-磷酸甘油酸还原成3-磷酸甘油醛——光合作用中的第一个三碳糖；</u></li><li><u>更新阶段，光合碳循环中形成的3-磷酸甘油醛，经过一系列的转变，再重新形成RuBP的过程。</u></li></ul><h4 id="C-sub-3-sub-途径的调节方式有哪几个方面？-2">C<sub>3</sub>途径的调节方式有哪几个方面？</h4><ol><li><u>酶活化调节：通过改变叶的内部环境，间接地影响酶的活性。如间质中pH的升高，Mg<sup>2+</sup>浓度升高，可激活RuBPCase和Ru5P激酶。</u></li><li><u>质量作用的调节，代谢物的浓度可以影响反应的方向和速率。</u></li><li><u>转运作用的调节，叶绿体内的光合最初产物——磷酸丙糖，从叶绿体运到细胞质的数量，受细胞质里的Pi数量所控制。Pi充足，进入叶绿体内多，就有利于叶绿体内磷酸丙糖的输出，光合速率就会加快。</u></li></ol><h4 id="如何解释C-sub-4-sub-植物比C-sub-3-sub-植物的光呼吸低？-2">如何解释C<sub>4</sub>植物比C<sub>3</sub>植物的光呼吸低？</h4><p><u>C<sub>4</sub>植物PEP羧化酶对CO<sub>2</sub>亲和力高，固定CO<sub>2</sub>的能力强，在叶肉细胞形成C<sub>4</sub>二羧酸之后，再转运到维管束鞘细胞，脱羧后放出CO<sub>2</sub>，就起到了CO<sub>2</sub> 泵的作用，增加了CO<sub>2</sub>浓度，提高了RuBP羧化酶的活性，有利于CO<sub>2</sub> 的固定和还原，不利于乙醇酸形成，不利于光呼吸进行，所以C<sub>4</sub>植物光呼吸测定值很低。</u></p><p><u>而C<sub>3</sub>植物，在叶肉细胞内固定CO<sub>2</sub>，叶肉细胞的CO<sub>2</sub>/O<sub>2</sub>的比值较低，此时，RuBP加氧酶活性增强，有利于光呼吸的进行，而且C<sub>3</sub>植物中RuBP羧化酶对CO<sub>2</sub>亲和力低，光呼吸释放的CO<sub>2</sub>，不易被重新固定。</u></p><h4 id="如何评价光呼吸的生理功能？-2">如何评价光呼吸的生理功能？</h4><p><u>光呼吸是具有一定的生理功能的，也有害处：</u></p><ul><li><u>有害的方面：减少了光合产物的形成和累积，不仅不能贮备能量，还要消耗大量能量。</u></li><li><u>有益之处：</u><ul><li><u>消除了乙醇酸的累积所造成的毒害。</u></li><li><u>此过程可以作为丙糖和氨基酸的补充途径。</u></li><li><u>防止高光强对叶绿体的破坏，消除了过剩的同化力，保护了光合作用正常进行。</u></li><li><u>消耗了O<sub>2</sub>之后，降低了O<sub>2</sub>/CO<sub>2</sub>之比，可提高RuBP羧化酶的活性，有利于碳素同化作用的进行。</u></li></ul></li></ul><h4 id="简述CAM植物同化CO-sub-2-sub-的特点。-2">简述CAM植物同化CO<sub>2</sub>的特点。</h4><p><u>这类植物晚上气孔开放，吸进CO<sub>2</sub>，在PEP羧化酶作用下与PEP结合形成苹果酸累积于液泡中。</u></p><p><u>白天气孔关闭，液泡中的苹果酸便运到细胞质，放出CO<sub>2</sub>参与卡尔文循环形成淀粉等。</u></p><h4 id="作物为什么会出现“午休”现象？-2">作物为什么会出现“午休”现象？</h4><ul><li><u>水分在中午供给不上，气孔关闭；</u></li><li><u>CO<sub>2</sub>供应不足；</u></li><li><u>光合产物淀粉等来不及分解运走，累积在叶肉细胞中，阻碍细胞内CO<sub>2</sub>的运输；</u></li><li><u>生理钟调控。</u></li></ul><h2 id="植物的呼吸作用-2">植物的呼吸作用</h2><h3 id="名词解释-11">名词解释</h3><p><strong>末端氧化酶</strong>：<u>是指处于生物氧化作用一系列反应的最末端，将底物脱下的氢或电子传递给氧，并形成H<sub>2</sub>O或H<sub>2</sub>O<sub>2</sub>的氧化酶类。</u></p><p><strong>抗氰呼吸</strong>：<u>某些植物组织对氰化物不敏感的那部分呼吸。即在有氰化物存在的条件下仍有一定的呼吸作用。</u></p><p><strong>呼吸商</strong>：<u>又称呼吸系数，简称RQ，是指在一定时间内，植物组织释放CO<sub>2</sub>的摩尔数与吸收氧的摩尔数之比。</u></p><p><strong>呼吸速率</strong>：<u>以单位鲜重、干重或单位面积在单位时间内所放出的CO<sub>2</sub>的重量（或体积）或所吸收O<sub>2</sub>的重量（或体积）来表示。</u></p><p><strong>糖酵解</strong>：<u>是指在细胞质内所发生的、由葡萄糖分解为丙酮酸的过程。</u></p><p><strong>三羧酸循环</strong>：<u>丙酮酸在有氧条件下，通过一个包括三羧酸和二羧酸的循环而逐步氧化分解生成CO<sub>2</sub>的过程。又称为柠檬酸环或Krebs环，简称TCA循环。</u></p><p><strong>戊糖磷酸途径</strong>：<u>简称PPP或HMP。是指在细胞质内进行的一种葡萄糖直接氧化降解的酶促反应过程。</u></p><p><strong>呼吸链</strong>：<u>呼吸代谢中间产物随电子和质子，沿着一系列有顺序的电子传递体组成的电子传递途径，传递到分子氧的总轨道。</u></p><p><strong>氧化磷酸化</strong>：<u>是指呼吸链上的氧化过程，伴随着ADP被磷酸化为ATP的作用。</u></p><h3 id="问答题-11">问答题</h3><h4 id="呼吸作用多条路线论点的内容和意义如何？-2">呼吸作用多条路线论点的内容和意义如何？</h4><p><u>植物呼吸代谢多条路线论点是汤佩松先生提出来的，其内容是是：</u></p><ul><li><u>呼吸化学途径多样性（EMP、PPP、TCA等）；</u></li><li><u>呼吸链电子传递系统的多样性（电子传递主路，几条支路，如抗氰支路）；</u></li><li><u>末端氧化酶系统的多样性（细胞色素氧化酶，酚氧化酶，抗坏血酸氧化酶，乙醇酸氧化酶和交替氧化酶）。</u></li></ul><p><u>这些多样性，是植物在长期进化过程中对不断变化的外界环境的一种适应性表现，其要点是呼吸代谢（对生理功能）的控制和被控制（酶活性）过程。而且认为该过程受到生长发育和不同环境条件的影响，这个论点，为呼吸代谢研究指出了努力方向。</u></p><h4 id="戊糖磷酸途径在植物呼吸代谢中具有什么生理意义-2">戊糖磷酸途径在植物呼吸代谢中具有什么生理意义</h4><p><u>戊糖磷酸途径中形成的NADPH是细胞内必需NADPH才能进行生物合成反应的主要来源，如脂肪合成。其中间产物核糖和磷酸又是合成核苷酸的原料，植物感病时戊糖磷酸途径所占比例上升，因此，戊糖磷酸途径在植物呼吸代谢中占有特殊的地位。</u></p><h4 id="呼吸作用糖的分解代谢途径有几种？在细胞的什么部位进行？-2">呼吸作用糖的分解代谢途径有几种？在细胞的什么部位进行？</h4><p><u>有EMP、TCA和PPP三种。EMP和PPP在细胞质中进行的。TCA是在线粒体中进行的。</u></p><h4 id="什么叫末端氧化酶？主要有哪几种？-2">什么叫末端氧化酶？主要有哪几种？</h4><p><u>处于生物氧化作用一系列反应的最末端，将底物脱下的氢或电子传递给氧，并形成H<sub>2</sub>O或凡H<sub>2</sub>O<sub>2</sub>的氧化酶都称为末端氧化酶。如：细胞色素氧化酶、交替氧化酶（抗氰氧化酶）、酚氧化酶、抗坏血酸氧化酶、黄素氧化酶等，也有把过氧化氢物和过氧化物酶列入其中。</u></p><h4 id="抗氰呼吸有何特点？-2">抗氰呼吸有何特点？</h4><p><u>已知抗氰呼吸电子传递的途径不通过细胞色素系统，而是由泛醌传递给一个受体（X），再由X直接传递给氧，这样就越过了磷酸化部位Ⅱ、Ⅲ，对氰化物不敏，且P/O比为1或＜1。因此，在进行抗氰呼吸时有大量热能释放。</u></p><p><u>抗氰呼吸的强弱除了与植物种类有关外，也与发育状况、外界条件有关。且抗氰呼吸在正常途径受阻时得到加强，所以抗氰呼吸是一种与正常呼吸途径交替进行的适应性过程。</u></p><h4 id="粮食贮藏时为什么要降低呼吸速率？-2">粮食贮藏时为什么要降低呼吸速率？</h4><ul><li><u>因为呼吸速率高会大量消耗有机物；</u></li><li><u>呼吸放出的水分又会使粮堆湿度增大，粮食“出汗”，呼吸加强；</u></li><li><u>呼吸放出的热量又使粮温增高，反过来又促进呼吸增强，同时高温高湿微生物迅速繁殖，最后导致粮食变质。</u></li></ul><h4 id="长时间无氧呼吸植物为什么会死亡？-2">长时间无氧呼吸植物为什么会死亡？</h4><ul><li><u>无氧呼吸产生酒精，酒精使细胞质的蛋白质变性。</u></li><li><u>氧化1mol葡萄糖产生的能量少。要维持正常的生理需要就要消耗更多的有机物，这样体内养分耗损过多。</u></li><li><u>没有丙酮酸的有氧分解过程，缺少合成其他物质的原料。</u></li></ul><h4 id="植物组织受到损伤时呼吸速率为何加快？-2">植物组织受到损伤时呼吸速率为何加快？</h4><ul><li><u>一是原来氧化酶与其底物在结构上是隔开的，损伤使原来的间隔破坏，酚类化合物迅速被氧化。</u></li><li><u>二是损伤使某些细胞转变为分生状态，形成愈伤组织以修复伤处，这些生长旺盛的细胞比原来的休眠或成熟组织的呼吸速率要快得多。</u></li></ul><h4 id="低温导致烂秧的原因是什么？-2">低温导致烂秧的原因是什么？</h4><p><u>是因为低温破坏了线粒体的结构，呼吸“空转”，缺乏能量引起代谢紊乱的缘故。</u></p><h4 id="早稻浸种催芽时用温水淋种和翻堆的目的是什么？-2">早稻浸种催芽时用温水淋种和翻堆的目的是什么？</h4><p><u>目的就是控制温度和通气，使呼吸作用顺利进行。否则谷堆中部温度过高就会引起“烧芽”现象。</u></p><h2 id="植物生长物质-2">植物生长物质</h2><h3 id="名词解释-12">名词解释</h3><p><strong>植物生长物质</strong>：<u>是一些调节植物生长发育的物质。包括植物激素和植物生长调节剂。</u></p><p><strong>植物激素</strong>：<u>指一些在植物体内合成，并从产生之处运送到别处，对生长发育起显著作用的微量有机物。</u></p><p><strong>植物生长调节剂</strong>：<u>指一些具有植物激素活性的人工合成的物质。</u></p><p><strong>极性运输</strong>：<u>只能从植物形态学的上端向下端运输，而不能倒过来运输。</u></p><p><strong>三重反应</strong>：<u>乙烯可抑制黄化豌豆幼苗上胚轴的伸长生长；促进其加粗生长；地上部分失去负向地性生长（偏上生长）。</u></p><p><strong>生长抑制剂</strong>：<u>这类物质主要作用于顶端分生组织区，干扰顶端细胞分裂，引起茎伸长的停顿和顶端优势破坏。其作用不能被赤霉素所恢复。</u></p><p><strong>生长延缓剂</strong>：<u>抑制节间伸长而不破坏顶芽的化合物。其作用可被GA所恢复。</u></p><h3 id="问答题-12">问答题</h3><h4 id="乙烯促进果实成熟的原因何在？-2">乙烯促进果实成熟的原因何在？</h4><p><u>乙烯能增加细胞膜的透性，促使呼吸作用加强某些肉质果实出现呼吸骤变，因而引起果实内的各种有机物质发生急剧变化，使果实甜度增加，酸味减少，涩味消失，香味产主，色泽变艳，果实由硬变软，达到完全成熟。</u></p><h4 id="生长素与赤霉素之生理作用方面的相互关系如何？-2">生长素与赤霉素之生理作用方面的相互关系如何？</h4><p><u>生长素与赤霉素之间存在相辅相成作用。</u></p><ul><li><u>GA有抑制IAA氧化酶活性的作用防止IAA的氧化；</u></li><li><u>GA能增加蛋白酶的活性，促进蛋白质分解，色氨酸数量增多，有利于IAA的生物合成</u></li><li><u>GA促进生长素由束缚型转变为自由型。</u></li></ul><h4 id="赤霉素在生产上的应用主要有哪些方面？-2">赤霉素在生产上的应用主要有哪些方面？</h4><ul><li><u>促进麦芽糖化，GA诱导α-淀粉酶的形成这一发现己被应用到啤酒生产中。</u></li><li><u>促进营养生长，如在水稻“三系”的制种过程中，切花生产上等都有应用</u></li><li><u>防止脱落，促进单性结实</u></li><li><u>打破休眠。</u></li></ul><h4 id="人们认为植物的休眠与生长是由哪两种激素调节的？如何调节？-2">人们认为植物的休眠与生长是由哪两种激素调节的？如何调节？</h4><p><u>植物的生长和休眠是由赤霉素和脱落酸两种激素调节的。它们的合成前体都是甲瓦龙酸，甲瓦龙酸在长日照条件下形成赤霉素，短日照条件下形成脱落酸，因此，夏季日照长，产生赤霉素促进植物生长；而冬季来临前，日照短，产生脱落酸使芽进入休眠。</u></p><h4 id="生长抑制剂和生长延缓剂抑制生长的作用方式有何不同？-2">生长抑制剂和生长延缓剂抑制生长的作用方式有何不同？</h4><p><u>生长抑制剂是抑制顶端分生组织生长，丧失顶端优势，使植株形态发生很大变化，外施GA不能逆转达种抑制反应</u></p><p><u>生长延缓剂是抑制茎部近顶端分生组织的细胞伸长，节间缩短，叶数和节数不变，株型紧凑矮小，生殖器官不受影响或影响不大，外施GA可逆转其抑制效应。</u></p><h2 id="植物的生长生理-2">植物的生长生理</h2><h3 id="名词解释-13">名词解释</h3><p><strong>生长</strong>：<u>细胞、器官或有机体的数目、大小与重量的不可逆增加，即发育过程中量的变化称为生长。</u></p><p><strong>分化</strong>：<u>来自同一分子或遗传上同质的细胞转变为形态上、机能上、化学构成上异质的细胞称为分化。</u></p><p><strong>发育</strong>：<u>在植物生命周期过程中，植物发生大小、形态、结构、功能上的变化，称为发育，发育包括生长与分化两个方面，即生长与分化贯穿在整个发育过程中。</u></p><p><strong>种子寿命</strong>：<u>从种子成熟到失去发芽能力的时间。</u></p><p><strong>种子活力</strong>：<u>种子在田间条件（非理想条件）下萌发的速度、整齐度及幼苗健壮生长的潜在能力，它包括种子萌发成苗和对不良环境的忍受力两个方面。种子活力与种子的大小、成熟度有关，也与贮藏条件和贮藏时间有关。</u></p><p><strong>温周期现象</strong>：<u>植物对昼夜温度周期性变化的反应。</u></p><p><strong>顶端优势</strong>：<u>植物顶端在生长上占有优势的现象。</u></p><p><strong>细胞全能性</strong>：<u>指植物体的每个细胞携带一个完整基因组，并具有发育成完整植株的潜在能力。</u></p><p><strong>光形态建成</strong>：<u>光控制植物生长、发育和分化的过程。</u></p><p><strong>光敏色素</strong>：<u>植物体内存在的一种吸收红光-远红光可逆转换的光受体（色素蛋白质）。</u></p><p><strong>生理钟</strong>：<u>又称生物钟。指植物内生节奏调节的近似24小时的周期性变化节律。</u></p><p><strong>生长大周期</strong>：<u>植物在不同生育时期的生长速率表现出慢-快-慢的变化规律，呈现“S”型的生长曲线，这个过程称生长大周期。</u></p><p><strong>向性运动</strong>：<u>指外界对植物单向刺激所引起的定向生长运动。</u></p><p><strong>感性运动</strong>：<u>指外界对植物不定向刺激所引起的运动。</u></p><h3 id="问答题-13">问答题</h3><h4 id="种子萌发时，有机物质发生哪些生理生化变化？-2">种子萌发时，有机物质发生哪些生理生化变化？</h4><ul><li><u>淀粉的转化：淀粉在淀粉酶、麦芽糖酶或淀粉磷酸化酶作用下转变成葡萄糖（或磷酸葡萄糖）。</u></li><li><u>脂肪的转化：脂肪在脂肪酶作用下转变为甘油和脂肪酸，再进一步转化为糖。</u></li><li><u>蛋白质的转化：胚乳或子叶内贮藏的蛋白质在蛋白酶和肽酶的催化下，分解为氨基酸。</u></li></ul><h4 id="水稻种子萌发时，表现出“干长根，湿长芽”现象的原因何在？-2">水稻种子萌发时，表现出“干长根，湿长芽”现象的原因何在？</h4><p><u>“干长根，湿长芽”现象是由于根和胚芽鞘的生长所要求的含氧量不同所致。</u></p><p><u>根的生长，既有细胞的伸长和扩大，也包括细胞分裂，而细胞分裂需要有氧呼吸提供能量和重要的中间产物。因而水多、氧不足时，根的生长受到抑制。但是胚芽鞘的生长，主要是细胞的伸长与扩大，在水层中，水分供应充足，故而芽生长较快。</u></p><p><u>此外，“干根湿芽”还与生长素含量有关。在水少供氧充足时，IAA氧化酶活性升高，使IAA含量降低，以至胚芽鞘细胞伸长和扩大受抑制，根生长受影响小。而在有水层的条件下，氧气少，IAA氧化酶活性降低，IAA含量升高，从而促进胚芽鞘细胞的伸长，并且IAA运输到根部，因根对IAA比较敏感，使根的生长受到抑制。</u></p><p><u>还有人认为，胚芽鞘呼吸酶以细胞色素氧化酶为主，与O<sub>2</sub>亲和力高，幼根则以抗氰氧化酶为主，与O<sub>2</sub>亲和力较低，因而在水多时，胚芽鞘生长快于幼根。</u></p><h4 id="高山上的树木为什么比平地生长的矮小？-2">高山上的树木为什么比平地生长的矮小？</h4><ul><li><u>高山上水分较少，土壤也较瘠薄，肥力较低，气温也较低，且风力较大，这些因素都不利于树木纵向生长；</u></li><li><u>高山顶上因云雾较少，空气中灰尘较少，所以光照较强，紫外光也较多，由于强光特别是紫外光抑制植物生长，因而高山上的树木生长缓慢而矮小。</u></li></ul><h4 id="试述光对植物生长的影响。-2">试述光对植物生长的影响。</h4><p><u>光对植物生长的影响是多方面的，主要有下列几方面：</u></p><ul><li><u>光是光合作用的能源和启动者，为植物的生长提供有机营养和能源；</u></li><li><u>光控制植物的形态建成，即叶的伸展扩大，茎的高矮，分枝的多少、长度、根冠比等都与光照强弱和光质有关；</u></li><li><u>日照时数影响植物生长与休眠。绝大多数多年生植物都是长日照条件促进生长、短日照条件诱导休眠；</u></li><li><u>光影响种子萌发，需光种子的萌发受光照的促进，而需暗种子的萌发则受光抑制，</u></li><li><u>此外，一些豆科植物叶片的昼开夜合，气孔运动等都受光的调节。</u></li></ul><h4 id="简述根和地上部分生长的相关性如何？-2">简述根和地上部分生长的相关性如何？</h4><p><u>根和地上部分的关系是既互相促进、互相依赖，又互相矛盾、互相制约的。</u></p><p><u>根系生长需要地上部供给光合产物、生长素和维生素，而地上部分生长又需根部吸收的水分、矿质，根部合成的多种氨基酸和细胞分裂素等。这就是两者相互依存、互相促进的一面，所以树大根深，根深叶茂。</u></p><p><u>但两者又有相互矛盾，相互制约的一面，例如过分旺盛的地上部分的生长会抑制地下部分的生长，只有两者的比例比较适当，才能获得高产。</u></p><h4 id="常言道：“根深叶茂”是何道理？-2">常言道：“根深叶茂”是何道理？</h4><p><u>植物“根深叶茂”原因如下：</u></p><ul><li><u>地上部分生长需要的水分和矿物质主要是由根系供给的，另外根系还能合成多种氨基酸、细胞分裂素、生物碱等供应地上部分，因此，根系发育得好，对地上部分生长也有利。</u></li><li><u>植物地上部分对根的生长也有促进作用，叶片中制造的糖类、维生素等供应给根以利根的生长。因此，地上部分长不好，根系也长不好。</u></li></ul><h4 id="一般认为光敏色素分布在细胞什么地方？Pr型和Pfr型的光学特性有何不同？-2">一般认为光敏色素分布在细胞什么地方？Pr型和Pfr型的光学特性有何不同？</h4><p><u>一般认为光敏色素与膜系统结合，分布在质膜、线粒体膜、核膜、叶绿体膜和内质网膜上。</u></p><p><u>Pr型的吸收高峰在660nm，Pfr型的吸收高峰在730nm，两类型光敏色素在不同光谱作用下可互相转换，当Pr型吸收660nm红光后就转变为Pfr，而Pfr吸收730nm远红光后会转为Pr 型。</u></p><h4 id="关于光敏色素作用机理的基因调节假说内容如何？-2">关于光敏色素作用机理的基因调节假说内容如何？</h4><p><u>在接受红光照射后，Pfr型经过一系列过程，将信号转移到基因，活化或抑制某些特定基因，使转录出单股mRNA的速度发生改变，mRNA翻译成特殊蛋白质（酶），最后表现出形态建成。研究证明，多种酶的活性通过光敏色素受光调节，如PAL、NR等。蛋白质磷酸化受Ca<sup>2+</sup>-CaM调节，它可能是连接光敏色素的光活化和基因表达的中间步骤。</u></p><h4 id="为什么横放的茎会背地生长，而横放的根却向地生长。-2">为什么横放的茎会背地生长，而横放的根却向地生长。</h4><p><u>根和茎横放后，其体内的生长素由于重力的作用，造成背地面少于向地面，由于根较茎对生长的敏感性强，因此，向地面的茎由于生长素浓度高生长快，因此向上弯曲，而向地面的根由于生长素浓度高而生长受抑制，因此根向下弯曲生长。</u></p><h2 id="植物的生殖生理-2">植物的生殖生理</h2><h3 id="名词解释-14">名词解释</h3><p><strong>春化作用</strong>：<u>低温促进植物开花的作用。</u></p><p><strong>去春化作用</strong>：<u>已春化的植物或萌动种子，在春化过程结束之前，如置于高温条件下，春化效果即行消失，这种现象叫去春化作用。</u></p><p><strong>光周期与光周期现象</strong>：<u>在一天中，白天和黑夜的相对长度叫光周期。植物对光周期的反应叫光周期现象。</u></p><p><strong>临界日长</strong>：<u>诱导短日植物开花所需的最长日照时数，或诱导长日植物开花所需的最短日照时数。</u></p><p><strong>长日植物</strong>：<u>日长必须长于临界日长才能开花的植物。</u></p><p><strong>短日植物</strong>：<u>日长必须小于临界日长才能开花的植物。</u></p><p><strong>日中性植物</strong>：<u>在任何日照长度下都能开花的植物。</u></p><p><strong>花粉识别蛋白</strong>：<u>能够感受柱头上感受蛋白的刺激而决定花粉是否萌发，存在于花粉外壁上的一种膜蛋白。识别蛋白是一种糖蛋白。</u></p><h3 id="问答题-14">问答题</h3><h4 id="说明光周期现象与植物地理起源和分布的关系，以及在生产上的应用？-2">说明光周期现象与植物地理起源和分布的关系，以及在生产上的应用？</h4><p><u>植物光周期现象的形成，是长期适应该地区自然光周期的结果。纬度不同，不同光周期类型的植物分布亦不同。</u></p><ul><li><u>在低纬度地区，因为没有长日照条件，所以只有短日植物。</u></li><li><u>在高纬度地区，适于长日植物生长，所以这里分布着长日植物。</u></li><li><u>在中纬度地区（温度），长日照与短日照条件都有，因此长日植物与短日植物均有分布。</u></li></ul><p><u>所有这些都与原产地生长季节的日照条件相适应。</u></p><p><u>光周期现象可应用于：</u></p><ul><li><u>正确地引种栽培</u><ul><li><u>了解被引进品种对光周期的反应类型；</u></li><li><u>了解原产地与引种地日照条件的差异；</u></li><li><u>考虑被引进作物收获的是营养体，还是收获果实或种子。</u></li></ul></li><li><u>在育种上应用</u><ul><li><u>选育对光周期不敏感的植物；</u></li><li><u>杂交时控制光照时间，克服花期不遇。</u></li></ul></li><li><u>在蔬菜、花卉栽培上应用</u><ul><li><u>栽种叶菜、根菜类，不满足其对光周期的要求则抑制开花；</u></li><li><u>收获的是花菜、果菜类，尽量满足对日照的要求，促进开花；</u></li><li><u>为使菊花（短日植物）提前开花，可进行遮光处理。</u></li></ul></li></ul><h4 id="春化作用在农业生产实践中有何应用价值-2">春化作用在农业生产实践中有何应用价值 ?</h4><ol><li><u>人工春化处理</u><ul><li><u>用于春天补种冬小麦；</u></li><li><u>在育种工作中利用春化处理，可以在一年中培育 3~4 代冬性作物，加速育种过程；</u></li><li><u>为了避免春季“倒春寒”对春小麦的低温伤害，可对种子进行人工春化处理后适当晚播，使之在缩短生育期的情况下正常成熟。</u></li></ul></li><li><u>调种引种，引种时应注意原产地所处的纬度，了解品种对低温的要求。若将北方的品种引种到南方，就可能因当地温度较高而不能顺利通过春化阶段，使植物只进行营养生长而不开花结实，造成不可弥补的损失。</u></li><li><u>控制花期</u><ul><li><u>如低温处理可以使秋播的一、二年生草本花卉改为春播，当年开花；</u></li><li><u>对以营养器官为收获对象的植物，如洋葱、当归等，可用解除春化的方法，抑制开花，延长营养生长，从而增加产量和提高品质。</u></li></ul></li></ol><h4 id="肉质果实成熟时发生了哪些生理生化变化？-2">肉质果实成熟时发生了哪些生理生化变化？</h4><ol><li><u>果实变甜。 果实成熟后期，淀粉可以转变成为可溶性糖，使果实变甜。</u></li><li><u>酸味减少。未成熟的果实中积累较多的有机酸。在果实成熟过程中，有机酸含量下降，这是因为：</u><ul><li><u>有的转变为糖；</u></li><li><u>有的作为呼吸底物氧化为CO<sub>2</sub>和H<sub>2</sub>O；</u></li><li><u>有些则被Ca<sup>2+</sup>、K<sup>+</sup>等所中和。</u></li></ul></li><li><u>涩味消失。果实成熟时，单宁可被过氧化物酶氧化成无涩味的过氧化物，或单宁凝结成不溶于水的胶状物质，涩味消失。</u></li><li><u>香味产生。主要是一些芳香族和脂肪族的酯，还有一些特殊的醛类，如桔子中柠檬醛可以产生香味。</u></li><li><u>由硬变软。这与果肉细胞壁中层的果胶质水解为可溶性的果酸有关。</u></li><li><u>色泽变艳。果皮由绿色变为黄色，是由干果皮中叶绿素逐渐破坏而失绿，类胡萝素仍存在，呈现黄色，或因花色素形成而呈现红色。</u></li></ol><h4 id="到了深秋，树木的芽为什么会进入休眠状态？-2">到了深秋，树木的芽为什么会进入休眠状态？</h4><p><u>到了秋天导致树木形成休眠芽进入休眠状态的原因，主要是由于日照时数的缩短所引起的。</u></p><p><u>秋天的短日照作为进入休眠的信号，这一信号由叶片中的光敏色素感受后，便促进甲羟戊酸合成ABA（脱落酸），并转移到生长点，抑制mRNA和tRNA的生物合成因而也就抑制了蛋白质与酶的生物合成，进而抑制芽的生长，使芽进入休眠状态。</u></p><h4 id="呼吸跃变与果实贮藏的关系如何？在生产上有何指导意义？-2">呼吸跃变与果实贮藏的关系如何？在生产上有何指导意义？</h4><p><u>果实呼吸跃变是果实成熟的一种特征，大多数果实成熟是与呼吸的跃变相伴随的，呼吸跃变结束即意味着果实已达成熟。</u></p><p><u>在果实贮藏或运输中，可以通过降低温度，推迟呼吸跃变发生的时间，另一是增加周围CO<sub>2</sub>的浓度，降低呼吸跃变发生的强度，这样就可达到延迟成熟，保持鲜果，防止腐烂的目的。</u></p><h4 id="论述种子休眠的原因及其解除休眠的措施-2">论述种子休眠的原因及其解除休眠的措施</h4><p><u>种子休眠的原因：</u></p><ul><li><u>种皮（果皮）的限制；</u></li><li><u>种子未完成后熟；</u></li><li><u>抑制物质的作用</u></li></ul><p><u>解除休眠的措施有：机械破损，温度处理，化学处理，清水冲洗，层积处理</u></p>]]></content>
      
      
      <categories>
          
          <category> 生物学 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 植物生理学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java注解和反射</title>
      <link href="2020/06/13/Java%E6%B3%A8%E8%A7%A3%E5%92%8C%E5%8F%8D%E5%B0%84/"/>
      <url>2020/06/13/Java%E6%B3%A8%E8%A7%A3%E5%92%8C%E5%8F%8D%E5%B0%84/</url>
      
        <content type="html"><![CDATA[<p>Java注解和反射</p><hr><h2 id="反射">反射</h2><p>Java 反射技术应用广泛，它能够配置：类的全限定名、方法和参数，完成对象的初始化，甚至是反射某些方法。可以大大增强 Java 的可配置性。</p><p>反射：框架设计的灵魂<br>框架：半成品软件。可以在框架的基础上进行软件开发，简化编码<br>反射：将类的各个组成部分封装为其他对象，这就是反射机制</p><h3 id="通过反射构建对象">通过反射构建对象</h3><p>在 Java 中允许通过反射配置信息构建对象，比如 <code>ReflectServicelmpl</code> 类</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ReflectServiceImpl</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>err<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Hello "</span> <span class="token operator">+</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后通过反射的方法去构建它</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">ReflectServiceImpl</span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">ReflectServiceImpl</span> object <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>        object <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">ReflectServiceImpl</span><span class="token punctuation">)</span> <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"com.lean.ssm.chapter2.reflect.ReflectServiceImpl"</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ClassNotFoundException</span> <span class="token operator">|</span> <span class="token class-name">InstantiationException</span> <span class="token operator">|</span> <span class="token class-name">IllegalAccessException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        ex<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> object<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2020年7月10日</p><h3 id="获取Class对象">获取Class对象</h3><ul><li><p>源代码阶段：<code>Class.forName(“全类名”)</code>将字节码文件加载进内存，返回Class对象，多用于配置文件</p></li><li><p>已经加载到内存中<code>类名.class</code>，多用于参数传递</p></li><li><p><code>对象.getClass</code>，多用于对象的获取字节码的方式</p></li></ul><blockquote><p>同一个字节码文件在一次程序运行中，只会加载一次，不论通过哪一种方式创建</p></blockquote><h3 id="获取成员变量-Field"><strong>获取成员变量(Field)</strong></h3><ul><li><code>getFields()</code>获取public修饰的成员变量</li><li><code>getField()</code>获取指定名称的public修饰的成员变量</li><li><code>getDeclaredFields()</code>获取所有的成员变量，不考虑修饰符</li></ul><blockquote><p>操作：</p><ol><li>设置值<code>set()</code></li><li>获取值<code>get()</code></li><li>忽略访问权限修饰符的安全检查<code>setAccessible(true)</code></li></ol></blockquote><h3 id="获取构造方法"><strong>获取构造方法</strong></h3><p>构造方法用来创建对象</p><p><code>getConstructor()</code>获取构造方法</p><p><code>newInstance()</code>创建对象</p><h3 id="获取成员方法"><strong>获取成员方法</strong></h3><p>成员方法用来执行方法</p><p><code>getMethod()</code>获取成员方法</p><p><code>invoke()</code>执行方法</p><h2 id="注解-Annotation">注解 Annotation</h2><p>JDK1.5之后的新特性</p><h3 id="基本内置注解">基本内置注解</h3><ul><li><p><code>@Override</code>：检测被标注的方法是否继承于父类(接口)</p></li><li><p><code>Deprecated</code>：被注解的内容已过时</p></li><li><p><code>@SuppressWarning</code>：压制警告编译器</p><blockquote><p>一般传递参数<code>all</code>  <code>@SuppressWarning(“all”)</code></p></blockquote></li></ul><h3 id="定义注解">定义注解</h3><p>格式</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">元注解<span class="token keyword">public</span> <span class="token annotation punctuation">@interface</span> 注解名称<span class="token punctuation">&#123;</span>    属性列表<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>本质：是一个接口，默认继承Annotation接口</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> 注解名称 <span class="token keyword">extends</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span><span class="token class-name">Annotation</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>属性： 接口中的抽象方法</p><ol><li><p>不能定义<code>void</code>方法</p></li><li><p>定义了属性，使用时需要对属性赋值，定义时使用default，则使用默认值</p></li><li><p>如果只有一个属性且属性名时<code>value</code>，定义时则可以省略<code>value</code>直接赋值</p></li><li><p>数组赋值需要使用<code>&#123;&#125;</code>包裹，只有一个值时可以省略<code>&#123;&#125;</code></p></li></ol><h4 id="元注解">元注解</h4><p>用于描述注解的注解</p><p><strong><code>@Target</code>：描述注解能够作用的位置</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>TYPE<span class="token punctuation">,</span> FIELD<span class="token punctuation">,</span> METHOD<span class="token punctuation">,</span> PARAMETER<span class="token punctuation">,</span> CONSTRUCTOR<span class="token punctuation">,</span> LOCAL_VARIABLE<span class="token punctuation">,</span>TYPE_PARAMETER<span class="token punctuation">,</span>TYPE_USE<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>ElementType取值：</p><ul><li>TYPE：可以作用于类上</li><li>METHOD：可以作用于方法上</li><li>FIELD：可以作用于成员方法上</li></ul></blockquote><p><strong><code>@Retention</code>：描述注解被保留的阶段</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span><span class="token class-name">RetentionPolicy</span><span class="token punctuation">.</span>RUNTIME<span class="token punctuation">)</span><span class="token comment">//当前被描述的注解，会保留到class字节码文件中，并被JVM读取到</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span><span class="token class-name">RetentionPolicy</span><span class="token punctuation">.</span>CLASS<span class="token punctuation">)</span><span class="token comment">//当前被描述的注解，会保留到class字节码文件中但不会被JVM读取到</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span><span class="token class-name">RetentionPolicy</span><span class="token punctuation">.</span>SOURCE<span class="token punctuation">)</span><span class="token comment">//不会保留到class字节码文件</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong><code>@Documented</code>：描述注解是否被抽取到API文档中</strong></p><p><strong><code>@Inherited</code>：描述注解是否被子类继承</strong></p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java后端Linux环境搭建</title>
      <link href="2020/06/11/Java%E5%90%8E%E7%AB%AFLinux%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
      <url>2020/06/11/Java%E5%90%8E%E7%AB%AFLinux%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</url>
      
        <content type="html"><![CDATA[<p>参考<a href="https://github.com/hansonwang99/JavaCollection">文档</a>，基于CentOS 7.7.1908</p><hr><h2 id="安装须知">安装须知</h2><h3 id="安装文件">安装文件</h3><p>准备以下软件的Linux安装文件</p><ul><li>Maven</li><li>Tomcat</li><li>Zookeeper</li><li>Git</li><li>JDK</li><li>Kafka</li><li>MySQL</li><li>Nginx</li><li>Node</li><li>Python</li><li>Redis</li></ul><h3 id="安装的基本步骤">安装的基本步骤</h3><ol><li>解压安装文件至/usr/local/下创建的文件夹下</li><li>修改软件的配置文件（可选）</li><li>配置软件路径到/etc/profile文件中，刷新环境变量<code>source /ect/profile</code></li><li>查看软件安装是否成功，查看软件的版本</li></ol><h3 id="各软件版本查看方式整理">各软件版本查看方式整理</h3><ol><li><p>Git：<code>git --version</code></p></li><li><p>Java：<code>java -version</code></p></li><li><p>Node：<code>node -v</code>、<code>npm version</code>、<code>npx -v</code></p></li><li><p>Python：<code>python -V</code>、<code>python3 -V</code>（注意<code>V</code>大写）</p></li><li><p>Maven：<code>mvn -v</code></p></li><li><p>Nginx：<code>nginx -v</code></p></li></ol><h2 id="Git">Git</h2><h3 id="通过yum包管理器安装">通过yum包管理器安装</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">yum <span class="token function">install</span> <span class="token function">git</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>通过<code>git --version</code>查看是否安装成功</p><p>安装的版本是<code>git version 1.8.3.1</code></p><h2 id="JDK安装">JDK安装</h2><p>安装Oracle JDK</p><h2 id="node环境安装">node环境安装</h2><p><img src="http://img.whl123456.top/image/image-20200611002658715.png" alt="node"></p><p><img src="http://img.whl123456.top/image/image-20200611002658715.png" alt="image-20200611002658715"></p><h2 id="Maven">Maven</h2><h3 id="遇到的问题">遇到的问题</h3><p>在配置Maven环境变量中失误在<code>$MAVEN_HOME</code>和<code>/bin:$path</code>之间打了个空格</p><p><img src="http://img.whl123456.top/image/image-20200612155538407.png" alt="image-20200612155538407"></p><p>在退出vim，执行<code>source /etc/profile</code>报错</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">/usr/libexec/grepconf.sh: line <span class="token number">5</span>: grep: <span class="token builtin class-name">command</span> not found-bash: export: `/bin:/usr/local/sbin:/usr/sbin:/usr/local/node/node-v12.16.3-linux-x64/bin:/usr/local/maven/apache-maven-3.6.3:/root/bin:/usr/local/java/jdk1.8.0_161/bin': not a valid identifier<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>此后，导致如<code>ls</code>、<code>vim</code>等命令不能使用，也不能使用其他命令修改profile，可先执行</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token builtin class-name">export</span> <span class="token assign-left variable"><span class="token environment constant">PATH</span></span><span class="token operator">=</span>/bin:/usr/bin:<span class="token environment constant">$PATH</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>临时更改环境变量在找出配置错误的环境变量并修改</p><h2 id="MySQL（多次安装失败）">MySQL（多次安装失败）</h2><p>前提</p><p>卸载系统自带的Mariadb</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">rpm</span> -qa<span class="token operator">|</span><span class="token function">grep</span> mariadb<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果有Mariadb包，使用如下方式全部卸载</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">yum -y remove 包名<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>下载或者使用准备好的安装包</p><pre class="line-numbers language-none"><code class="language-none">wget https:&#x2F;&#x2F;dev.mysql.com&#x2F;get&#x2F;Downloads&#x2F;MySQL-5.7&#x2F;mysql-5.7.24-linux-glibc2.12-x86_64.tar.gz<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>解压并重命名文件夹</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">tar</span> -zxvf /root/mysql-5.7.24-linux-glibc2.12-x86_64.tar.gz -C /usr/local/<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">mv</span> mysql-5.7.24-linux-glibc2.12-x86_64 mysql<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>创建MySQL用户和用户组</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">groupadd</span> mysql<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">useradd</span> -g mysql mysql<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>创建data目录</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">mkdir</span> /usr/local/mysql/data<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>修改MySQL目录的归属用户</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">chown</span> -R mysql:mysql /usr/local/mysql<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>配置MySQL的配置文件</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">vim</span> /etc/my.cnf<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>加入内容</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token punctuation">[</span>mysql<span class="token punctuation">]</span><span class="token comment"># 设置mysql客户端默认字符集</span>default-character-set<span class="token operator">=</span>utf8<span class="token assign-left variable">socket</span><span class="token operator">=</span>/var/lib/mysql/mysql.sock<span class="token punctuation">[</span>mysqld<span class="token punctuation">]</span>skip-name-resolve<span class="token comment">#设置3306端⼝</span>port <span class="token operator">=</span> <span class="token number">3306</span><span class="token assign-left variable">socket</span><span class="token operator">=</span>/var/lib/mysql/mysql.sock<span class="token comment"># 设置mysql的安装⽬录</span><span class="token assign-left variable">basedir</span><span class="token operator">=</span>/usr/local/mysql<span class="token comment"># 设置mysql数据库的数据的存放⽬录</span><span class="token assign-left variable">datadir</span><span class="token operator">=</span>/usr/local/mysql/data<span class="token comment"># 允许最⼤连接数</span><span class="token assign-left variable">max_connections</span><span class="token operator">=</span><span class="token number">200</span><span class="token comment"># 服务端使⽤的字符集默认为8⽐特编码的latin1字符集</span>character-set-server<span class="token operator">=</span>utf8<span class="token comment"># 创建新表时将使⽤的默认存储引擎</span>default-storage-engine<span class="token operator">=</span>INNODB<span class="token assign-left variable">lower_case_table_names</span><span class="token operator">=</span><span class="token number">1</span><span class="token assign-left variable">max_allowed_packet</span><span class="token operator">=</span>16M<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">mkdir</span> /var/lib/mysql<span class="token function">chmod</span> <span class="token number">777</span> /var/lib/mysql<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>安装MySQL</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token builtin class-name">cd</span> /usr/local/mysql<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">./bin/mysqld --initialize --user<span class="token operator">=</span>mysql --basedir<span class="token operator">=</span>/usr/local/mysql --datadir<span class="token operator">=</span>/usr/local/mysql/data<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>此时遇到一个问题</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">./mysqld: error <span class="token keyword">while</span> loading shared libraries: libaio.so.1: cannot <span class="token function">open</span> shared object file: No such <span class="token function">file</span> or directory<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>安装</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">yum <span class="token function">install</span> libaio<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在重新</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">./bin/mysqld --initialize --user<span class="token operator">=</span>mysql --basedir<span class="token operator">=</span>/usr/local/mysql --datadir<span class="token operator">=</span>/usr/local/mysql/data<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>记下<code>root@localhost：</code>后的密码</p><p><img src="http://img.whl123456.top/image/image-20200612162005461.png" alt="image-20200612162005461"></p><p>启动MySQL</p><pre class="line-numbers language-none"><code class="language-none">service mysqld start<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>报错无法启动MySQL，原因是MariaDB</p><p>对于以下报错，个人尝试多种方式都未能解决，故不使用MySQL转向MariaDB</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">Failed to restart mysqld.service: Unit not found.<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>问题2</p><p>使用的阿里云ECS，再一次修改MySQL配置文件后，无法使用Workbench远程连接，但可以使用VNC进行连接</p><p>阿里云ECS登录实例失败，原因：拒绝连接</p><p>问题未找到，最后无奈通过重新初始化磁盘才可以连接</p><h2 id="MariaDB">MariaDB</h2><p>MariaDB数据库管理系统是MySQL的一个分支，主要由开源社区在维护，采用GPL授权许可 MariaDB的目的是完全兼容MySQL，包括API和命令行，使之能轻松成为MySQL的代替品。</p><p>MariaDB由MySQL的创始人Michael Widenius（英语：Michael Widenius）主导开发，他早前曾以10亿美元的价格，将自己创建的公司MySQL AB卖给了SUN，此后，随着SUN被甲骨文收购，MySQL的所有权也落入Oracle的手中。</p><blockquote><p>MariaDB数据库安装<a href="https://www.jianshu.com/p/85ad52c88399">参考</a></p></blockquote><p>使用yum命令安装mariaDB</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">yum -y <span class="token function">install</span> mariadb mariadb-server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>启动mariaDB</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">systemctl start mariadb<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>设置开机启动</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">systemctl <span class="token builtin class-name">enable</span> mariadb<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>进行简单相关配置</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">mysql_secure_installation<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="http://img.whl123456.top/image/image-20200612205521591.png" alt="image-20200612205521591"></p><p>配置mariaDB字符集</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">vi</span> /etc/my.cnf<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>添加</p><pre class="line-numbers language-none"><code class="language-none">init_connect&#x3D;&#39;SET collation_connection &#x3D; utf8_unicode_ci&#39;init_connect&#x3D;&#39;SET NAMES utf8&#39;character-set-server&#x3D;utf8collation-server&#x3D;utf8_unicode_ciskip-character-set-client-handshake<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="http://img.whl123456.top/image/image-20200612205634824.png" alt="image-20200612205634824"></p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">vi</span> /etc/my.cnf.d/client.cnf<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>添加</p><pre class="line-numbers language-none"><code class="language-none">default-character-set&#x3D;utf8<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="http://img.whl123456.top/image/image-20200612205809998.png" alt="image-20200612205809998"></p><pre class="line-numbers language-none"><code class="language-none">vi &#x2F;etc&#x2F;my.cnf.d&#x2F;mysql-clients.cnf<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>添加</p><pre class="line-numbers language-none"><code class="language-none">default-character-set&#x3D;utf8<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="http://img.whl123456.top/image/image-20200612205933709.png" alt="image-20200612205933709"></p><p>重启mariadb</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">systemctl restart mariadb<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>登录mariaDB，查看MariaDB字符集</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">mysql <span class="token operator">-</span>uroot <span class="token operator">-</span>p<span class="token keyword">show</span> variables <span class="token operator">like</span> <span class="token string">"%character%"</span><span class="token punctuation">;</span><span class="token keyword">show</span> variables <span class="token operator">like</span> <span class="token string">"%collation%"</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>远程连接</p><p>在登录情况下输入以下SQL语句</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">use</span> mysql<span class="token punctuation">;</span><span class="token keyword">select</span> host<span class="token punctuation">,</span><span class="token keyword">user</span><span class="token punctuation">,</span>password <span class="token keyword">from</span> <span class="token keyword">user</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="http://img.whl123456.top/image/image-20200612210519878.png" alt="image-20200612210519878"></p><pre class="line-numbers language-SQL" data-language="SQL"><code class="language-SQL">GRANT ALL PRIVILEGES ON *.* TO &#39;root&#39;@&#39;%&#39; IDENTIFIED BY &#39;为远程连接设置的密码&#39;；<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>参考<a href="https://www.cnblogs.com/lanuage/p/8179589.html">文章</a></p></blockquote><p>以Navicat为例连接远程MariaDB</p><p><img src="http://img.whl123456.top/image/image-20200612213409377.png" alt="image-20200612213409377"></p><h2 id="Nginx">Nginx</h2><pre class="line-numbers language-none"><code class="language-none">yum install nginxnginx -v<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>查看安装目录</p><pre class="line-numbers language-none"><code class="language-none">rpm -ql nginx<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">&#x2F;etc&#x2F;logrotate.d&#x2F;nginx&#x2F;etc&#x2F;nginx&#x2F;fastcgi.conf&#x2F;etc&#x2F;nginx&#x2F;fastcgi.conf.default&#x2F;etc&#x2F;nginx&#x2F;fastcgi_params&#x2F;etc&#x2F;nginx&#x2F;fastcgi_params.default&#x2F;etc&#x2F;nginx&#x2F;koi-utf&#x2F;etc&#x2F;nginx&#x2F;koi-win&#x2F;etc&#x2F;nginx&#x2F;mime.types&#x2F;etc&#x2F;nginx&#x2F;mime.types.default&#x2F;etc&#x2F;nginx&#x2F;nginx.conf&#x2F;etc&#x2F;nginx&#x2F;nginx.conf.default&#x2F;etc&#x2F;nginx&#x2F;scgi_params&#x2F;etc&#x2F;nginx&#x2F;scgi_params.default&#x2F;etc&#x2F;nginx&#x2F;uwsgi_params&#x2F;etc&#x2F;nginx&#x2F;uwsgi_params.default&#x2F;etc&#x2F;nginx&#x2F;win-utf&#x2F;usr&#x2F;bin&#x2F;nginx-upgrade&#x2F;usr&#x2F;lib&#x2F;systemd&#x2F;system&#x2F;nginx.service&#x2F;usr&#x2F;lib64&#x2F;nginx&#x2F;modules&#x2F;usr&#x2F;sbin&#x2F;nginx&#x2F;usr&#x2F;share&#x2F;doc&#x2F;nginx-1.16.1&#x2F;usr&#x2F;share&#x2F;doc&#x2F;nginx-1.16.1&#x2F;CHANGES&#x2F;usr&#x2F;share&#x2F;doc&#x2F;nginx-1.16.1&#x2F;README&#x2F;usr&#x2F;share&#x2F;doc&#x2F;nginx-1.16.1&#x2F;README.dynamic&#x2F;usr&#x2F;share&#x2F;doc&#x2F;nginx-1.16.1&#x2F;UPGRADE-NOTES-1.6-to-1.10&#x2F;usr&#x2F;share&#x2F;licenses&#x2F;nginx-1.16.1&#x2F;usr&#x2F;share&#x2F;licenses&#x2F;nginx-1.16.1&#x2F;LICENSE&#x2F;usr&#x2F;share&#x2F;man&#x2F;man3&#x2F;nginx.3pm.gz&#x2F;usr&#x2F;share&#x2F;man&#x2F;man8&#x2F;nginx-upgrade.8.gz&#x2F;usr&#x2F;share&#x2F;man&#x2F;man8&#x2F;nginx.8.gz&#x2F;usr&#x2F;share&#x2F;nginx&#x2F;html&#x2F;404.html&#x2F;usr&#x2F;share&#x2F;nginx&#x2F;html&#x2F;50x.html&#x2F;usr&#x2F;share&#x2F;nginx&#x2F;html&#x2F;en-US&#x2F;usr&#x2F;share&#x2F;nginx&#x2F;html&#x2F;icons&#x2F;usr&#x2F;share&#x2F;nginx&#x2F;html&#x2F;icons&#x2F;poweredby.png&#x2F;usr&#x2F;share&#x2F;nginx&#x2F;html&#x2F;img&#x2F;usr&#x2F;share&#x2F;nginx&#x2F;html&#x2F;index.html&#x2F;usr&#x2F;share&#x2F;nginx&#x2F;html&#x2F;nginx-logo.png&#x2F;usr&#x2F;share&#x2F;nginx&#x2F;html&#x2F;poweredby.png&#x2F;usr&#x2F;share&#x2F;vim&#x2F;vimfiles&#x2F;ftdetect&#x2F;nginx.vim&#x2F;usr&#x2F;share&#x2F;vim&#x2F;vimfiles&#x2F;ftplugin&#x2F;nginx.vim&#x2F;usr&#x2F;share&#x2F;vim&#x2F;vimfiles&#x2F;indent&#x2F;nginx.vim&#x2F;usr&#x2F;share&#x2F;vim&#x2F;vimfiles&#x2F;syntax&#x2F;nginx.vim&#x2F;var&#x2F;lib&#x2F;nginx&#x2F;var&#x2F;lib&#x2F;nginx&#x2F;tmp&#x2F;var&#x2F;log&#x2F;nginx<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>启动nginx</p><pre class="line-numbers language-none"><code class="language-none">&#x2F;usr&#x2F;sbin&#x2F;nginx<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>设置配置文件</p><pre class="line-numbers language-none"><code class="language-none">vi &#x2F;etc&#x2F;nginx&#x2F;nginx.conf<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>停止服务</p><pre class="line-numbers language-none"><code class="language-none">&#x2F;usr&#x2F;sbin&#x2F;nginx -s stop<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>重新加载</p><pre class="line-numbers language-none"><code class="language-none">&#x2F;usr&#x2F;sbin&#x2F;nginx -s reload<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Servlet</title>
      <link href="2020/05/26/JavaEE-02-Servlet/"/>
      <url>2020/05/26/JavaEE-02-Servlet/</url>
      
        <content type="html"><![CDATA[<p>JavaWeb之Servlet，开发动态Web的技术</p><hr><h2 id="Servlet简介">Servlet简介</h2><p>Servlet其实就是一个遵循Servlet开发的java类。Servlet是由服务器调用的，运行在服务器端。</p><p>开发Servlet需要实现的步骤：</p><ul><li>编写一个类实现Servlet接口</li><li>把开发好的Java类部署到Web服务器中</li></ul><h2 id="Tomcat下的Servlet案例">Tomcat下的Servlet案例</h2><p>启动Tomcat，进入http://localhost:8080/examples/</p><p>可以看到Tomcat为我们提供的Examples</p><p><img src="http://img.whl123456.top/image/Examples.png" alt="Examples"></p><p>选择<a href="http://localhost:8080/examples/servlets">Servlets examples</a>，就可以看到实例以及源码</p><p>选择<a href="http://localhost:8080/examples/servlets/helloworld.html">HelloWorld Example</a>源码可以看到</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloWorld</span> <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">)</span>    <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span> <span class="token class-name">ServletException</span>    <span class="token punctuation">&#123;</span>        response<span class="token punctuation">.</span><span class="token function">setContentType</span><span class="token punctuation">(</span><span class="token string">"text/html"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">PrintWriter</span> out <span class="token operator">=</span> response<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"&lt;html>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"&lt;head>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"&lt;title>Hello World!&lt;/title>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"&lt;/head>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"&lt;body>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"&lt;h1>Hello World!&lt;/h1>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"&lt;/body>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"&lt;/html>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="初使用Servlet">初使用Servlet</h2><p>使用Maven将Servlet有关的包</p><p>去<a href="https://mvnrepository.com/">Maven资源库网站</a>寻找需要的包，搜索servlet api（<a href="https://mvnrepository.com/artifact/javax.servlet/javax.servlet-api">搜索结果</a>）</p><p>已<a href="https://mvnrepository.com/artifact/javax.servlet/javax.servlet-api/4.0.1">4.0.1为例</a>，复制Maven格式的项目依赖到pom.xml中的<code>&lt;dependencies&gt;...&lt;/dependencies&gt;</code>内</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!-- https://mvnrepository.com/artifact/javax.servlet/javax.servlet-api --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>javax.servlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>javax.servlet-api<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>4.0.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>  <span class="token comment">&lt;!--作用域--></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>provided<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在IEDA中刷新本地项目依赖的pom.xml，便会自动下载需要的依赖</p><hr><p>创建Servlet项目</p><p><img src="http://img.whl123456.top/image/image-20200526224208126.png" alt="image-20200526224208126"></p><p>在HelloServlet文件中输入</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloServlet</span> <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>IDEA会进行自动导包</p><hr><p>重写<code>doGet</code>和<code>doPost</code>方法</p><h2 id="code￼3"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloServlet</span> <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> req<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>        resp<span class="token punctuation">.</span><span class="token function">setContentType</span><span class="token punctuation">(</span><span class="token string">"text/html"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//响应的类型：HTML</span>        resp<span class="token punctuation">.</span><span class="token function">setContentType</span><span class="token punctuation">(</span><span class="token string">"text/html"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        resp<span class="token punctuation">.</span><span class="token function">setCharacterEncoding</span><span class="token punctuation">(</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//获取响应的输出流</span>        <span class="token class-name">PrintWriter</span> out <span class="token operator">=</span> resp<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//resp.getOutputStream()</span>        out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"&lt;html>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"&lt;head>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"&lt;title>Hello World!&lt;/title>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"&lt;/head>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"&lt;body>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"&lt;h1>Hello World!&lt;/h1>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"&lt;/body>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"&lt;/html>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doPost</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> req<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">doGet</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> resp<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></h2><p>去<code>webapp→WEB-INF→web.xml</code>注册Servlet，将以下内容放入<code>&lt;web-app&gt;...&lt;/web-app&gt;</code>内</p><h2 id="code￼4"><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!--注册Servlet--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">></span></span>helloServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-class</span><span class="token punctuation">></span></span>top.whl123456.servlet.HelloServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-class</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet</span><span class="token punctuation">></span></span><span class="token comment">&lt;!--设置Mapping（映射）--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-mapping</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">></span></span>helloServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">></span></span>  <span class="token comment">&lt;!--请求路径--></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">></span></span>/hello<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-mapping</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></h2><p>启动Tomcat，访问web.xml中设置的映射<a href="http://localhost:8080/hello">http://localhost:8080/hello</a>便可以进入到动态页面</p><p>到此的<a href="https://github.com/Lanqilu/JavaWeb/commit/98152c4fa0058deed28a3fd48c61e000fec65b65">项目源码</a>已在GitHub中</p><h2 id="HelloServlet">HelloServlet</h2><ol><li><p>创建一个普通Maven项目，删除src文件夹</p></li><li><p>在pom.xml文件中添加依赖</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!-- https://mvnrepository.com/artifact/javax.servlet/javax.servlet-api --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>javax.servlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>javax.servlet-api<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>4.0.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>通过创建Module建立子模块</p><blockquote><p>在父项目中的pom.xml中自动生成<code>&lt;modules&gt;...&lt;/modules&gt;</code></p><p>在子项目中的pom.xml中自动生成<code>&lt;parent&gt;...&lt;/parent&gt;</code></p><p>父项目中的jar包子项目可以直接使用，反之不可以</p></blockquote></li><li><p>更换web.xml文件内容至最新内容</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>web-app</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://xmlns.jcp.org/xml/ns/javaee<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://xmlns.jcp.org/xml/ns/javaee                      http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd<span class="token punctuation">"</span></span>         <span class="token attr-name">version</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>4.0<span class="token punctuation">"</span></span>         <span class="token attr-name">metadata-complete</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>web-app</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>在main文件夹中建立java和resources文件夹，文件结构图如下所示</p><pre class="line-numbers language-none"><code class="language-none">JavaWeb02 ├── JavaWeb02.iml ├── pom.xml └── servlet01     ├── pom.xml     └── src         └── main             ├── java             ├── resources             └── webapp                 ├── index.jsp                 └── WEB-INF                     └── web.xml<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>创建一个简单的Servlet Demo</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloServlet</span> <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><blockquote><p>Servlet有两个默认的实现类：HttpServlet，GenericServlet</p></blockquote></li></ol><hr><ol start="7"><li><p>重写<code>doPost()</code>和<code>doGet()</code>方法</p><blockquote><p>IDEA中重写方法的快捷键是Ctrl+O</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//get和post只是请求方式的不同，业务逻辑一样，可以相互调用</span><span class="token annotation punctuation">@Override</span><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> req<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//ServletOutputStream outputStream = resp.getOutputStream();</span>    <span class="token class-name">PrintWriter</span> writer <span class="token operator">=</span> resp<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//响应流</span>    writer<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"hello,servlet"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token annotation punctuation">@Override</span><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doPut</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> req<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>    <span class="token function">doGet</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> resp<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>编写Servlet的映射，见上节配置</p></li><li><p>配置Tomcat，配置项目发布路径</p><blockquote><p>对于artifact配置可参考，该<a href="https://www.cnblogs.com/gbb123/p/6782227.html">博客</a></p></blockquote></li></ol><h2 id="ServletContext">ServletContext</h2><h2 id="HttpServletResponse">HttpServletResponse</h2><p>Web服务器接收到客户端的Http请求，针对这个请求，分别创建一个代表请求的 HttpServletRequest对象，代表响应的一个 HttpServletResponse</p><ul><li>获取客户端请求的参数：HttpServletRequest</li><li>给客户端响应一些信息：HttpServletResponse</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">HttpServletResponse</span> <span class="token keyword">extends</span> <span class="token class-name">ServletResponse</span> <span class="token punctuation">&#123;</span><span class="token comment">//...</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="http://img.whl123456.top/image/servletResponse.png" alt="HttpServletResponse&amp;ServletResponse"></p><h3 id="分类">分类</h3><p>向浏览器发送数据的方法：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">ServletResponse</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token class-name">ServletOutputStream</span> <span class="token function">getOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">PrintWriter</span> <span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>向浏览器发送响应头的方法</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">ServletResponse</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setCharacterEncoding</span><span class="token punctuation">(</span><span class="token class-name">String</span> charset<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setContentLength</span><span class="token punctuation">(</span><span class="token keyword">int</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setContentLengthLong</span><span class="token punctuation">(</span><span class="token keyword">long</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setContentType</span><span class="token punctuation">(</span><span class="token class-name">String</span> type<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">HttpServletResponse</span> <span class="token keyword">extends</span> <span class="token class-name">ServletResponse</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setDateHeader</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token keyword">long</span> date<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addDateHeader</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token keyword">long</span> date<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token class-name">String</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addHeader</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token class-name">String</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setIntHeader</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token keyword">int</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addIntHeader</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token keyword">int</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>状态码常量</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">HttpServletResponse</span> <span class="token keyword">extends</span> <span class="token class-name">ServletResponse</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> SC_CONTINUE <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> SC_SWITCHING_PROTOCOLS <span class="token operator">=</span> <span class="token number">101</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> SC_OK <span class="token operator">=</span> <span class="token number">200</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> SC_CREATED <span class="token operator">=</span> <span class="token number">201</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> SC_ACCEPTED <span class="token operator">=</span> <span class="token number">202</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> SC_NON_AUTHORITATIVE_INFORMATION <span class="token operator">=</span> <span class="token number">203</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> SC_NO_CONTENT <span class="token operator">=</span> <span class="token number">204</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> SC_RESET_CONTENT <span class="token operator">=</span> <span class="token number">205</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> SC_PARTIAL_CONTENT <span class="token operator">=</span> <span class="token number">206</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> SC_MULTIPLE_CHOICES <span class="token operator">=</span> <span class="token number">300</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> SC_MOVED_PERMANENTLY <span class="token operator">=</span> <span class="token number">301</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> SC_MOVED_TEMPORARILY <span class="token operator">=</span> <span class="token number">302</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> SC_FOUND <span class="token operator">=</span> <span class="token number">302</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> SC_SEE_OTHER <span class="token operator">=</span> <span class="token number">303</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> SC_NOT_MODIFIED <span class="token operator">=</span> <span class="token number">304</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> SC_USE_PROXY <span class="token operator">=</span> <span class="token number">305</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> SC_TEMPORARY_REDIRECT <span class="token operator">=</span> <span class="token number">307</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> SC_BAD_REQUEST <span class="token operator">=</span> <span class="token number">400</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> SC_UNAUTHORIZED <span class="token operator">=</span> <span class="token number">401</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> SC_PAYMENT_REQUIRED <span class="token operator">=</span> <span class="token number">402</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> SC_FORBIDDEN <span class="token operator">=</span> <span class="token number">403</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> SC_NOT_FOUND <span class="token operator">=</span> <span class="token number">404</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> SC_METHOD_NOT_ALLOWED <span class="token operator">=</span> <span class="token number">405</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> SC_NOT_ACCEPTABLE <span class="token operator">=</span> <span class="token number">406</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> SC_PROXY_AUTHENTICATION_REQUIRED <span class="token operator">=</span> <span class="token number">407</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> SC_REQUEST_TIMEOUT <span class="token operator">=</span> <span class="token number">408</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> SC_CONFLICT <span class="token operator">=</span> <span class="token number">409</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> SC_GONE <span class="token operator">=</span> <span class="token number">410</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> SC_LENGTH_REQUIRED <span class="token operator">=</span> <span class="token number">411</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> SC_PRECONDITION_FAILED <span class="token operator">=</span> <span class="token number">412</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> SC_REQUEST_ENTITY_TOO_LARGE <span class="token operator">=</span> <span class="token number">413</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> SC_REQUEST_URI_TOO_LONG <span class="token operator">=</span> <span class="token number">414</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> SC_UNSUPPORTED_MEDIA_TYPE <span class="token operator">=</span> <span class="token number">415</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> SC_REQUESTED_RANGE_NOT_SATISFIABLE <span class="token operator">=</span> <span class="token number">416</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> SC_EXPECTATION_FAILED <span class="token operator">=</span> <span class="token number">417</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> SC_INTERNAL_SERVER_ERROR <span class="token operator">=</span> <span class="token number">500</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> SC_NOT_IMPLEMENTED <span class="token operator">=</span> <span class="token number">501</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> SC_BAD_GATEWAY <span class="token operator">=</span> <span class="token number">502</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> SC_SERVICE_UNAVAILABLE <span class="token operator">=</span> <span class="token number">503</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> SC_GATEWAY_TIMEOUT <span class="token operator">=</span> <span class="token number">504</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> SC_HTTP_VERSION_NOT_SUPPORTED <span class="token operator">=</span> <span class="token number">505</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="常见应用">常见应用</h3><ol><li>向浏览器输出消息</li><li>下载文件<ul><li>获取下载文件的路径</li><li>下载文件的文件名</li><li>浏览器支持</li><li>获取下载文件的输入流</li><li>创建缓冲区</li><li>获取OutPutStream对象</li><li>将文件OutPutStream流写入到buffer缓冲区</li><li>使用OutPutStream将缓冲区中的数据输出到客户端</li></ul></li></ol><h4 id="下载文件">下载文件</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> fileServlet <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> req<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//  获取下载文件的路径</span>        <span class="token class-name">String</span> realPath <span class="token operator">=</span> <span class="token string">"E:\\Desktop\\JavaWeb02\\response\\src\\main\\resources\\1.png"</span><span class="token punctuation">;</span>        <span class="token comment">//String realPath = this.getServletContext().getRealPath(filePath);</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"下载文件的路径："</span><span class="token operator">+</span> realPath<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//  下载文件的文件名</span>        <span class="token class-name">String</span> fileName <span class="token operator">=</span> realPath<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>realPath<span class="token punctuation">.</span><span class="token function">lastIndexOf</span><span class="token punctuation">(</span><span class="token string">"\\"</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//  浏览器支持</span>        resp<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">"Content-Disposition"</span><span class="token punctuation">,</span><span class="token string">"attachment;filename="</span><span class="token operator">+</span> <span class="token class-name">URLEncoder</span><span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span>fileName<span class="token punctuation">,</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//  获取下载文件的输入流</span>        <span class="token class-name">FileInputStream</span> fileInputStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span>realPath<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//  创建缓冲区</span>        <span class="token keyword">int</span> len <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> buffer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment">//  获取OutPutStream对象</span>        <span class="token class-name">ServletOutputStream</span> outputStream <span class="token operator">=</span> resp<span class="token punctuation">.</span><span class="token function">getOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//  将文件OutPutStream流写入到buffer缓冲区,使用OutPutStream将缓冲区中的数据输出到客户端</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>len<span class="token operator">=</span>fileInputStream<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            outputStream<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>buffer<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>len<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">//  关闭流</span>        fileInputStream<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        outputStream<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doPost</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> req<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>        <span class="token function">doGet</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> resp<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="验证码功能">验证码功能</h4><ul><li>前端实现，js</li><li>后端实现，java图片类，生成一张图片</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> req<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//浏览器5s自动刷新</span>    resp<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">"refresh"</span><span class="token punctuation">,</span><span class="token string">"3"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//在内存中创建图片</span>    <span class="token class-name">BufferedImage</span> bufferedImage <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedImage</span><span class="token punctuation">(</span><span class="token number">80</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token class-name">BufferedImage</span><span class="token punctuation">.</span>TYPE_3BYTE_BGR<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//得到图片</span>    <span class="token class-name">Graphics2D</span> graphics <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Graphics2D</span><span class="token punctuation">)</span> bufferedImage<span class="token punctuation">.</span><span class="token function">getGraphics</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//笔</span>    <span class="token comment">//设置图片的背景颜色</span>    graphics<span class="token punctuation">.</span><span class="token function">setColor</span><span class="token punctuation">(</span><span class="token class-name">Color</span><span class="token punctuation">.</span>white<span class="token punctuation">)</span><span class="token punctuation">;</span>    graphics<span class="token punctuation">.</span><span class="token function">fillRect</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">80</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//给图片写数据</span>    graphics<span class="token punctuation">.</span><span class="token function">setColor</span><span class="token punctuation">(</span><span class="token class-name">Color</span><span class="token punctuation">.</span>BLUE<span class="token punctuation">)</span><span class="token punctuation">;</span>    graphics<span class="token punctuation">.</span><span class="token function">setFont</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Font</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token class-name">Font</span><span class="token punctuation">.</span>BOLD<span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    graphics<span class="token punctuation">.</span><span class="token function">drawString</span><span class="token punctuation">(</span><span class="token function">makeNum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//告诉浏览器，这个请求用浏览器打开</span>    resp<span class="token punctuation">.</span><span class="token function">setContentType</span><span class="token punctuation">(</span><span class="token string">"image/jpeg"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//网站缓存，不让浏览器设置缓存</span>    resp<span class="token punctuation">.</span><span class="token function">setDateHeader</span><span class="token punctuation">(</span><span class="token string">"expires"</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//缓存控制</span>    resp<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">"Cache-Control"</span><span class="token punctuation">,</span><span class="token string">"no-cache"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    resp<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">"Pragma"</span><span class="token punctuation">,</span><span class="token string">"no-cache"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//把图片写给浏览器</span>    <span class="token keyword">boolean</span> write <span class="token operator">=</span> <span class="token class-name">ImageIO</span><span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>bufferedImage<span class="token punctuation">,</span><span class="token string">"jpg"</span><span class="token punctuation">,</span> resp<span class="token punctuation">.</span><span class="token function">getOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//生成随机数</span><span class="token keyword">private</span> <span class="token class-name">String</span> <span class="token function">makeNum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">Random</span> random <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">String</span> num <span class="token operator">=</span> random<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token number">9999999</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">""</span><span class="token punctuation">;</span>    <span class="token class-name">StringBuffer</span> stringBuffer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">7</span> <span class="token operator">-</span> num<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        stringBuffer<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"0"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    num <span class="token operator">=</span> stringBuffer<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> num<span class="token punctuation">;</span>    <span class="token keyword">return</span> num<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Response实现重定向">Response实现重定向</h3><p>重定向：一个Web资源B收到客户端A的请求后，B通知客户端A访问另外一个web资源C的过程</p><p>使用场景：用户登录</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">void</span> <span class="token function">sendRedirect</span><span class="token punctuation">(</span><span class="token class-name">String</span> var1<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> req<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>    resp<span class="token punctuation">.</span><span class="token function">sendRedirect</span><span class="token punctuation">(</span><span class="token string">"/response_war/img"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>Status Code:302</p><p>Location:/response_war/img</p><p>实现原理</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">resp<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">"Location"</span><span class="token punctuation">,</span><span class="token string">"/response_war/img"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>resp<span class="token punctuation">.</span><span class="token function">setStatus</span><span class="token punctuation">(</span><span class="token number">302</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><blockquote><p>重定向url会发生变化</p><p>转发url不会发生变化</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//处理请求</span><span class="token class-name">String</span> username <span class="token operator">=</span> req<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">String</span> password <span class="token operator">=</span> req<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token string">"password"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"username = "</span> <span class="token operator">+</span> username<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"password = "</span> <span class="token operator">+</span> password<span class="token punctuation">)</span><span class="token punctuation">;</span>resp<span class="token punctuation">.</span><span class="token function">sendRedirect</span><span class="token punctuation">(</span><span class="token string">"/response_war/success.jsp"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意文件路径</p><h2 id="HttpServletRequest">HttpServletRequest</h2><p>HttpServletRequest代表客户端的请求，用户通过Http协议访问服务器，Http请求中的所有信息会被封装到HttpServletRequest，通过这个 HttpServletRequest的方法，获得客户端的所有信息</p><h3 id="获取前端传递的参数">获取前端传递的参数</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">String</span> username <span class="token operator">=</span> req<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">String</span> password <span class="token operator">=</span> req<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token string">"password"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="请求转发">请求转发</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java">req<span class="token punctuation">.</span><span class="token function">getRequestDispatcher</span><span class="token punctuation">(</span><span class="token string">"/success.jsp"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forward</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span>resp<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="Cookie和Session">Cookie和Session</h2><h3 id="cookie">cookie</h3><ul><li>从请求中拿到 cookie信息</li><li>服务器响应给客户端 cookie</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//服务端从客户端获取Cookie</span><span class="token class-name">Cookie</span><span class="token punctuation">[</span><span class="token punctuation">]</span> cookies <span class="token operator">=</span> req<span class="token punctuation">.</span><span class="token function">getCookies</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//判断Cookie是否存在</span><span class="token keyword">if</span> <span class="token punctuation">(</span>cookies <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    out<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"上次访问时间是:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//遍历数组</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> cookies<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Cookie</span> cookie <span class="token operator">=</span> cookies<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment">//获取Cookie名字</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>cookie<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"time"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token comment">//获取Cookie中的值</span>            <span class="token keyword">long</span> time <span class="token operator">=</span> <span class="token class-name">Long</span><span class="token punctuation">.</span><span class="token function">parseLong</span><span class="token punctuation">(</span>cookie<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">Date</span> date <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span>time<span class="token punctuation">)</span><span class="token punctuation">;</span>            out<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>date<span class="token punctuation">.</span><span class="token function">toLocaleString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token punctuation">&#123;</span>    out<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"第一次访问"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//服务器给客户端响应Cookie</span><span class="token class-name">Cookie</span> cookie <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Cookie</span><span class="token punctuation">(</span><span class="token string">"time"</span><span class="token punctuation">,</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//cookie有效期</span>cookie<span class="token punctuation">.</span><span class="token function">setMaxAge</span><span class="token punctuation">(</span><span class="token number">24</span><span class="token operator">*</span><span class="token number">60</span><span class="token operator">*</span><span class="token number">60</span><span class="token punctuation">)</span><span class="token punctuation">;</span>resp<span class="token punctuation">.</span><span class="token function">addCookie</span><span class="token punctuation">(</span>cookie<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="session">session</h3><ul><li><p>一次登录多次使用，保存用户信息</p></li><li><p>购物车信息</p></li><li><p>网站经常使用的信息</p></li></ul><blockquote><p>与Cookie的区别</p><ul><li>Cookie是把用户的数据写给用户的浏览器，浏览器保存（可以保存多个）</li><li>Session把用户的数据写到用户独占 Session中，服务器端保存（保存重要的信息，减少服务器资源的浪费</li><li>Session对象由服务创建；</li></ul></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//得到Session</span><span class="token class-name">HttpSession</span> session <span class="token operator">=</span> req<span class="token punctuation">.</span><span class="token function">getSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//存信息</span>session<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"Lanqilu"</span><span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//获取Session的ID</span><span class="token class-name">String</span> id <span class="token operator">=</span> session<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">boolean</span> aNew <span class="token operator">=</span> session<span class="token punctuation">.</span><span class="token function">isNew</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>aNew<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>resp<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"session创建成功"</span> <span class="token operator">+</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token punctuation">&#123;</span>resp<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"session已经存在"</span> <span class="token operator">+</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//得到Session</span><span class="token class-name">HttpSession</span> session <span class="token operator">=</span> req<span class="token punctuation">.</span><span class="token function">getSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//取Session</span><span class="token class-name">Person</span> person <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Person</span><span class="token punctuation">)</span> session<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"person.toString() = "</span> <span class="token operator">+</span> person<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">HttpSession</span> session <span class="token operator">=</span> req<span class="token punctuation">.</span><span class="token function">getSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>session<span class="token punctuation">.</span><span class="token function">removeAttribute</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//手动注销</span>session<span class="token punctuation">.</span><span class="token function">invalidate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>Session自动过期，web.xml</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!--设置Session默认的失效时间--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>session-config</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--15分钟后自动失效--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>session-timeout</span><span class="token punctuation">></span></span>15<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>session-timeout</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>session-config</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Servlet </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C语言学习笔记</title>
      <link href="2020/05/25/C%E8%AF%AD%E8%A8%80%E7%AC%94%E8%AE%B0/"/>
      <url>2020/05/25/C%E8%AF%AD%E8%A8%80%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<p>参考《C Primer Plus》 第六版</p><hr><h2 id="C语言概述">C语言概述</h2><p>简单的C程序示例</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> num<span class="token punctuation">;</span>    num <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Hello World!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"My favorite number is %d because it is first.\n"</span><span class="token punctuation">,</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="http://img.whl123456.top/image/image-20200525231404657.png" alt="image-20200525231404657"></p><hr><h3 id="include-指令和头文件"><code>#include</code> 指令和头文件</h3><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span> <span class="token comment">//包含另一个文件</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>该行告诉编译器把 <code>stdio.h</code> 中的内容包含在当前程序中。</p><p><code>stdio.h</code> 是 C 编译器软件包的标准部分，它提供键盘<strong>输入</strong>和屏幕<strong>输出</strong>的支持。</p><blockquote><p>stdio的全称是standard input output，h是head的缩写，.h是头文件的文件格式</p><p>在C++中<code>#include&lt;stdio.h&gt;</code>等价写法<code>#include&lt;cstdio&gt;</code></p></blockquote><p>作用相当于把 <code>stdio.h</code> 文件中的所有内容都输入该行所在的位置。</p><p><code>#include</code> 这行代码是一条 C <strong>预处理器指令</strong></p><h3 id="main-函数"><code>main()</code>函数</h3><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>  <span class="token comment">//主函数</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>C 程序包含一个或多个函数，它们是 C 程序的基本模块。</p><p>主函数是一个程序的入口位置，整个程序从主函数开始执行。一个程序最多只能有一个主函数。</p><p>圆括号表明 main()是一个函数名。int 表明 main()函数返回一个整数，void 表明 main()不带任何参数。</p><p>main 是一个极其普通的名称，但是这是唯一的选择</p><blockquote><p>C 程序一定从 main()函数开始执行（目前不必考虑例外的情况）。</p><p>除了 main()函数，你可以任意命名其他函数，而且 main()函数必须是开始的函数。</p></blockquote><h3 id="注释">注释</h3><p>在程序中，被<code>/*  */</code>两个符号括起来的部分是程序的注释。</p><p>C99 新增了另一种风格的注释，普遍用于 C++和 Java。这种新风格使用<code>//</code>符号创建注释，仅限于单行。</p><h3 id="花括号、函数体和块">花括号、函数体和块</h3><p>一般而言，所有的 C 函数都使用花括号<code>&#123;&#125;</code>标记函数体的开始和结束。</p><p>花括号还可用于把函数中的多条语句合并为一个单元或块。</p><h3 id="声明">声明</h3><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> num<span class="token punctuation">;</span>  <span class="token comment">//声明</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>以前的 C 语言，还要求把变量声明在块的顶部，其他语句不能在任何声明的前面。</p><p>C99 和 C11 遵循 C++的惯例，可以把声明放在块中的任何位置。尽管如此，首次使用变量之前一定要先声明它。</p><blockquote><p>命名</p><p>可以用小写字母、大写字母、数字和下划线（_）来命名。<br>而且，名称的第 1 个字符必须是字符或下划线，不能是数字。</p><p>操作系统和 C 库经常使用以一个或两个下划线字符开始的标识符（如，_kcab），因此最好避免在自己的程序中使用这种名称。</p><p>C 语言的名称区分大小写，即把一个字母的大写和小写视为两个不同的字符。</p></blockquote><p>声明变量的 4 个理由：</p><ul><li>把所有的变量放在一处，方便读者查找和理解程序的用途。</li><li>声明变量会促使你在编写程序之前做一些计划。</li><li>声明变量有助于发现隐藏在程序中的小错误，如变量名拼写错误。</li><li>如果事先未声明变量，C 程序将无法通过编译。</li></ul><h3 id="赋值">赋值</h3><pre class="line-numbers language-c" data-language="c"><code class="language-c">num <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在执行<code>int num;</code>声明时，编译器在计算机内存中为变量<code>num</code>预留了空间，然后在执行这行赋值表达式语句时，把值储存在之前预留的位置。</p><p>赋值表达式语句从右侧把值赋到左侧</p><h3 id="printf-函数"><code>printf()</code>函数</h3><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"My favorite number is %d because it is first.\n"</span><span class="token punctuation">,</span> num<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>圆括号表明 <code>printf</code> 是一个函数名。</p><p>实际参数（简称实参）是传递给函数的特定值，形式参数（简称形参）是函数中用于储存值的变量</p><p><code>\n </code>组合代表一个换行符，换行符是一个转义序列（用于代表难以表示或无法输入的字符）</p><p>参数中的<code>%d </code>相当于是一个占位符，其作用是指明输出 <code>num</code> 值的位置，<code>%</code>提醒程序，要在该处打印一个变量，<code>d </code>表明把变量作为十进制整数打印</p><p><code>printf()</code>函数名中的 <code>f</code> 提醒用户，这是一种格式化打印函数。</p><h3 id="return-语句"><code>return</code> 语句</h3><p>有返回值的 C 函数要有 <code>return</code> 语句</p><p>如果遗漏 <code>main()</code>函数中的 <code>return</code> 语句，程序在运行至最外面的右花括号（<code>&#125;</code>）时会返回 <code>0</code>。</p><h2 id="数据">数据</h2><p>有些数据类型在程序使用之前已经预先设定好了，在整个程序的运行过程中没有变化，这些称为常量（constant）</p><p>其他数据类型在程序运行期间可能会改变或被赋值，这些称为变量（variable）</p><p><img src="http://img.whl123456.top/image/image-20200526211617340.png" alt="C语言数据类型关键字"></p><ul><li><p>用 <code>int</code> 关键字来表示基本的整数类型</p></li><li><p><code>long</code>、<code>short</code> 和 <code>unsigned</code>和 C90 新增的 <code>signed</code> 用于提供基本整数类型的变式，例如 <code>unsigned short int</code> 和 <code>long long int</code>。</p></li><li><p><code>char</code> 关键字用于指定字母和其他字符（如，<code>#</code>、<code>$</code>、<code>%</code>和<code>*</code>）,<code>char</code> 类型也可以表示较小的整数</p></li><li><p><code>float</code>、<code>double</code> 和 <code>long double</code> 表示带小数点的数</p></li><li><p><code>_Bool </code>类型表示布尔值（<code>true</code> 或 <code>false</code>）</p></li><li><p><code>_complex</code> 和<code>_Imaginary</code> 分别表示复数和虚数</p></li></ul><blockquote><p><strong>位、字节和字</strong></p><p>最小的存储单元是位（bit），可以储存 0 或 1</p><p>字节（byte）是常用的计算机存储单位。对于几乎所有的机器，1 字节均为 8 位。</p><p>字（word）是设计计算机时给定的自然存储单位。对于 8 位的微型计算机（如，最初的苹果机），1 个字长只有 8 位。从那以后，个人计算机字长增至 16 位、32 位，直到目前的 64 位。</p></blockquote><h3 id="整数和浮点数">整数和浮点数</h3><p>整数和数学的概念一样，在 C 语言中，整数是没有小数部分的数</p><p>浮点数与数学中实数的概念差不多。2.75、3.16E7、7.00 和 2e-8 都是浮点数。3.16E7 表示 3.16×10<sup>7</sup></p><ul><li>整数没有小数部分，浮点数有小数部分。</li><li>浮点数可以表示的范围比整数大。</li><li>对于一些算术运算（如，两个很大的数相减），浮点数损失的精度更多。</li><li>因为在任何区间内（如，1.0 到 2.0 之间）都存在无穷多个实数，所以计算机的浮点数不能表示区间内所有的值。浮点数通常只是实际值的近似值。例如，7.0 可能被储存为浮点值 6.99999。</li><li>过去，浮点运算比整数运算慢。不过，现在许多 CPU 都包含浮点处理器，缩小了速度上的差距。</li></ul><h3 id="C-语言基本数据类型">C 语言基本数据类型</h3><h4 id="int-类型"><code>int</code> 类型</h4><p><code>int</code> 类型是有符号整型，即 <code>int</code> 类型的值必须是整数，可以是正整数、负整数或零。</p><p>一般而言，储存一个 <code>int</code> 要占用一个机器字长</p><p>ISO C 规定 <code>int</code> 的取值范围最小为-32768～32767</p><p>一般而言，系统用一个特殊位的值表示有符号整数的正负号</p><h5 id="声明-int-变量">声明 <code>int</code> 变量</h5><p>要声明多个变量，可以单独声明每个变量，也可在 int 后面列出多个变量名，变量名之间用逗号分隔。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> erns<span class="token punctuation">;</span> <span class="token keyword">int</span> hogs<span class="token punctuation">,</span> cows<span class="token punctuation">,</span> goats<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>提供值方法：1. 赋值；2. 通过函数，如<code>scanf()</code>获得值；3. 初始化变量</p><p>初始化（initialize）变量就是为变量赋一个初始值。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> hogs <span class="token operator">=</span> <span class="token number">21</span><span class="token punctuation">;</span> <span class="token keyword">int</span> cows <span class="token operator">=</span> <span class="token number">32</span><span class="token punctuation">,</span> goats <span class="token operator">=</span> <span class="token number">14</span><span class="token punctuation">;</span> <span class="token keyword">int</span> dogs<span class="token punctuation">,</span> cats <span class="token operator">=</span> <span class="token number">94</span><span class="token punctuation">;</span> <span class="token comment">/* 有效，但是这种格式很糟糕 */</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>以上示例的最后一行，只初始化了 cats，并未初始化 dogs。这种写法很容易让人误认为 dogs 也被初始化为 94，所以最好不要把初始化的变量和未初始化的变量放在同一条声明中。</p><h5 id="打印-int-值">打印 <code>int</code> 值</h5><p>可以使用 <code>printf()</code>函数打印 <code>int</code> 类型的值</p><p><code>%d</code>称为<strong>转换说明</strong>，它指定了 <code>printf()</code>应使用什么格式来显示一个值。格式化字符串中的每个<code>%d</code> 都与待打印变量列表中相应的 <code>int</code> 值匹配。</p><h5 id="八进制和十六进制">八进制和十六进制</h5><p>在 C 语言中，用特定的前缀表示使用哪种进制。</p><p>0x 或 0X 前缀表示十六进制值，所以十进制数 16 表示成十六进制是 0x10 或 0X10。</p><p>与此类似，0 前缀表示八进制。例如，十进制数 16 表示成八进制是 020。</p><p>以十进制显示数字，使用<code>%d</code>；以八进制显示数字，使用<code>%o</code>；以十六进制显示数字，使用<code>%x</code>。</p><p>另外，要显示各进制数的前缀0、0x 和 0X，必须分别使用<code>%#o</code>、<code>%#x</code>、<code>%#X</code></p><h5 id="其他整数类型">其他整数类型</h5><p>C 语言提供 3 个附属关键字修饰基本整数类型：<code>short</code>、<code>long</code> 和 <code>unsigned</code></p><ul><li><p><code>short int</code> 类型（或者简写为 <code>short</code>）占用的存储空间可能比 <code>int</code> 类型少，常用于较小数值的场合以节省空间。与 <code>int</code> 类似，<code>short</code> 是有符号类型。</p></li><li><p><code>long int</code> 或 <code>long</code> 占用的存储空间可能比 <code>int</code> 多，适用于较大数值的场合。与 <code>int</code> 类似，<code>long</code>是有符号类型。</p></li><li><p><code>long long int</code> 或 <code>long long</code>（C99 标准加入）占用的储存空间可能比 <code>long</code> 多，适用于更大数值的场合。该类型<strong>至少占 64 位</strong>。与 <code>int</code> 类似，<code>long long</code> 是有符号类型。</p></li><li><p><code>unsigned int</code> 或 <code>unsigned</code> 只用于<strong>非负值</strong>的场合。这种类型与有符号类型表示的范围不同。例如，16 位 <code>unsigned int</code> 允许的取值范围是 0～65535，而不是-32768～32767。用于表示正负号的位现在用于表示另一个二进制位，所以无符号整型可以表示更大的数。</p></li><li><p>在 C90 标准中，添加了 <code>unsigned long int</code> 或 <code>unsigned long</code> 和 <code>unsigned int</code> 或 <code>unsigned short</code> 类型。C99 标准又添加了 <code>unsigned long long int</code> 或 <code>unsigned long long</code>。</p></li><li><p>在任何有符号类型前面添加关键字 <code>signed</code>，可强调使用有符号类型的意图。例如，<code>short</code>、<code>short int</code>、<code>signed short</code>、<code>signed short int</code> 都表示同一种类型。</p></li></ul><p><code>int</code> 类型那么多，应该如何选择？</p><p>首先，考虑 <code>unsigned</code> 类型。这种类型的数常用于计数，因为计数不用负数。而且，<code>unsigned</code> 类型可以表示更大的正数。</p><p>如果一个数超出了 <code>int</code> 类型的取值范围，且在 <code>long</code> 类型的取值范围内时，使用 <code>long</code> 类型。</p><p>然而，对于那些 <code>long</code> 占用的空间比 <code>int</code> 大的系统，使用 <code>long</code> 类型会减慢运算速度。因此，如非必要，请不要使用 <code>long</code> 类型。另外要注意一点：如果在 <code>long</code> 类型和 <code>int</code> 类型占用空间相同的机器上编写代码，当确实需要 32 位的整数时，应使用 <code>long</code> 类型而不是 <code>int</code> 类型，以便把程序移植到 16 位机后仍然可以正常工作。类似地，如果确实需要 64 位的整数，应使用 <code>long long</code> 类型。</p><p>如果在 <code>int</code> 设置为 32 位的系统中要使用 16 位的值，应使用 <code>short</code> 类型以节省存储空间。通常，只有当程序使用相对于系统可用内存较大的整型数组时，才需要重点考虑节省空间的问题。使用 <code>short</code> 类型的另一个原因是，计算机中某些组件使用的硬件寄存器是 16 位。</p><h4 id="char类型"><code>char</code>类型</h4><p><code>char</code> 类型用于储存字符（如，字母或标点符号），但是从技术层面看，<code>char</code> 是整数类型。</p><h5 id="声明-char-类型变量">声明 <code>char</code> 类型变量</h5><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">char</span> response<span class="token punctuation">;</span> <span class="token keyword">char</span> itable<span class="token punctuation">,</span> latan<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h5 id="字符常量和初始化">字符常量和初始化</h5><p>在 C 语言中，用单引号括起来的单个字符被称为字符常量（character constant）</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">char</span> broiled<span class="token punctuation">;</span>  <span class="token comment">/* 声明一个 char 类型的变量 */</span> broiled <span class="token operator">=</span> <span class="token string">'T'</span><span class="token punctuation">;</span> <span class="token comment">/* 为其赋值，正确 */</span> broiled <span class="token operator">=</span> T<span class="token punctuation">;</span>  <span class="token comment">/* 错误！此时 T 是一个变量 */</span> broiled <span class="token operator">=</span> <span class="token string">"T"</span><span class="token punctuation">;</span> <span class="token comment">/* 错误！此时"T"是一个字符串 */</span><span class="token keyword">char</span> grade <span class="token operator">=</span> <span class="token number">65</span><span class="token punctuation">;</span> <span class="token comment">/* 对于 ASCII，这样做没问题，但这是一种不好的编程风格 */</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="符号常量和-const常量">符号常量和 const常量</h5><p>符号常量通俗地讲就是“替换”，即用一个标识符来替代常量，又称为“宏定义”或者“宏替换”。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token expression">pi <span class="token number">3.14</span></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>另一种定义常量的方法是使用 <code>const</code></p><pre class="line-numbers language-none"><code class="language-none">const double pi &#x3D; 3.14;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>于是在程序中凡是使用pi的地方将在程序执行前全部自动替换为3.14。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token expression">pi <span class="token number">3.14</span></span></span><span class="token comment">//const double pi = 3.14;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">double</span> r <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%f\n"</span><span class="token punctuation">,</span> pi <span class="token operator">*</span> r <span class="token operator">*</span> r<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="非打印字符">非打印字符</h5><ol><li>使用 ASCII 码</li><li>用特殊的符号序列表示一些特殊的字符。这些符号序列叫作转义序列（escape sequence）</li></ol><p><img src="http://img.whl123456.top/image/image-20200526215203116.png" alt="转义序列"></p><h4 id="Bool-类型"><code>_Bool</code> 类型</h4><p>C99 标准添加了<code>_Bool</code> 类型，用于表示布尔值，即逻辑值 true 和 false。因为 C 语言用值 1 表示<br>true，值 0 表示 false，所以<code>_Bool</code> 类型实际上也是一种整数类型。但原则上它仅占用 1 位存储空间，<br>因为对 0 和 1 而言，1 位的存储空间足够了。</p><h4 id="可移植类型：stdint-h-和-inttypes-h">可移植类型：<code>stdint.h</code> 和 <code>inttypes.h</code></h4><p>C 语言提供了许多有用的整数类型。但是，某些类型名在不同系统中的功能不一样。C99 新增了两个<br>头文件 <code>stdint.h</code> 和 <code>inttypes.h</code>，以确保 C 语言的类型在各系统中的功能相同。</p><h4 id="float、double-和-long-double"><code>float</code>、<code>double</code> 和 <code>long double</code></h4><p>C 标准规定，<code>float</code> 类型必须至少能表示 6 位有效数字，且取值范围至少是 10<sup>-37</sup> ~10<sup>+37</sup>。</p><p><code>double</code> 类型和 <code>float</code> 类型的最小取值范围相同，但至少必须能表示 10 位有效数字。一般情况下，<code>double</code> 占用 64 位而不是 32 位。</p><p><code>long double</code>，以满足比 <code>double</code> 类型更高的精度要求。不过，C 只保证<code>long double</code> 类型至少与 <code>double</code> 类型的精度相同。</p><h4 id="类型大小">类型大小</h4><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">//* typesize.c -- 打印类型大小 */ </span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span> </span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token comment">/* C99 为类型大小提供%zd 转换说明 */</span>      <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Type int has a size of %zd bytes.\n"</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Type char has a size of %zd bytes.\n"</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Type long has a size of %zd bytes.\n"</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">long</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Type long long has a size of %zd bytes.\n"</span><span class="token punctuation">,</span>                <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">long</span> <span class="token keyword">long</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Type double has a size of %zd bytes.\n"</span><span class="token punctuation">,</span>               <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Type long double has a size of %zd bytes.\n"</span><span class="token punctuation">,</span>               <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">long</span> <span class="token keyword">double</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>sizeof</code> 是 C 语言的内置运算符，以字节为单位给出指定类型的大小。</p><p>C99 和 C11 提供<code>%zd</code> 转换说明匹配 <code>sizeof</code> 的返回类型1。一些不支持 C99 和 C11 的编译器可用<code>%u</code> 或<code>%lu</code> 代替<code>%zd</code>。</p><p>该程序的输出如下：</p><pre class="line-numbers language-none"><code class="language-none">Type int has a size of 4 bytes. Type char has a size of 1 bytes. Type long has a size of 8 bytes. Type long long has a size of 8 bytes. Type double has a size of 8 bytes. Type long double has a size of 16 bytes.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>C 语言定义了 <code>char</code> 类型是 1 字节，所以 <code>char</code> 类型的大小一定是 1 字节。</p><p>而在 <code>char</code> 类型为 16 位、<code>double</code>类型为 64 位的系统中，<code>sizeof</code> 给出的 <code>double</code> 是 4 字节。</p><h3 id="强制类型转换">强制类型转换</h3><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">double</span> r <span class="token operator">=</span> <span class="token number">12.56</span><span class="token punctuation">;</span><span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">,</span> b <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//r强制转换成int</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> a<span class="token operator">/</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%.1f"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span>a <span class="token operator">/</span> <span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//%.1f保留一位小数输出</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="字符串和格式化输入-输出">字符串和格式化输入/输出</h2><h3 id="字符串简介">字符串简介</h3><p>字符串（character string）是一个或多个字符的序列。</p><p>双引号仅告知编译器它括起来的是字符串，正如单引号用于标识单个字符一样。</p><h3 id="char-类型数组和-null-字符"><code>char</code> 类型数组和 <code>null</code> 字符</h3><p>C 语言没有专门用于储存字符串的变量类型，字符串都被储存在 <code>char</code> 类型的数组中。数组由连续的存<br>储单元组成，字符串中的字符被储存在相邻的存储单元中，每个单元储存一个字符。</p><p>数组末尾位置的字符<code>\0</code>。这是空字符（null character），C 语言用它标记字符串的结束。空字符不是数字 0，它是非打印字符，其 ASCII 码值是（或等价于）0。</p><h3 id="strlen-函数"><code>strlen()</code>函数</h3><p><code>strlen()</code>函数给出字符串中的字符长度。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">/* praise2.c */</span> <span class="token comment">// 如果编译器不识别%zd，尝试换成%u 或%lu。 </span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span> </span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span>      <span class="token comment">/* 提供 strlen()函数的原型 */</span> </span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token expression">PRAISE </span><span class="token string">"You are an extraordinary being."</span> </span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">char</span> name<span class="token punctuation">[</span><span class="token number">40</span><span class="token punctuation">]</span><span class="token punctuation">;</span>       <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"What's your name? "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%s"</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Hello, %s. %s\n"</span><span class="token punctuation">,</span> name<span class="token punctuation">,</span> PRAISE<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Your name of %zd letters occupies %zd memory cells.\n"</span><span class="token punctuation">,</span>                <span class="token function">strlen</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"The phrase of praise has %zd letters "</span><span class="token punctuation">,</span>                <span class="token function">strlen</span><span class="token punctuation">(</span>PRAISE<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"and occupies %zd memory cells.\n"</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span> PRAISE<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token comment">//What's your name? Serendipity Chance </span><span class="token comment">//Hello, Serendipity. You are an extraordinary being. </span><span class="token comment">//Your name of 11 letters occupies 40 memory cells. </span><span class="token comment">//The phrase of praise has 31 letters and occupies 32 memory cells.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>一般而言，C 把函数库中相关的函数归为一类，并为每类函数提供一个头文件。例如，<code>printf()</code>和<code>scanf()</code>都隶属标准输入和输出函数，使用 <code>stdio.h</code> 头文件。<code>string.h</code> 头文件中包含了 <code>strlen()</code>函数和其他一些与字符串相关的函数（如拷贝字符串的函数和字符串查找函数）。</p></blockquote><h3 id="常量和-C-预处理器">常量和 C 预处理器</h3><h3 id="printf-和-scanf"><code>printf()</code>和 <code>scanf()</code></h3><p><img src="http://img.whl123456.top/image/image-20200528222920536.png" alt="转换说明及其打印的输出结果"></p><h2 id="运算符、表达式和语句">运算符、表达式和语句</h2><h3 id="基本运算符">基本运算符</h3><h3 id="其他运算符">其他运算符</h3><h3 id="表达式和语句">表达式和语句</h3><h3 id="类型转换">类型转换</h3><h3 id="带参数的函数">带参数的函数</h3><h2 id="循环">循环</h2><h3 id="while循环"><code>while</code>循环</h3><h3 id="for-循环"><code>for</code> 循环</h3><h3 id="出口条件循环：do-while">出口条件循环：<code>do while</code></h3><h2 id="分支和跳转">分支和跳转</h2><h3 id="if-语句"><code>if</code> 语句</h3><h3 id="if-else-语句"><code>if else</code> 语句</h3><h3 id="逻辑运算符">逻辑运算符</h3><h3 id="条件运算符">条件运算符</h3><h3 id="continue-和-break"><code>continue</code> 和 <code>break</code></h3><h3 id="多重选择：switch-和-break">多重选择：<code>switch</code> 和 <code>break</code></h3><h3 id="goto-语句"><code>goto</code> 语句</h3><h2 id="字符输入-输出和输入验证">字符输入/输出和输入验证</h2><h3 id="单字符-I-O：getchar-和-putchar">单字符 I/O：<code>getchar()</code>和 <code>putchar()</code></h3><h3 id="缓冲区">缓冲区</h3><h3 id="结束键盘输入">结束键盘输入</h3><h3 id="重定向和文件">重定向和文件</h3><h2 id="函数">函数</h2><h3 id="常用math函数">常用math函数</h3><p>需要在程序开头加上<code>math.h</code>头文件</p><h4 id="fabs-double-x"><code>fabs(double x)</code></h4><p>该函数用于对 <code>double</code>型变量取绝对值</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;math.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">double</span> db <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">12.56</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%.2f\n"</span><span class="token punctuation">,</span> <span class="token function">fabs</span><span class="token punctuation">(</span>db<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//输出：12.56</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="floor（double-x）和-ceil（double-x）"><code>floor（double x）</code>和 <code>ceil（double x）</code></h4><p>分别用于 <code>double</code>型变量的向下取整和向上取整</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;math.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">double</span> db1 <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">12.56</span><span class="token punctuation">;</span><span class="token keyword">double</span> db2 <span class="token operator">=</span> <span class="token number">12.56</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%.0f %.0f\n"</span><span class="token punctuation">,</span> <span class="token function">floor</span><span class="token punctuation">(</span>db1<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">ceil</span><span class="token punctuation">(</span>db1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//输出：-13 -12</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%.0f %.0f\n"</span><span class="token punctuation">,</span> <span class="token function">floor</span><span class="token punctuation">(</span>db2<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">ceil</span><span class="token punctuation">(</span>db2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//输出：12 13</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="pow-double-r-double-p"><code>pow(double r,double p)</code></h4><p>返回r的p次幂的值</p><h4 id="sqrt（double-x）"><code>sqrt（double x）</code></h4><p>该函数用于返回 double型变量的算术平方根</p><h4 id="log（double-x）"><code>log（double x）</code></h4><p>该函数用于返回 double型变量的以自然对数为底的对数</p><h4 id="sin（-double-x）、cos（-double-x）和tan（-double-x）"><code>sin（ double x）、cos（ double x）和tan（ double x）</code></h4><h4 id="asin（double-x），-acos（double-x）F-atan-（double-x"><code>asin（double x）， acos（double x）F atan （double x)</code></h4><h4 id="round（double-x）"><code>round（double x）</code></h4><h2 id="数组和指针">数组和指针</h2><h3 id="数组">数组</h3><h3 id="多维数组">多维数组</h3><h3 id="指针和数组">指针和数组</h3><h3 id="函数、数组和指针">函数、数组和指针</h3><h3 id="指针操作">指针操作</h3><h2 id="字符串和字符串函数">字符串和字符串函数</h2><h2 id="枚举">枚举</h2><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">enum</span> <span class="token class-name">color</span> <span class="token punctuation">&#123;</span>RED<span class="token punctuation">,</span>YELLO<span class="token punctuation">,</span>GREEN<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">//RED = 0,YELLO = 1,GREEN = 3...</span><span class="token comment">// enum 枚举类型名字 &#123;名字0,…,名字n&#125;;</span><span class="token comment">// 枚举类型名字可忽略</span><span class="token keyword">void</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token keyword">enum</span> <span class="token class-name">color</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>用枚举而不是定义独立的const in变量</p><p>常量符号，它们的类型只能是int</p><h3 id="技巧：自动计数的枚举">技巧：自动计数的枚举</h3><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token keyword">enum</span> <span class="token class-name">COLOR</span> <span class="token punctuation">&#123;</span>RED<span class="token punctuation">,</span> YELLOW<span class="token punctuation">,</span> GREEN<span class="token punctuation">,</span> NumCOLORS<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token keyword">const</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>枚举中各常量值依次递加，故最后一个值可代表常量个数</p><h3 id="指定枚举量的值">指定枚举量的值</h3><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">enum</span> <span class="token class-name">COLOR</span> <span class="token punctuation">&#123;</span>RED<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> YELLOW<span class="token punctuation">,</span> GREEN<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">,</span> NumCOLORS<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">//YELLOW = 2,NumCOLORS?</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="存储类别、链接和内存管理">存储类别、链接和内存管理</h2><h2 id="文件输入-输出">文件输入/输出</h2><h2 id="结构和其他数据形式">结构和其他数据形式</h2><p>表达数据比较复杂，但需要一个整体来表达，使用结构——一个复合的数据类型</p><h3 id="声明结构类型">声明结构类型</h3><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token keyword">struct</span> <span class="token class-name">date</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> month<span class="token punctuation">;</span>    <span class="token keyword">int</span> day<span class="token punctuation">;</span>    <span class="token keyword">int</span> year<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">//注意分号</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span><span class="token keyword">char</span> <span class="token keyword">const</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">struct</span> <span class="token class-name">data</span> today<span class="token punctuation">;</span>        today<span class="token punctuation">.</span>month <span class="token operator">=</span> <span class="token number">06</span><span class="token punctuation">;</span>    today<span class="token punctuation">.</span>day <span class="token operator">=</span> <span class="token number">01</span><span class="token punctuation">;</span>    today<span class="token punctuation">.</span>year <span class="token operator">=</span> <span class="token number">2020</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Today's date is %i-%i-%i.\n"</span><span class="token punctuation">,</span>           today<span class="token punctuation">.</span>year<span class="token punctuation">,</span>today<span class="token punctuation">.</span>month<span class="token punctuation">,</span>today<span class="token punctuation">.</span>day<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>另两种声明结构的形式</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">struct</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> x<span class="token punctuation">;</span>    <span class="token keyword">int</span> y<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>p1<span class="token punctuation">,</span>p2<span class="token punctuation">;</span><span class="token comment">//p和p2都是一种无名结构，里面有x和y</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">struct</span> <span class="token class-name">ponit</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> x<span class="token punctuation">;</span>    <span class="token keyword">int</span> y<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>p1<span class="token punctuation">,</span>p2<span class="token punctuation">;</span><span class="token comment">//p和p2都是ponit的结构，里面有x和y</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="结构的初始化">结构的初始化</h3><p>两种方式</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">struct</span> <span class="token class-name">date</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> month<span class="token punctuation">;</span>    <span class="token keyword">int</span> day<span class="token punctuation">;</span>    <span class="token keyword">int</span> year<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">date</span> today <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">07</span><span class="token punctuation">,</span><span class="token number">31</span><span class="token punctuation">,</span><span class="token number">2014</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">date</span> thismonth <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">.</span>month<span class="token operator">=</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token punctuation">.</span>year<span class="token operator">=</span><span class="token number">2014</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">//此时day为0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="结构成员">结构成员</h3><p>数组的单元必须是相同类型，结构的成员可以是不同类型</p><p>访问成员</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span><span class="token keyword">char</span> <span class="token keyword">const</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">struct</span> <span class="token class-name">date</span><span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> month<span class="token punctuation">;</span>        <span class="token keyword">int</span> day<span class="token punctuation">;</span>        <span class="token keyword">int</span> year<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token keyword">struct</span> <span class="token class-name">date</span> today <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">07</span><span class="token punctuation">,</span><span class="token number">31</span><span class="token punctuation">,</span><span class="token number">2014</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span>today<span class="token punctuation">.</span>day<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="结构运算">结构运算</h3><p>要访问整个结构，直接用结构变量的名字</p><p>对于整个结构，可以做赋值、取地址，也可以传递给函数参数</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">p1 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">ponit</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">//相当于p1.x=5;p1.y=10;</span>p1<span class="token operator">=</span>p2<span class="token punctuation">;</span><span class="token comment">//相当于p1.x=p2.x; p1.y=p2.y</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="结构指针">结构指针</h3><p>结构变量的名字并不是结构变量的地址，必须使用&amp;运算符</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">struct</span> <span class="token class-name">date</span> today<span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">date</span> <span class="token operator">*</span>pDate <span class="token operator">=</span> <span class="token operator">&amp;</span>today<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="结构与函数">结构与函数</h3><h4 id="结构作为函数的参数">结构作为函数的参数</h4><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">numberOfDays</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">date</span> d<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>整个结构可以作为参数的值传入函数</li><li>在函数内<strong>新建</strong>一个结构变量，并<strong>复制</strong>调用者的结构的值</li><li>也可以返回一个结构</li></ul><h4 id="结构指针作为参数">结构指针作为参数</h4><blockquote><p>If a large structure is to be passed to a function, it is generally more efficient to pass a pointer than to copy the whole structure. ——K&amp;R</p></blockquote><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">struct</span> <span class="token class-name">date</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> month<span class="token punctuation">;</span>    <span class="token keyword">int</span> day<span class="token punctuation">;</span>    <span class="token keyword">int</span> year<span class="token punctuation">;</span><span class="token punctuation">&#125;</span> myday<span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">date</span> <span class="token operator">*</span>p <span class="token operator">=</span> <span class="token operator">&amp;</span>myday<span class="token punctuation">;</span><span class="token punctuation">(</span><span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token punctuation">.</span>month <span class="token operator">=</span> <span class="token number">12</span><span class="token punctuation">;</span><span class="token comment">//方法一</span>p<span class="token operator">-></span>month <span class="token operator">=</span> <span class="token number">12</span><span class="token punctuation">;</span><span class="token comment">//方法二</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>用<code>-&gt;</code>表示指针所指的结构变量中的成员</p><h4 id="结构作为函数的返回值">结构作为函数的返回值</h4><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">struct</span> <span class="token class-name">point</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> x<span class="token punctuation">;</span>    <span class="token keyword">int</span> y<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">struct</span> <span class="token class-name">point</span> <span class="token function">getstruct1</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">struct</span> <span class="token class-name">ponit</span> p<span class="token punctuation">;</span>    <span class="token function">scanf_s</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>p<span class="token punctuation">.</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">scanf_s</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>p<span class="token punctuation">.</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> p<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">struct</span> <span class="token class-name">point</span><span class="token operator">*</span> <span class="token function">getstruct2</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">ponit</span> <span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">struct</span> <span class="token class-name">ponit</span> p<span class="token punctuation">;</span>    <span class="token function">scanf_s</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>p<span class="token operator">-></span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">scanf_s</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>p<span class="token operator">-></span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> p<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="位操作">位操作</h2><h2 id="C-预处理器和-C-库">C 预处理器和 C 库</h2><h2 id="高级数据表示">高级数据表示</h2>]]></content>
      
      
      <categories>
          
          <category> C语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java多线程</title>
      <link href="2020/04/06/Java%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
      <url>2020/04/06/Java%E5%A4%9A%E7%BA%BF%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<p>Java多线程</p><hr><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 多线程创建</span><span class="token comment">/*  1. 创建一个继承与Thread类的子类    2. 重写Thread类的run()方法    3. 创建Thread类的子类的对象    4. 通过此对象调用start()*/</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CreateThread</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//3.创建Thread类的子类的对象</span>        <span class="token class-name">MyThread</span> t1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//通过此对象调用start()</span>        t1<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//线程开始执行或调用当前线程的run()方法</span><span class="token comment">//        t1.run();//直接调用run()方法是单线程</span>        <span class="token comment">//获取当前线程的名字</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Thread.currentThread().getName() = "</span> <span class="token operator">+</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//hello先输出</span>        <span class="token comment">//再创建线程</span><span class="token comment">//        t1.start();//报错:IllegalThreadStateException</span>        <span class="token comment">//重新创建一个线程对象</span>        <span class="token class-name">MyThread</span> t2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t2<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//1.创建一个继承与Thread类的子类</span><span class="token keyword">class</span> <span class="token class-name">MyThread</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//2.重写Thread类的run()方法</span>    <span class="token comment">//将此线程的操作声明在run()中</span>    <span class="token annotation punctuation">@Override</span><span class="token comment">// run+Enter快捷方式</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//获取当前线程的名字</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Thread.currentThread().getName() = "</span> <span class="token operator">+</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">50</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"i = "</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 创建两个线程一个遍历偶数一个遍历奇数</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CreateThreadTest</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        evenThread t1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">evenThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        oddThread t2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">oddThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t1<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t2<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//简便方式:匿名子类</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"：i = "</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//遍历偶数</span><span class="token keyword">class</span> evenThread <span class="token keyword">extends</span> <span class="token class-name">Thread</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"：i = "</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//遍历奇数</span><span class="token keyword">class</span> oddThread <span class="token keyword">extends</span> <span class="token class-name">Thread</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"：i = "</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// Thread中常用方法</span><span class="token comment">/** getPriority() 获取线程优先级* setPriority() 改变线程优先级*   MAX_PRIORITY --> 10*   MIN_PRIORITY --> 1*   NORM_PRIORITY --> 5* setName()     设置线程名* sleep()       睡眠指定时间* join()        阻塞* isAlive()     查看线程状态* yield()       释放当前CPU的使用权* */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ThreadMethod</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        thread t1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">thread</span><span class="token punctuation">(</span><span class="token string">"0"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t1<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"A"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//设置线程名</span>        t1<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"t1.isAlive() = "</span> <span class="token operator">+</span> t1<span class="token punctuation">.</span><span class="token function">isAlive</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//主线程命名</span>        <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"主线程"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//获取线程名称</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Thread.currentThread().getName() = "</span> <span class="token operator">+</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//获取线程优先级</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Thread.currentThread().getPriority() = "</span> <span class="token operator">+</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getPriority</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//改变线程优先级</span>        <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setPriority</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span>MAX_PRIORITY<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Thread.currentThread().getPriority() = "</span> <span class="token operator">+</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getPriority</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//            try &#123;</span><span class="token comment">//                //睡眠指定时间</span><span class="token comment">//                Thread.currentThread().sleep(1000);</span><span class="token comment">//            &#125;</span><span class="token comment">//            catch (InterruptedException e) &#123;</span><span class="token comment">//                e.printStackTrace();</span><span class="token comment">//            &#125;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"：i = "</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> <span class="token number">20</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                    <span class="token comment">//阻塞直到其他线程完成</span>                    t1<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"t1.isAlive() = "</span> <span class="token operator">+</span> t1<span class="token punctuation">.</span><span class="token function">isAlive</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> thread <span class="token keyword">extends</span> <span class="token class-name">Thread</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"：i = "</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">%</span> <span class="token number">10</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token comment">//释放当前CPU的使用权</span>                <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">yield</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//通过构造器对线程命名</span>    <span class="token keyword">public</span> <span class="token function">thread</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> 多线程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java容器</title>
      <link href="2020/04/06/Java%E5%AE%B9%E5%99%A8/"/>
      <url>2020/04/06/Java%E5%AE%B9%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<p>Java数组与集合</p><hr><h2 id="数组">数组</h2><p>如果我们有一组类型相同的变量，例如，5位同学的成绩，可以这么写：</p><pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">public class Main &#123;    public static void main(String[] args) &#123;        &#x2F;&#x2F; 5位同学的成绩:        int n1 &#x3D; 68;        int n2 &#x3D; 79;        int n3 &#x3D; 91;        int n4 &#x3D; 85;        int n5 &#x3D; 62;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>但其实没有必要定义5个<code>int</code>变量。可以使用数组来表示“一组”<code>int</code>类型。代码如下：</p><pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">&#x2F;&#x2F; 数组public class Main &#123;    public static void main(String[] args) &#123;        &#x2F;&#x2F; 5位同学的成绩:        int[] ns &#x3D; new int[5];        ns[0] &#x3D; 68;        ns[1] &#x3D; 79;        ns[2] &#x3D; 91;        ns[3] &#x3D; 85;        ns[4] &#x3D; 62;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>数组能够顺序存储相同类型的多个数据。除了存储数据，我们也希望能够访问数据。访问数组中的某个元素的方法是将其编号然后<strong>索引</strong>。如果我们有 N 个值，它们的编号则为 0 至 N-1。这样对于 0 到 N-1 之间任意的 i，我们就能够在 Java 代码中用 <code>a[i]</code> 唯一地表示第 i 个元素的值。在 Java中这种数组被称为一维数组。</p><h3 id="创建并初始化数组">创建并初始化数组</h3><p>在 Java 程序中创建一个数组需要三步：</p><ul><li>声明数组的名字和类型；</li><li>创建数组；</li><li>初始化数组元素。</li></ul><p>定义一个数组类型的变量，使用数组类型“<code>类型[]</code>”，例如，<code>int[]</code>。和单个基本类型变量不同，数组变量初始化必须使用<code>new int[5]</code>表示创建一个可容纳5个<code>int</code>元素的数组。</p><p>Java的数组有几个特点：</p><ul><li>数组所有元素初始化为默认值，整型都是<code>0</code>，浮点型是<code>0.0</code>，布尔型是<code>false</code>；</li><li>数组一旦创建后，大小就不可改变。</li></ul><p>要访问数组中的某一个元素，需要使用索引。数组索引从<code>0</code>开始，例如，5个元素的数组，索引范围是<code>0</code>~<code>4</code>。</p><p>可以修改数组中的某一个元素，使用赋值语句，例如，<code>ns[1] = 79;</code>。</p><p>可以用<code>数组变量.length</code>获取数组大小：</p><pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">&#x2F;&#x2F; 数组public class Main &#123;    public static void main(String[] args) &#123;        &#x2F;&#x2F; 5位同学的成绩:        int[] ns &#x3D; new int[5];        System.out.println(ns.length); &#x2F;&#x2F; 5    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>数组是引用类型，在使用索引访问数组元素时，如果索引超出范围，运行时将报错：</p><pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">&#x2F;&#x2F; 数组public class Main &#123;    public static void main(String[] args) &#123;        &#x2F;&#x2F; 5位同学的成绩:        int[] ns &#x3D; new int[5];        int n &#x3D; 5;        System.out.println(ns[n]); &#x2F;&#x2F; 索引n不能超出范围    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>也可以在定义数组时直接指定初始化的元素，这样就不必写出数组大小，而是由编译器自动推算数组大小。例如：</p><pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">&#x2F;&#x2F; 数组public class Main &#123;    public static void main(String[] args) &#123;        &#x2F;&#x2F; 5位同学的成绩:        int[] ns &#x3D; new int[] &#123; 68, 79, 91, 85, 62 &#125;;        System.out.println(ns.length); &#x2F;&#x2F; 编译器自动推算数组大小为5    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>还可以进一步简写为：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> ns <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token number">68</span><span class="token punctuation">,</span> <span class="token number">79</span><span class="token punctuation">,</span> <span class="token number">91</span><span class="token punctuation">,</span> <span class="token number">85</span><span class="token punctuation">,</span> <span class="token number">62</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>注意数组是引用类型，并且数组大小不可变。我们观察下面的代码：</p><pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">&#x2F;&#x2F; 数组public class Main &#123;    public static void main(String[] args) &#123;        &#x2F;&#x2F; 5位同学的成绩:        int[] ns;        ns &#x3D; new int[] &#123; 68, 79, 91, 85, 62 &#125;;        System.out.println(ns.length); &#x2F;&#x2F; 5        ns &#x3D; new int[] &#123; 1, 2, 3 &#125;;        System.out.println(ns.length); &#x2F;&#x2F; 3    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>数组大小变了吗？看上去好像是变了，但其实根本没变。</p><p>对于数组<code>ns</code>来说，执行<code>ns = new int[] &#123; 68, 79, 91, 85, 62 &#125;;</code>时，它指向一个5个元素的数组：</p><pre class="line-numbers language-ascii" data-language="ascii"><code class="language-ascii">     ns      │      ▼┌───┬───┬───┬───┬───┬───┬───┐│   │68 │79 │91 │85 │62 │   │└───┴───┴───┴───┴───┴───┴───┘<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>执行<code>ns = new int[] &#123; 1, 2, 3 &#125;;</code>时，它指向一个<em>新的</em>3个元素的数组：</p><pre class="line-numbers language-ascii" data-language="ascii"><code class="language-ascii">     ns ──────────────────────┐                              │                              ▼┌───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┐│   │68 │79 │91 │85 │62 │   │ 1 │ 2 │ 3 │   │└───┴───┴───┴───┴───┴───┴───┴───┴───┴───┴───┘<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>但是，原有的5个元素的数组并没有改变，只是无法通过变量<code>ns</code>引用到它们而已。</p><h3 id="字符串数组">字符串数组</h3><p>如果数组元素不是基本类型，而是一个引用类型，那么，修改数组元素会有哪些不同？</p><p>字符串是引用类型，因此我们先定义一个字符串数组：</p><pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">String[] names &#x3D; &#123;    &quot;ABC&quot;, &quot;XYZ&quot;, &quot;zoo&quot;&#125;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>对于<code>String[]</code>类型的数组变量<code>names</code>，它实际上包含3个元素，但每个元素都指向某个字符串对象：</p><pre class="line-numbers language-ascii" data-language="ascii"><code class="language-ascii">          ┌─────────────────────────┐    names │   ┌─────────────────────┼───────────┐      │   │   │                     │           │      ▼   │   │                     ▼           ▼┌───┬───┬─┴─┬─┴─┬───┬───────┬───┬───────┬───┬───────┬───┐│   │░░░│░░░│░░░│   │ &quot;ABC&quot; │   │ &quot;XYZ&quot; │   │ &quot;zoo&quot; │   │└───┴─┬─┴───┴───┴───┴───────┴───┴───────┴───┴───────┴───┘      │                 ▲      └─────────────────┘<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>对<code>names[1]</code>进行赋值，例如<code>names[1] = &quot;cat&quot;;</code>，效果如下：</p><pre class="line-numbers language-ascii" data-language="ascii"><code class="language-ascii">          ┌─────────────────────────────────────────────────┐    names │   ┌─────────────────────────────────┐           │      │   │   │                                 │           │      ▼   │   │                                 ▼           ▼┌───┬───┬─┴─┬─┴─┬───┬───────┬───┬───────┬───┬───────┬───┬───────┬───┐│   │░░░│░░░│░░░│   │ &quot;ABC&quot; │   │ &quot;XYZ&quot; │   │ &quot;zoo&quot; │   │ &quot;cat&quot; │   │└───┴─┬─┴───┴───┴───┴───────┴───┴───────┴───┴───────┴───┴───────┴───┘      │                 ▲      └─────────────────┘<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里注意到原来<code>names[1]</code>指向的字符串<code>&quot;XYZ&quot;</code>并没有改变，仅仅是将<code>names[1]</code>的引用从指向<code>&quot;XYZ&quot;</code>改成了指向<code>&quot;cat&quot;</code>，其结果是字符串<code>&quot;XYZ&quot;</code>再也无法通过<code>names[1]</code>访问到了。</p><p>对“指向”有了更深入的理解后，试解释如下代码：</p><pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">&#x2F;&#x2F; 数组public class Main &#123;    public static void main(String[] args) &#123;        String[] names &#x3D; &#123;&quot;ABC&quot;, &quot;XYZ&quot;, &quot;zoo&quot;&#125;;        String s &#x3D; names[1];        names[1] &#x3D; &quot;cat&quot;;        System.out.println(s); &#x2F;&#x2F; s是&quot;XYZ&quot;还是&quot;cat&quot;?    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="数组操作">数组操作</h3><h4 id="遍历数组">遍历数组</h4><p>我们在Java程序基础里介绍了数组这种数据类型。有了数组，我们还需要来操作它。而数组最常见的一个操作就是遍历。</p><p>通过<code>for</code>循环就可以遍历数组。因为数组的每个元素都可以通过索引来访问，因此，使用标准的<code>for</code>循环可以完成一个数组的遍历：</p><pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">&#x2F;&#x2F; 遍历数组public class Main &#123;    public static void main(String[] args) &#123;        int[] ns &#x3D; &#123; 1, 4, 9, 16, 25 &#125;;        for (int i&#x3D;0; i&lt;ns.length; i++) &#123;            int n &#x3D; ns[i];            System.out.println(n);        &#125;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>为了实现<code>for</code>循环遍历，初始条件为<code>i=0</code>，因为索引总是从<code>0</code>开始，继续循环的条件为<code>i，因为当</code>i=ns.length<code>时，</code>i<code>已经超出了索引范围（索引范围是</code>0<code>~</code>ns.length-1<code>），每次循环后，</code>i++`。</p><p>第二种方式是使用<code>for each</code>循环，直接迭代数组的每个元素：</p><pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">&#x2F;&#x2F; 遍历数组public class Main &#123;    public static void main(String[] args) &#123;        int[] ns &#x3D; &#123; 1, 4, 9, 16, 25 &#125;;        for (int n : ns) &#123;            System.out.println(n);        &#125;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意：在<code>for (int n : ns)</code>循环中，变量<code>n</code>直接拿到<code>ns</code>数组的元素，而不是索引。</p><p>显然<code>for each</code>循环更加简洁。但是，<code>for each</code>循环无法拿到数组的索引，因此，到底用哪一种<code>for</code>循环，取决于我们的需要。</p><h4 id="打印数组内容">打印数组内容</h4><p>直接打印数组变量，得到的是数组在JVM中的引用地址：</p><pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">int[] ns &#x3D; &#123; 1, 1, 2, 3, 5, 8 &#125;;System.out.println(ns); &#x2F;&#x2F; 类似 [I@7852e922<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>这并没有什么意义，因为我们希望打印的数组的元素内容。因此，使用<code>for each</code>循环来打印它：</p><pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">int[] ns &#x3D; &#123; 1, 1, 2, 3, 5, 8 &#125;;for (int n : ns) &#123;    System.out.print(n + &quot;, &quot;);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>使用<code>for each</code>循环打印也很麻烦。幸好Java标准库提供了<code>Arrays.toString()</code>，可以快速打印数组内容：</p><pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">&#x2F;&#x2F; 遍历数组import java.util.Arrays;public class Main &#123;    public static void main(String[] args) &#123;        int[] ns &#x3D; &#123; 1, 1, 2, 3, 5, 8 &#125;;        System.out.println(Arrays.toString(ns));    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>倒序遍历数组</p><pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">public class Main &#123;    public static void main(String[] args) &#123;        int[] ns &#x3D; &#123;1, 1, 2, 3, 5, 8&#125;;        for (int i&#x3D;ns.length-1; i&gt;&#x3D;0; i--) &#123;            System.out.println(ns[i]);        &#125;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="数组排序">数组排序</h4><p>对数组进行排序是程序中非常基本的需求。常用的排序算法有冒泡排序、插入排序和快速排序等。</p><p>我们来看一下如何使用冒泡排序算法对一个整型数组从小到大进行排序：</p><pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">&#x2F;&#x2F; 冒泡排序import java.util.Arrays;public class Main &#123;    public static void main(String[] args) &#123;        int[] ns &#x3D; &#123; 28, 12, 89, 73, 65, 18, 96, 50, 8, 36 &#125;;        &#x2F;&#x2F; 排序前:        System.out.println(Arrays.toString(ns));        for (int i &#x3D; 0; i &lt; ns.length - 1; i++) &#123;            for (int j &#x3D; 0; j &lt; ns.length - i - 1; j++) &#123;                if (ns[j] &gt; ns[j+1]) &#123;                    &#x2F;&#x2F; 交换ns[j]和ns[j+1]:                    int tmp &#x3D; ns[j];                    ns[j] &#x3D; ns[j+1];                    ns[j+1] &#x3D; tmp;                &#125;            &#125;        &#125;        &#x2F;&#x2F; 排序后:        System.out.println(Arrays.toString(ns));    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>冒泡排序的特点是，每一轮循环后，最大的一个数被交换到末尾，因此，下一轮循环就可以“刨除”最后的数，每一轮循环都比上一轮循环的结束位置靠前一位。</p><p>另外，注意到交换两个变量的值必须借助一个临时变量。像这么写是错误的：</p><pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">int x &#x3D; 1;int y &#x3D; 2;x &#x3D; y; &#x2F;&#x2F; x现在是2y &#x3D; x; &#x2F;&#x2F; y现在还是2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>正确的写法是：</p><pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">int x &#x3D; 1;int y &#x3D; 2;int t &#x3D; x; &#x2F;&#x2F; 把x的值保存在临时变量t中, t现在是1x &#x3D; y; &#x2F;&#x2F; x现在是2y &#x3D; t; &#x2F;&#x2F; y现在是t的值1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>实际上，Java的标准库已经内置了排序功能，我们只需要调用JDK提供的<code>Arrays.sort()</code>就可以排序：</p><pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">&#x2F;&#x2F; 排序import java.util.Arrays;public class Main &#123;    public static void main(String[] args) &#123;        int[] ns &#x3D; &#123; 28, 12, 89, 73, 65, 18, 96, 50, 8, 36 &#125;;        Arrays.sort(ns);        System.out.println(Arrays.toString(ns));    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>必须注意，对数组排序实际上修改了数组本身。例如，排序前的数组是：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> ns <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">5</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在内存中，这个整型数组表示如下：</p><pre class="line-numbers language-ascii" data-language="ascii"><code class="language-ascii">      ┌───┬───┬───┬───┐ns───&gt;│ 9 │ 3 │ 6 │ 5 │      └───┴───┴───┴───┘<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>当我们调用<code>Arrays.sort(ns);</code>后，这个整型数组在内存中变为：</p><pre class="line-numbers language-ascii" data-language="ascii"><code class="language-ascii">      ┌───┬───┬───┬───┐ns───&gt;│ 3 │ 5 │ 6 │ 9 │      └───┴───┴───┴───┘<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>即变量<code>ns</code>指向的数组内容已经被改变了。</p><p>如果对一个字符串数组进行排序，例如：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> ns <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token string">"banana"</span><span class="token punctuation">,</span> <span class="token string">"apple"</span><span class="token punctuation">,</span> <span class="token string">"pear"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>排序前，这个数组在内存中表示如下：</p><pre class="line-numbers language-ascii" data-language="ascii"><code class="language-ascii">                   ┌──────────────────────────────────┐               ┌───┼──────────────────────┐           │               │   │                      ▼           ▼         ┌───┬─┴─┬─┴─┬───┬────────┬───┬───────┬───┬──────┬───┐ns ─────&gt;│░░░│░░░│░░░│   │&quot;banana&quot;│   │&quot;apple&quot;│   │&quot;pear&quot;│   │         └─┬─┴───┴───┴───┴────────┴───┴───────┴───┴──────┴───┘           │                 ▲           └─────────────────┘<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>调用<code>Arrays.sort(ns);</code>排序后，这个数组在内存中表示如下：</p><pre class="line-numbers language-ascii" data-language="ascii"><code class="language-ascii">                   ┌──────────────────────────────────┐               ┌───┼──────────┐                       │               │   │          ▼                       ▼         ┌───┬─┴─┬─┴─┬───┬────────┬───┬───────┬───┬──────┬───┐ns ─────&gt;│░░░│░░░│░░░│   │&quot;banana&quot;│   │&quot;apple&quot;│   │&quot;pear&quot;│   │         └─┬─┴───┴───┴───┴────────┴───┴───────┴───┴──────┴───┘           │                              ▲           └──────────────────────────────┘<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>原来的3个字符串在内存中均没有任何变化，但是<code>ns</code>数组的每个元素指向变化了。</p><h4 id="典型的数组处理代码">典型的数组处理代码</h4><p>找出数组中最大的元素</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">double</span> max <span class="token operator">=</span> a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> a<span class="token punctuation">.</span>lenth<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">></span> max<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        max <span class="token operator">=</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>计算数组元素的平均值</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span> <span class="token class-name">N</span> <span class="token operator">=</span> a<span class="token punctuation">.</span>length<span class="token punctuation">;</span><span class="token keyword">double</span> sum <span class="token operator">=</span> <span class="token number">0.0</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token class-name">N</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    sum <span class="token operator">+=</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">double</span> average <span class="token operator">=</span> sum <span class="token operator">/</span> <span class="token class-name">N</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>复制数组</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span> <span class="token class-name">N</span> <span class="token operator">=</span> a<span class="token punctuation">.</span>length<span class="token punctuation">;</span><span class="token keyword">double</span><span class="token punctuation">[</span><span class="token punctuation">]</span> b <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">double</span><span class="token punctuation">[</span><span class="token class-name">N</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token class-name">N</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>   b<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>颠倒数组元素的顺序</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span> <span class="token class-name">N</span> <span class="token operator">=</span> a<span class="token punctuation">.</span>length<span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token class-name">N</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">double</span> temp <span class="token operator">=</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span><span class="token class-name">N</span><span class="token operator">-</span><span class="token number">1</span><span class="token operator">-</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    a<span class="token punctuation">[</span><span class="token class-name">N</span><span class="token operator">-</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>矩阵相乘（方阵）<code>a[][] * b[][] = c[][]</code></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span> <span class="token class-name">N</span> <span class="token operator">=</span> a<span class="token punctuation">.</span>length<span class="token punctuation">;</span><span class="token keyword">double</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> c <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">double</span><span class="token punctuation">[</span><span class="token class-name">N</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token class-name">N</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token class-name">N</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token class-name">N</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">// 计算行 i 和列 j 的点乘</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> k <span class="token operator">&lt;</span> <span class="token class-name">N</span><span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            c<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+=</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">*</span>b<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="多维数组">多维数组</h3><h4 id="二维数组">二维数组</h4><p>二维数组就是数组的数组。定义一个二维数组如下：</p><pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">&#x2F;&#x2F; 二维数组public class Main &#123;    public static void main(String[] args) &#123;        int[][] ns &#x3D; &#123;            &#123; 1, 2, 3, 4 &#125;,            &#123; 5, 6, 7, 8 &#125;,            &#123; 9, 10, 11, 12 &#125;        &#125;;        System.out.println(ns.length); &#x2F;&#x2F; 3    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>因为<code>ns</code>包含3个数组，因此，<code>ns.length</code>为<code>3</code>。实际上<code>ns</code>在内存中的结构如下：</p><pre class="line-numbers language-ascii" data-language="ascii"><code class="language-ascii">                    ┌───┬───┬───┬───┐         ┌───┐  ┌──&gt;│ 1 │ 2 │ 3 │ 4 │ns ─────&gt;│░░░│──┘   └───┴───┴───┴───┘         ├───┤      ┌───┬───┬───┬───┐         │░░░│─────&gt;│ 5 │ 6 │ 7 │ 8 │         ├───┤      └───┴───┴───┴───┘         │░░░│──┐   ┌───┬───┬───┬───┐         └───┘  └──&gt;│ 9 │10 │11 │12 │                    └───┴───┴───┴───┘<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果我们定义一个普通数组<code>arr0</code>，然后把<code>ns[0]</code>赋值给它：</p><pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">&#x2F;&#x2F; 二维数组public class Main &#123;    public static void main(String[] args) &#123;        int[][] ns &#x3D; &#123;            &#123; 1, 2, 3, 4 &#125;,            &#123; 5, 6, 7, 8 &#125;,            &#123; 9, 10, 11, 12 &#125;        &#125;;        int[] arr0 &#x3D; ns[0];        System.out.println(arr0.length); &#x2F;&#x2F; 4    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>实际上<code>arr0</code>就获取了<code>ns</code>数组的第0个元素。因为<code>ns</code>数组的每个元素也是一个数组，因此，<code>arr0</code>指向的数组就是<code>&#123; 1, 2, 3, 4 &#125;</code>。在内存中，结构如下：</p><pre class="line-numbers language-ascii" data-language="ascii"><code class="language-ascii">            arr0 ─────┐                      ▼                    ┌───┬───┬───┬───┐         ┌───┐  ┌──&gt;│ 1 │ 2 │ 3 │ 4 │ns ─────&gt;│░░░│──┘   └───┴───┴───┴───┘         ├───┤      ┌───┬───┬───┬───┐         │░░░│─────&gt;│ 5 │ 6 │ 7 │ 8 │         ├───┤      └───┴───┴───┴───┘         │░░░│──┐   ┌───┬───┬───┬───┐         └───┘  └──&gt;│ 9 │10 │11 │12 │                    └───┴───┴───┴───┘<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>访问二维数组的某个元素需要使用<code>array[row][col]</code>，例如：</p><pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">System.out.println(ns[1][2]); &#x2F;&#x2F; 7<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>二维数组的每个数组元素的长度并不要求相同，例如，可以这么定义<code>ns</code>数组：</p><pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">int[][] ns &#x3D; &#123;    &#123; 1, 2, 3, 4 &#125;,    &#123; 5, 6 &#125;,    &#123; 7, 8, 9 &#125;&#125;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这个二维数组在内存中的结构如下：</p><pre class="line-numbers language-ascii" data-language="ascii"><code class="language-ascii">                    ┌───┬───┬───┬───┐         ┌───┐  ┌──&gt;│ 1 │ 2 │ 3 │ 4 │ns ─────&gt;│░░░│──┘   └───┴───┴───┴───┘         ├───┤      ┌───┬───┐         │░░░│─────&gt;│ 5 │ 6 │         ├───┤      └───┴───┘         │░░░│──┐   ┌───┬───┬───┐         └───┘  └──&gt;│ 7 │ 8 │ 9 │                    └───┴───┴───┘<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>要打印一个二维数组，可以使用两层嵌套的for循环：</p><pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">for (int[] arr : ns) &#123;    for (int n : arr) &#123;        System.out.print(n);        System.out.print(&#39;, &#39;);    &#125;    System.out.println();&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>或者使用Java标准库的<code>Arrays.deepToString()</code>：</p><pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">&#x2F;&#x2F; 二维数组import java.util.Arrays;public class Main &#123;    public static void main(String[] args) &#123;        int[][] ns &#x3D; &#123;            &#123; 1, 2, 3, 4 &#125;,            &#123; 5, 6, 7, 8 &#125;,            &#123; 9, 10, 11, 12 &#125;        &#125;;        System.out.println(Arrays.deepToString(ns));    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="三维数组">三维数组</h4><p>三维数组就是二维数组的数组。可以这么定义一个三维数组：</p><pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">int[][][] ns &#x3D; &#123;    &#123;        &#123;1, 2, 3&#125;,        &#123;4, 5, 6&#125;,        &#123;7, 8, 9&#125;    &#125;,    &#123;        &#123;10, 11&#125;,        &#123;12, 13&#125;    &#125;,    &#123;        &#123;14, 15, 16&#125;,        &#123;17, 18&#125;    &#125;&#125;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>它在内存中的结构如下：</p><pre class="line-numbers language-ascii" data-language="ascii"><code class="language-ascii">                              ┌───┬───┬───┐                   ┌───┐  ┌──&gt;│ 1 │ 2 │ 3 │               ┌──&gt;│░░░│──┘   └───┴───┴───┘               │   ├───┤      ┌───┬───┬───┐               │   │░░░│─────&gt;│ 4 │ 5 │ 6 │               │   ├───┤      └───┴───┴───┘               │   │░░░│──┐   ┌───┬───┬───┐        ┌───┐  │   └───┘  └──&gt;│ 7 │ 8 │ 9 │ns ────&gt;│░░░│──┘              └───┴───┴───┘        ├───┤      ┌───┐      ┌───┬───┐        │░░░│─────&gt;│░░░│─────&gt;│10 │11 │        ├───┤      ├───┤      └───┴───┘        │░░░│──┐   │░░░│──┐   ┌───┬───┐        └───┘  │   └───┘  └──&gt;│12 │13 │               │              └───┴───┘               │   ┌───┐      ┌───┬───┬───┐               └──&gt;│░░░│─────&gt;│14 │15 │16 │                   ├───┤      └───┴───┴───┘                   │░░░│──┐   ┌───┬───┐                   └───┘  └──&gt;│17 │18 │                              └───┴───┘<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果我们要访问三维数组的某个元素，例如，<code>ns[2][0][1]</code>，只需要顺着定位找到对应的最终元素<code>15</code>即可。</p><p>理论上，我们可以定义任意的N维数组。但在实际应用中，除了二维数组在某些时候还能用得上，更高维度的数组很少使用。</p><h2 id="集合">集合</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">ArrayList</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Basis</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//创建</span>        <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> ints <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//添加</span>        ints<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ints<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ints<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ints<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ints<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ints<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//遍历</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> ints<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"ints.get(%d) = %d"</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span> ints<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">//返回元素数量</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"ints.size = "</span> <span class="token operator">+</span> ints<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//返回指定索引对应元素</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"ints.get(1) = "</span> <span class="token operator">+</span> ints<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="泛型">泛型</h2>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Django</title>
      <link href="2020/04/06/Django/"/>
      <url>2020/04/06/Django/</url>
      
        <content type="html"><![CDATA[<p>基于Django官方文档</p><hr><h2 id="使用Pycharm创建Django">使用Pycharm创建Django</h2><p><img src="http://img.whl123456.top/image/%E4%BD%BF%E7%94%A8Pycharm%E5%88%9B%E5%BB%BADjango.png" alt="使用Pycharm创建Django"></p><p>Django项目结构</p><pre class="line-numbers language-none"><code class="language-none">DjangoDemo # 根目录只是项目的容器 ├── db.sqlite3 # 数据库文件  ├── DjangoDemo          # 纯 Python 包 │   ├── asgi.py         # 作为项目运行在 ASGI 兼容的Web服务器上的入口 │   ├── wsgi.py         # 作为项目运行在 WSGI 兼容的Web服务器上的入口 │   ├── settings.py     # Django 项目的配置文件 │   ├── urls.py         # Django 项目的 URL 声明，就像你网站的“目录” │   └── __init__.py ├── manage.py           # 一个用各种方式管理 Django 项目的命令行工具 ├── polls └── templates<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Django应用结构</p><pre class="line-numbers language-none"><code class="language-none">polls ├── admin.py ├── apps.py ├── migrations │   └── __init__.py ├── models.py ├── tests.py ├── views.py └── __init__.py<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>命令行启动项目</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">python manage.py runserver<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="创建应用视图">创建应用视图</h2><p>创建视图，打开 <code>polls/views.py</code>，把下面这些 Python 代码输入进去：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> django<span class="token punctuation">.</span>http <span class="token keyword">import</span> HttpResponse<span class="token keyword">def</span> <span class="token function">index</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> HttpResponse<span class="token punctuation">(</span><span class="token string">"Hello, world. You're at the polls index."</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果想看见效果，我们需要将一个 URL 映射到它——这就是我们需要 URLconf 的原因了。</p><p>创建 URLconf，在polls中新建<code>urls.py</code>文件</p><pre class="line-numbers language-none"><code class="language-none">polls ├── admin.py ├── apps.py ├── migrations │   └── __init__.py ├── models.py ├── tests.py ├── urls.py ├── views.py └── __init__.py<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在<code>urls.py</code>中，输入如下代码：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> django<span class="token punctuation">.</span>urls <span class="token keyword">import</span> path<span class="token keyword">from</span> <span class="token punctuation">.</span> <span class="token keyword">import</span> viewsurlpatterns <span class="token operator">=</span> <span class="token punctuation">[</span>    path<span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">,</span> views<span class="token punctuation">.</span>index<span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">'index'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在根 URLconf 文件中指定我们创建的 <code>polls.urls</code> 模块。在 <code>DjangoDemo/urls.py</code> 文件的 <code>urlpatterns</code> 列表里插入一个 <code>include()</code>， 如下：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> django<span class="token punctuation">.</span>contrib <span class="token keyword">import</span> admin<span class="token keyword">from</span> django<span class="token punctuation">.</span>urls <span class="token keyword">import</span> path<span class="token punctuation">,</span> includeurlpatterns <span class="token operator">=</span> <span class="token punctuation">[</span>    path<span class="token punctuation">(</span><span class="token string">'polls/'</span><span class="token punctuation">,</span> include<span class="token punctuation">(</span><span class="token string">'polls.urls'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    path<span class="token punctuation">(</span><span class="token string">'admin/'</span><span class="token punctuation">,</span> admin<span class="token punctuation">.</span>site<span class="token punctuation">.</span>urls<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>函数 <a href="https://docs.djangoproject.com/zh-hans/3.0/ref/urls/#django.urls.include"><code>include()</code></a> 允许引用其它 URLconfs。每当 Django 遇到 <a href="https://docs.djangoproject.com/zh-hans/3.0/ref/urls/#django.urls.include"><code>include()</code></a> 时，它会截断与此项匹配的 URL 的部分，并将剩余的字符串发送到 URLconf 以供进一步处理。</p><p>你现在把 <code>index</code> 视图添加进了 URLconf。通过以下命令验证是否正常工作：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">python manage.py runserver<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>访问http://127.0.0.1:8000/polls/而不是http://127.0.0.1:8000</p><p><code>path()</code>函数</p><p><code>path(route, view, [kwargs], [name])</code></p><ul><li><p><code>route</code>：是一个匹配 URL 的准则（类似正则表达式）。当 Django 响应一个请求时，它会从 <code>urlpatterns</code> 的第一项开始，按顺序依次匹配列表中的项，直到找到匹配的项。这些准则不会匹配 GET 和 POST 参数或域名。例如，URLconf 在处理请求 <code>https://www.example.com/myapp/</code> 时，它会尝试匹配 <code>myapp/</code> 。处理请求 <code>https://www.example.com/myapp/?page=3</code> 时，也只会尝试匹配 <code>myapp/</code>。</p></li><li><p><code>view</code>：当 Django 找到了一个匹配的准则，就会调用这个特定的视图函数，并传入一个 <a href="https://docs.djangoproject.com/zh-hans/3.0/ref/request-response/#django.http.HttpRequest"><code>HttpRequest</code></a> 对象作为第一个参数，被“捕获”的参数以关键字参数的形式传入。</p></li><li><p><code>kwargs</code>：任意个关键字参数可以作为一个字典传递给目标视图函数。</p></li><li><p><code>name</code>：为你的 URL 取名能使你在 Django 的任意地方唯一地引用它，尤其是在模板中。这个有用的特性允许你只改一个文件就能全局地修改某个 URL 模式。</p></li></ul><h2 id="基础配置">基础配置</h2><p>在 <code>DjangoDemo/settings.py</code> 中</p><p>设置域名访问权限</p><h2 id="code￼8"><pre class="line-numbers language-none"><code class="language-none">myblog&#x2F;settings.pyALLOWED_HOSTS &#x3D; []      # 修改前ALLOWED_HOSTS &#x3D; [&#39;*&#39;]   # 修改后，表示任何域名都能访问。如果指定域名的话，在&#39;&#39;里放入指定的域名即可<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></h2><p>设置TEMPLATES里的’DIRS’，添加模板目录templates的路径，后面我们做网站模板的时候用得着。</p><h2 id="code￼9"><pre class="line-numbers language-none"><code class="language-none"># 修改前&#39;DIRS&#39;: []# 修改后&#39;DIRS&#39;: [os.path.join(BASE_DIR, &#39;templates&#39;)]# 注：使用pycharm创建的话会自动添加<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></h2><p>找到DATABASES设置网站数据库类型。这里我们使用默认的sqlite3。如果需要使用Mysql请查看文章：<a href="https://www.django.cn/forum/forum-6.html">Django如何使用Mysql数据库</a>，其它数据库请查看官方文档。<a href="https://docs.djangoproject.com/en/2.1/ref/settings/#databases">官方文档</a>，后期上线部署的话，也可以进行数据库与数据库之间的数据转换。具体可查看：<a href="https://www.django.cn/article/show-17.html">如何把SQLite数据库转换为Mysql数据库</a></p><p>在INSTALLED_APPS添加APP应用名称。</p><h2 id="code￼10"><pre class="line-numbers language-none"><code class="language-none">INSTALLED_APPS &#x3D; [                  # Django 的自带应用    &#39;django.contrib.admin&#39;,         # 管理员站点    &#39;django.contrib.auth&#39;,          # 认证授权系统。    &#39;django.contrib.contenttypes&#39;,  # 内容类型框架    &#39;django.contrib.sessions&#39;,      # 会话框架    &#39;django.contrib.messages&#39;,      # 消息框架。    &#39;django.contrib.staticfiles&#39;,   # 管理静态文件的框架    &#39;polls.apps.PollsConfig&#39;,       # 注册APP应用]# 使用pycharm创建的话，这里自动添加<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></h2><p>修改项目语言和时区</p><h2 id="code￼11"><pre class="line-numbers language-none"><code class="language-none">myblog&#x2F;settings.py# 修改前为英文# LANGUAGE_CODE &#x3D; &#39;en-us&#39;# 修改后LANGUAGE_CODE &#x3D; &#39;zh-hans&#39;  # 语言修改为中文# 时区，修改前# TIME_ZONE &#x3D; &#39;UTC&#39;# 修改后TIME_ZONE &#x3D; &#39;Asia&#x2F;Shanghai&#39;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></h2><p>在项目根目录里创建static和media，两个目录。static用来存放模板CSS、JS、图片等静态资源，media用来存放上传的文件，后面我们在讲解数据库创建的时候有说明。</p><p>settings里找到STATIC_URL，然后在后面一行加上如下代码。</p><pre class="line-numbers language-none"><code class="language-none"># 设置静态文件目录和名称STATIC_URL &#x3D; &#39;&#x2F;static&#x2F;&#39;# 加入下面代码# 这个是设置静态文件夹目录的路径STATICFILES_DIRS &#x3D; (    os.path.join(BASE_DIR, &#39;static&#39;),)# 设置文件上传路径，图片上传、文件上传都会存放在此目录里MEDIA_URL &#x3D; &#39;&#x2F;media&#x2F;&#39;MEDIA_ROOT &#x3D; os.path.join(BASE_DIR, &#39;media&#39;)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>基本配置完成，更多关于配置文件的介绍，请查看文章：<a href="https://www.django.cn/course/show-10.html">全局配置settings详解</a></p><h2 id="配置数据库">配置数据库</h2><p>在 <code>DjangoDemo/settings.py</code> 中</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 默认情况</span>DATABASES <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token string">'default'</span><span class="token punctuation">:</span> <span class="token punctuation">&#123;</span>        <span class="token string">'ENGINE'</span><span class="token punctuation">:</span> <span class="token string">'django.db.backends.sqlite3'</span><span class="token punctuation">,</span>        <span class="token string">'NAME'</span><span class="token punctuation">:</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>BASE_DIR<span class="token punctuation">,</span> <span class="token string">'db.sqlite3'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p><code>ENGINE</code>：可选值有 <code>'django.db.backends.sqlite3'</code>，<code>'django.db.backends.postgresql'</code>，<code>'django.db.backends.mysql'</code>，或 <code>'django.db.backends.oracle'</code>。其它 <a href="https://docs.djangoproject.com/zh-hans/3.0/ref/databases/#third-party-notes">可用后端</a>。</p></li><li><p><code>NAME</code>：数据库的名称。如果使用的是 SQLite，数据库将是你电脑上的一个文件，在这种情况下， <a href="https://docs.djangoproject.com/zh-hans/3.0/ref/settings/#std:setting-NAME"><code>NAME</code></a> 应该是此文件的绝对路径，包括文件名。默认值 <code>os.path.join(BASE_DIR, 'db.sqlite3')</code> 将会把数据库文件储存在项目的根目录。</p></li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">############修改成mysql如下：</span>DATABASES <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token string">'default'</span><span class="token punctuation">:</span> <span class="token punctuation">&#123;</span>        <span class="token string">'ENGINE'</span><span class="token punctuation">:</span> <span class="token string">'django.db.backends.mysql'</span><span class="token punctuation">,</span>        <span class="token string">'NAME'</span><span class="token punctuation">:</span> <span class="token string">'test'</span><span class="token punctuation">,</span>    <span class="token comment">#你的数据库名称</span>        <span class="token string">'USER'</span><span class="token punctuation">:</span> <span class="token string">'root'</span><span class="token punctuation">,</span>   <span class="token comment">#你的数据库用户名</span>        <span class="token string">'PASSWORD'</span><span class="token punctuation">:</span> <span class="token string">'445813'</span><span class="token punctuation">,</span> <span class="token comment">#你的数据库密码</span>        <span class="token string">'HOST'</span><span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">,</span> <span class="token comment">#你的数据库主机，留空默认为localhost</span>        <span class="token string">'PORT'</span><span class="token punctuation">:</span> <span class="token string">'3306'</span><span class="token punctuation">,</span> <span class="token comment">#你的数据库端口</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">#由于mysql默认引擎为MySQLdb，在__init__.py文件中添加下面代码</span><span class="token comment">#在python3中须替换为pymysql,可在主配置文件（和项目同名的文件下，不是app配置文件）中增加如下代码</span><span class="token comment">#import pymysql</span><span class="token comment">#pymysql.install_as_MySQLdb()</span><span class="token comment">#如果找不到pymysql板块，则通过pip install pymysql进行安装。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>数据库设置好之后，我们就依次输入下面的命令进行数据库迁移：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">python manage.py makemigrationspython manage.py migrate<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>这个 <a href="https://docs.djangoproject.com/zh-hans/3.0/ref/django-admin/#django-admin-migrate"><code>migrate</code></a> 命令检查 <a href="https://docs.djangoproject.com/zh-hans/3.0/ref/settings/#std:setting-INSTALLED_APPS"><code>INSTALLED_APPS</code></a> 设置，为其中的每个应用创建需要的数据表，至于具体会创建什么，这取决于你的 <code>settings.py</code> 设置文件和每个应用的数据库迁移文件。</p><h2 id="创建模型">创建模型</h2><p>在这个投票应用中，需要创建两个模型：问题 <code>Question</code> 和选项 <code>Choice</code>。</p><p><code>Question</code> 模型包括问题描述和发布时间。<code>Choice</code> 模型有两个字段，选项描述和当前得票数。每个选项属于一个问题。</p><p>在<code>models.py</code>文件中写入以下内容：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> django<span class="token punctuation">.</span>db <span class="token keyword">import</span> models<span class="token comment"># Create your models here.</span><span class="token keyword">class</span> <span class="token class-name">Question</span><span class="token punctuation">(</span>models<span class="token punctuation">.</span>Model<span class="token punctuation">)</span><span class="token punctuation">:</span>    question_text <span class="token operator">=</span> models<span class="token punctuation">.</span>CharField<span class="token punctuation">(</span>max_length<span class="token operator">=</span><span class="token number">200</span><span class="token punctuation">)</span>    pub_date <span class="token operator">=</span> models<span class="token punctuation">.</span>DateTimeField<span class="token punctuation">(</span><span class="token string">'date published'</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">Choice</span><span class="token punctuation">(</span>models<span class="token punctuation">.</span>Model<span class="token punctuation">)</span><span class="token punctuation">:</span>    question <span class="token operator">=</span> models<span class="token punctuation">.</span>ForeignKey<span class="token punctuation">(</span>Question<span class="token punctuation">,</span> on_delete<span class="token operator">=</span>models<span class="token punctuation">.</span>CASCADE<span class="token punctuation">)</span>    choice_text <span class="token operator">=</span> models<span class="token punctuation">.</span>CharField<span class="token punctuation">(</span>max_length<span class="token operator">=</span><span class="token number">200</span><span class="token punctuation">)</span>    votes <span class="token operator">=</span> models<span class="token punctuation">.</span>IntegerField<span class="token punctuation">(</span>default<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>每个模型被表示为 <a href="https://docs.djangoproject.com/zh-hans/3.0/ref/models/instances/#django.db.models.Model"><code>django.db.models.Model</code></a> 类的子类。每个模型有许多类变量，它们都表示模型里的一个数据库字段。</p><p>每个字段都是 <a href="https://docs.djangoproject.com/zh-hans/3.0/ref/models/fields/#django.db.models.Field"><code>Field</code></a> 类的实例 - 比如，字符字段被表示为 <a href="https://docs.djangoproject.com/zh-hans/3.0/ref/models/fields/#django.db.models.CharField"><code>CharField</code></a> ，日期时间字段被表示为 <a href="https://docs.djangoproject.com/zh-hans/3.0/ref/models/fields/#django.db.models.DateTimeField"><code>DateTimeField</code></a> 。这将告诉 Django 每个字段要处理的数据类型。</p><p>每个 <a href="https://docs.djangoproject.com/zh-hans/3.0/ref/models/fields/#django.db.models.Field"><code>Field</code></a> 类实例变量的名字（例如 <code>question_text</code> 或 <code>pub_date</code> ）也是字段名，所以最好使用对机器友好的格式。你将会在 Python 代码里使用它们，而数据库会将它们作为列名。</p><p>你可以使用可选的选项来为 <a href="https://docs.djangoproject.com/zh-hans/3.0/ref/models/fields/#django.db.models.Field"><code>Field</code></a> 定义一个人类可读的名字。这个功能在很多 Django 内部组成部分中都被使用了，而且作为文档的一部分。如果某个字段没有提供此名称，Django 将会使用对机器友好的名称，也就是变量名。在上面的例子中，我们只为 <code>Question.pub_date</code> 定义了对人类友好的名字。对于模型内的其它字段，它们的机器友好名也会被作为人类友好名使用。</p><p>定义某些 <a href="https://docs.djangoproject.com/zh-hans/3.0/ref/models/fields/#django.db.models.Field"><code>Field</code></a> 类实例需要参数。例如 <a href="https://docs.djangoproject.com/zh-hans/3.0/ref/models/fields/#django.db.models.CharField"><code>CharField</code></a> 需要一个 <a href="https://docs.djangoproject.com/zh-hans/3.0/ref/models/fields/#django.db.models.CharField.max_length"><code>max_length</code></a> 参数。这个参数的用处不止于用来定义数据库结构，也用于验证数据，我们稍后将会看到这方面的内容。</p><p><a href="https://docs.djangoproject.com/zh-hans/3.0/ref/models/fields/#django.db.models.Field"><code>Field</code></a> 也能够接收多个可选参数；在上面的例子中：我们将 <code>votes</code> 的 <a href="https://docs.djangoproject.com/zh-hans/3.0/ref/models/fields/#django.db.models.Field.default"><code>default</code></a> 也就是默认值，设为0。</p><p>注意在最后，我们使用 <a href="https://docs.djangoproject.com/zh-hans/3.0/ref/models/fields/#django.db.models.ForeignKey"><code>ForeignKey</code></a> 定义了一个关系。这将告诉 Django，每个 <code>Choice</code> 对象都关联到一个 <code>Question</code> 对象。Django 支持所有常用的数据库关系：多对一、多对多和一对一。</p><h2 id="激活模型">激活模型</h2><p>把 <code>polls</code> 应用安装到我们的项目里，见基础配置</p><p>运行下面的命令:</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">python manage.py makemigrations polls<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>Terminal输出：</p><pre class="line-numbers language-none"><code class="language-none">Migrations for &#39;polls&#39;:  polls\migrations\0001_initial.py    - Create model Question    - Create model Choice<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>通过运行 <code>makemigrations</code> 命令，Django 会检测你对模型文件的修改（在这种情况下，你已经取得了新的），并且把修改的部分储存为一次迁移。</p><p>迁移是 Django 对于模型定义（也就是你的数据库结构）的变化的储存形式，它们其实也只是一些你磁盘上的文件。如果你想的话，你可以阅读一下你模型的迁移数据，它被储存在 <code>polls/migrations/0001_initial.py</code> 里。别担心，你不需要每次都阅读迁移文件，但是它们被设计成人类可读的形式，这是为了便于你手动调整Django的修改方式。</p><h2 id="Django-管理页面">Django 管理页面</h2><h3 id="创建一个管理员账号">创建一个管理员账号</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">python manage.py createsuperuser<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
          <category> Django </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Django </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>正则表达式</title>
      <link href="2020/03/27/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
      <url>2020/03/27/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<p>有人在碰到问题时,就想：“我知道,我可以用正则表达式。”现在，他就有了两个问题。</p><hr><p><img src="http://img.whl123456.top/image/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F.png" alt="正则表达式"></p><p>正则表达式是一个特殊的字符序列，它能帮助你方便的检查一个字符串是否与某种模式匹配。为高级的文本模式匹配、抽取、与/或文本形式的搜索和替换提供了基础。</p><p>re 模块使 Python 语言拥有全部的正则表达式功能。</p><ul><li>搜索，在字符串任意部分中搜索匹配的模式。<code>search()</code></li><li>匹配，是判断一个字符串能否从起始处全部或者部分地匹配某个模式。<code>match()</code></li></ul><p><code>compile</code>函数根据一个模式字符串和可选的标志参数生成一个正则表达式对象。<br>该对象拥有一系列方法用于正则表达式匹配和替换。</p><p>re 模块也提供了与这些方法功能完全一致的函数，这些函数使用一个模式字符串做为它们的第一个参数。</p><h2 id="特殊符号和字符">特殊符号和字符</h2><center>常见正则表达式符号和特殊字符</center><table><thead><tr><th style="text-align:left">表示法</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td style="text-align:left"><em>literal</em></td><td style="text-align:left">匹配文本字符串的字面值<em>literal</em></td></tr><tr><td style="text-align:left">re1<code>|</code>re2</td><td style="text-align:left">匹配正则表达式 re1 或者 re2（管道符号）</td></tr><tr><td style="text-align:left"><code>.</code></td><td style="text-align:left">匹配任何字符（除了<code>\n</code>之外）</td></tr><tr><td style="text-align:left"><code>^</code></td><td style="text-align:left">匹配字符串起始部分</td></tr><tr><td style="text-align:left"><code>$</code></td><td style="text-align:left">匹配字符串终止部分</td></tr><tr><td style="text-align:left"><code>*</code></td><td style="text-align:left">匹配 0 次或者多次前面出现的正则表达式</td></tr><tr><td style="text-align:left"><code>+</code></td><td style="text-align:left">匹配 1 次或者多次前面出现的正则表达式</td></tr><tr><td style="text-align:left"><code>?</code></td><td style="text-align:left">匹配 0 次或者 1 次前面出现的正则表达式，<strong>非贪婪</strong></td></tr><tr><td style="text-align:left"><code>&#123;</code>N<code>&#125;</code></td><td style="text-align:left">匹配 N 次前面出现的正则表达式</td></tr><tr><td style="text-align:left"><code>&#123;</code>M<code>,</code>N<code>&#125;</code></td><td style="text-align:left">匹配 M～N 次前面出现的正则表达式</td></tr><tr><td style="text-align:left"><code>[</code>…<code>]</code></td><td style="text-align:left">匹配来自字符集的任意单一字符</td></tr><tr><td style="text-align:left"><code>[</code>…x−y…<code>]</code></td><td style="text-align:left">匹配 x ～ y 范围中的任意单一字符</td></tr><tr><td style="text-align:left"><code>[^</code>…<code>]</code></td><td style="text-align:left">不匹配此字符集中出现的任何一个字符，包括某一范围的字符</td></tr><tr><td style="text-align:left"><code>(</code>…<code>)</code></td><td style="text-align:left">匹配封闭的正则表达式，然后另存为子组</td></tr><tr><td style="text-align:left"><code>\d</code></td><td style="text-align:left">匹配任何十进制数字，与<code>[0-9]</code>一致(<code>\D</code>与之相反)</td></tr><tr><td style="text-align:left"><code>\b</code></td><td style="text-align:left">匹配任何单词边界，指单词和空格间的位置（<code>\B</code>与之相反）</td></tr><tr><td style="text-align:left"><code>\w</code></td><td style="text-align:left">匹配任何字母数字字符，与<code>[A-Za-z0-9_]</code>相同(<code>\W</code>与之相反)</td></tr><tr><td style="text-align:left"><code>\s</code></td><td style="text-align:left">匹配任何空格字符，与<code>[\n\t\r\v\f]</code>相同（<code>\S</code>与之相反）</td></tr><tr><td style="text-align:left"><code>\N</code></td><td style="text-align:left">匹配已保存的子组 N（参见上面的<code>(</code>…<code>)</code>)</td></tr><tr><td style="text-align:left"><code>\</code><em>c</em></td><td style="text-align:left">逐字匹配任何特殊字符<em>c</em>(即仅按照字面意义匹配，不匹配特殊含义)</td></tr><tr><td style="text-align:left"><code>\A(\Z)</code></td><td style="text-align:left">匹配字符串的起始（结束）（另见上面介绍的<code>^</code>和<code>$</code>）</td></tr><tr><td style="text-align:left"><code>(?</code>iLmsux<code>)</code></td><td style="text-align:left">嵌入一个或者多个特殊“标记”参数（或者通过函数/方法）</td></tr><tr><td style="text-align:left"><code>(?:</code>…<code>)</code></td><td style="text-align:left">表示一个匹配不用保存的分组</td></tr><tr><td style="text-align:left"><code>(?P</code>&lt;<em>name</em>&gt;…<code>)</code></td><td style="text-align:left">像一个仅由name标识而不是数字 ID 标识的正则分组匹配</td></tr><tr><td style="text-align:left"><code>(?P=</code><em>name</em><code>)</code></td><td style="text-align:left">在同一字符串中匹配由<code>(?P&lt;name)</code>分组的之前文本</td></tr><tr><td style="text-align:left"><code>(?#</code>…<code>)</code></td><td style="text-align:left">表示注释，所有内容都被忽略</td></tr><tr><td style="text-align:left"><code>(?=</code>…<code>)</code></td><td style="text-align:left">匹配条件是如果…出现在之后的位置，而不使用输入字符串；称作正向前视断言</td></tr><tr><td style="text-align:left"><code>(?!</code>…<code>)</code></td><td style="text-align:left">匹配条件是如果…不出现在之后的位置，而不使用输入字符串；称作负向前视断言</td></tr><tr><td style="text-align:left"><code>(?&lt;=</code>…<code>)</code></td><td style="text-align:left">匹配条件是如果…出现在之前的位置，而不使用输入字符串；称作正向后视断言</td></tr><tr><td style="text-align:left"><code>(?&lt;!</code>…<code>)</code></td><td style="text-align:left">匹配条件是如果…不出现在之前的位置，而不使用输入字符串；称作负向后视断言</td></tr></tbody></table><h2 id="常用正则表达式">常用正则表达式</h2><table><thead><tr><th style="text-align:center">用处</th><th>值</th></tr></thead><tbody><tr><td style="text-align:center">用户名</td><td><code>/^\[a-z0-9_-\]&#123;3,16&#125;$/</code></td></tr><tr><td style="text-align:center">密码</td><td><code>/^\[a-z0-9_-\]&#123;6,18&#125;$/</code></td></tr><tr><td style="text-align:center">十六进制值</td><td><code>/^#?(\[a-f0-9\]&#123;6&#125;\|\[a-f0-9\]&#123;3&#125;)$/</code></td></tr><tr><td style="text-align:center">电子邮箱</td><td><code>/^(\[a-z0-9_\.-]+)@(\[\da-z\.-\]+)\.(\[a-z\.\]&#123;2,6&#125;)\$/ </code><br /><code>/^\[a-z\d\]+(\.\[a-z\d\]+)*@(\[\da-z](-\[\da-z\])?)+(\.&#123;1,2&#125;\[a-z\]+)+$/</code></td></tr><tr><td style="text-align:center">URL</td><td><code>/^(https?:\/\/)?(\[\da-z\.-\]+)\.(\[a-z\.\]&#123;2,6&#125;)([\/\w \.-]*)*\/?$/</code></td></tr><tr><td style="text-align:center">IP 地址</td><td><code>/((2\[0-4\]\d\|25\[0-5\]\|[01]?\d\d?)\.)&#123;3&#125;(2[0-4]\d\|25[0-5]\|[01]?\d\d?)/ &lt;br /&gt;/^(?:(?:25[0-5]\|2\[0-4][0-9]\|[01]?\[0-9][0-9]?)\.)&#123;3&#125;(?:25[0-5]\|2\[0-4][0-9]\|[01]?\[0-9][0-9]?)$/</code></td></tr><tr><td style="text-align:center">HTML 标签</td><td><code>/\^&lt;([a-z]+)(\[^&lt;]+)\*(?:&gt;(.*)&lt;\/\1&gt;\|\s+\/&gt;)$/</code></td></tr><tr><td style="text-align:center">删除代码\注释</td><td><code>(?&lt;!http:\|\S)//.*$</code></td></tr><tr><td style="text-align:center">Unicode编码中的汉字范围</td><td><code>/^[\u2E80-\u9FFF]+$/</code></td></tr></tbody></table><h2 id="re-search"><code>re.search()</code></h2><p><code>re.search</code> 扫描整个字符串并返回第一个成功的匹配。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span>re<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">'www'</span><span class="token punctuation">,</span> <span class="token string">'www.runoob.com'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>span<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>re<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">'com'</span><span class="token punctuation">,</span> <span class="token string">'www.runoob.com'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>span<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>re<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">'com'</span><span class="token punctuation">,</span> <span class="token string">'www.runoob.com.com'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>span<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">14</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">14</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="re-match"><code>re.match()</code></h2><p><code>re.match</code>尝试从字符串的起始位置匹配一个模式，如果不是起始位置匹配成功的话，<code>match()</code>就返回none。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> re<span class="token keyword">print</span><span class="token punctuation">(</span>re<span class="token punctuation">.</span>match<span class="token punctuation">(</span><span class="token string">'www'</span><span class="token punctuation">,</span> <span class="token string">'www.runoob.com'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>span<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 在起始位置匹配</span><span class="token keyword">print</span><span class="token punctuation">(</span>re<span class="token punctuation">.</span>match<span class="token punctuation">(</span><span class="token string">'com'</span><span class="token punctuation">,</span> <span class="token string">'www.runoob.com'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>         <span class="token comment"># 不在起始位置匹配</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre><code>(0, 3)None</code></pre><h2 id="group-和groups"><code>group()</code>和<code>groups()</code></h2><p><code>group(num)</code>或<code>groups() </code>匹配对象函数来获取匹配表达式。</p><p><code>group(num=0)</code>匹配的整个表达式的字符串，<code>group()</code>可以一次输入多个组号，在这种情况下它将返回一个包含那些组所对应值的元组。</p><p><code>groups()</code>返回一个包含所有小组字符串的元组，从 1 到 所含的小组号。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">line <span class="token operator">=</span> <span class="token string">"Cats are smarter than dogs"</span><span class="token comment"># .* 表示任意匹配除换行符（\n、\r）之外的任何单个或多个字符</span>matchObj <span class="token operator">=</span> re<span class="token punctuation">.</span>match<span class="token punctuation">(</span> <span class="token string">r'(.*) are (.*?) .*'</span><span class="token punctuation">,</span> line<span class="token punctuation">,</span> re<span class="token punctuation">.</span>M<span class="token operator">|</span>re<span class="token punctuation">.</span>I<span class="token punctuation">)</span> <span class="token keyword">if</span> matchObj<span class="token punctuation">:</span>   <span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">"matchObj.group() : "</span><span class="token punctuation">,</span> matchObj<span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>   <span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">"matchObj.group(1) : "</span><span class="token punctuation">,</span> matchObj<span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>   <span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">"matchObj.group(2) : "</span><span class="token punctuation">,</span> matchObj<span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>   <span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">"matchObj.groups() :"</span><span class="token punctuation">,</span>matchObj<span class="token punctuation">.</span>groups<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>   <span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">"No match!!"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>matchObj.group() :  Cats are smarter than dogsmatchObj.group(1) :  CatsmatchObj.group(2) :  smartermatchObj.groups() : ('Cats', 'smarter')</code></pre><h2 id="re-sub"><code>re.sub()</code></h2><p><code>re.sub</code>用于替换字符串中的匹配项。</p><p><code>re.sub(pattern, repl, string, count=0, flags=0)</code></p><ul><li><code>pattern</code> : 正则中的模式字符串。</li><li><code>repl</code> : 替换的字符串，也可为一个函数。</li><li><code>string</code> : 要被查找替换的原始字符串。</li><li><code>count</code> : 模式匹配后替换的最大次数，默认 0 表示替换所有的匹配。</li><li><code>flags</code> : 编译时用的匹配模式，数字形式。</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python">phone <span class="token operator">=</span> <span class="token string">"2004-959-559 # 这是一个电话号码"</span> <span class="token comment"># 删除注释</span>num <span class="token operator">=</span> re<span class="token punctuation">.</span>sub<span class="token punctuation">(</span><span class="token string">r'#.*$'</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">,</span> phone<span class="token punctuation">)</span><span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">"电话号码 : "</span><span class="token punctuation">,</span> num<span class="token punctuation">)</span>  <span class="token comment"># 电话号码 :  2004-959-559 </span> <span class="token comment"># 移除非数字的内容</span>num <span class="token operator">=</span> re<span class="token punctuation">.</span>sub<span class="token punctuation">(</span><span class="token string">r'\D'</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">,</span> phone<span class="token punctuation">)</span><span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">"电话号码 : "</span><span class="token punctuation">,</span> num<span class="token punctuation">)</span>  <span class="token comment"># 电话号码 :  2004959559</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 将匹配的数字乘于 2</span><span class="token keyword">def</span> <span class="token function">double</span><span class="token punctuation">(</span>matched<span class="token punctuation">)</span><span class="token punctuation">:</span>    value <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>matched<span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token string">'value'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token builtin">str</span><span class="token punctuation">(</span>value <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span> s <span class="token operator">=</span> <span class="token string">'A23G4HFD567'</span><span class="token keyword">print</span><span class="token punctuation">(</span>re<span class="token punctuation">.</span>sub<span class="token punctuation">(</span><span class="token string">'(?P&lt;value>\d+)'</span><span class="token punctuation">,</span> double<span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># A46G8HFD1134</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="re-compile"><code>re.compile</code></h2><p><code>compile</code>函数用于编译正则表达式,生成一个正则表达式(Pattern)对象,供<code>match()</code>和<code>search()</code>这两个函数使用。<br><code>re.compile(pattern[, flags])</code></p><ul><li><code>pattern</code> : 一个字符串形式的正则表达式</li><li><code>flags</code> 可选，表示匹配模式，比如忽略大小写，多行模式等，具体参数为：<ul><li><code>re.I</code> 忽略大小写</li><li><code>re.L</code> 表示特殊字符集 \w, \W, \b, \B, \s, \S 依赖于当前环境</li><li><code>re.M</code> 多行模式</li><li><code>re.S</code> 即为’ . ‘并且包括换行符在内的任意字符（’ . '不包括换行符）</li><li><code>re.U</code>表示特殊字符集 \w, \W, \b, \B, \d, \D, \s, \S 依赖于 Unicode 字符属性数据库</li><li><code>re.X</code> 为了增加可读性，忽略空格和’ # '后面的注释</li></ul></li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python">pattern <span class="token operator">=</span> re<span class="token punctuation">.</span><span class="token builtin">compile</span><span class="token punctuation">(</span><span class="token string">r'\d+'</span><span class="token punctuation">)</span>                    <span class="token comment"># 用于匹配至少一个数字</span>pattern <span class="token operator">=</span> re<span class="token punctuation">.</span><span class="token builtin">compile</span><span class="token punctuation">(</span><span class="token string">r'\d+'</span><span class="token punctuation">)</span>                    <span class="token comment"># 用于匹配至少一个数字</span>m <span class="token operator">=</span> pattern<span class="token punctuation">.</span>match<span class="token punctuation">(</span><span class="token string">'one12twothree34four'</span><span class="token punctuation">)</span>        <span class="token comment"># 查找头部，没有匹配</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"从头部开始匹配"</span><span class="token punctuation">,</span>m<span class="token punctuation">)</span>  <span class="token comment"># 从头部开始匹配 None</span>m <span class="token operator">=</span> pattern<span class="token punctuation">.</span>match<span class="token punctuation">(</span><span class="token string">'one12twothree34four'</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token comment"># 从'1'的位置开始匹配，正好匹配</span><span class="token keyword">print</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span>  <span class="token comment"># &lt;re.Match object; span=(3, 5), match='12'>     # 返回一个 Match 对象</span><span class="token keyword">print</span><span class="token punctuation">(</span>m<span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 12</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="re-findall"><code>re.findall()</code></h2><p>在字符串中找到正则表达式所匹配的所有子串，并返回一个列表，如果没有找到匹配的，则返回空列表。</p><p><code>re.findall(string[, pos[, endpos]])</code></p><ul><li><code>string</code> 待匹配的字符串。</li><li><code>pos</code> 可选参数，指定字符串的起始位置，默认为 0。</li><li><code>endpos</code> 可选参数，指定字符串的结束位置，默认为字符串的长度。</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python">pattern <span class="token operator">=</span> re<span class="token punctuation">.</span><span class="token builtin">compile</span><span class="token punctuation">(</span><span class="token string">r'\d+'</span><span class="token punctuation">)</span>   <span class="token comment"># 查找数字</span>result1 <span class="token operator">=</span> pattern<span class="token punctuation">.</span>findall<span class="token punctuation">(</span><span class="token string">'runoob 123 google 456'</span><span class="token punctuation">)</span>result2 <span class="token operator">=</span> pattern<span class="token punctuation">.</span>findall<span class="token punctuation">(</span><span class="token string">'run88oob123google456'</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token keyword">print</span><span class="token punctuation">(</span>result1<span class="token punctuation">)</span>  <span class="token comment"># ['123', '456']</span><span class="token keyword">print</span><span class="token punctuation">(</span>result2<span class="token punctuation">)</span>  <span class="token comment"># ['88', '12']</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="re-finditer"><code>re.finditer()</code></h2><p>和 <code>findall</code> 类似，在字符串中找到正则表达式所匹配的所有子串，并把它们作为一个迭代器返回。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">it <span class="token operator">=</span> re<span class="token punctuation">.</span>finditer<span class="token punctuation">(</span><span class="token string">r"\d+"</span><span class="token punctuation">,</span><span class="token string">"12a32bc43jf3"</span><span class="token punctuation">)</span> <span class="token keyword">for</span> match <span class="token keyword">in</span> it<span class="token punctuation">:</span>     <span class="token keyword">print</span> <span class="token punctuation">(</span>match<span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token comment">## 12 32 43 3</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="re-split"><code>re.split</code></h2><p><code>split</code>方法按照能够匹配的子串将字符串分割后返回列表，它的使用形式如下：</p><p><code>re.split(pattern, string[, maxsplit=0, flags=0])</code></p><ul><li><code>pattern</code>匹配的正则表达式</li><li><code>string</code>要匹配的字符串。</li><li><code>maxsplit</code>分隔次数，<code>maxsplit=1</code>分隔一次，默认为 0，不限制次数。</li><li><code>flags</code>标志位，用于控制正则表达式的匹配方式，如：是否区分大小写，多行匹配等等</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python">re<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">'\W+'</span><span class="token punctuation">,</span> <span class="token string">'runoob, runoob, runoob.'</span><span class="token punctuation">)</span>  <span class="token comment"># ['runoob', 'runoob', 'runoob', '']</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>当匹配成功时返回一个 Match 对象，其中：</p><ul><li><code>group(\[group1, …])</code> 方法用于获得一个或多个分组匹配的字符串，当要获得整个匹配的子串时，可直接使用 <code>group() </code>或 <code>group(0)</code>；</li><li><code>start(\[group])</code> 方法用于获取分组匹配的子串在整个字符串中的起始位置（子串第一个字符的索引），参数默认值为 0；</li><li><code>end(\[group])</code> 方法用于获取分组匹配的子串在整个字符串中的结束位置（子串最后一个字符的索引+1），参数默认值为 0；</li><li><code>span(\[group])</code>方法返回<code>(start(group), end(group))</code>。</li></ul>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 正则表达式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python网络数据采集</title>
      <link href="2020/03/24/Python%E7%BD%91%E7%BB%9C%E6%95%B0%E6%8D%AE%E9%87%87%E9%9B%86/"/>
      <url>2020/03/24/Python%E7%BD%91%E7%BB%9C%E6%95%B0%E6%8D%AE%E9%87%87%E9%9B%86/</url>
      
        <content type="html"><![CDATA[<p>Python网络数据采集笔记</p><hr><h2 id="网络数据采集的基本原理">网络数据采集的基本原理</h2><p>对网络爬虫通常的想法：</p><ul><li>通过网站域名获取 HTML 数据</li><li>根据目标信息解析数据</li><li>存储目标信息</li><li>如果有必要，移动到另一个网页重复这个过程</li></ul><h2 id="Python实现网络连接">Python实现网络连接</h2><p>使用python获取网页，代码实现</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> urllib<span class="token punctuation">.</span>request <span class="token keyword">import</span> urlopenhtml <span class="token operator">=</span> urlopen<span class="token punctuation">(</span><span class="token string">"http://www.baidu.com"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>html<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="urllib">urllib</h3><p>urllib 是 Python 的标准库，包含了从网络请求数据，处理cookie，甚至改变像请求头和用户代理这些元数据的函数。</p><p>urlopen 用来打开并读取一个从网络获取的远程对象。</p><blockquote><p>Python 2.x 里的的是 urllib2 库，在 Python 3.x 里，urllib2 改名为 urllib</p></blockquote><h3 id="BeautifulSoup">BeautifulSoup</h3><p>BeautifulSoup通过定位 HTML 标签来 格式化和组织复杂的网络信息，用简单易用的 Python 对象为我们展现 XML 结构信息。</p><p>Pycharm可以自动导入其他安装可参考该<a href="https://beautifulsoup.readthedocs.io/zh_CN/v4.4.0/#id8">文档</a>，有关Python虚拟环境可参考该<a href="https://lanqilu.github.io/2019/10/12/Python/%E9%85%8D%E7%BD%AE%E8%99%9A%E6%8B%9F%E7%8E%AF%E5%A2%83venv/">文章</a></p><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">pip install beautifulsoup4<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>使用BeautifulSoup</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> urllib<span class="token punctuation">.</span>request <span class="token keyword">import</span> urlopen<span class="token keyword">from</span> bs4 <span class="token keyword">import</span> BeautifulSouphtml <span class="token operator">=</span> urlopen<span class="token punctuation">(</span><span class="token string">"https://lanqilu.github.io/"</span><span class="token punctuation">)</span>bsObj <span class="token operator">=</span> BeautifulSoup<span class="token punctuation">(</span>html<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>bsObj<span class="token punctuation">.</span>h1<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="网络连接异常">网络连接异常</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python">html <span class="token operator">=</span> urlopen<span class="token punctuation">(</span><span class="token string">"https://lanqilu.github.io/"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>可能发生的异常有两种</p><ul><li>网页在服务器上不存在（或者获取页面的时候出现错误）</li><li>服务器不存在</li></ul><p>第一种异常发生时，程序会返回 HTTP 错误。可以查看<a href="https://lanqilu.github.io/2020/03/21/Web/HTTP%E7%8A%B6%E6%80%81%E7%A0%81/">HTTP状态码</a>。所有类似情形，urlopen 函数都会抛出“HTTPError”异常</p><p>处理方式</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> urllib<span class="token punctuation">.</span>error <span class="token keyword">import</span> HTTPError<span class="token keyword">from</span> urllib<span class="token punctuation">.</span>request <span class="token keyword">import</span> urlopen<span class="token keyword">try</span><span class="token punctuation">:</span>    html <span class="token operator">=</span> urlopen<span class="token punctuation">(</span><span class="token string">"https://lanqilu.github.io/2018"</span><span class="token punctuation">)</span> <span class="token comment"># 异常网站 </span><span class="token keyword">except</span> HTTPError <span class="token keyword">as</span> e<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>    <span class="token comment"># 返回空值，中断程序，或者执行另一个方案</span><span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"程序继续"</span><span class="token punctuation">)</span><span class="token comment"># 注意：如果你已经在上面异常捕捉那一段代码里返回或中断（break）</span><span class="token comment"># 那么就不需要使用else语句了，这段代码也不会执行</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果服务器不存在（URL链接打不开），urlopen 会返回一个 None 对象。</p><p>要调用的标签不存在，BeautifulSoup 就会返回 None 对象</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> urllib<span class="token punctuation">.</span>request <span class="token keyword">import</span> urlopen<span class="token keyword">from</span> urllib<span class="token punctuation">.</span>error <span class="token keyword">import</span> HTTPError<span class="token keyword">from</span> bs4 <span class="token keyword">import</span> BeautifulSoup<span class="token keyword">def</span> <span class="token function">getTitle</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        html <span class="token operator">=</span> urlopen<span class="token punctuation">(</span>url<span class="token punctuation">)</span>    <span class="token keyword">except</span> HTTPError <span class="token keyword">as</span> e<span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token boolean">None</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        bsObj <span class="token operator">=</span> BeautifulSoup<span class="token punctuation">(</span>html<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"lxml"</span><span class="token punctuation">)</span>        title <span class="token operator">=</span> bsObj<span class="token punctuation">.</span>body<span class="token punctuation">.</span>h1    <span class="token keyword">except</span> AttributeError <span class="token keyword">as</span> e<span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token boolean">None</span>    <span class="token keyword">return</span> titletitle <span class="token operator">=</span> getTitle<span class="token punctuation">(</span><span class="token string">"https://www.runoob.com/"</span><span class="token punctuation">)</span><span class="token keyword">if</span> title <span class="token keyword">is</span> <span class="token boolean">None</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Title could not be found"</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>title<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="HTML解析">HTML解析</h2><p>属性查找标签的方法，标签组的使用，以及标签解析树的导航过程</p><p>网络爬虫可以通过 class 属性的值，轻松地区分出两种不同的标签。</p><p>例如：</p><pre class="line-numbers language-html" data-language="html"><code class="language-html">"<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>red<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Heavens! what a virulent attack!<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>" replied <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>green<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>the prince<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>, not in the least disconcerted by this reception.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> urllib<span class="token punctuation">.</span>request <span class="token keyword">import</span> urlopen<span class="token keyword">from</span> bs4 <span class="token keyword">import</span> BeautifulSoup<span class="token comment">#%%</span><span class="token comment"># 爬取页面</span>html <span class="token operator">=</span> urlopen<span class="token punctuation">(</span><span class="token string">"http://www.pythonscraping.com/pages/warandpeace.html"</span><span class="token punctuation">)</span>bsObj <span class="token operator">=</span> BeautifulSoup<span class="token punctuation">(</span>html<span class="token punctuation">,</span> features<span class="token operator">=</span><span class="token string">"lxml"</span><span class="token punctuation">)</span> <span class="token comment"># features 选择解析器</span><span class="token comment"># 以用 findAll 函数抽取只包含在 &lt;span class="green">&lt;/span> 标签里的文字</span>nameList <span class="token operator">=</span> bsObj<span class="token punctuation">.</span>findAll<span class="token punctuation">(</span><span class="token string">"span"</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token string">"class"</span><span class="token punctuation">:</span> <span class="token string">"green"</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token comment"># 打印输出</span><span class="token keyword">for</span> name <span class="token keyword">in</span> nameList<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>name<span class="token punctuation">.</span>get_text<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><code>get_text()</code></p><p><code>.get_text() </code>会把正在处理的 HTML 文档中所有的标签都清除，然后返回 一个只包含文字的字符串。假如你正在处理一个包含许多超链接、段落和标签的大段源代码，那么<code> .get_text()</code> 会把这些超链接、段落和标签都清除掉， 只剩下一串不带标签的文字。</p></blockquote><h3 id="BeautifulSoup的find-和findAll">BeautifulSoup的<code>find()</code>和<code>findAll()</code></h3><p><code>findAll</code>函数通过标签的名称和属性来查找标签</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">findAll<span class="token punctuation">(</span>tag<span class="token punctuation">,</span> attributes<span class="token punctuation">,</span> recursive<span class="token punctuation">,</span> text<span class="token punctuation">,</span> limit<span class="token punctuation">,</span> keywords<span class="token punctuation">)</span>find<span class="token punctuation">(</span>tag<span class="token punctuation">,</span> attributes<span class="token punctuation">,</span> recursive<span class="token punctuation">,</span> text<span class="token punctuation">,</span> keywords<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><code>tag</code>标签参数，可以传一个标签的名称或多个标签名称组成的 Python 列表做标签参数</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token punctuation">.</span>findAll<span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token string">"h1"</span><span class="token punctuation">,</span><span class="token string">"h2"</span><span class="token punctuation">,</span><span class="token string">"h3"</span><span class="token punctuation">,</span><span class="token string">"h4"</span><span class="token punctuation">,</span><span class="token string">"h5"</span><span class="token punctuation">,</span><span class="token string">"h6"</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><code>attributes</code>属性参数，是用一个 Python 字典封装一个标签的若干属性和对应的属性值</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token punctuation">.</span>findAll<span class="token punctuation">(</span><span class="token string">"span"</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token string">"class"</span><span class="token punctuation">:</span><span class="token punctuation">&#123;</span><span class="token string">"green"</span><span class="token punctuation">,</span> <span class="token string">"red"</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><code>recursive</code>递归参数，是一个布尔变量，设置为True，查找标签参数的所有子标签，以及子标签的子标签；设置为 False，就只查找文档的一级标签。（默认值是 True）</p><p><code>text</code>文本参数，是用标签的文本内容去匹配，而不是用标签的属性。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#%%</span>html <span class="token operator">=</span> urlopen<span class="token punctuation">(</span><span class="token string">"http://www.pythonscraping.com/pages/warandpeace.html"</span><span class="token punctuation">)</span>bsObj <span class="token operator">=</span> BeautifulSoup<span class="token punctuation">(</span>html<span class="token punctuation">,</span> features<span class="token operator">=</span><span class="token string">"lxml"</span><span class="token punctuation">)</span>nameList <span class="token operator">=</span> bsObj<span class="token punctuation">.</span>findAll<span class="token punctuation">(</span>text<span class="token operator">=</span><span class="token string">"the prince"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>nameList<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 7</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>limit</code>范围限制参数，只用于<code>findAll</code>方法，获得的前几项结果是按照网页上的顺序排序</p><blockquote><p><code>find</code>等价于<code>findAll</code>的<code>limit</code>等于1时的情形</p></blockquote><p><code>keyword</code>关键词参数，用于选择具有指定属性的标签</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#%%</span>html <span class="token operator">=</span> urlopen<span class="token punctuation">(</span><span class="token string">"http://www.pythonscraping.com/pages/warandpeace.html"</span><span class="token punctuation">)</span>bsObj <span class="token operator">=</span> BeautifulSoup<span class="token punctuation">(</span>html<span class="token punctuation">,</span> features<span class="token operator">=</span><span class="token string">"lxml"</span><span class="token punctuation">)</span>allText <span class="token operator">=</span> bsObj<span class="token punctuation">.</span>findAll<span class="token punctuation">(</span><span class="token builtin">id</span><span class="token operator">=</span><span class="token string">"text"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>allText<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>get_text<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><code>class</code>保留词问题</p><p><code>bsObj.findAll(class=&quot;green&quot;)</code>语法错误，解决方案<code>bsObj.findAll(class_=&quot;green&quot;)</code>或<code>bsObj.findAll(&quot;&quot;, &#123;&quot;class&quot;:&quot;green&quot;&#125;)</code></p></blockquote><h3 id="其他BeautifulSoup对象">其他BeautifulSoup对象</h3><ul><li><code>NavigableString</code>对象：用来表示标签里的文字，不是标签</li><li><code>Comment</code>对象：用来查找 HTML 文档的注释标签</li></ul>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 爬虫 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算机书单</title>
      <link href="2020/03/23/Java%E4%B9%A6%E5%8D%95/"/>
      <url>2020/03/23/Java%E4%B9%A6%E5%8D%95/</url>
      
        <content type="html"><![CDATA[<p>从各平台收集整理成的书单</p><hr><h2 id="Java">Java</h2><h3 id="Java基础与进阶">Java基础与进阶</h3><ul><li>[x] Java编程思想</li><li>[x] Java核心技术卷</li><li>[x] 深入理解JVM虚拟机</li><li>[ ] Java并发编程实战</li><li>[ ] Java并发编程艺术</li><li>[x] Effective Java</li><li>[ ] Java性能调优指南</li><li>[ ] Java性能权威指南</li></ul><h3 id="JavaWeb">JavaWeb</h3><ul><li>[ ] 深入JavaWeb技术内幕</li><li>[x] Spring实战</li><li>[ ] Spring揭秘</li><li>[ ] Spring源码深度解析</li><li>[ ] Maven实战</li></ul><h2 id="Python">Python</h2><ul><li>[ ] Python编程：从入门到实践</li><li>[ ] Python编程快速上手——让繁琐工作自动化</li><li>[ ] Python 基础教程</li><li>[ ] Python Cookbook</li><li>[ ] Python3 程序开发指南</li><li>[ ] Python 核心编程</li><li>[ ] Python学习手册</li><li>[ ] 流畅的 Python</li><li>[ ] Python源码剖析</li></ul><h2 id="数据库">数据库</h2><ul><li>[ ] SQL必知必会</li><li>[ ] 高性能MySQL</li><li>[x] MySQL技术内幕：InnoDB储存引擎</li><li>[ ] Redis实战</li><li>[ ] Redis设计与实现</li></ul><h2 id="计算机网络">计算机网络</h2><ul><li>[ ] TCP/IP详解</li><li>[x] 计算机网络：自顶向下</li><li>[ ] 图解HTTP</li><li>[ ] 图解TCP/IP</li></ul><h2 id="操作系统">操作系统</h2><ul><li>[ ] 深入理解计算机系统</li><li>[ ] 现代操作系统</li><li>[ ] Linux内核设计与实现</li><li>[ ] Unix网络编程</li></ul><h2 id="数据结构与算法">数据结构与算法</h2><ul><li>[ ] 算法导论</li><li>[ ] 数据结构与算法（Java版）</li><li>[x] 算法图解</li><li>[x] 剑指offer</li><li>[x] 算法</li></ul><h2 id="其他计算机书籍">其他计算机书籍</h2><ul><li>[ ] Git权威指南</li><li>[ ] 重构——改善既有代码的设计</li><li>[ ] 代码整洁之道</li><li>[x] 编码</li></ul>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> Book </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTTP</title>
      <link href="2020/03/21/HTTP%E7%8A%B6%E6%80%81%E7%A0%81/"/>
      <url>2020/03/21/HTTP%E7%8A%B6%E6%80%81%E7%A0%81/</url>
      
        <content type="html"><![CDATA[<p>HTTP状态码</p><hr><h2 id="HTTP响应">HTTP响应</h2><p>响应体</p><p>Accept：告诉浏览器，它所支持的数据类型</p><p>Accept- Encoding：支持哪种编码格式 GBK UTF-8 GB2312 ISO8859-1</p><p>Accept- Language：告诉浏览器，它的语言环境</p><p>Cache- Control：缓存控制</p><p>Connection：告诉浏览器，请求完成是断开还是保持连接</p><p>HOST：主机，，/</p><p>Refresh：告诉客户端，多久刷新一次</p><p>Location：让网页重新定位</p><h2 id="常见的状态码简述">常见的状态码简述</h2><h3 id="2XX">2XX</h3><p>一般是请求成功</p><p>200 正常处理</p><p>204 成功处理，但服务器没有新数据返回，显示页面不更新</p><p>206 对服务器进行范围请求，只返回一部分数据</p><h3 id="3XX">3XX</h3><p>一般表示重定向</p><p>301 请求的资源已分配了新的URI中，URL地址改变了。【永久重定向】</p><p>302 请求的资源临时分配了新的URI中，URL地址没变【临时重定向】</p><p>303 与302相同的功能，但明确客户端应该采用GET方式来获取资源</p><p>304 发送了附带请求，但不符合条件【返回未过期的缓存数据】</p><p>307 与302相同，但不会把POST请求变成GET</p><h3 id="4XX">4XX</h3><p>表示客户端出错了。</p><p>400 请求报文语法错误了</p><p>401 需要认证身份</p><p>403 没有权限访问</p><p>404 服务器没有这个资源</p><h3 id="5XX">5XX</h3><p>服务器出错了</p><p>500 内部资源出错了</p><p>502  网关错误</p><p>503 服务器正忙</p>]]></content>
      
      
      <categories>
          
          <category> Web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTTP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>BootStrap</title>
      <link href="2020/03/21/BootStrap/"/>
      <url>2020/03/21/BootStrap/</url>
      
        <content type="html"><![CDATA[<p>Bootstrap 是由Twitter的Mark Otto和Jacob Thornton开发的一个基于 HTML、CSS、JavaScript的用于快速开发 Web 应用程序和网站的前端框架。</p><hr><h2 id="响应式布局">响应式布局</h2><p>同一套页面可以兼容不同分辨率的设备。</p><p>实现：依赖于栅格系统，将一行平均分成12个格子，可以指定元素占几个格子</p><p>步骤：</p><ol><li><p>定义容器。相当于之前的tableI</p></li><li><p>定义行。相当于之前的tr</p></li><li><p>定义元素。指定该元素在不同的设备上，所占的格子数目。<code>col-设备代号-格子数目</code></p></li></ol><h2 id="栅格系统">栅格系统</h2><p>栅格系统用于通过一系列的行（row）与列（column）的组合来创建页面布局，你的内容就可以放入这些创建好的布局中。下面就介绍一下 Bootstrap 栅格系统的工作原理：</p><ul><li>“行（row）”必须包含在 <code>.container</code> （固定宽度）或 <code>.container-fluid</code> （100% 宽度）中，以便为其赋予合适的排列（aligment）和内补（padding）。</li><li>通过“行（row）”在水平方向创建一组“列（column）”。</li><li>你的内容应当放置于“列（column）”内，并且，只有“列（column）”可以作为行（row）”的直接子元素。</li><li>类似 <code>.row</code> 和 <code>.col-xs-4</code> 这种预定义的类，可以用来快速创建栅格布局。Bootstrap 源码中定义的 mixin 也可以用来创建语义化的布局。</li><li>通过为“列（column）”设置 <code>padding</code> 属性，从而创建列与列之间的间隔（gutter）。通过为 <code>.row</code> 元素设置负值 <code>margin</code> 从而抵消掉为 <code>.container</code> 元素设置的 <code>padding</code>，也就间接为“行（row）”所包含的“列（column）”抵消掉了<code>padding</code>。</li><li>负值的 margin就是下面的示例为什么是向外突出的原因。在栅格列中的内容排成一行。</li><li>栅格系统中的列是通过指定1到12的值来表示其跨越的范围。例如，三个等宽的列可以使用三个 <code>.col-xs-4</code> 来创建。</li><li>如果一“行（row）”中包含了的“列（column）”大于 12，多余的“列（column）”所在的元素将被作为一个整体另起一行排列。</li><li>栅格类适用于与屏幕宽度大于或等于分界点大小的设备 ， 并且针对小屏幕设备覆盖栅格类。 因此，在元素上应用任何 <code>.col-md-*</code> 栅格类适用于与屏幕宽度大于或等于分界点大小的设备 ， 并且针对小屏幕设备覆盖栅格类。 因此，在元素上应用任何 <code>.col-lg-*</code> 不存在， 也影响大屏幕设备。</li></ul><h2 id="使用BootStrap">使用BootStrap</h2><h3 id="Bootstrap-4-CDN">Bootstrap 4 CDN</h3><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token comment">&lt;!-- 新 Bootstrap4 核心 CSS 文件 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://cdn.staticfile.org/twitter-bootstrap/4.3.1/css/bootstrap.min.css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> <span class="token comment">&lt;!-- jQuery文件。务必在bootstrap.min.js 之前引入 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://cdn.staticfile.org/jquery/3.2.1/jquery.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span> <span class="token comment">&lt;!-- bootstrap.bundle.min.js 用于弹窗、提示、下拉菜单，包含了 popper.min.js --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://cdn.staticfile.org/popper.js/1.15.0/umd/popper.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span> <span class="token comment">&lt;!-- 最新的 Bootstrap4 核心 JavaScript 文件 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://cdn.staticfile.org/twitter-bootstrap/4.3.1/js/bootstrap.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><table class="grid" cellspacing="0"><tbody><tr>  <td width="8.33%" >1</td>  <td width="8.33%">1</td>  <td width="8.33%">1</td>  <td width="8.33%">1</td>  <td width="8.33%">1</td>  <td width="8.33%">1</td>  <td width="8.33%">1</td>  <td width="8.33%">1</td>  <td width="8.33%">1</td>  <td width="8.33%">1</td>  <td width="8.33%">1</td>  <td width="8.33%">1</td></tr><tr>  <td colspan="4">4</td>  <td colspan="4">4</td>  <td colspan="4">4</td></tr><tr>  <td colspan="4">4</td>  <td colspan="8">8</td></tr><tr>  <td colspan="6">6</td>  <td colspan="6">6</td></tr><tr>  <td colspan="12">12</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> Web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> BootStrap </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Maven</title>
      <link href="2020/03/21/Maven/"/>
      <url>2020/03/21/Maven/</url>
      
        <content type="html"><![CDATA[<p>Maven是一个Java项目管理和构建工具，它可以定义项目结构、项目依赖，并使用统一的方式进行自动化构建，是Java项目不可缺少的工具。可以管理项目的整个声明周期，包括清除、编译，测试，报告、打包、部署等等。</p><hr><p>Maven是专门为Java项目打造的管理和构建工具，它的主要功能有：</p><ul><li><p>提供了一套标准化的项目结构；</p></li><li><p>提供了一套标准化的构建流程（编译，测试，打包，发布……）；</p></li><li><p>提供了一套依赖管理机制。</p></li></ul><h2 id="Maven项目结构">Maven项目结构</h2><p>一个使用Maven管理的普通的Java项目，它的目录结构默认如下：</p><pre class="line-numbers language-ascii" data-language="ascii"><code class="language-ascii">a-maven-project├── pom.xml├── src│   ├── main│   │   ├── java│   │   └── resources│   └── test│       ├── java│       └── resources└── target<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>项目的根目录<code>a-maven-project</code>是项目名，它有一个项目描述文件<code>pom.xml</code>，存放Java源码的目录是<code>src/main/java</code>，存放资源文件的目录是<code>src/main/resources</code>，存放测试源码的目录是<code>src/test/java</code>，存放测试资源的目录是<code>src/test/resources</code>，最后，所有编译、打包生成的文件都放在<code>target</code>目录里。这些就是一个Maven项目的标准目录结构。</p><p>我们再来看最关键的一个项目描述文件<code>pom.xml</code>，它的内容长得像下面：</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project</span> <span class="token attr-name">...</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>modelVersion</span><span class="token punctuation">></span></span>4.0.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>modelVersion</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.itranswarp.learnjava<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>hello<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>packaging</span><span class="token punctuation">></span></span>jar<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>packaging</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span><span class="token punctuation">></span></span>        ...  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>commons-logging<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>commons-logging<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其中，<code>groupId</code>类似于Java的包名，通常是公司或组织名称，<code>artifactId</code>类似于Java的类名，通常是项目名称，再加上<code>version</code>，一个Maven工程就是由<code>groupId</code>，<code>artifactId</code>和<code>version</code>作为唯一标识。我们在引用其他第三方库的时候，也是通过这3个变量确定。例如，依赖<code>commons-logging</code>：</p><h2 id="Maven配置">Maven配置</h2><h3 id="Maven-安装">Maven 安装</h3><p>以Windows为例，其他系统安装可以参考<a href="https://www.runoob.com/maven/maven-setup.html">菜鸟教程</a></p><p>**第一步：**进入官网<a href="http://maven.apache.org/download.cgi">下载</a>或者直接去<a href="https://mirrors.tuna.tsinghua.edu.cn/apache/maven/maven-3/">清华镜像下载</a></p><p><img src="http://img.whl123456.top/image/image-20200220220737178.png" alt="image-20200220220803063"></p><p>不同平台下载对应的包：Windows下选择Binary zip archive下载</p><p><img src="http://img.whl123456.top/image/image-20200220220803063.png" alt="image-20200220220737178"></p><p>**第二步：**解压压缩包，然后设置环境变量</p><p>新建系统变量 <strong>MAVEN_HOME</strong>，变量值：为解压后目录的绝对地址</p><p><img src="http://img.whl123456.top/image/image-20200220222023598.png" alt="image-20200220222023598"></p><p>编辑系统变量 <strong>Path</strong>，新建变量值：<strong>%MAVEN_HOME%\bin</strong></p><p>**第三步：**在控制台输入<code>mvn -v</code>，如果能看到 Maven 相关版本信息，则说明 Maven 已经安装成功：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">Apache Maven <span class="token number">3.6</span>.3 <span class="token punctuation">(</span>cecedd343002696d0abb50b32b541b8a6ba2883f<span class="token punctuation">)</span>Maven home: D:<span class="token punctuation">\</span>Apache-Maven-3.6.3<span class="token punctuation">\</span>bin<span class="token punctuation">\</span><span class="token punctuation">..</span>Java version: <span class="token number">13.0</span>.1, vendor: Oracle Corporation, runtime: C:<span class="token punctuation">\</span>Program Files<span class="token punctuation">\</span>Java<span class="token punctuation">\</span>jdk-13.0.1Default locale: zh_CN, platform encoding: GBKOS name: <span class="token string">"windows 10"</span>, version: <span class="token string">"10.0"</span>, arch: <span class="token string">"amd64"</span>, family: <span class="token string">"windows"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Maven镜像">Maven镜像</h3><p>中国区用户可以使用阿里云提供的<a href="https://help.aliyun.com/document_detail/102512.html?spm=a2c4e.11153940.0.0.213c7bdeWnIr1i">Maven镜像仓库</a>。使用Maven镜像仓库需要一个配置，在安装目录下进入conf目录，<code>settings.xml</code>配置文件，找到 <code>&lt;mirrors&gt;</code>如下：</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mirrors</span><span class="token punctuation">></span></span>  <span class="token comment">&lt;!-- mirror   | Specifies a repository mirror site to use instead of a given repository. The repository that   | this mirror serves has an ID that matches the mirrorOf element of this mirror. IDs are used   | for inheritance and direct lookup purposes, and must be unique across the set of mirrors.   |     --></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mirror</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">></span></span>aliyunmaven<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mirrorOf</span><span class="token punctuation">></span></span>*<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mirrorOf</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>阿里云公共仓库<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url</span><span class="token punctuation">></span></span>https://maven.aliyun.com/repository/public<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mirror</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mirrors</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="设置本地库">设置本地库</h3><p>继续在<code>settings.xml</code>文件中找到<code>&lt;localRepository&gt;</code>中间填入本地库<br><img src="http://img.whl123456.top/image/image-20200305202841108.png" alt="image-20200220223951120"></p><h3 id="IDEA中配置Maven">IDEA中配置Maven</h3><p><img src="http://img.whl123456.top/image/image-20200220224606360.png" alt="image-20200220224606360"></p><p>注意<strong>For current project</strong>仅对当前项目有效</p><p>如果想要对所有项目生效需要在<strong>欢迎页</strong>进行上述设置</p><p><img src="http://img.whl123456.top/image/image-20200220223951120.png" alt="image-20200305202841108"></p><p>自动下载变化后的依赖</p><p><img src="http://img.whl123456.top/image/image-20200220225318659.png" alt="image-20200220225318659"></p><h2 id="有关概念">有关概念</h2><h3 id="仓库">仓库</h3><h4 id="本地仓库">本地仓库</h4><p>Maven会把我们项目所构建出来的jar包等等资源存放在本地仓库中。当我们需要jar包的时候，Maven第一时间也是去本地仓库中寻找jar包</p><h4 id="中心仓库">中心仓库</h4><p>当Maven在本地仓库和私服找不到我们需要的jar包的时候，就去中心仓库中帮我们下载对应的jar包。</p><h4 id="私有服务器">私有服务器</h4><p>存储一些jar包的服务器，由于本地仓库不可能拥有大部分的jar包，一个团队要去开发，免不了总是去中心仓库下载，这就非常耗费时间了。</p><h3 id="maven软件构建的生命周期">maven软件构建的生命周期</h3><p>清除–&gt; 编译–&gt;测试–&gt;报告–&gt;打包（jar\war）–&gt;安装–&gt;部署</p><p><img src="http://img.whl123456.top/image/image-20200221210511211.png" alt="image-20200221210511211"></p><h3 id="maven坐标">maven坐标</h3><p>坐标的组成： groupId + artifactId+ version</p><ul><li>groupId：组id ,机构名，公司名：好比公司的id，或者是公司包名</li><li>artifactId：构建物id ，产品名或者产品的id</li><li>version ：版本号</li></ul><blockquote><p>Alibaba——▶支付宝——▶5.01版本</p></blockquote><p>jar包组成：artifactId-version.jar</p><h2 id="pom-xml">pom.xml</h2><p>pom.xml介绍：<strong>project object model 项目对象模型 ，它是maven核心配置文件</strong></p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token comment">&lt;!--Maven在导入jar包时会导入这个jar包所依赖的其他包--></span><span class="token comment">&lt;!--Maven版本和头文件--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>  <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>modelVersion</span><span class="token punctuation">></span></span>4.0.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>modelVersion</span><span class="token punctuation">></span></span>  <span class="token comment">&lt;!--配置的GAV--></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>top.whl123456<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>JavaWeb<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.0-SNAPSHOT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>  <span class="token comment">&lt;!--项目的打包方式--></span>  <span class="token comment">&lt;!--jar:java应用--></span>  <span class="token comment">&lt;!--war:JavaWbe应用--></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>packaging</span><span class="token punctuation">></span></span>war<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>packaging</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>JavaWeb Maven Webapp<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>  <span class="token comment">&lt;!-- FIXME change it to the project's website --></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url</span><span class="token punctuation">></span></span>http://www.example.com<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url</span><span class="token punctuation">></span></span>  <span class="token comment">&lt;!--配置--></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--默认构建编码--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project.build.sourceEncoding</span><span class="token punctuation">></span></span>UTF-8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project.build.sourceEncoding</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--编码版本--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>maven.compiler.source</span><span class="token punctuation">></span></span>1.7<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>maven.compiler.source</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>maven.compiler.target</span><span class="token punctuation">></span></span>1.7<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>maven.compiler.target</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">></span></span>  <span class="token comment">&lt;!--项目依赖--></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--具体依赖的jar包--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>4.11<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span>  <span class="token comment">&lt;!--项目构建需要的插件--></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>build</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>finalName</span><span class="token punctuation">></span></span>JavaWeb<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>finalName</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>pluginManagement</span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- lock down plugins versions to avoid using Maven defaults (may be moved to parent pom) --></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugins</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>maven-clean-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.1.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">></span></span>        <span class="token comment">&lt;!-- see http://maven.apache.org/ref/current/maven-core/default-bindings.html#Plugin_bindings_for_war_packaging --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>maven-resources-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.0.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>maven-compiler-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.8.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>maven-surefire-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.22.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>maven-war-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.2.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>maven-install-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.5.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>maven-deploy-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.8.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugins</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>pluginManagement</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--在build中配置resource,来防止资源导出失败的问题--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resources</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resource</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>directory</span><span class="token punctuation">></span></span>src/main/resources<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>directory</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>includes</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span><span class="token punctuation">></span></span>**/*.properties<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>include</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span><span class="token punctuation">></span></span>**/*.xml<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>include</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>includes</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filtering</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filtering</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resource</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resource</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>directory</span><span class="token punctuation">></span></span>src/main/java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>directory</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>includes</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span><span class="token punctuation">></span></span>**/*.properties<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>include</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span><span class="token punctuation">></span></span>**/*.xml<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>include</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>includes</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filtering</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filtering</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resource</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resources</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>build</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Maven </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot</title>
      <link href="2020/03/21/SpringBoot/"/>
      <url>2020/03/21/SpringBoot/</url>
      
        <content type="html"><![CDATA[<p><a href="https://spring.io/">SpringBoot</a></p><hr><h2 id="创建项目">创建项目</h2><h3 id="项目环境">项目环境</h3><p>JDK1.8、Maven、SpringBoot2.2.4、IDEA</p><h3 id="使用-IntelliJ-IDEA创建">使用 IntelliJ IDEA创建</h3><p>**第一步：**菜单栏中选择：File =&gt; New =&gt; Project…，我们可以看到如下图所示的创建功能窗口。</p><blockquote><p>其中Initial Service Url指向的地址就是Spring官方提供的Spring Initializr工具地址，所以这里创建的工程实际上也是基于它的Web工具来实现的。</p></blockquote><p><img src="http://img.whl123456.top/image/image-20200220211502308.png" alt="创建项目"></p><p><strong>第二步</strong>：点击Next，等待片刻后，我们可以看到如下图所示的工程信息窗口：<br><img src="http://img.whl123456.top/image/image-20200220211700051.png" alt="设置项目"></p><ul><li><p>Type：使用什么构建工具，Maven还是Gradle；</p></li><li><p>Language：使用什么编程语言，Java、Kotlin还是Groovy；</p></li></ul><p><strong>第三步</strong>：继续点击Next，进入选择Spring Boot版本和依赖管理的窗口：</p><p><img src="http://img.whl123456.top/image/image-20200220212223616.png" alt="项目依赖"></p><p>在这里值的我们关注的是，它不仅包含了Spring Boot Starter POMs中的各个依赖，还包含了Spring Cloud的各种依赖。</p><p><strong>第四步</strong>：点击Next，进入最后关于工程物理存储的一些细节。最后，点击Finish就能完成工程的构建了。</p><h3 id="项目解析">项目解析</h3><h4 id="项目结构解析">项目结构解析</h4><p><img src="http://img.whl123456.top/image/image-20200220212945331.png" alt="项目结构"></p><ul><li><code>src/main/java</code>下的程序入口：<code>DemoApplication</code></li><li><code>src/main/resources</code>下的配置文件：<code>application.properties</code></li><li><code>src/test/</code>下的测试入口：<code>DemoApplicationTests</code></li></ul><p>生成的<code>DemoApplication</code>和<code>Demo``ApplicationTests</code>类都可以直接运行来启动当前创建的项目，由于目前该项目未配合任何数据访问或Web模块，程序会在加载完Spring之后结束运行。</p><h5 id="项目依赖解析">项目依赖解析</h5><p>打开<code>pom.xml</code>，看看Spring Boot项目的依赖：</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>modelVersion</span><span class="token punctuation">></span></span>4.0.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>modelVersion</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>parent</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-parent<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.2.4.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>relativePath</span><span class="token punctuation">/></span></span> <span class="token comment">&lt;!-- lookup parent from repository --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>parent</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.example<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>demo<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>0.0.1-SNAPSHOT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>demo<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>description</span><span class="token punctuation">></span></span>Demo project for Spring Boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>description</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>java.version</span><span class="token punctuation">></span></span>1.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>java.version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusions</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusion</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.junit.vintage<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>junit-vintage-engine<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusion</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusions</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>build</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugins</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-maven-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugins</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>build</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如上所示，主要有四个部分：</p><ul><li>项目元数据：创建时候输入的Project Metadata部分，也就是Maven项目的基本元素，包括：<code>groupId</code>、<code>artifactId</code>、<code>version</code>、<code>name</code>、<code>description</code>等</li><li>parent：继承<code>spring-boot-starter-parent</code>的依赖管理，控制版本与打包等内容</li><li>dependencies：项目具体依赖，这里包含了<code>spring-boot-starter-web</code>用于实现HTTP接口（该依赖中包含了Spring MVC）；<code>spring-boot-starter-test</code>用于编写单元测试的依赖包。更多功能模块的使用我们将在后面的教程中逐步展开。</li><li>build：构建配置部分。默认使用了<code>spring-boot-maven-plugin</code>，配合<code>spring-boot-starter-parent</code>就可以把Spring Boot应用打包成JAR来直接运行。</li></ul><h3 id="启动">启动</h3><h4 id="编写一个HTTP接口">编写一个HTTP接口</h4><ul><li><p>在com.example.demo下面创建<code>HelloController</code>类，内容如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@RestController</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloController</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/hello"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">index</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token string">"Hello World"</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>启动主程序，进入<a href="http://localhost:8080/hello">浏览器</a>，可以看到页面返回：Hello World</p></li></ul><h3 id="启动引导Spring">启动引导Spring</h3><p>创建SpringBoot项目后默认有一个DemoApplication类，其内容如下</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 开启组件扫描和自动配置</span><span class="token annotation punctuation">@SpringBootApplication</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DemoApplication</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//负责启动引导应用程序</span>        <span class="token class-name">SpringApplication</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">DemoApplication</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>@SpringBootApplication</code>开启了Spring的组件扫描和Spring Boot的自动配置功能。实际上，<code>@SpringBootApplication</code>将三个有用的注解组合在了一起。</p><ul><li>Spring的<code>@Configuration</code>：标明该类使用Spring基于Java的配置而不是XML的配置。</li><li>Spring的<code>@ComponentScan</code>：启用组件扫描，这样你写的Web控制器类和其他组件才能被自动发现并注册为Spring应用程序上下文里的Bean。</li><li>Spring Boot 的 <code>@EnableAutoConfiguration</code> ： 这 个 不 起 眼 的 小 注 解 也 可 以 称 为<code>@Abracadabra</code>，就是这一行配置开启了Spring Boot自动配置的魔力，让你不用再写成篇的配置了。</li></ul><p><code>DemoApplication</code>还是一个启动引导类，这里的<code>main()</code>方法让你可以在命令行里把该应用程序当作一个可执行JAR文件来运行。这里向<code>SpringApplication.run()</code>传递了一个<code>DemoApplication</code>类的引用，还有命令行参数，通过这些东西启动应用程序。</p>]]></content>
      
      
      <categories>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot </tag>
            
            <tag> JavaEE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring框架</title>
      <link href="2020/03/21/Spring%E6%A1%86%E6%9E%B6/"/>
      <url>2020/03/21/Spring%E6%A1%86%E6%9E%B6/</url>
      
        <content type="html"><![CDATA[<p>Spring框架</p><hr><h2 id="基础知识">基础知识</h2><h3 id="程序的耦合">程序的耦合</h3><p>耦合：程序间的依赖关系</p><p>包括：</p><ul><li>类之间的依赖</li><li>方法间的依赖</li></ul><p>解耦：降低程序间的依赖关系</p><p>实际开发中：应该做到：编译期不依赖，运行时才依赖。</p><p>解耦的思路：</p><ul><li>第一步：使用反射来创建对象，而避免使用new关键字。</li><li>第二步：通过读取配置文件来获取要创建的对象全限定类名</li></ul><h3 id="工厂模式">工厂模式</h3><p>Bean：在计算机英语中，有可重用组件的含义。</p><p>JavaBean：用java语言编写的可重用组件。JavaBean &gt;  实体类</p><h2 id="Spring介绍">Spring介绍</h2><p>创建Spring的目的就是用来<strong>替代更加重量级的的企业级Java技术</strong>，<strong>简化Java的开发</strong></p><ul><li>基于POJO轻量级和<strong>最小侵入式开发</strong></li><li>通过依赖注入和面向接口实现<strong>松耦合</strong></li><li><strong>基于切面</strong>和惯例进行声明式编程</li><li>通过切面和模板<strong>减少样板式代码</strong></li></ul><blockquote><p>POJO（Plain Ordinary Java Object）简单的Java对象，实际就是普通JavaBeans，是为了避免和EJB混淆所创造的简称。</p><p>JavaBean 是一种JAVA语言写成的可重用组件。为写成JavaBean，类必须是具体的和公共的，并且具有无参数的构造器。JavaBean 通过提供符合一致性设计模式的公共方法将内部域暴露成员属性，set和get方法获取。众所周知，属性名称符合这种模式，其他Java 类可以通过自省机制(反射机制)发现和操作这些JavaBean 的属性。</p></blockquote><h3 id="Spring的狭义与广义">Spring的狭义与广义</h3><p>狭义上的Spring特指Spring框架（Spring Framework）</p><p>广义上的Spring是指以Spring框架为核心的Spring技术栈</p><h2 id="Spring框架概述">Spring框架概述</h2><h3 id="模块化的Spring框架">模块化的Spring框架</h3><p>Spring框架是模块化的，允许开发人员自由选择需要使用的部分。</p><h3 id="使用Spring的好处">使用Spring的好处</h3><p>Spring可以使用POJO来构建应用程序，并将企业服务非侵入性的应用到POJO。此功能适用于JavaSE编程模型和完全或部分的JavaEE模型</p><p>作为一个Java应用程序的开发者，可以从Spring平台获得以下好处：</p><ul><li>使本地Java方法可以执行数据库事务，而无须自己处理事务API</li><li>使本地Java方法可以执行远程过程，而无须自己处理远程API</li><li>使本地Java方法成为HTTP端点，而无须自己处理Servlet API</li><li>使本地Java方法可以拥有管理操作，而无须自己处理JMX API</li><li>使本地Java方法可以执行消息处理，而无须自己处理JMS API</li></ul><h3 id="IoC">IoC</h3><p>Spring框架的IoC组件就能够通过提供正规化的方法来组合不同的组件。</p><h2 id="侵入式概念">侵入式概念</h2><p>Spring是一种非侵入式的框架</p><h3 id="侵入式">侵入式</h3><p>对于EJB、Struts2等一些传统的框架，<strong>通常是要实现特定的接口，继承特定的类才能增强功能，改变了java类的结构</strong></p><h3 id="非侵入式">非侵入式</h3><p>对于Hibernate、Spring等框架，<strong>对现有的类结构没有影响，就能够增强JavaBean的功能</strong></p><h2 id="Spring-IoC的概念">Spring IoC的概念</h2><p>Spring的IoC容器是整个Spring框架的核心和基础</p><h3 id="Spring-IoC-概述">Spring IoC 概述</h3><p>IoC的全程为Inversion of Control，中文常翻译为“控制反转”，让别人为你服务，是一种通过描述（在Java中可以是XML或者注解）并通过第三方去产生或获取特定对象的方式。</p><p>在Spring中实现控制反转的是IoC容器，实现方法是依赖注入</p><p>“依赖注入”和“控制反转”其实就是一个事物的两种不同的说法。从技术上来讲，“依赖注入”是“控制反转”的特殊实现，但“依赖注入”还指一个对象应用另外一个对象来提供一个特殊能力。</p><p><strong>对象的创建交给外部容器完成，这个就做控制反转。</strong></p><blockquote><p>IoC的思想最核心的地方在于，资源不由使用资源的双方管理，而由不使用资源的第三方管理，这可以带来很多好处。</p><p>第一，资源集中管理，实现资源的可配置和易管理。</p><p>第二，降低了使用资源双方的依赖程度，也就是我们说的耦合度</p></blockquote><h3 id="Spring-IoC容器">Spring IoC容器</h3><p>无论是创建对象、处理对象之间的依赖关系、对象创建的时间还是对象的数量，我们都是在Spring为我们提供的IoC容器上配置对象的信息就好了。</p><p>Spring IoC容器的设计主要是基于<code>BeanFactory</code>和<code>ApplicationContext</code>两个接口，其中<code>ApplicationContext</code>是<code>BeanFactory</code>的子接口之一。<code>BeanFactory</code>是Spring IoC容器所定义的最底层接口，而<code>ApplicationContext</code>是其高级接口之一，并且对<code>BeanFactory</code>功能做了许多有用的扩展，故在绝大数工作情况下，都会使用<code>ApplicationContext</code>作为Spring IoC容器。</p><p><img src="http://img.whl123456.top/image/ApplicationContext.png" alt="ApplicationContext"></p><h3 id="BeanFactory">BeanFactory</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 5.2.6.RELEASE 源码</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">BeanFactory</span> <span class="token punctuation">&#123;</span><span class="token class-name">String</span> FACTORY_BEAN_PREFIX <span class="token operator">=</span> <span class="token string">"&amp;"</span><span class="token punctuation">;</span><span class="token class-name">Object</span> <span class="token function">getBean</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">BeansException</span><span class="token punctuation">;</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> <span class="token class-name">T</span> <span class="token function">getBean</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> requiredType<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">BeansException</span><span class="token punctuation">;</span><span class="token class-name">Object</span> <span class="token function">getBean</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">BeansException</span><span class="token punctuation">;</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> <span class="token class-name">T</span> <span class="token function">getBean</span><span class="token punctuation">(</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> requiredType<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">BeansException</span><span class="token punctuation">;</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> <span class="token class-name">T</span> <span class="token function">getBean</span><span class="token punctuation">(</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> requiredType<span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">BeansException</span><span class="token punctuation">;</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> <span class="token class-name">ObjectProvider</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> <span class="token function">getBeanProvider</span><span class="token punctuation">(</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> requiredType<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> <span class="token class-name">ObjectProvider</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> <span class="token function">getBeanProvider</span><span class="token punctuation">(</span><span class="token class-name">ResolvableType</span> requiredType<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">boolean</span> <span class="token function">containsBean</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">boolean</span> <span class="token function">isSingleton</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">NoSuchBeanDefinitionException</span><span class="token punctuation">;</span><span class="token keyword">boolean</span> <span class="token function">isPrototype</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">NoSuchBeanDefinitionException</span><span class="token punctuation">;</span><span class="token keyword">boolean</span> <span class="token function">isTypeMatch</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token class-name">ResolvableType</span> typeToMatch<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">NoSuchBeanDefinitionException</span><span class="token punctuation">;</span><span class="token keyword">boolean</span> <span class="token function">isTypeMatch</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span> typeToMatch<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">NoSuchBeanDefinitionException</span><span class="token punctuation">;</span><span class="token annotation punctuation">@Nullable</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span> <span class="token function">getType</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">NoSuchBeanDefinitionException</span><span class="token punctuation">;</span><span class="token annotation punctuation">@Nullable</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span> <span class="token function">getType</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token keyword">boolean</span> allowFactoryBeanInit<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">NoSuchBeanDefinitionException</span><span class="token punctuation">;</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">getAliases</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>![BeanFactory](E:\OneDrive - lanqilu\我的图片库\blogimg\Spring框架\BeanFactory.png)</p><ul><li><code>getBean</code>的方法多用于获取配置给Spring IoC容器的Bean。从参数类型来看可以是字符串，也可以是<code>Class</code>类型，由于<code>Class</code>类型可以扩展接口也可以继承父类，所以在一定程度上会存在使用父类类型无法准确获得实例的异常。</li><li><code>isSingleton</code>用于判断是否为单例，如果判断为真，其意思是该Bean在容器中是作为一个唯一单例存在的。而<code>isPrototype</code>则相反，如果判断为真，意思是当你从容器中获取Bean，容器就为你生成一个新的实例。在默认情况下，Spring会为Bean创建一个单例，也就是默认情况下<code>isSingleton</code>返回true，而<code>isPrototype</code>返回false。</li><li><code>getAliases</code>方法是获取别名的方法。</li></ul><h3 id="容器的初始化和依赖注入">容器的初始化和依赖注入</h3><p>Bean的定义和初始化在Spring IoC容器中的是两大步骤，它是先定义，然后初始化和依赖注入。</p><p>Bean的定义分为3步：</p><ul><li>Resource定位：这步是Spring IoC容器根据开发者的配置，进行资源定位，在Spring的开发中，通过XML或者注解都是十分常见的方式，定位的内容是由开发者所提供。</li><li>BeanDefinition的载入：将BeanDefinition的信息保存到Bean定义中，此时不会创建Bean的实例。</li><li>BeanDefinition的注册：将BeanDefinition的信息发布到Spring IoC容器中，但此时仍旧没有对应的Bean的实例创建。</li></ul><p>完成以上3步Bean就在Spring IoC容器中被定义了，而没有初始化，更没有完成依赖注入，也就是没有注入其配置的资源给Bean。</p><p>对于初始化和依赖注入，Spring Bean还有一个配置选项<code>lazy-init</code>，其含义就是是否初始化Spring Bean。在没有任何配置的情况下，它的默认值为default，实际值为false，也就是Spring IoC默认会自动初始化Bean。如果将其设置为true，那么只有当我们使用Spring IoC容器的<code>getBean</code>方法获取它时，它才会进行Bean的初始化，完成依赖注入。</p><h3 id="Bean的生命周期">Bean的生命周期</h3><p>对于Bean而言，在容器中存在其生命周期，它的初始化和销毁也需要一个过程。</p><p><img src="E:%5CPictures%5Cblogimg%5CSpring%E6%A1%86%E6%9E%B6.assets%5CBean%E7%9A%84%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F.svg" alt="Bean的生命周期"></p><ul><li>如果Bean实现了<code>BeanNameAware</code>接口的<code>setBeanName</code>方法，那么它就会调用这个方法</li><li>如果Bean实现了<code>BeanFactoryAware</code>接口的<code>setBeanFactory</code>方法，那么它就会调用这个方法</li><li>如果Bean实现了<code>ApplicationContextAware</code>接口的<code>setApplicationContext</code>方法，且Spring IoC容器也必须是一个<code>ApplicationContext</code>接口的实现类，那么才会调用这个方法，否则是不调用</li><li>如果Bean实现了<code>BeanPostProcessor</code>接口的<code>postProcessBeforeInitialization</code>方法，那么它就会调用这个方法（注意它针对全部Bean而言）</li><li>如果Bean实现了<code>InitializingBean</code>接口的<code>afterPropertiesSet</code>方法，那么它就会调用这个方法</li><li>如果Bean自定义了初始化方法，他就会调用已定义的初始化方法。</li><li>如果Bean实现了<code>BeanPostProcessor</code>接口的<code>postProcessAfterInitialization</code>方法，完成了这些调用，这个时候Bean就完成了初始化，那么Bean就存在Spring IoC的容器中，使用者就可以从中获取Bean的服务</li></ul><p>当服务器正常关闭，或者遇到其他关闭Spring IoC容器的事件，它就会调用对应的方法完成Bean的销毁，其步骤入下：</p><ul><li>如果Bean实现了接口<code>DisposableBean</code>的<code>destory</code>方法，那么就会调用它</li><li>如果定义了自定义销毁方法，那么就会调用它</li></ul><h2 id="装配Spring-Bean">装配Spring Bean</h2><h3 id="依赖注入的3种方式">依赖注入的3种方式</h3><p>那么对象的对象之间的依赖关系Spring是怎么做的呢？？<strong>依赖注入（Dependency Injection，DI）</strong></p><ul><li><strong>Spring使用依赖注入来实现对象之间的依赖关系</strong></li><li><strong>在创建完对象之后，对象的关系处理就是依赖注入</strong></li></ul><p>一般而言，依赖注入可以分为3种方式：</p><ul><li>构造器注入</li><li>setter注入</li><li>接口注入</li></ul><p>构造器注入和setter注入是主要的方式，而接口注入是从别的地方注入的方式。</p><h4 id="构造器注入">构造器注入</h4><p>顾名思义，构造器注入依赖于构造方法实现，就是被注入对象可以通过在其构造方法中声明依赖对象的参数列表，让外部（通常是IoC容器）知道它需要哪些依赖对象。</p><p>在大部分情况下，我们通过类的构造方法来创建类对象，Spring也可以采用反射的方式通过使用构造方法来完成注入，这就是构造器注入的原理。</p><p>在配置文件中，<code>constructor-arg</code>元素用于定义类构造方法的参数。包括index方式、type方式和name方式</p><h4 id="setter方法注入">setter方法注入</h4><p>setter注入式Spring中最主流的注入方式，它利用Java Bean规范所定义的setter方法来完成注入，灵活且可读性高。</p><p>它消除了使用构造器护注入时出现多个参数的可能性，首先可以把构造方法声明为无参数的，然后使用setter注入为其设置对应的值，其实也是通过Java反射技术实现的。</p><h4 id="三种注入方式的比较">三种注入方式的比较</h4><ul><li>接口注入。从注入方式的使用上来说，接口注入是现在不甚提倡的一种方式，基本处于“退役状态”。因为它强制被注入对象实现不必要的接口，带有侵入性。而构造方法注入和setter方法注入则不需要如此。</li><li>构造方法注入。这种注入方式的优点就是，对象在构造完成之后，即已进入就绪状态，可以马上使用。缺点就是，当依赖对象比较多的时候，构造方法的参数列表会比较长。而通过反射构造对象的时候，对相同类型的参数的处理会比较困难，维护和使用上也比较麻烦。而且在Java中，构造方法无法被继承，无法设置默认值。对于非必须的依赖处理，可能需要引入多个构造方法，而参数数量的变动可能造成维护上的不便。</li><li>setter方法注入。因为方法可以命名，所以setter方法注入在描述性上要比构造方法注入好一些。<br>另外，seter方法可以被继承，允许设置默认值，而且有良好的IDE支持。缺点当然就是对象无法在构造完成后马上进入就绪状态。</li><li>综上所述，构造方法注入和setter方法注入因为其侵入性较弱，且易于理解和使用，所以是现在使用最多的注入方式</li></ul><h3 id="装配Bean概述">装配Bean概述</h3><p>将开发的Bean装配到Spring IoC容器中，在大部分场景下使用<code>ApplicationContext</code>的具体实现类，因为对应的Spring IoC容器功能强大。</p><p>而在Spring中提供了3种方法进行配置：</p><ul><li>在XML中显示配置</li><li>在Java的接口和类中实现配置</li><li>隐式Bean的发现机制和自动装配原则</li></ul><p>在学习和工作中，这3种方式都会被用到，且常常混合使用，对于怎么选择有以下几点建议：</p><ul><li>基于约定优于配置的原则，最优先的应该时通过隐式Bean的发现机制和自动装配的原则。这样的好处是减少程序开发者的决定权，简单又不失灵活。</li><li>在没有办法使用自动装配原则的情况下应该优先考虑Java接口和类中实现配置，这样的好处是避免XMl配置的泛滥，也更为容易。这种场景典型了例子是一个父类有多个子类，比如学术类有两个子类：男生类和女生类，通过IoC容器初始化一个学术类，容器将无法知道使用哪个子类去初始化，这个时候可以使用Java的注解配置去指定。</li><li>上述方法都无法使用的情况下，那么只能选择XML去配置Sping IoC容器。由于现实中常常用到第三方的类库，有些类并不是我们开发的，我们无法修改里面的代码，这个时候就通过XML的方式配置使用了。</li></ul><h3 id="通过XML配置装配Bean">通过XML配置装配Bean</h3><p>使用XML装配Bean需要定义对应的XML，这里需要引入对应的XML模式（XSD）文件，这些文件会定义配置Spring Bean的一些元素</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans                           http://www.springframework.org/schema/beans/spring-beans.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上述代码中引入了一个<code>beans</code>的定义，它是一个根元素，而XSD文件也被引入了，这样它所定义的元素将可以定义对应的Spring Bean</p><h4 id="装配简易值">装配简易值</h4><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>source<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>top.whl.pojo2.Source<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>fruit<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>橙汁<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>size<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>大杯<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>sugar<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>少糖<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>juiceMaker2<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>top.whl.pojo2.JuiceMaker2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>beverageShop<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>贡茶<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>source<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>source<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>id</code>属性是Spring找到这个Bean的编号，不过<code>id</code>不是一个必须的属性，如果没有声明它，那么Spring会采用<code>全限定名#&#123;number&#125;</code>的格式生成编号。例如：没有声明<code>id=&quot;source&quot;</code>，那么Spring为其生成的编号就是<code>&quot;top.whl.pojo2.Source#0&quot;</code>。当第二次声明没有id的属性的Bean时，编号就是<code>&quot;top.whl.pojo2.Source#1&quot;</code>，以此类推。</li><li><code>class</code> 是一个类的全限定名</li><li><code>property</code> 元素是定义类的属性，其中<code>name</code>属性定义的是属性名称，而<code>value</code>是其值</li><li><code>ref</code> 引用Spring中创建好的对象</li></ul><h4 id="装配集合">装配集合</h4><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>list<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>list</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>value-list-1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>value-list-2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>value-list-3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>list</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>List</code>属性为对应的<code>&lt;list&gt;</code>元素进行装配，然后通过多个<code>&lt;value&gt;</code>元素设值</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>map<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>map</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>entry</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>key1<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>value-key-1<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>entry</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>key2<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>value-key-2<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>entry</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>key3<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>value-key-3<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>map</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>Map</code>属性为对应的<code>map</code>元素进行装配，然后通过多个<code>&lt;entry&gt;</code>元素设值，其中<code>entry</code>包含一个键（key）和一个值（value）的设置</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>props<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>props</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>prop</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>prop1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>value-prop-1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>prop</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>prop</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>prop2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>value-prop-2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>prop</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>prop</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>prop3<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>value-prop-3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>prop</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>props</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>Properties</code>属性，为对应的<code>&lt;props&gt;</code>元素进行装配，通过多个<code>&lt;prop&gt;</code>元素设置，其中<code>&lt;prop&gt;</code>元素有一个必填属性key，然后在之间设置值</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>set<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>set</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>value-set-1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>value-set-2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>value-set-3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>set</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>Set</code>属性为对应的<code>&lt;set&gt;</code>元素进行装配，然后通过多个<code>&lt;value&gt;</code>元素设置</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>array<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>array</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>value-array-1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>value-array-2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>value-array-3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>array</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>对于数组而言，可以使用<code>&lt;array&gt;</code>设置值，然后通过多个<code>&lt;value&gt;</code>元素设值。</p><hr><p>有些时候需要更为复杂的装载，比如一个List可以是一系列的对象，又如Map集合类，键可以 是一个类的对象，而值也要是一个类的对象。</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>list<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>list</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ref</span> <span class="token attr-name">bean</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>role1<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ref</span> <span class="token attr-name">bean</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>role2<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>list</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>List</code>属性使用<code>&lt;list&gt;</code>元素定义注入，使用多个<code>&lt;ref&gt;</code>元素的Bean属性去引用之前定义好的Bean</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>map<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>map</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>entry</span> <span class="token attr-name">key-ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>role2<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>user1<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>entry</span> <span class="token attr-name">key-ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>role2<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>user2<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>map</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>Map</code>属性使用<code>&lt;map&gt;</code>元素定义注入，使用多个<code>&lt;enty&gt;</code>元素的<code>key-ref</code>属性去引用之前定义好的Bean做键，而用<code>value-ref</code>属性去引用之前定义好的Bean做值</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>set<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>set</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ref</span> <span class="token attr-name">bean</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>role1<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ref</span> <span class="token attr-name">bean</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>role2<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>set</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>Set</code>属性使用<code>&lt;set&gt;</code>元素定义注入，使用多个<code>&lt;ref&gt;</code>元素的Bean去引用之前定义好的Bean</p><h4 id="命名空间装配">命名空间装配</h4><h3 id="通过注解装配Bean">通过注解装配Bean</h3><p>使用注解的方式可以减少XML的配置，注解功能更为强大，它既能实现XML的功能，也提供了自动装配的功能，采用了自动装配后，程序员所需要做的决断就少了，更加有利于程序的开发，这就是“约定优于配置”的开发原则。</p><p>在Spring中，它提供了两种方式来让Spring IoC容器发现Bean</p><ul><li>组件扫描：通过定义资源的方式，让Sprnig IoC容器扫描对应的包，从而把Bean装配进来。</li><li>自动装配：通过注解定义，使得一些依赖关系可以通过注解完成</li></ul><h4 id="使用-Component装配Bean">使用<code>@Component</code>装配Bean</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"role"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Role</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">Long</span> id<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"role_name_1"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> roleName<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"role_note_1"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> note<span class="token punctuation">;</span>    <span class="token comment">/**** setter and getter ****/</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>注解<code>@Component</code>代表Spring IoC会把这个类扫描生成Bean实例，而其中的<code>value</code>属性代表这个类在Spring中的id，就相当于XML方式定义的Bean的id，也可以简写成<code>@Component(“role”)</code>，甚至直接写成<code>@Component</code>，对于不写的，Spring IoC容器就默认为类名，但是以首字母小写的形式作为id，为其生成对象，配置到容器中。</li><li>注解<code>@Value</code>代表是是值的注入，这里只是简单注入一些值，其中id是一个long型，注入的时候Spring会为其转化类型</li></ul><p>现在有了这个类，但是还不能进行测试，因为Spring IoC并不知道需要去哪里扫描对象，这个时候可以在同一个包下创建一个Java Config类来告诉它</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@ComponentScan</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PojoConfig</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>这个类十分简单但要注意<code>@ComponentScan</code>代表进行扫描，默认是扫描当前包的路径，POJO的包名和它保持一致才能进行扫描，否则不行。</p><p>接下来通过Spring定义好的Spring IoC容器实现类<code>AnnotationConfigApplicationContext</code>去生成IoC容器</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Pojo2Text</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">AnnotationConfigApplicationContext</span> context <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AnnotationConfigApplicationContext</span><span class="token punctuation">(</span><span class="token class-name">PojoConfig</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Role</span> role <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token class-name">Role</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"role.getId() = "</span> <span class="token operator">+</span> role<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>由此可以看出两个明显的弊端：</p><ul><li>对于<code>@ComponentScan</code>注解，它只是扫描所在包的Java类，但更多的时候需要的是可以扫描所指定的类</li><li>上面只注入了一些简单的值，而没有注入对象，同样在现实的开发中可以注入对象是十分重要的，也是常见的场景</li></ul><p><code>@ComponentScan</code>存在着两个配置项：</p><ul><li>第一个是<code>basePackages</code>，它是由base和package两个单词组成的，而package还使用了复数，意味着它可以配置一个Java包的数组，Spring会根据它的配置扫描对应的包和子包，将配置好的Bean装配起来</li><li>第二个是<code>basePackageClasses</code>，Class采用复数，意味着它可以配置多个类，Spring会根据配置的类所在的包，为包和子包进行扫描装配对应配置的Bean</li></ul><p>为验证<code>@ComponentScan</code>的配置项，首先定义一个接口</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">top<span class="token punctuation">.</span>whl<span class="token punctuation">.</span>service2</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">top<span class="token punctuation">.</span>whl<span class="token punctuation">.</span>pojo2<span class="token punctuation">.</span></span><span class="token class-name">Role</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">RoleService</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">printRoleInfo</span><span class="token punctuation">(</span><span class="token class-name">Role</span> role<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用接口来编写一些操作类是Spring所推荐的，它可以将定义和实现相分离。接口的实现类：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">top<span class="token punctuation">.</span>whl<span class="token punctuation">.</span>service2<span class="token punctuation">.</span>impl</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span></span><span class="token class-name">Component</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">top<span class="token punctuation">.</span>whl<span class="token punctuation">.</span>pojo2<span class="token punctuation">.</span></span><span class="token class-name">Role</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">top<span class="token punctuation">.</span>whl<span class="token punctuation">.</span>service2<span class="token punctuation">.</span></span><span class="token class-name">RoleService</span><span class="token punctuation">;</span><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RoleServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">RoleService</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">printRoleInfo</span><span class="token punctuation">(</span><span class="token class-name">Role</span> role<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"id = "</span> <span class="token operator">+</span> role<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"name = "</span> <span class="token operator">+</span> role<span class="token punctuation">.</span><span class="token function">getRoleName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"note = "</span> <span class="token operator">+</span> role<span class="token punctuation">.</span><span class="token function">getNote</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>配置<code>@ComponentScan</code>指定包扫描</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">top<span class="token punctuation">.</span>whl<span class="token punctuation">.</span>config</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">ComponentScan</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">top<span class="token punctuation">.</span>whl<span class="token punctuation">.</span>pojo2<span class="token punctuation">.</span></span><span class="token class-name">Role</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">top<span class="token punctuation">.</span>whl<span class="token punctuation">.</span>service2<span class="token punctuation">.</span></span><span class="token class-name">RoleService</span><span class="token punctuation">;</span><span class="token annotation punctuation">@ComponentScan</span><span class="token punctuation">(</span>basePackageClasses <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token class-name">Role</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token class-name">RoleService</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ApplicationConfig</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>测试配置</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Service2Test</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">AnnotationConfigApplicationContext</span> context <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AnnotationConfigApplicationContext</span><span class="token punctuation">(</span><span class="token class-name">ApplicationConfig</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Role</span> role <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token class-name">Role</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">RoleService</span> roleService <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token class-name">RoleService</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        roleService<span class="token punctuation">.</span><span class="token function">printRoleInfo</span><span class="token punctuation">(</span>role<span class="token punctuation">)</span><span class="token punctuation">;</span>        context<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="自动装配——-Autowired">自动装配——<code>@Autowired</code></h4><h3 id="Spring模块">Spring模块</h3><p><strong>Spring可以分为6大模块</strong>：</p><ul><li><strong>Spring Core</strong>： Spring的核心功能： IOC容器, 解决对象创建及依赖关系</li><li><strong>Spring Web</strong>： Spring对web模块的支持。<ul><li>可以与struts整合,让struts的action创建交给spring</li><li>spring mvc模式</li></ul></li><li><strong>Spring DAO</strong>： Spring 对jdbc操作的支持 【JdbcTemplate模板工具类】</li><li><strong>Spring ORM</strong>： Spring对orm的支持：<ul><li>既可以与hibernate整合，【session】</li><li>也可以使用spring的对hibernate操作的封装</li></ul></li><li><strong>Spring AOP</strong>： 切面编程</li><li><strong>SpringEE</strong>： Spring 对JavaEE其他模块的支持</li></ul><p><img src="http://img.whl123456.top/image/Spring%E6%A1%86%E6%9E%B6.png" alt="Sping"></p><h3 id="Spring-Core模块">Spring Core模块</h3><p>核心容器</p><h2 id="HelloSpirng">HelloSpirng</h2><blockquote><p>对应源码实例为：HelloSpring</p></blockquote><h2 id="applicationContext-xml的配置">applicationContext.xml的配置</h2><h3 id="别名">别名</h3><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>alias</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>原名<span class="token punctuation">"</span></span> <span class="token attr-name">alias</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>别名<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>原名和别名都可以被Spring创建，获取到原名对应的对象</p><h3 id="Bean的配置">Bean的配置</h3><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>user<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>top.whl.pojo.User<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>user3,u3<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>whl_property<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><code>id</code>：bean的唯一标识符，是java类中的对象名</p><p><code>class</code>：bean对象对应的全限定名：包名+类名</p><p><code>name</code>：别名，可以同时取多个别名（用逗号、空格或分号分开），比<code>alias</code>更高级</p><h3 id="import">import</h3><p>用于团队开发，将多个配置文件导入合并</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>import</span> <span class="token attr-name">resource</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>beans2.xml<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>对应源码实例为：SpringIoC02</p></blockquote><h2 id="依赖注入（DI）">依赖注入（DI）</h2><h3 id="构造器注入-2">构造器注入</h3><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>user<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>top.whl.pojo.User<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>user3,u3 u4<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token comment">&lt;!--index方式--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">index</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>whl_constructor-arg_index<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>user<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>top.whl.pojo.User<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>user3,u3 u4<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token comment">&lt;!--type方式--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>java.lang.String<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>whl_constructor-arg_type<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>user<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>top.whl.pojo.User<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>user3,u3 u4<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>whl_constructor-arg_name<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><p>对应源码实例为：SpringIoC02</p></blockquote><h3 id="Set方式注入">Set方式注入</h3><p>需要类中有Set方法</p><ul><li>依赖：bean对象的创建依赖于容器</li><li>注入：bean对象中的所有属性，由容器来注入</li></ul><p>测试对象</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Address</span> address<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> books<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> hobbies<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span><span class="token class-name">String</span><span class="token punctuation">></span></span> card<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> games<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> oh<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Properties</span> info<span class="token punctuation">;</span>    <span class="token comment">//省略getter、setter和toString方法代码</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>测试类</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Text01</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//CPX</span>        <span class="token class-name">ClassPathXmlApplicationContext</span> context <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClassPathXmlApplicationContext</span><span class="token punctuation">(</span><span class="token string">"applicationContext.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Student</span> student <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Student</span><span class="token punctuation">)</span> context<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"student"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"student.toString() = "</span> <span class="token operator">+</span> student<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注入方式</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>address<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>top.whl.pojo.Address<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>address<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>浙江<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>student<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>top.whl.pojo.Student<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--01 普通值注入直接使用value--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>whl<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token comment">&lt;!--02 Bean注入使用ref--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>address<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>address<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token comment">&lt;!--03 数组注入--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>books<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>array</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>红楼梦<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>西游记<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>水浒传<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>三国演义<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>array</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--04 List注入--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>hobbies<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>list</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>篮球<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>足球<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>乒乓球<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>羽毛球<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>list</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--05 Map注入--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>card<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>map</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>entry</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>学号<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>000000<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>entry</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>身份证号<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>000000<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>entry</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>银行卡号<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>000000<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>map</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--06 Set注入--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>games<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>set</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>LOL<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>CS<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>set</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--07 null注入--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>oh<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>null</span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--08 Properties--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>info<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>props</span> <span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>prop</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>姓名<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>whl<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>prop</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>prop</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>年龄<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>18<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>prop</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>prop</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>性别<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>男<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>prop</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>prop</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>driver<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>000<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>prop</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>prop</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>url<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>000<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>prop</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>prop</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>000<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>prop</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>prop</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>000<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>prop</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>props</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>对应源码实例：SpringDI</p></blockquote><h3 id="拓展方式注入">拓展方式注入</h3><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>              <span class="token attr-name"><span class="token namespace">xmlns:</span>p</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/p<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>c</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/c<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans        https://www.springframework.org/schema/beans/spring-beans.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--p命名空间注入直接注入属性的值 property--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>user<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>top.whl.pojo.User<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">p:</span>name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>whl<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">p:</span>age</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>18<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token comment">&lt;!--c命名空间注入 constructor--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>user2<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>top.whl.pojo.User<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">c:</span>age</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>19<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">c:</span>name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>whl02<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>测试类</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test02</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">ClassPathXmlApplicationContext</span> context <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClassPathXmlApplicationContext</span><span class="token punctuation">(</span><span class="token string">"user.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">User</span> user <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"user"</span><span class="token punctuation">,</span> <span class="token class-name">User</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"user = "</span> <span class="token operator">+</span> user<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test03</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">ClassPathXmlApplicationContext</span> context <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClassPathXmlApplicationContext</span><span class="token punctuation">(</span><span class="token string">"user.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">User</span> user2 <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"user2"</span><span class="token punctuation">,</span> <span class="token class-name">User</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"user2 = "</span> <span class="token operator">+</span> user2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>测试对象User类中需要设置无参构造和有参构造才能使用c命名空间</p></blockquote><h2 id="Bean作用域">Bean作用域</h2><table><thead><tr><th style="text-align:left">Scope</th><th style="text-align:left">Description</th></tr></thead><tbody><tr><td style="text-align:left"><a href="https://docs.spring.io/spring/docs/current/spring-framework-reference/core.html#beans-factory-scopes-singleton">singleton</a></td><td style="text-align:left">(Default) Scopes a single bean definition to a single object instance for each Spring IoC container.</td></tr><tr><td style="text-align:left"><a href="https://docs.spring.io/spring/docs/current/spring-framework-reference/core.html#beans-factory-scopes-prototype">prototype</a></td><td style="text-align:left">Scopes a single bean definition to any number of object instances.</td></tr><tr><td style="text-align:left"><a href="https://docs.spring.io/spring/docs/current/spring-framework-reference/core.html#beans-factory-scopes-request">request</a></td><td style="text-align:left">Scopes a single bean definition to the lifecycle of a single HTTP request. That is, each HTTP request has its own instance of a bean created off the back of a single bean definition. Only valid in the context of a web-aware Spring <code>ApplicationContext</code>.</td></tr><tr><td style="text-align:left"><a href="https://docs.spring.io/spring/docs/current/spring-framework-reference/core.html#beans-factory-scopes-session">session</a></td><td style="text-align:left">Scopes a single bean definition to the lifecycle of an HTTP <code>Session</code>. Only valid in the context of a web-aware Spring <code>ApplicationContext</code>.</td></tr><tr><td style="text-align:left"><a href="https://docs.spring.io/spring/docs/current/spring-framework-reference/core.html#beans-factory-scopes-application">application</a></td><td style="text-align:left">Scopes a single bean definition to the lifecycle of a <code>ServletContext</code>. Only valid in the context of a web-aware Spring <code>ApplicationContext</code>.</td></tr><tr><td style="text-align:left"><a href="https://docs.spring.io/spring/docs/current/spring-framework-reference/web.html#websocket-stomp-websocket-scope">websocket</a></td><td style="text-align:left">Scopes a single bean definition to the lifecycle of a <code>WebSocket</code>. Only valid in the context of a web-aware Spring <code>ApplicationContext</code>.</td></tr></tbody></table><h3 id="singleton单例模式">singleton单例模式</h3><p>无论使用多少个Bean只有一个实例被创建，默认实现</p><p>测试类</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test04</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">ClassPathXmlApplicationContext</span> context <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClassPathXmlApplicationContext</span><span class="token punctuation">(</span><span class="token string">"user.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">User</span> user2 <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"singleton"</span><span class="token punctuation">,</span> <span class="token class-name">User</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">User</span> user3 <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"singleton"</span><span class="token punctuation">,</span> <span class="token class-name">User</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>user3<span class="token operator">==</span>user2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//true</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>显式创建</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>singleton<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>top.whl.pojo.User<span class="token punctuation">"</span></span> <span class="token attr-name">scope</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>singleton<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="prototype原型模式">prototype原型模式</h3><p>每次从容器（context）中getBean都会产生新对象</p><p>创建</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>prototype<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>top.whl.pojo.User<span class="token punctuation">"</span></span> <span class="token attr-name">scope</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>prototype<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>测试类</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test05</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">ClassPathXmlApplicationContext</span> context <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClassPathXmlApplicationContext</span><span class="token punctuation">(</span><span class="token string">"user.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">User</span> user2 <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"prototype"</span><span class="token punctuation">,</span> <span class="token class-name">User</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">User</span> user3 <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"prototype"</span><span class="token punctuation">,</span> <span class="token class-name">User</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>user3<span class="token operator">==</span>user2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//false</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>对应源码实例：SpringDI</p></blockquote><h3 id="其余">其余</h3><p>其余在Web开发中使用</p><h2 id="Bean的自动装配">Bean的自动装配</h2><p>3种装配方式：</p><ul><li>在xml中显式配置</li><li>在java中显式配置</li><li>隐式的自动装配</li></ul><h3 id="ByName">ByName</h3><p>自动在容器上下文中查找和对象set后对应的bean的id，id唯一且与set方法对应</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>person2<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>top.whl.pojo.Person<span class="token punctuation">"</span></span> <span class="token attr-name">autowire</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>byName<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="ByType">ByType</h3><p>自动在容器上下文中查找和对象属性相同的bean，class唯一，可以省略bean的id</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>person3<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>top.whl.pojo.Person<span class="token punctuation">"</span></span> <span class="token attr-name">autowire</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>byType<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="注解">注解</h3><p>xml中导入context约束和开启注解支持</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>context</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/context<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans        https://www.springframework.org/schema/beans/spring-beans.xsd        http://www.springframework.org/schema/context        https://www.springframework.org/schema/context/spring-context.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>annotation-config</span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>类中属性和Setter方法中开启注解，在类中可以不用写Set方法</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> <span class="token class-name">Cat</span> cat<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> <span class="token class-name">Dog</span> dog<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token comment">//省略getter、setter和toString方法代码</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>@Autowired(required = true)</code>默认为true，如果设置<code>@Autowired(required = false)</code>，什么对象可以为null</p><p>但Bean中一个类配置多个id时使用<code>@Qualifier(value = &quot;对应id&quot;)</code>配合<code>@Autowired</code>可以指定bean，类型需要对应</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Autowired</span><span class="token annotation punctuation">@Qualifier</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"dog2"</span><span class="token punctuation">)</span><span class="token keyword">private</span> <span class="token class-name">Dog</span> dog<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><p>对应源码实例：Autowire</p></blockquote><h2 id="使用注解开发">使用注解开发</h2><p><code>@Autowired</code>：自动装配，放在属性前面</p><p><code>@Nullable</code>：表示字段可以为空，放在形参前面</p><p><code>@Resource</code>：Java中的注解，用于自动装配，Java11移除</p><p><code>@Component</code>：被扫描类，放在类前，配合Bean中<code>&lt;context:component-scan base-package=&quot;包名&quot;/&gt;</code>使用，等价于<code>&lt;bean id=&quot;&quot; class=&quot;&quot;/&gt;</code></p><p><code>@Value(&quot;值&quot;)</code>：等价于<code>&lt;property name=&quot;&quot; value=&quot;&quot;&gt;</code>，复杂值推荐走配置文件，放在属性或对应Set方法前</p><h3 id="前提配置bean">前提配置bean</h3><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>context</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/context<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans        https://www.springframework.org/schema/beans/spring-beans.xsd        http://www.springframework.org/schema/context        https://www.springframework.org/schema/context/spring-context.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--扫描指定目录下的包，使注解生效--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>component-scan</span> <span class="token attr-name">base-package</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>top.whl<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>annotation-config</span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="属性注入">属性注入</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">&#123;</span><span class="token comment">//    @Value("WHL")</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"WHL1"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="衍生的注解">衍生的注解</h3><p><code>@Component</code>有几个衍生注解，在Web开发中，按照MVC结构分层</p><ul><li>DAO：使用<code>@Repository</code></li><li>Service：使用<code>@Service</code></li><li>Controller：使用<code>@Controller</code></li></ul><p>以上注解功能同<code>@Component</code></p><h3 id="自动装配">自动装配</h3><p><code>@Autowired</code>：自动装配，放在属性前面</p><p><code>@Nullable</code>：表示字段可以为空，放在形参前面</p><p><code>@Resource</code>：Java中的注解，用于自动装配，Java11移除</p><p>详见Bean的自动装配</p><h3 id="作用域">作用域</h3><p><code>@Scope(&quot;XXX&quot;)</code>详见Bean作用域</p><blockquote><p>对应源码实例：Annotation</p></blockquote><h3 id="小结">小结</h3><ul><li>使用xml用来管理Bean</li><li>使用注解来完成属性注入</li></ul><h2 id="使用Java的方式配置Bean">使用Java的方式配置Bean</h2><p>JavaConfig</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> name<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"WHL"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token string">"User&#123;"</span> <span class="token operator">+</span>                <span class="token string">"name='"</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">'\''</span> <span class="token operator">+</span>                <span class="token string">'&#125;'</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token annotation punctuation">@ComponentScan</span><span class="token punctuation">(</span><span class="token string">"top.whl"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Config01</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> <span class="token class-name">User</span> <span class="token function">getUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="设计模式">设计模式</h2><h3 id="静态代理">静态代理</h3><p>代理的好处</p><ul><li><p>可以使真实角色的操作更加纯粹!不用去关注一些公共的业务</p></li><li><p>公共也就就交给代理角色!实现了业务的分工!</p></li><li><p>公共业务发生扩展的时候，方便集中管理!</p></li></ul><p>缺点</p><ul><li>一个真实角色就会产生1个代理角色</li><li>代码量会翻倍开发效率会变低</li></ul><p>接口</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Rent</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">rent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>真实角色</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Host</span> <span class="token keyword">implements</span> <span class="token class-name">Rent</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">rent</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"房东出租房子"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>代理</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Proxy</span> <span class="token keyword">implements</span> <span class="token class-name">Rent</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">Host</span> host<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">Proxy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">Proxy</span><span class="token punctuation">(</span><span class="token class-name">Host</span> host<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>host <span class="token operator">=</span> host<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">rent</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        host<span class="token punctuation">.</span><span class="token function">rent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">fee</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">sign</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">fee</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"收小费"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sign</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"签合同"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>客户端访问代理角色</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Host</span> host <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Host</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Proxy</span> proxy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Proxy</span><span class="token punctuation">(</span>host<span class="token punctuation">)</span><span class="token punctuation">;</span>        proxy<span class="token punctuation">.</span><span class="token function">rent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在不改变真实角色的代码的前提下增加功能</p><blockquote><p>对应实例源码：proxy</p></blockquote><h3 id="动态代理">动态代理</h3><p>在静态代理的优点基础上还有</p><ul><li>一个动态代理可以代理多个类，只要改变接口</li></ul><p>实现方式</p><ul><li><p>基于接口的动态代理（JDK反射）</p></li><li><p>基于类的动态代理（CGLib）</p></li><li><p>Java字节码实现（Javasist）</p></li></ul><p>使用基于接口的动态代理</p><p>需要了解的两个类：<code>Proxy</code>（代理），<code>InvocationHandler</code>（调用处理）</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ProxyInvocationHandler</span> <span class="token keyword">implements</span> <span class="token class-name">InvocationHandler</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//被代理的接口</span>    <span class="token keyword">private</span> <span class="token class-name">Rent</span> rent<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setRent</span><span class="token punctuation">(</span><span class="token class-name">Rent</span> rent<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>rent <span class="token operator">=</span> rent<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//生成得到代理类</span>    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">getProxy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token class-name">Proxy</span><span class="token punctuation">.</span><span class="token function">newProxyInstance</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> rent<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getInterfaces</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//处理代理实例，并返回结果</span>    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">invoke</span><span class="token punctuation">(</span><span class="token class-name">Object</span> o<span class="token punctuation">,</span> <span class="token class-name">Method</span> method<span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Throwable</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//反射实现</span>        <span class="token class-name">Object</span> result <span class="token operator">=</span> method<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>rent<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">fee</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">sign</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">fee</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"收小费"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sign</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"签合同"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//真实角色</span>        <span class="token class-name">Host</span> host <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Host</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//代理角色（不存在）</span>        <span class="token class-name">ProxyInvocationHandler</span> proxyInvocationHandler <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ProxyInvocationHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//通过调用程序处理角色</span>        proxyInvocationHandler<span class="token punctuation">.</span><span class="token function">setRent</span><span class="token punctuation">(</span>host<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Rent</span> proxy <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Rent</span><span class="token punctuation">)</span> proxyInvocationHandler<span class="token punctuation">.</span><span class="token function">getProxy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 动态生成</span>        proxy<span class="token punctuation">.</span><span class="token function">rent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="面向切面编程（AOP）">面向切面编程（AOP）</h2><p>AOP (Aspect Oriented Programming)意为：面向切面编程，通过<strong>预编译</strong>方式和运行期<strong>动态代理</strong>实现程序功能的统一维护的一种技术。</p><ul><li>Aspect（切面）：将关注点进行模块化。某些关注点可能会横跨多个对象，如事务管理，它是Java企业级应用中一个关于横切关注点很好的例子。在 Spring AOP中，切面可以使用常规类（基于模式的方法）或使用<code>@Aspect</code>注解的常规类来实现切面。</li><li>Join Point（连接点）：在程序执行过程中某个特定的点，如某方法调用时或处理异常时。在 Spring AOP中，一个连接点总是代表一个方法的执行。</li><li>Advice（通知）：在切面的某个特定的连接点上执行的动作。通知有各种类型，其中包括&quot;around&quot;、&quot;before&quot;和&quot;after&quot;等通知。许多AOP框架，包括 Spring，都是以拦截器来实现通知模型的，并维护一个以连接点为中心的拦截器链。</li><li>Pointcut（切入点）：匹配连接点的断言。通知和一个切入点表达式关联，并在满足这个切入点的连接点上运行（如当执行某个特定名称的方法时）。切入点表达式如何和连接点匹配是AOP的核心。 Spring默认使用 AspectJ切入点语法。</li><li>Introduction（引入）：声明额外的方法或某个类型的字段。 Spring允许引入新的接口（及个对应的实现）到任何被通知的对象。例如，可以使用一个引入来使bean实现 IsModified 接口以便简化缓存机制。在 AspectJ社区， Introduction也被称为 Inter-type Declaration（内部类型声明）。</li><li>Target Object（目标对象）：被一个或多个切面所通知的对象。也有人把它称为 Advised（被通知）对象。既然 Spring AOP是通过运行时代理实现的，那这个对象永远是一个 Proxied（被代理）对象。</li><li>AOP Proxy（AOP代理）：AOP框架创建的对象，用来实现 Aspect Contract（切面契约）包括通知方法执行等功能。在 Spring中，AOP代理可以是JDK动态代理或CGLB代理。</li><li>Weaving（织入）：把切面连接到其他的应用程序类型或对象上，并创建一个 Advised（被通知）的对象。这些可以在编译时（如使用 AspectJ编译器）、类加载时完成。</li></ul><p>Spring与其他纯Java AOP框架一样，在运行时完成织入。其中有关Advice（通知）的类型主要有以下几种：</p><ul><li>Before Advice（前置通知）：在某连接点之前执行的通知，但这个通知不能阻止连接点前的执行（除非它抛出一个异常）。</li><li>After Returning Advice（返回后通知）：在某连接点正常完成后执行的通知，如果一个方法没有抛出任何异常，将正常返回。</li><li>After Throwing Advice（抛出异常后通知）：在方法抛出异常退出时执行的通知</li><li>After（ finally） Advice（最后通知）：当某连接点退出时执行的通知（不论是正常返回还是异常退出）</li><li>Around Advice（环绕通知）：包围一个连接点的通知，如方法调用。这是最强大的一种通知类型。环绕通知可以在方法调用前后完成自定义的行为，它也会选择是否继续执行连接点，或者直接返回它们自己的返回值或抛出异常来结束执行。 Around Advice是最常用的一种通知类型。与AspectJ一样， Spring提供所有类型的通知，推荐使用尽量简单的通知类型来实现需要的功能。例如，如果只是需要用一个方法的返回值来更新缓存，虽然使用环绕通知也能完成同样的事情，但最好是使用 After Returnin通知，而不是使用环绕通知。用最合适的通知类型可以使编程模型变得简单，并且能够避免很多潜在的错误。例如，如果不调用 Join point（用于 Around Advice）的 proceed()方法，就不会有调用的问题。</li></ul><p>AOP是OOP的延续,是软件开发中的一个热点，也是Spring框架中的一个重要内容，是函数式编程的一种衍生范型。利用AOP可以对业务逻辑的各个部分进行隔离从而使得业务逻辑各部分之间的耦合度降低，提高程序的可重用性，同时提高了开发的效率。</p><h3 id="AOP在Spring中的作用">AOP在Spring中的作用</h3><p>提供声明式事务；允许用户自定义切面</p><ul><li><p>横切关注点：跨越应用程序多个模块的方法或功能。即使与业务逻辑无关，但需要关注的部分就是横切关注点。如日志、安全、缓存、事务等</p></li><li><p>切面（Aspect）：横切关注点被模块化的特殊对象。即，一个类。</p></li><li><p>通知（Advice）：切面必须要完成的工作。即，类中的一个方法。</p></li><li><p>目标（Target）：被通知的对象。</p></li><li><p>代理（Proxy）：向目标对象应用通知之后创建的对象。</p></li><li><p>切入点（PointCut）：切面通知执行的“地点”的定义</p></li><li><p>连接点（JointPoint）：与切入点匹配的执行点。</p></li></ul><p>![AOP](E:\OneDrive - lanqilu\我的图片库\blogimg\Spring框架\AOP.svg)</p><table><thead><tr><th>通知类型</th><th>连接点</th><th>实现接口</th></tr></thead><tbody><tr><td>前置通知</td><td>方法前</td><td>org.springframework.aop.MethodBeforeAdvice</td></tr><tr><td>后置通知</td><td>方法后</td><td>org.springframework.aop.AfterReturningAdvice</td></tr><tr><td>环绕通知</td><td>方法前后</td><td>org.aopalliance.intercept.MethodInterceptor</td></tr><tr><td>异常抛出通知</td><td>方法抛出异常</td><td>org.springframework.aop.ThrowsAdvice</td></tr><tr><td>引介通知</td><td>类中增加新的方法属性</td><td>org.springframework.aop.IntroductionAdvisor</td></tr></tbody></table><p>总结：AOP在不改变原有代码的情况下，去增加新的功能。</p><h2 id="使用Spring实现AOP">使用Spring实现AOP</h2><h3 id="导入依赖">导入依赖</h3><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!-- https://mvnrepository.com/artifact/org.aspectj/aspectjweaver --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.aspectj<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>aspectjweaver<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.9.6<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>runtime<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="创建Service业务类">创建Service业务类</h3><p>创建UserService接口</p><pre class="line-numbers language-none"><code class="language-none">package com.halo.service;public interface UserService &#123;    public void add();    public void delete();    public void update();    public void select();&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>实现UserService接口</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>halo<span class="token punctuation">.</span>service</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">UserService</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"增加了用户"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">delete</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"删除了用户"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"更新了用户"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">select</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"查询了用户"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="实现方式一：使用Spring的API接口">实现方式一：使用Spring的API接口</h3><p>创建BeforeLog类</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>halo<span class="token punctuation">.</span>log</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>aop<span class="token punctuation">.</span></span><span class="token class-name">MethodBeforeAdvice</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span></span><span class="token class-name">Method</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BeforeLog</span> <span class="token keyword">implements</span> <span class="token class-name">MethodBeforeAdvice</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token comment">/**     * @param method: 要执行的目标对象的方法     * @param args: 参数     * @param target:  目标对象     * @return void     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">before</span><span class="token punctuation">(</span><span class="token class-name">Method</span> method<span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">,</span> <span class="token class-name">Object</span> target<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Throwable</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>target<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" 的 "</span> <span class="token operator">+</span> method<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" 被执行了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>创建AfterLog类</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>halo<span class="token punctuation">.</span>log</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>aop<span class="token punctuation">.</span></span><span class="token class-name">AfterReturningAdvice</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span></span><span class="token class-name">Method</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AfterLog</span> <span class="token keyword">implements</span> <span class="token class-name">AfterReturningAdvice</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token comment">/**     * @param returnValue: 返回值     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">afterReturning</span><span class="token punctuation">(</span><span class="token class-name">Object</span> returnValue<span class="token punctuation">,</span> <span class="token class-name">Method</span> method<span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">,</span> <span class="token class-name">Object</span> target<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Throwable</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"执行了 "</span> <span class="token operator">+</span> method<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" 方法,返回的结果为: "</span> <span class="token operator">+</span> returnValue<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>创建并配置applicationContext.xml</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token operator">&lt;</span><span class="token operator">?</span>xml version<span class="token operator">=</span><span class="token string">"1.0"</span> encoding<span class="token operator">=</span><span class="token string">"UTF-8"</span><span class="token operator">?</span><span class="token operator">></span><span class="token operator">&lt;</span>beans xmlns<span class="token operator">=</span><span class="token string">"http://www.springframework.org/schema/beans"</span>       xmlns<span class="token operator">:</span>xsi<span class="token operator">=</span><span class="token string">"http://www.w3.org/2001/XMLSchema-instance"</span>       xmlns<span class="token operator">:</span>aop<span class="token operator">=</span><span class="token string">"http://www.springframework.org/schema/aop"</span>       xsi<span class="token operator">:</span>schemaLocation<span class="token operator">=</span>"       http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>www<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>org<span class="token operator">/</span>schema<span class="token operator">/</span>beans       http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>www<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>org<span class="token operator">/</span>schema<span class="token operator">/</span>beans<span class="token operator">/</span>spring<span class="token operator">-</span>beans<span class="token punctuation">.</span>xsd       http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>www<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>org<span class="token operator">/</span>schema<span class="token operator">/</span>aop       http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>www<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>org<span class="token operator">/</span>schema<span class="token operator">/</span>aop<span class="token operator">/</span>spring<span class="token operator">-</span>aop<span class="token punctuation">.</span>xsd"<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>注册<span class="token class-name">Bean</span><span class="token operator">--</span><span class="token operator">></span>    <span class="token operator">&lt;</span>bean id<span class="token operator">=</span><span class="token string">"userService"</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"com.halo.service.UserServiceImpl"</span><span class="token operator">/</span><span class="token operator">></span>    <span class="token operator">&lt;</span>bean id<span class="token operator">=</span><span class="token string">"beforeLog"</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"com.halo.log.BeforeLog"</span><span class="token operator">/</span><span class="token operator">></span>    <span class="token operator">&lt;</span>bean id<span class="token operator">=</span><span class="token string">"afterLog"</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"com.halo.log.AfterLog"</span><span class="token operator">/</span><span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>使用原生<span class="token class-name">SpringAPI</span>接口<span class="token operator">--</span><span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>配置AOP<span class="token punctuation">,</span>需要导入AOP的约束<span class="token operator">--</span><span class="token operator">></span>    <span class="token operator">&lt;</span>aop<span class="token operator">:</span>config<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>切入点<span class="token operator">:</span>开始执行的位置<span class="token operator">--</span><span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span><span class="token function">execution</span><span class="token punctuation">(</span>要执行的位置<span class="token punctuation">)</span><span class="token operator">--</span><span class="token operator">></span>        <span class="token operator">&lt;</span>aop<span class="token operator">:</span>pointcut id<span class="token operator">=</span><span class="token string">"pointcut"</span> expression<span class="token operator">=</span><span class="token string">"execution(* com.halo.service.UserServiceImpl.*(..))"</span><span class="token operator">/</span><span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>执行环绕增加<span class="token operator">--</span><span class="token operator">></span>        <span class="token operator">&lt;</span>aop<span class="token operator">:</span>advisor advice<span class="token operator">-</span>ref<span class="token operator">=</span><span class="token string">"beforeLog"</span> pointcut<span class="token operator">-</span>ref<span class="token operator">=</span><span class="token string">"pointcut"</span><span class="token operator">/</span><span class="token operator">></span>        <span class="token operator">&lt;</span>aop<span class="token operator">:</span>advisor advice<span class="token operator">-</span>ref<span class="token operator">=</span><span class="token string">"afterLog"</span> pointcut<span class="token operator">-</span>ref<span class="token operator">=</span><span class="token string">"pointcut"</span><span class="token operator">/</span><span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>aop<span class="token operator">:</span>config<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>beans<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>进行测试</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>halo<span class="token punctuation">.</span>service<span class="token punctuation">.</span></span><span class="token class-name">UserService</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>support<span class="token punctuation">.</span></span><span class="token class-name">ClassPathXmlApplicationContext</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AOPTest</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">ClassPathXmlApplicationContext</span> context <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClassPathXmlApplicationContext</span><span class="token punctuation">(</span><span class="token string">"applicationContext.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 动态代理接口 不是实现类</span>        <span class="token class-name">UserService</span> userService <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"userService"</span><span class="token punctuation">,</span> <span class="token class-name">UserService</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        userService<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        userService<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        userService<span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        userService<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="实现方式二：自定义来实现AOP">实现方式二：自定义来实现AOP</h3><p>创建CustomPointCut类</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>halo<span class="token punctuation">.</span>custom</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CustomPointCut</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">before</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"======方法执行前======"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">after</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"======方法执行后======"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>配置applicationContext.xml</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token operator">&lt;</span><span class="token operator">?</span>xml version<span class="token operator">=</span><span class="token string">"1.0"</span> encoding<span class="token operator">=</span><span class="token string">"UTF-8"</span><span class="token operator">?</span><span class="token operator">></span><span class="token operator">&lt;</span>beans xmlns<span class="token operator">=</span><span class="token string">"http://www.springframework.org/schema/beans"</span>       xmlns<span class="token operator">:</span>xsi<span class="token operator">=</span><span class="token string">"http://www.w3.org/2001/XMLSchema-instance"</span>       xmlns<span class="token operator">:</span>aop<span class="token operator">=</span><span class="token string">"http://www.springframework.org/schema/aop"</span>       xsi<span class="token operator">:</span>schemaLocation<span class="token operator">=</span>"       http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>www<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>org<span class="token operator">/</span>schema<span class="token operator">/</span>beans       http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>www<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>org<span class="token operator">/</span>schema<span class="token operator">/</span>beans<span class="token operator">/</span>spring<span class="token operator">-</span>beans<span class="token punctuation">.</span>xsd       http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>www<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>org<span class="token operator">/</span>schema<span class="token operator">/</span>aop       http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>www<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>org<span class="token operator">/</span>schema<span class="token operator">/</span>aop<span class="token operator">/</span>spring<span class="token operator">-</span>aop<span class="token punctuation">.</span>xsd"<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>注册<span class="token class-name">Bean</span><span class="token operator">--</span><span class="token operator">></span>    <span class="token operator">&lt;</span>bean id<span class="token operator">=</span><span class="token string">"userService"</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"com.halo.service.UserServiceImpl"</span><span class="token operator">/</span><span class="token operator">></span>    <span class="token operator">&lt;</span>bean id<span class="token operator">=</span><span class="token string">"custom"</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"com.halo.custom.CustomPointCut"</span><span class="token operator">/</span><span class="token operator">></span>    <span class="token operator">&lt;</span>aop<span class="token operator">:</span>config<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>自定义切面 ref <span class="token operator">=</span> 要引入的类<span class="token operator">--</span><span class="token operator">></span>        <span class="token operator">&lt;</span>aop<span class="token operator">:</span>aspect ref<span class="token operator">=</span><span class="token string">"custom"</span><span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>切入点<span class="token operator">--</span><span class="token operator">></span>            <span class="token operator">&lt;</span>aop<span class="token operator">:</span>pointcut id<span class="token operator">=</span><span class="token string">"point"</span> expression<span class="token operator">=</span><span class="token string">"execution(* com.halo.service.UserServiceImpl.*(..)) "</span><span class="token operator">/</span><span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>通知<span class="token operator">--</span><span class="token operator">></span>            <span class="token operator">&lt;</span>aop<span class="token operator">:</span>before method<span class="token operator">=</span><span class="token string">"before"</span> pointcut<span class="token operator">-</span>ref<span class="token operator">=</span><span class="token string">"point"</span><span class="token operator">/</span><span class="token operator">></span>            <span class="token operator">&lt;</span>aop<span class="token operator">:</span>after method<span class="token operator">=</span><span class="token string">"after"</span> pointcut<span class="token operator">-</span>ref<span class="token operator">=</span><span class="token string">"point"</span><span class="token operator">/</span><span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>aop<span class="token operator">:</span>aspect<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>aop<span class="token operator">:</span>config<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>beans<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>测试类不变</p><h3 id="实现方式三-注解">实现方式三 注解</h3><p>创建AnnotationAOP类</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>halo<span class="token punctuation">.</span></span><span class="token class-name">Log</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>aspectj<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span><span class="token class-name">ProceedingJoinPoint</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>aspectj<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span><span class="token class-name">Signature</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>aspectj<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">After</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>aspectj<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Around</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>aspectj<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Aspect</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>aspectj<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Before</span><span class="token punctuation">;</span><span class="token annotation punctuation">@Aspect</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AnnotationAOP</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Before</span><span class="token punctuation">(</span><span class="token string">"execution(* com.halo.service.UserServiceImpl.*(..))"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">before</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"[Before]:方法执行前"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@After</span><span class="token punctuation">(</span><span class="token string">"execution(* com.halo.service.UserServiceImpl.*(..))"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">after</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"[After] :方法执行后"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 在环绕增强中我们可以给定一个参数，代表我们要获取处理切入的点     */</span>    <span class="token annotation punctuation">@Around</span><span class="token punctuation">(</span><span class="token string">"execution(* com.halo.service.UserServiceImpl.*(..))"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">around</span><span class="token punctuation">(</span><span class="token class-name">ProceedingJoinPoint</span> joinPoint<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Throwable</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"[Around]:环绕前"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 执行方法</span>        <span class="token class-name">Object</span> proceed <span class="token operator">=</span> joinPoint<span class="token punctuation">.</span><span class="token function">proceed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"[Around]:环绕后"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 获得签名</span>        <span class="token class-name">Signature</span> signature <span class="token operator">=</span> joinPoint<span class="token punctuation">.</span><span class="token function">getSignature</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"[signature]:"</span> <span class="token operator">+</span> signature<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>创建并配置applicationContext.xml</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token operator">&lt;</span><span class="token operator">?</span>xml version<span class="token operator">=</span><span class="token string">"1.0"</span> encoding<span class="token operator">=</span><span class="token string">"UTF-8"</span><span class="token operator">?</span><span class="token operator">></span><span class="token operator">&lt;</span>beans xmlns<span class="token operator">=</span><span class="token string">"http://www.springframework.org/schema/beans"</span>       xmlns<span class="token operator">:</span>xsi<span class="token operator">=</span><span class="token string">"http://www.w3.org/2001/XMLSchema-instance"</span>       xmlns<span class="token operator">:</span>aop<span class="token operator">=</span><span class="token string">"http://www.springframework.org/schema/aop"</span>       xsi<span class="token operator">:</span>schemaLocation<span class="token operator">=</span>"       http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>www<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>org<span class="token operator">/</span>schema<span class="token operator">/</span>beans       http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>www<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>org<span class="token operator">/</span>schema<span class="token operator">/</span>beans<span class="token operator">/</span>spring<span class="token operator">-</span>beans<span class="token punctuation">.</span>xsd       http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>www<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>org<span class="token operator">/</span>schema<span class="token operator">/</span>aop       http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>www<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>org<span class="token operator">/</span>schema<span class="token operator">/</span>aop<span class="token operator">/</span>spring<span class="token operator">-</span>aop<span class="token punctuation">.</span>xsd"<span class="token operator">></span>    <span class="token operator">&lt;</span>bean id<span class="token operator">=</span><span class="token string">"userService"</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"com.halo.service.UserServiceImpl"</span><span class="token operator">/</span><span class="token operator">></span>    <span class="token operator">&lt;</span>bean id<span class="token operator">=</span><span class="token string">"annotationAOP"</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"com.halo.Log.AnnotationAOP"</span><span class="token operator">/</span><span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>开启注解支持<span class="token operator">--</span><span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>proxy<span class="token operator">-</span>target<span class="token operator">-</span><span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"false"</span> 默认JDK<span class="token punctuation">,</span><span class="token boolean">true</span>是cglib<span class="token operator">--</span><span class="token operator">></span>    <span class="token operator">&lt;</span>aop<span class="token operator">:</span>aspectj<span class="token operator">-</span>autoproxy proxy<span class="token operator">-</span>target<span class="token operator">-</span><span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"false"</span><span class="token operator">/</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>beans<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>测试Application同一二方法</p>]]></content>
      
      
      <categories>
          
          <category> JavaEE </category>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Typora快捷键</title>
      <link href="2020/03/21/Typora%E5%BF%AB%E6%8D%B7%E9%94%AE/"/>
      <url>2020/03/21/Typora%E5%BF%AB%E6%8D%B7%E9%94%AE/</url>
      
        <content type="html"><![CDATA[<p>Typora快捷键</p><hr><h2 id="一、菜单栏">一、菜单栏</h2><ul><li>文件：<kbd>Alt</kbd>+<kbd>F</kbd></li><li>编辑：<kbd>Alt</kbd>+<kbd>E</kbd></li><li>段落：<kbd>Alt</kbd>+<kbd>P</kbd></li><li>格式：<kbd>Alt</kbd>+<kbd>O</kbd></li><li>视图：<kbd>Alt</kbd>+<kbd>V</kbd></li><li>主题：<kbd>Alt</kbd>+<kbd>T</kbd></li><li>帮助：<kbd>Alt</kbd>+<kbd>H</kbd></li></ul><h2 id="二、文件">二、文件</h2><ul><li>新建：<kbd>Ctrl</kbd>+<kbd>N</kbd></li><li>新建窗口：<kbd>Ctrl</kbd>+<kbd>Shift</kbd>+<kbd>N</kbd></li><li>打开：<kbd>Ctrl</kbd>+<kbd>O</kbd></li><li>快速打开：<kbd>Ctrl</kbd>+<kbd>P</kbd></li><li>保存：<kbd>Ctrl</kbd>+<kbd>S</kbd></li><li>另存为：<kbd>Ctrl</kbd>+<kbd>Shift</kbd>+<kbd>S</kbd></li><li>偏好：<kbd>Ctrl</kbd>+<kbd>,</kbd></li><li>关闭：<kbd>Ctrl</kbd>+<kbd>W</kbd></li></ul><h2 id="三、编辑">三、编辑</h2><ul><li>撤销：<kbd>Ctrl</kbd>+<kbd>Z</kbd></li><li>重做：<kbd>Ctrl</kbd>+<kbd>Y</kbd></li><li>剪切：<kbd>Ctrl</kbd>+<kbd>X</kbd></li><li>复制：<kbd>Ctrl</kbd>+<kbd>C</kbd></li><li>粘贴：<kbd>Ctrl</kbd>+<kbd>V</kbd></li><li>复制为MarkDown：<kbd>Ctrl</kbd>+<kbd>Shift</kbd>+<kbd>C</kbd></li><li>粘贴为纯文本：<kbd>Ctrl</kbd>+<kbd>Shift</kbd>+<kbd>V</kbd></li><li>全选：<kbd>Ctrl</kbd>+<kbd>A</kbd></li><li>选中当前行/句：<kbd>Ctrl</kbd>+<kbd>L</kbd></li><li>选中当前格式文本：<kbd>Ctrl</kbd>+<kbd>E</kbd></li><li>选中当前词：<kbd>Ctrl</kbd>+<kbd>D</kbd></li><li>跳转到文首：<kbd>Ctrl</kbd>+<kbd>Home</kbd></li><li>跳转到所选内容：<kbd>Ctrl</kbd>+<kbd>J</kbd></li><li>跳转到文末：<kbd>Ctrl</kbd>+<kbd>End</kbd></li><li>查找：<kbd>Ctrl</kbd>+<kbd>F</kbd></li><li>查找下一个：<kbd>F3</kbd></li><li>查找上一个：<kbd>Shift</kbd>+<kbd>F3</kbd></li><li>替换：<kbd>Ctrl</kbd>+<kbd>H</kbd></li></ul><h2 id="四、段落">四、段落</h2><ul><li>标题：<kbd>Ctrl</kbd>+<kbd>1</kbd>/<kbd>2</kbd>/<kbd>3</kbd>/<kbd>4</kbd>/<kbd>5</kbd></li><li>段落：<kbd>Ctrl</kbd>+<kbd>0</kbd></li><li>增大标题级别：<kbd>Ctrl</kbd>+<kbd>=</kbd></li><li>减少标题级别：<kbd>Ctrl</kbd>+<kbd>-</kbd></li><li>表格：<kbd>Ctrl</kbd>+<kbd>T</kbd></li><li>代码块：<kbd>Ctrl</kbd>+<kbd>Shift</kbd>+<kbd>K</kbd></li><li>公式块：<kbd>Ctrl</kbd>+<kbd>Shift</kbd>+<kbd>M</kbd></li><li>引用：<kbd>Ctrl</kbd>+<kbd>Shift</kbd>+<kbd>Q</kbd></li><li>有序列表：<kbd>Ctrl</kbd>+<kbd>Shift</kbd>+<kbd>[</kbd></li><li>无序列表：<kbd>Ctrl</kbd>+<kbd>Shift</kbd>+<kbd>]</kbd></li><li>增加缩进：<kbd>Ctrl</kbd>+<kbd>]</kbd></li><li>减少缩进：<kbd>Ctrl</kbd>+<kbd>[</kbd></li></ul><h2 id="五、格式">五、格式</h2><ul><li>加粗：<kbd>Ctrl</kbd>+<kbd>B</kbd></li><li>斜体：<kbd>Ctrl</kbd>+<kbd>I</kbd></li><li>下划线：<kbd>Ctrl</kbd>+<kbd>U</kbd></li><li>代码：<kbd>Ctrl</kbd>+<kbd>Shift</kbd>+<kbd>`</kbd></li><li>删除线：<kbd>Alt</kbd>+<kbd>Shift</kbd>+<kbd>5</kbd></li><li>超链接：<kbd>Ctrl</kbd>+<kbd>K</kbd></li><li>图像：<kbd>Ctrl</kbd>+<kbd>Shift</kbd>+<kbd>I</kbd></li><li>清除样式：重复格式快捷键</li></ul><h2 id="六、视图">六、视图</h2><ul><li>显示隐藏侧边栏：<kbd>Ctrl</kbd>+<kbd>Shift</kbd>+<kbd>L</kbd></li><li>大纲视图：<kbd>Ctrl</kbd>+<kbd>Shift</kbd>+<kbd>1</kbd></li><li>文档列表视图：<kbd>Ctrl</kbd>+<kbd>Shift</kbd>+<kbd>2</kbd></li><li>文件树视图：<kbd>Ctrl</kbd>+<kbd>Shift</kbd>+<kbd>3</kbd></li><li>源代码模式：<kbd>Ctrl</kbd>+<kbd>/</kbd></li><li>专注模式：<kbd>F8</kbd></li><li>打字机模式：<kbd>F9</kbd></li><li>切换全屏：<kbd>F11</kbd></li><li>实际大小：<kbd>Ctrl</kbd>+<kbd>Shift</kbd>+<kbd>0</kbd></li><li>放大：<kbd>Ctrl</kbd>+<kbd>Shift</kbd>+<kbd>=</kbd></li><li>缩小：<kbd>Ctrl</kbd>+<kbd>Shift</kbd>+<kbd>-</kbd></li><li>应用内窗口切换：<kbd>Ctrl</kbd>+<kbd>Tab</kbd></li><li>打开DevTools：<kbd>Shift</kbd>+<kbd>F12</kbd></li></ul>]]></content>
      
      
      <categories>
          
          <category> 快捷键 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 快捷键 </tag>
            
            <tag> Markdown </tag>
            
            <tag> Typora </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>IDEA快捷键</title>
      <link href="2020/03/21/IDEA%E5%BF%AB%E6%8D%B7%E9%94%AE/"/>
      <url>2020/03/21/IDEA%E5%BF%AB%E6%8D%B7%E9%94%AE/</url>
      
        <content type="html"><![CDATA[<p>IDEA快捷键</p><hr><h2 id="Ctrl">Ctrl</h2><table><thead><tr><th style="text-align:left">Win 快捷键</th><th style="text-align:left">Mac 快捷键</th><th style="text-align:left">介绍</th></tr></thead><tbody><tr><td style="text-align:left"><kbd>Ctrl</kbd> + <kbd>F</kbd></td><td style="text-align:left"><kbd>Command</kbd> + <kbd>F</kbd></td><td style="text-align:left">在当前文件进行文本查找</td></tr><tr><td style="text-align:left"><kbd>Ctrl</kbd> + <kbd>R</kbd></td><td style="text-align:left"><kbd>Command</kbd> + <kbd>R</kbd></td><td style="text-align:left">在当前文件进行文本替换</td></tr><tr><td style="text-align:left"><kbd>Ctrl</kbd> + <kbd>Z</kbd></td><td style="text-align:left"><kbd>Command</kbd> + <kbd>Z</kbd></td><td style="text-align:left">撤销</td></tr><tr><td style="text-align:left"><kbd>Ctrl</kbd> + <kbd>Y</kbd></td><td style="text-align:left"><kbd>Command</kbd> + <kbd>Delete</kbd></td><td style="text-align:left">删除光标所在行 或 删除选中的行</td></tr><tr><td style="text-align:left"><kbd>Ctrl</kbd> + <kbd>D</kbd></td><td style="text-align:left"><kbd>Command</kbd> + <kbd>D</kbd></td><td style="text-align:left">复制光标所在行 或 复制选择内容，并把复制内容插入光标位置下面</td></tr><tr><td style="text-align:left"><kbd>Ctrl</kbd> + <kbd>W</kbd></td><td style="text-align:left"><kbd>Option</kbd> + <kbd>方向键上</kbd></td><td style="text-align:left">递进式选择代码块。可选中光标所在的单词或段落，连续按会在原有选中的基础上再扩展选中范围</td></tr><tr><td style="text-align:left"><kbd>Ctrl</kbd> + <kbd>E</kbd></td><td style="text-align:left"><kbd>Command</kbd> + <kbd>E</kbd></td><td style="text-align:left">显示最近打开的文件记录列表</td></tr><tr><td style="text-align:left"><kbd>Ctrl</kbd> + <kbd>N</kbd></td><td style="text-align:left"><kbd>Command</kbd> + <kbd>O</kbd></td><td style="text-align:left">根据输入的 <strong>类名</strong> 查找类文件</td></tr><tr><td style="text-align:left"><kbd>Ctrl</kbd> + <kbd>J</kbd></td><td style="text-align:left"><kbd>Command</kbd> + <kbd>J</kbd></td><td style="text-align:left">插入自定义动态代码模板</td></tr><tr><td style="text-align:left"><kbd>Ctrl</kbd> + <kbd>P</kbd></td><td style="text-align:left"><kbd>Command</kbd> + <kbd>P</kbd></td><td style="text-align:left">方法参数提示显示</td></tr><tr><td style="text-align:left"><kbd>Ctrl</kbd> + <kbd>U</kbd></td><td style="text-align:left"><kbd>Command</kbd> + <kbd>U</kbd></td><td style="text-align:left">前往当前光标所在的方法的父类的方法 / 接口定义</td></tr><tr><td style="text-align:left"><kbd>Ctrl</kbd> + <kbd>B</kbd></td><td style="text-align:left"><kbd>Command</kbd> + <kbd>B</kbd></td><td style="text-align:left">进入光标所在的方法/变量的接口或是定义处，等效于 <code>Ctrl + 左键单击</code></td></tr><tr><td style="text-align:left"><kbd>Ctrl</kbd> + <kbd>/</kbd></td><td style="text-align:left"><kbd>Command</kbd> + <kbd>/</kbd></td><td style="text-align:left">注释光标所在行代码，会根据当前不同文件类型使用不同的注释符号</td></tr><tr><td style="text-align:left"><kbd>Ctrl</kbd> + <kbd>F1</kbd></td><td style="text-align:left"><kbd>Command</kbd> + <kbd>F1</kbd></td><td style="text-align:left">在光标所在的错误代码处显示错误信息</td></tr><tr><td style="text-align:left"><kbd>Ctrl</kbd> + <kbd>F11</kbd></td><td style="text-align:left"><kbd>Option</kbd> + <kbd>F3</kbd></td><td style="text-align:left">选中文件 / 文件夹，使用助记符设定 / 取消书签</td></tr><tr><td style="text-align:left"><kbd>Ctrl</kbd> + <kbd>F12</kbd></td><td style="text-align:left"><kbd>Command</kbd> + <kbd>F12</kbd></td><td style="text-align:left">弹出当前文件结构层，可以在弹出的层上直接输入，进行筛选</td></tr><tr><td style="text-align:left"><kbd>Ctrl</kbd> + <kbd>Space</kbd></td><td style="text-align:left"><kbd>Control</kbd> + <kbd>Space</kbd></td><td style="text-align:left">基础代码补全，默认在 Windows 系统上被输入法占用，需要进行修改，建议修改为 <code>Alt + \</code></td></tr><tr><td style="text-align:left"><kbd>Ctrl</kbd> + <kbd>Delete</kbd></td><td style="text-align:left"><kbd>Option</kbd> + <kbd>Fn</kbd>+ Delete</td><td style="text-align:left">删除光标后面的单词或是中文句</td></tr><tr><td style="text-align:left"><kbd>Ctrl</kbd> + <kbd>BackSpace</kbd></td><td style="text-align:left"><kbd>Option</kbd> + <kbd>Delete</kbd></td><td style="text-align:left">删除光标前面的单词或是中文句</td></tr><tr><td style="text-align:left"><kbd>Ctrl</kbd> + <kbd>1,2,3…9</kbd></td><td style="text-align:left"><kbd>Control</kbd> + <kbd>1,2,3…9</kbd></td><td style="text-align:left">定位到对应数值的书签位置</td></tr><tr><td style="text-align:left"><kbd>Ctrl</kbd> + <kbd>加号</kbd></td><td style="text-align:left"><kbd>Command</kbd> + <kbd>加号</kbd></td><td style="text-align:left">展开代码</td></tr><tr><td style="text-align:left"><kbd>Ctrl</kbd> + <kbd>减号</kbd></td><td style="text-align:left"><kbd>Command</kbd> + <kbd>减号</kbd></td><td style="text-align:left">折叠代码</td></tr><tr><td style="text-align:left"><kbd>Ctrl</kbd> + <kbd>左键单击</kbd></td><td style="text-align:left"><kbd>Control</kbd> + <kbd>左键单击</kbd></td><td style="text-align:left">在打开的文件标题上，弹出该文件路径</td></tr><tr><td style="text-align:left"><kbd>Ctrl</kbd> + <kbd>左方向键</kbd></td><td style="text-align:left"><kbd>Option</kbd> + <kbd>左方向键</kbd></td><td style="text-align:left">光标跳转到当前单词 / 中文句的左侧开头位置</td></tr><tr><td style="text-align:left"><kbd>Ctrl</kbd> + <kbd>右方向键</kbd></td><td style="text-align:left"><kbd>Option</kbd> + <kbd>右方向键</kbd></td><td style="text-align:left">光标跳转到当前单词 / 中文句的右侧开头位置</td></tr><tr><td style="text-align:left"><kbd>Ctrl</kbd> + <kbd>前方向键</kbd></td><td style="text-align:left">预设中没有该快捷键</td><td style="text-align:left">等效于鼠标滚轮向前效果</td></tr><tr><td style="text-align:left"><kbd>Ctrl</kbd> + <kbd>后方向键</kbd></td><td style="text-align:left">预设中没有该快捷键</td><td style="text-align:left">等效于鼠标滚轮向后效果</td></tr></tbody></table><h2 id="Alt">Alt</h2><table><thead><tr><th style="text-align:left">Win 快捷键</th><th style="text-align:left">Mac 快捷键</th><th style="text-align:left">介绍</th></tr></thead><tbody><tr><td style="text-align:left"><kbd>Alt</kbd> + <kbd>`</kbd></td><td style="text-align:left"><kbd>Control</kbd> + <kbd>V</kbd></td><td style="text-align:left">显示版本控制常用操作菜单弹出层</td></tr><tr><td style="text-align:left"><kbd>Alt</kbd> + <kbd>F1</kbd></td><td style="text-align:left"><kbd>Option</kbd> + <kbd>F1</kbd></td><td style="text-align:left">显示当前文件选择目标弹出层，弹出层中有很多目标可以进行选择</td></tr><tr><td style="text-align:left"><kbd>Alt</kbd> + <kbd>F7</kbd></td><td style="text-align:left"><kbd>Option</kbd> + <kbd>F7</kbd></td><td style="text-align:left">查询所选对象/变量被引用</td></tr><tr><td style="text-align:left"><kbd>Alt</kbd> + <kbd>Enter</kbd></td><td style="text-align:left"><kbd>Option</kbd> + <kbd>Enter</kbd></td><td style="text-align:left">IntelliJ IDEA 根据光标所在问题，提供快速修复选择，光标放在的位置不同提示的结果也不同</td></tr><tr><td style="text-align:left"><kbd>Alt</kbd> + <kbd>Insert</kbd></td><td style="text-align:left"><kbd>Command</kbd> + <kbd>N</kbd></td><td style="text-align:left">代码自动生成，如生成对象的 set / get 方法，构造函数，toString() 等</td></tr><tr><td style="text-align:left"><kbd>Alt</kbd> + <kbd>左方向键</kbd></td><td style="text-align:left"><kbd>Control</kbd> + <kbd>左方向键</kbd></td><td style="text-align:left">切换当前已打开的窗口中的子视图，比如Debug窗口中有Output、Debugger等子视图，用此快捷键就可以在子视图中切换</td></tr><tr><td style="text-align:left"><kbd>Alt</kbd> + <kbd>右方向键</kbd></td><td style="text-align:left"><kbd>Control</kbd> + <kbd>右方向键</kbd></td><td style="text-align:left">切换当前已打开的窗口中的子视图，比如Debug窗口中有Output、Debugger等子视图，用此快捷键就可以在子视图中切换</td></tr><tr><td style="text-align:left"><kbd>Alt</kbd> + <kbd>前方向键</kbd></td><td style="text-align:left"><kbd>Control</kbd> + <kbd>前方向键</kbd></td><td style="text-align:left">当前光标跳转到当前文件的前一个方法名位置</td></tr><tr><td style="text-align:left"><kbd>Alt</kbd> + <kbd>后方向键</kbd></td><td style="text-align:left"><kbd>Control</kbd> + <kbd>后方向键</kbd></td><td style="text-align:left">当前光标跳转到当前文件的后一个方法名位置</td></tr><tr><td style="text-align:left"><kbd>Alt</kbd> + <kbd>1,2,3…9</kbd></td><td style="text-align:left"><kbd>Command</kbd> + <kbd>1,2,3…9</kbd></td><td style="text-align:left">显示对应数值的选项卡，其中 1 是 Project 用得最多</td></tr></tbody></table><h2 id="Shift">Shift</h2><table><thead><tr><th style="text-align:left">Win 快捷键</th><th style="text-align:left">Mac 快捷键</th><th style="text-align:left">介绍</th></tr></thead><tbody><tr><td style="text-align:left"><kbd>Shift</kbd> + <kbd>F11</kbd></td><td style="text-align:left"><kbd>Command + F3</kbd></td><td style="text-align:left">弹出书签显示层</td></tr><tr><td style="text-align:left"><kbd>Shift</kbd> + <kbd>Tab</kbd></td><td style="text-align:left"><kbd>Shift + Tab</kbd></td><td style="text-align:left">取消缩进</td></tr><tr><td style="text-align:left"><kbd>Shift</kbd> + <kbd>Enter</kbd></td><td style="text-align:left"><kbd>Shift + Enter</kbd></td><td style="text-align:left">开始新一行。光标所在行下空出一行，光标定位到新行位置</td></tr><tr><td style="text-align:left"><kbd>Shift</kbd> + <kbd>左键单击</kbd></td><td style="text-align:left"><kbd>Shift + 左键单击</kbd></td><td style="text-align:left">在打开的文件名上按此快捷键，可以关闭当前打开文件</td></tr></tbody></table><h2 id="Ctrl-Alt">Ctrl + Alt</h2><table><thead><tr><th style="text-align:left">Win 快捷键</th><th style="text-align:left">Mac 快捷键</th><th style="text-align:left">介绍</th></tr></thead><tbody><tr><td style="text-align:left"><kbd>Ctrl</kbd> + <kbd>Alt</kbd> + <kbd>L</kbd></td><td style="text-align:left"><kbd>Command</kbd> + <kbd>Option</kbd> + <kbd>L</kbd></td><td style="text-align:left">格式化代码，可以对当前文件和整个包目录使用</td></tr><tr><td style="text-align:left"><kbd>Ctrl</kbd> + <kbd>Alt</kbd> + <kbd>O</kbd></td><td style="text-align:left"><kbd>Control</kbd> + <kbd>Option</kbd> + <kbd>O</kbd></td><td style="text-align:left">优化导入的类，可以对当前文件和整个包目录使用</td></tr><tr><td style="text-align:left"><kbd>Ctrl</kbd> + <kbd>Alt</kbd> + <kbd>T</kbd></td><td style="text-align:left"><kbd>Command</kbd> + <kbd>Option</kbd> + <kbd>T</kbd></td><td style="text-align:left">对选中的代码弹出环绕选项弹出层</td></tr><tr><td style="text-align:left"><kbd>Ctrl</kbd> + <kbd>Alt</kbd> + <kbd>S</kbd></td><td style="text-align:left"><kbd>Command</kbd> + <kbd>逗号</kbd></td><td style="text-align:left">打开 IntelliJ IDEA 系统设置</td></tr><tr><td style="text-align:left"><kbd>Ctrl</kbd> + <kbd>Alt</kbd> + <kbd>Enter</kbd></td><td style="text-align:left"><kbd>Command</kbd> + <kbd>Option</kbd> + <kbd>Enter</kbd></td><td style="text-align:left">光标所在行上空出一行，光标定位到新行</td></tr><tr><td style="text-align:left"><kbd>Ctrl</kbd> + <kbd>Alt</kbd> + <kbd>左方向键</kbd></td><td style="text-align:left"><kbd>Command</kbd> + <kbd>Option</kbd> + <kbd>左方向键</kbd></td><td style="text-align:left">退回到上一个操作的地方</td></tr><tr><td style="text-align:left"><kbd>Ctrl</kbd> + <kbd>Alt</kbd> + <kbd>右方向键</kbd></td><td style="text-align:left"><kbd>Command</kbd> + <kbd>Option</kbd> + <kbd>右方向键</kbd></td><td style="text-align:left">前进到上一个操作的地方</td></tr></tbody></table><h2 id="Ctrl-Shift">Ctrl + Shift</h2><table><thead><tr><th style="text-align:left">Win 快捷键</th><th style="text-align:left">Mac 快捷键</th><th style="text-align:left">介绍</th></tr></thead><tbody><tr><td style="text-align:left"><kbd>Ctrl</kbd> + <kbd>Shift</kbd> + <kbd>F</kbd></td><td style="text-align:left"><kbd>Command</kbd> + <kbd>Shift</kbd> + <kbd>F</kbd></td><td style="text-align:left">根据输入内容查找整个项目 或 指定目录内文件</td></tr><tr><td style="text-align:left"><kbd>Ctrl</kbd> + <kbd>Shift</kbd> + <kbd>R</kbd></td><td style="text-align:left"><kbd>Command</kbd> + <kbd>Shift</kbd> + <kbd>R</kbd></td><td style="text-align:left">根据输入内容替换对应内容，范围为整个项目 或 指定目录内文件</td></tr><tr><td style="text-align:left"><kbd>Ctrl</kbd> + <kbd>Shift</kbd> + <kbd>J</kbd></td><td style="text-align:left"><kbd>Control</kbd> + <kbd>Shift</kbd> + <kbd>J</kbd></td><td style="text-align:left">自动将下一行合并到当前行末尾</td></tr><tr><td style="text-align:left"><kbd>Ctrl</kbd> + <kbd>Shift</kbd> + <kbd>Z</kbd></td><td style="text-align:left"><kbd>Command</kbd> + <kbd>Shift</kbd> + <kbd>Z</kbd></td><td style="text-align:left">取消撤销</td></tr><tr><td style="text-align:left"><kbd>Ctrl</kbd> + <kbd>Shift</kbd> + <kbd>W</kbd></td><td style="text-align:left"><kbd>Option</kbd> + <kbd>方向键下</kbd></td><td style="text-align:left">递进式取消选择代码块。可选中光标所在的单词或段落，连续按会在原有选中的基础上再扩展取消选中范围</td></tr><tr><td style="text-align:left"><kbd>Ctrl</kbd> + <kbd>Shift</kbd> + <kbd>N</kbd></td><td style="text-align:left"><kbd>Command</kbd> + <kbd>Shift</kbd> + <kbd>O</kbd></td><td style="text-align:left">通过文件名定位 / 打开文件 / 目录，打开目录需要在输入的内容后面多加一个正斜杠</td></tr><tr><td style="text-align:left"><kbd>Ctrl</kbd> + <kbd>Shift</kbd> + <kbd>U</kbd></td><td style="text-align:left"><kbd>Command</kbd> + <kbd>Shift</kbd> + <kbd>U</kbd></td><td style="text-align:left">对选中的代码进行大 / 小写轮流转换</td></tr><tr><td style="text-align:left"><kbd>Ctrl</kbd> + <kbd>Shift</kbd> + <kbd>T</kbd></td><td style="text-align:left"><kbd>Command</kbd> + <kbd>Shift</kbd> + <kbd>T</kbd></td><td style="text-align:left">对当前类生成单元测试类，如果已经存在的单元测试类则可以进行选择</td></tr><tr><td style="text-align:left"><kbd>Ctrl</kbd> + <kbd>Shift</kbd> + <kbd>C</kbd></td><td style="text-align:left"><kbd>Command</kbd> + <kbd>Shift</kbd> + <kbd>C</kbd></td><td style="text-align:left">复制当前文件磁盘路径到剪贴板</td></tr><tr><td style="text-align:left"><kbd>Ctrl</kbd> + <kbd>Shift</kbd> + <kbd>B</kbd></td><td style="text-align:left"><kbd>Control</kbd> + <kbd>Shift</kbd> + <kbd>B</kbd></td><td style="text-align:left">跳转到类型声明处</td></tr><tr><td style="text-align:left"><kbd>Ctrl</kbd> + <kbd>Shift</kbd> + <kbd>/</kbd></td><td style="text-align:left"><kbd>Command</kbd> + <kbd>Option</kbd> + <kbd>/</kbd></td><td style="text-align:left">代码块注释</td></tr><tr><td style="text-align:left"><kbd>Ctrl</kbd> + <kbd>Shift</kbd> + <kbd>[</kbd></td><td style="text-align:left"><kbd>Command</kbd> + <kbd>Shift</kbd> + <kbd>[</kbd></td><td style="text-align:left">选中从光标所在位置到它的顶部中括号位置</td></tr><tr><td style="text-align:left"><kbd>Ctrl</kbd> + <kbd>Shift</kbd> + <kbd>]</kbd></td><td style="text-align:left"><kbd>Command</kbd> + <kbd>Shift</kbd> + <kbd>]</kbd></td><td style="text-align:left">选中从光标所在位置到它的底部中括号位置</td></tr><tr><td style="text-align:left"><kbd>Ctrl</kbd> + <kbd>Shift</kbd> + <kbd>加号</kbd></td><td style="text-align:left"><kbd>Command</kbd> + <kbd>Shift</kbd> + <kbd>加号</kbd></td><td style="text-align:left">展开所有代码</td></tr><tr><td style="text-align:left"><kbd>Ctrl</kbd> + <kbd>Shift</kbd> + <kbd>减号</kbd></td><td style="text-align:left"><kbd>Command</kbd> + <kbd>Shift</kbd> + <kbd>减号</kbd></td><td style="text-align:left">折叠所有代码</td></tr><tr><td style="text-align:left"><kbd>Ctrl</kbd> + <kbd>Shift</kbd> + <kbd>F7</kbd></td><td style="text-align:left"><kbd>Command</kbd> + <kbd>Shift</kbd> + <kbd>F7</kbd></td><td style="text-align:left">高亮显示所有该选中文本，按Esc高亮消失</td></tr><tr><td style="text-align:left"><kbd>Ctrl</kbd> + <kbd>Shift</kbd> + <kbd>F12</kbd></td><td style="text-align:left"><kbd>Command</kbd> + <kbd>Shift</kbd> + <kbd>F12</kbd></td><td style="text-align:left">编辑器最大化</td></tr><tr><td style="text-align:left"><kbd>Ctrl</kbd> + <kbd>Shift</kbd> + <kbd>Enter</kbd></td><td style="text-align:left"><kbd>Command</kbd> + <kbd>Shift</kbd> + <kbd>Enter</kbd></td><td style="text-align:left">自动结束代码，行末自动添加分号</td></tr><tr><td style="text-align:left"><kbd>Ctrl</kbd> + <kbd>Shift</kbd> + <kbd>Backspace</kbd></td><td style="text-align:left"><kbd>Ctrl</kbd> + <kbd>Shift</kbd> + <kbd>Backspace</kbd></td><td style="text-align:left">退回到上次修改的地方</td></tr><tr><td style="text-align:left"><kbd>Ctrl</kbd> + <kbd>Shift</kbd> + <kbd>1,2,3…9</kbd></td><td style="text-align:left"><kbd>Control</kbd> + <kbd>Shift</kbd> + <kbd>1,2,3…9</kbd></td><td style="text-align:left">快速添加指定数值的书签</td></tr><tr><td style="text-align:left"><kbd>Ctrl</kbd> + <kbd>Shift</kbd> + <kbd>左键单击</kbd></td><td style="text-align:left"><kbd>Command</kbd> + <kbd>Shift</kbd> + <kbd>左键单击</kbd></td><td style="text-align:left">把光标放在某个类变量上，按此快捷键可以直接定位到该类中</td></tr><tr><td style="text-align:left"><kbd>Ctrl</kbd> + <kbd>Shift</kbd> + <kbd>左方向键</kbd></td><td style="text-align:left"><kbd>Option</kbd> + <kbd>Shift</kbd> + <kbd>左方向键</kbd></td><td style="text-align:left">在代码文件上，光标跳转到当前单词 / 中文句的左侧开头位置，同时选中该单词 / 中文句</td></tr><tr><td style="text-align:left"><kbd>Ctrl</kbd> + <kbd>Shift</kbd> + <kbd>右方向键</kbd></td><td style="text-align:left"><kbd>Option</kbd> + <kbd>Shift</kbd> + <kbd>右方向键</kbd></td><td style="text-align:left">在代码文件上，光标跳转到当前单词 / 中文句的右侧开头位置，同时选中该单词 / 中文句</td></tr><tr><td style="text-align:left"><kbd>Ctrl</kbd> + <kbd>Shift</kbd> + <kbd>前方向键</kbd></td><td style="text-align:left"><kbd>Command</kbd> + <kbd>Shift</kbd> + <kbd>前方向键</kbd></td><td style="text-align:left">光标放在方法名上，将方法移动到上一个方法前面，调整方法排序</td></tr><tr><td style="text-align:left"><kbd>Ctrl</kbd> + <kbd>Shift</kbd> + <kbd>后方向键</kbd></td><td style="text-align:left"><kbd>Command</kbd> + <kbd>Shift</kbd> + <kbd>后方向键</kbd></td><td style="text-align:left">光标放在方法名上，将方法移动到下一个方法前面，调整方法排序</td></tr></tbody></table><h2 id="Alt-Shift">Alt + Shift</h2><table><thead><tr><th style="text-align:left">Win 快捷键</th><th style="text-align:left">Mac 快捷键</th><th style="text-align:left">介绍</th></tr></thead><tbody><tr><td style="text-align:left"><kbd>Alt</kbd> + <kbd>Shift</kbd> + <kbd>N</kbd></td><td style="text-align:left"><kbd>Option</kbd> + <kbd>Shift</kbd> + <kbd>B</kbd></td><td style="text-align:left">选择 / 添加 task</td></tr><tr><td style="text-align:left"><kbd>Alt</kbd> + <kbd>Shift</kbd> + <kbd>左键双击</kbd></td><td style="text-align:left"><kbd>Option</kbd> + <kbd>Shift</kbd> + <kbd>左键双击</kbd></td><td style="text-align:left">选择被双击的单词 / 中文句，按住不放，可以同时选择其他单词 / 中文句</td></tr><tr><td style="text-align:left"><kbd>Alt</kbd> + <kbd>Shift</kbd> + <kbd>前方向键</kbd></td><td style="text-align:left"><kbd>Option</kbd> + <kbd>Shift</kbd> + <kbd>前方向键</kbd></td><td style="text-align:left">移动光标所在行向上移动</td></tr><tr><td style="text-align:left"><kbd>Alt</kbd> + <kbd>Shift</kbd> + <kbd>后方向键</kbd></td><td style="text-align:left"><kbd>Option</kbd> + <kbd>Shift</kbd> + <kbd>后方向键</kbd></td><td style="text-align:left">移动光标所在行向下移动</td></tr></tbody></table><h2 id="Ctrl-Shift-Alt">Ctrl + Shift + Alt</h2><table><thead><tr><th style="text-align:left">Win 快捷键</th><th style="text-align:left">Mac 快捷键</th><th style="text-align:left">介绍</th></tr></thead><tbody><tr><td style="text-align:left"><kbd>Ctrl</kbd> + <kbd>Shift</kbd> + <kbd>Alt</kbd> + <kbd>V</kbd></td><td style="text-align:left"><kbd>Command</kbd> + <kbd>Shift</kbd> + <kbd>Option</kbd> + <kbd>V</kbd></td><td style="text-align:left">无格式黏贴</td></tr><tr><td style="text-align:left"><kbd>Ctrl</kbd> + <kbd>Shift</kbd> + <kbd>Alt</kbd> + <kbd>S</kbd></td><td style="text-align:left"><kbd>Command</kbd> + <kbd>;</kbd></td><td style="text-align:left">打开当前项目设置</td></tr></tbody></table><h2 id="其他">其他</h2><table><thead><tr><th style="text-align:left">Win 快捷键</th><th style="text-align:left">Mac 快捷键</th><th style="text-align:left">介绍</th></tr></thead><tbody><tr><td style="text-align:left"><kbd>F2</kbd></td><td style="text-align:left"><kbd>F2</kbd></td><td style="text-align:left">跳转到下一个高亮错误 或 警告位置</td></tr><tr><td style="text-align:left"><kbd>F4</kbd></td><td style="text-align:left"><kbd>F4</kbd></td><td style="text-align:left">编辑源</td></tr><tr><td style="text-align:left"><kbd>F11</kbd></td><td style="text-align:left"><kbd>F3</kbd></td><td style="text-align:left">添加书签</td></tr><tr><td style="text-align:left"><kbd>F12</kbd></td><td style="text-align:left"><kbd>F12</kbd></td><td style="text-align:left">回到前一个工具窗口</td></tr><tr><td style="text-align:left"><kbd>Tab</kbd></td><td style="text-align:left"><kbd>Tab</kbd></td><td style="text-align:left">缩进</td></tr><tr><td style="text-align:left"><kbd>ESC</kbd></td><td style="text-align:left"><kbd>ESC</kbd></td><td style="text-align:left">从工具窗口进入代码文件窗口</td></tr></tbody></table><h2 id="中文字体异常设置">中文字体异常设置</h2><p><img src="http://img.whl123456.top/image/%E4%B8%AD%E6%96%87%E5%AD%97%E4%BD%93%E5%BC%82%E5%B8%B8%E8%AE%BE%E7%BD%AE.png" alt="中文字体异常设置"></p>]]></content>
      
      
      <categories>
          
          <category> 快捷键 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 快捷键 </tag>
            
            <tag> IDEA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java常用类</title>
      <link href="2020/03/21/Java%E5%A4%84%E7%90%86%E5%B8%B8%E8%A7%81%E7%9A%84%E6%95%B0%E6%8D%AE%E6%A0%BC%E5%BC%8F/"/>
      <url>2020/03/21/Java%E5%A4%84%E7%90%86%E5%B8%B8%E8%A7%81%E7%9A%84%E6%95%B0%E6%8D%AE%E6%A0%BC%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<p>Java常用类</p><hr><h2 id="文本">文本</h2><h3 id="String，StringBuffer和StringBuild">String，StringBuffer和StringBuild</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span></span><span class="token class-name">Test</span><span class="token punctuation">;</span><span class="token comment">// StringBuffer和StringBuilder的使用</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StringBufferBuilder</span> <span class="token punctuation">&#123;</span>    <span class="token comment">/*    String、StringBuffer、StringBuilder三者的异同？    String:不可变的字符序列；底层使用char[]存储    StringBuffer:可变的字符序列；线程安全的，效率低；底层使用char[]存储    StringBuilder:可变的字符序列；jdk5.0新增的，线程不安全的，效率高；底层使用char[]存储    源码分析：    String str = new String();//char[] value = new char[0];    String str1 = new String("abc");//char[] value = new char[]&#123;'a','b','c'&#125;;    StringBuffer sb1 = new StringBuffer();//char[] value = new char[16];底层创建了一个长度是16的数组。    System.out.println(sb1.length());//0    sb1.append('a');//value[0] = 'a';    sb1.append('b');//value[1] = 'b';    StringBuffer sb2 = new StringBuffer("abc");//char[] value = new char["abc".length() + 16];    //问题1. System.out.println(sb2.length());//3    //问题2. 扩容问题:如果要添加的数据底层数组盛不下了，那就需要扩容底层的数组。             默认情况下，扩容为原来容量的2倍 + 2，同时将原有数组中的元素复制到新的数组中。            指导意义：开发中建议大家使用：StringBuffer(int capacity) 或 StringBuilder(int capacity)     */</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">StringBuffer</span> sb1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuffer</span><span class="token punctuation">(</span><span class="token string">"abc"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        sb1<span class="token punctuation">.</span><span class="token function">setCharAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token string">'m'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>sb1<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">StringBuffer</span> sb2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>sb2<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//0</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/*    StringBuffer的常用方法：    StringBuffer append(xxx)：提供了很多的append()方法，用于进行字符串拼接    StringBuffer delete(int start,int end)：删除指定位置的内容    StringBuffer replace(int start, int end, String str)：把[start,end)位置替换为str    StringBuffer insert(int offset, xxx)：在指定位置插入xxx    StringBuffer reverse() ：把当前字符序列逆转    public int indexOf(String str)    public String substring(int start,int end):返回一个从start开始到end索引结束的左闭右开区间的子字符串    public int length()    public char charAt(int n )    public void setCharAt(int n ,char ch)        总结：        增：append(xxx)        删：delete(int start,int end)        改：setCharAt(int n ,char ch) / replace(int start, int end, String str)        查：charAt(int n )        插：insert(int offset, xxx)        长度：length();        *遍历：for() + charAt() / toString()     */</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">StringBuffer</span> s1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuffer</span><span class="token punctuation">(</span><span class="token string">"abc"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        s1<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        s1<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">'1'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//        s1.delete(2,4);</span><span class="token comment">//        s1.replace(2,4,"hello");</span><span class="token comment">//        s1.insert(2,false);</span><span class="token comment">//        s1.reverse();</span>        <span class="token class-name">String</span> s2 <span class="token operator">=</span> s1<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s1<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/*    对比String、StringBuffer、StringBuilder三者的效率：    从高到低排列：StringBuilder > StringBuffer > String     */</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">//初始设置</span>        <span class="token keyword">long</span> startTime <span class="token operator">=</span> <span class="token number">0L</span><span class="token punctuation">;</span>        <span class="token keyword">long</span> endTime <span class="token operator">=</span> <span class="token number">0L</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> text <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>        <span class="token class-name">StringBuffer</span> buffer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuffer</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">StringBuilder</span> builder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//开始对比</span>        startTime <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">20000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            buffer<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        endTime <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"StringBuffer的执行时间："</span> <span class="token operator">+</span> <span class="token punctuation">(</span>endTime <span class="token operator">-</span> startTime<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        startTime <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">20000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            builder<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        endTime <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"StringBuilder的执行时间："</span> <span class="token operator">+</span> <span class="token punctuation">(</span>endTime <span class="token operator">-</span> startTime<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        startTime <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">20000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            text <span class="token operator">=</span> text <span class="token operator">+</span> i<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        endTime <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"String的执行时间："</span> <span class="token operator">+</span> <span class="token punctuation">(</span>endTime <span class="token operator">-</span> startTime<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="数字和数学运算">数字和数学运算</h2><h2 id="在-Java-8-中处理日期和时间">在 Java 8 中处理日期和时间</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span></span><span class="token class-name">Test</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>text<span class="token punctuation">.</span></span><span class="token class-name">ParseException</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>text<span class="token punctuation">.</span></span><span class="token class-name">SimpleDateFormat</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Calendar</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Date</span><span class="token punctuation">;</span><span class="token comment">// JDK8之前的日期时间相关类</span><span class="token comment">/* * jdk 8之前的日期时间的API测试 * 1. System类中currentTimeMillis(); * 2. java.util.Date和子类java.sql.Date * 3. SimpleDateFormat * 4. Calendar */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DateTime</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//1.System类中的currentTimeMillis()</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">long</span> time <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//返回当前时间与1970年1月1日0时0分0秒之间以毫秒为单位的时间差。</span>        <span class="token comment">//称为时间戳</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>time<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/*java.util.Date类       |---java.sql.Date类1.两个构造器的使用    >构造器一：Date()：创建一个对应当前时间的Date对象    >构造器二：创建指定毫秒数的Date对象2.两个方法的使用    >toString():显示当前的年、月、日、时、分、秒    >getTime():获取当前Date对象对应的毫秒数。（时间戳）3. java.sql.Date对应着数据库中的日期类型的变量    >如何实例化    >如何将java.util.Date对象转换为java.sql.Date对象 */</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//构造器一：Date()：创建一个对应当前时间的Date对象</span>        <span class="token class-name">Date</span> date1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>date1<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//Wed Feb 19 20:36:24 CST 2020</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>date1<span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//1582115784712</span>        <span class="token comment">//构造器二：创建指定毫秒数的Date对象</span>        <span class="token class-name">Date</span> date2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token number">1582115784712L</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>date2<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//创建java.sql.Date对象</span>        java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span><span class="token class-name">Date</span> date3 <span class="token operator">=</span> <span class="token keyword">new</span> java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span><span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token number">1582115784712L</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>date3<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//2020-02-19</span>        <span class="token comment">//如何将java.util.Date对象转换为java.sql.Date对象</span>        <span class="token comment">//情况一：</span><span class="token comment">//        Date date4 = new java.sql.Date(1582115784712L);</span><span class="token comment">//        java.sql.Date date5 = (java.sql.Date) date4;</span>        <span class="token comment">//情况二：</span>        <span class="token class-name">Date</span> date6 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span><span class="token class-name">Date</span> date7 <span class="token operator">=</span> <span class="token keyword">new</span> java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span><span class="token class-name">Date</span><span class="token punctuation">(</span>date6<span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/*    SimpleDateFormat的使用：SimpleDateFormat对日期Date类的格式化和解析    1.两个操作：    1.1 格式化：日期 --->字符串    1.2 解析：格式化的逆过程，字符串 ---> 日期    2.SimpleDateFormat的实例化     */</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testSimpleDateFormat</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ParseException</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//实例化SimpleDateFormat:使用默认的构造器</span>        <span class="token class-name">SimpleDateFormat</span> sdf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleDateFormat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//格式化：日期 --->字符串</span>        <span class="token class-name">Date</span> date <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>date<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//Wed Feb 19 20:53:45 CST 2020</span>        <span class="token class-name">String</span> format <span class="token operator">=</span> sdf<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>date<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>format<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//20-2-19 下午8:53</span>        <span class="token comment">//解析：格式化的逆过程，字符串 ---> 日期</span>        <span class="token class-name">String</span> str <span class="token operator">=</span> <span class="token string">"20-2-19 下午8:53"</span><span class="token punctuation">;</span>        <span class="token class-name">Date</span> date1 <span class="token operator">=</span> sdf<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>date1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//Wed Dec 18 11:43:00 CST 2019</span>        <span class="token comment">//*************按照指定的方式格式化和解析：调用带参的构造器*****************</span>        <span class="token class-name">SimpleDateFormat</span> sdf1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleDateFormat</span><span class="token punctuation">(</span><span class="token string">"yyyy-MM-dd hh:mm:ss"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//格式化</span>        <span class="token class-name">String</span> format1 <span class="token operator">=</span> sdf1<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>date<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>format1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//2020-02-19 08:53:45</span>        <span class="token comment">//解析:要求字符串必须是符合SimpleDateFormat识别的格式(通过构造器参数体现),否则，抛异常</span>        <span class="token class-name">Date</span> date2 <span class="token operator">=</span> sdf1<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token string">"2020-02-19 08:53:45"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>date2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/*    练习一：字符串"2020-09-08"转换为java.sql.Date     */</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testExer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ParseException</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">String</span> birth <span class="token operator">=</span> <span class="token string">"2020-09-08"</span><span class="token punctuation">;</span>        <span class="token class-name">SimpleDateFormat</span> sdf1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleDateFormat</span><span class="token punctuation">(</span><span class="token string">"yyyy-MM-dd"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Date</span> date <span class="token operator">=</span> sdf1<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>birth<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//        System.out.println(date);</span>        java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span><span class="token class-name">Date</span> birthDate <span class="token operator">=</span> <span class="token keyword">new</span> java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span><span class="token class-name">Date</span><span class="token punctuation">(</span>date<span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>birthDate<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/*    练习二："三天打渔两天晒网"   1990-01-01  xxxx-xx-xx 打渔？晒网？    举例：2020-09-08 ？ 总天数    总天数 % 5 == 1,2,3 : 打渔    总天数 % 5 == 4,0 : 晒网    总天数的计算？    方式一：( date2.getTime() - date1.getTime()) / (1000 * 60 * 60 * 24) + 1    方式二：1990-01-01  --> 2019-12-31  +  2020-01-01 -->2020-09-08*/</span>    <span class="token comment">/*    Calendar日历类(抽象类）的使用     */</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testCalendar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//1.实例化</span>        <span class="token comment">//方式一：创建其子类（GregorianCalendar）的对象</span>        <span class="token comment">//方式二：调用其静态方法getInstance()</span>        <span class="token class-name">Calendar</span> calendar <span class="token operator">=</span> <span class="token class-name">Calendar</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//        System.out.println(calendar.getClass());</span>        <span class="token comment">//2.常用方法</span>        <span class="token comment">//get()</span>        <span class="token keyword">int</span> days <span class="token operator">=</span> calendar<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">Calendar</span><span class="token punctuation">.</span>DAY_OF_MONTH<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>days<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>calendar<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">Calendar</span><span class="token punctuation">.</span>DAY_OF_YEAR<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//set()</span>        <span class="token comment">//calendar可变性</span>        calendar<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token class-name">Calendar</span><span class="token punctuation">.</span>DAY_OF_MONTH<span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        days <span class="token operator">=</span> calendar<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">Calendar</span><span class="token punctuation">.</span>DAY_OF_MONTH<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>days<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//add()</span>        calendar<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">Calendar</span><span class="token punctuation">.</span>DAY_OF_MONTH<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        days <span class="token operator">=</span> calendar<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">Calendar</span><span class="token punctuation">.</span>DAY_OF_MONTH<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>days<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//getTime():日历类---> Date</span>        <span class="token class-name">Date</span> date <span class="token operator">=</span> calendar<span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>date<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//setTime():Date ---> 日历类</span>        <span class="token class-name">Date</span> date1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        calendar<span class="token punctuation">.</span><span class="token function">setTime</span><span class="token punctuation">(</span>date1<span class="token punctuation">)</span><span class="token punctuation">;</span>        days <span class="token operator">=</span> calendar<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">Calendar</span><span class="token punctuation">.</span>DAY_OF_MONTH<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>days<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span></span><span class="token class-name">Test</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>time<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>time<span class="token punctuation">.</span>format<span class="token punctuation">.</span></span><span class="token class-name">DateTimeFormatter</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>time<span class="token punctuation">.</span>format<span class="token punctuation">.</span></span><span class="token class-name">FormatStyle</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>time<span class="token punctuation">.</span>temporal<span class="token punctuation">.</span></span><span class="token class-name">TemporalAccessor</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Date</span><span class="token punctuation">;</span><span class="token comment">// JDK8之后的time包</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">NewDateTime</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testDate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">//偏移量</span>        <span class="token class-name">Date</span> date1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token number">2020</span> <span class="token operator">-</span> <span class="token number">1900</span><span class="token punctuation">,</span><span class="token number">9</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>date1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//Tue Sep 08 00:00:00 GMT+08:00 2020</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/*    LocalDate、LocalTime、LocalDateTime 的使用    说明：        1.LocalDateTime相较于LocalDate、LocalTime，使用频率要高        2.类似于Calendar     */</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">//now():获取当前的日期、时间、日期+时间</span>        <span class="token class-name">LocalDate</span> localDate <span class="token operator">=</span> <span class="token class-name">LocalDate</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">LocalTime</span> localTime <span class="token operator">=</span> <span class="token class-name">LocalTime</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">LocalDateTime</span> localDateTime <span class="token operator">=</span> <span class="token class-name">LocalDateTime</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>localDate<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>localTime<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>localDateTime<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//of():设置指定的年、月、日、时、分、秒。没有偏移量</span>        <span class="token class-name">LocalDateTime</span> localDateTime1 <span class="token operator">=</span> <span class="token class-name">LocalDateTime</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token number">2020</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">,</span> <span class="token number">43</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>localDateTime1<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//getXxx()：获取相关的属性</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>localDateTime<span class="token punctuation">.</span><span class="token function">getDayOfMonth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>localDateTime<span class="token punctuation">.</span><span class="token function">getDayOfWeek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>localDateTime<span class="token punctuation">.</span><span class="token function">getMonth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>localDateTime<span class="token punctuation">.</span><span class="token function">getMonthValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>localDateTime<span class="token punctuation">.</span><span class="token function">getMinute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//体现不可变性</span>        <span class="token comment">//withXxx():设置相关的属性</span>        <span class="token class-name">LocalDate</span> localDate1 <span class="token operator">=</span> localDate<span class="token punctuation">.</span><span class="token function">withDayOfMonth</span><span class="token punctuation">(</span><span class="token number">22</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>localDate<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>localDate1<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">LocalDateTime</span> localDateTime2 <span class="token operator">=</span> localDateTime<span class="token punctuation">.</span><span class="token function">withHour</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>localDateTime<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>localDateTime2<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//不可变性</span>        <span class="token class-name">LocalDateTime</span> localDateTime3 <span class="token operator">=</span> localDateTime<span class="token punctuation">.</span><span class="token function">plusMonths</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>localDateTime<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>localDateTime3<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">LocalDateTime</span> localDateTime4 <span class="token operator">=</span> localDateTime<span class="token punctuation">.</span><span class="token function">minusDays</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>localDateTime<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>localDateTime4<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/*    Instant的使用    类似于 java.util.Date类     */</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">//now():获取本初子午线对应的标准时间</span>        <span class="token class-name">Instant</span> instant <span class="token operator">=</span> <span class="token class-name">Instant</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>instant<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//2019-02-18T07:29:41.719Z</span>        <span class="token comment">//添加时间的偏移量</span>        <span class="token class-name">OffsetDateTime</span> offsetDateTime <span class="token operator">=</span> instant<span class="token punctuation">.</span><span class="token function">atOffset</span><span class="token punctuation">(</span><span class="token class-name">ZoneOffset</span><span class="token punctuation">.</span><span class="token function">ofHours</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>offsetDateTime<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//2019-02-18T15:32:50.611+08:00</span>        <span class="token comment">//toEpochMilli():获取自1970年1月1日0时0分0秒（UTC）开始的毫秒数  ---> Date类的getTime()</span>        <span class="token keyword">long</span> milli <span class="token operator">=</span> instant<span class="token punctuation">.</span><span class="token function">toEpochMilli</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>milli<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//ofEpochMilli():通过给定的毫秒数，获取Instant实例  -->Date(long millis)</span>        <span class="token class-name">Instant</span> instant1 <span class="token operator">=</span> <span class="token class-name">Instant</span><span class="token punctuation">.</span><span class="token function">ofEpochMilli</span><span class="token punctuation">(</span><span class="token number">1550475314878L</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>instant1<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/*    DateTimeFormatter:格式化或解析日期、时间    类似于SimpleDateFormat     */</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//        方式一：预定义的标准格式。如：ISO_LOCAL_DATE_TIME;ISO_LOCAL_DATE;ISO_LOCAL_TIME</span>        <span class="token class-name">DateTimeFormatter</span> formatter <span class="token operator">=</span> <span class="token class-name">DateTimeFormatter</span><span class="token punctuation">.</span>ISO_LOCAL_DATE_TIME<span class="token punctuation">;</span>        <span class="token comment">//格式化:日期-->字符串</span>        <span class="token class-name">LocalDateTime</span> localDateTime <span class="token operator">=</span> <span class="token class-name">LocalDateTime</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> str1 <span class="token operator">=</span> formatter<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>localDateTime<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>localDateTime<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//2019-02-18T15:42:18.797</span>        <span class="token comment">//解析：字符串 -->日期</span>        <span class="token class-name">TemporalAccessor</span> parse <span class="token operator">=</span> formatter<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token string">"2019-02-18T15:42:18.797"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>parse<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//        方式二：</span><span class="token comment">//        本地化相关的格式。如：ofLocalizedDateTime()</span><span class="token comment">//        FormatStyle.LONG / FormatStyle.MEDIUM / FormatStyle.SHORT :适用于LocalDateTime</span>        <span class="token class-name">DateTimeFormatter</span> formatter1 <span class="token operator">=</span> <span class="token class-name">DateTimeFormatter</span><span class="token punctuation">.</span><span class="token function">ofLocalizedDateTime</span><span class="token punctuation">(</span><span class="token class-name">FormatStyle</span><span class="token punctuation">.</span>LONG<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//格式化</span>        <span class="token class-name">String</span> str2 <span class="token operator">=</span> formatter1<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>localDateTime<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//2019年2月18日 下午03时47分16秒</span><span class="token comment">//      本地化相关的格式。如：ofLocalizedDate()</span><span class="token comment">//      FormatStyle.FULL / FormatStyle.LONG / FormatStyle.MEDIUM / FormatStyle.SHORT : 适用于LocalDate</span>        <span class="token class-name">DateTimeFormatter</span> formatter2 <span class="token operator">=</span> <span class="token class-name">DateTimeFormatter</span><span class="token punctuation">.</span><span class="token function">ofLocalizedDate</span><span class="token punctuation">(</span><span class="token class-name">FormatStyle</span><span class="token punctuation">.</span>MEDIUM<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//格式化</span>        <span class="token class-name">String</span> str3 <span class="token operator">=</span> formatter2<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token class-name">LocalDate</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str3<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//2019-2-18</span><span class="token comment">//       重点： 方式三：自定义的格式。如：ofPattern(“yyyy-MM-dd hh:mm:ss”)</span>        <span class="token class-name">DateTimeFormatter</span> formatter3 <span class="token operator">=</span> <span class="token class-name">DateTimeFormatter</span><span class="token punctuation">.</span><span class="token function">ofPattern</span><span class="token punctuation">(</span><span class="token string">"yyyy-MM-dd hh:mm:ss"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//格式化</span>        <span class="token class-name">String</span> str4 <span class="token operator">=</span> formatter3<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token class-name">LocalDateTime</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str4<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//2019-02-18 03:52:09</span>        <span class="token comment">//解析</span>        <span class="token class-name">TemporalAccessor</span> accessor <span class="token operator">=</span> formatter3<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token string">"2019-02-18 03:52:09"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>accessor<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Math">Math</h3><h2 id="异常处理">异常处理</h2><h2 id="代码校验">代码校验</h2><h2 id="Junit单元测试">Junit单元测试</h2><p>测试分类：</p><ol><li>黑盒测试：指定输入看输出</li><li>白盒测试：关注程序执行流程</li></ol><p>Junit属于白盒测试</p><ol><li><p>定义一个测试类(测试用例)</p><blockquote><p>测试类名：被测试的类名Test</p><p>包名：xxx.xxx.xx.test</p></blockquote></li><li><p>定义测试方法：可以独立运行</p><blockquote><p>方法名：test测试的方法名</p><p>返回值：void</p><p>参数列表：空参</p></blockquote></li><li><p>给方法加上<code>@Test</code>，导入Junit依赖环境</p></li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testAdd</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//1. 创建对象</span>    <span class="token class-name">Calculator</span> calculator <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Calculator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//2. 调用方法</span>    <span class="token keyword">int</span> result <span class="token operator">=</span> calculator<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//3.断言</span>    <span class="token class-name">Assert</span><span class="token punctuation">.</span><span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//期望的结果,运算的结果</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>@Before</code></p><p>初始化方法：用于资源申请，所有测试方法在执行之前都会执行该方法</p><p><code>@After</code></p><p>释放资源方法：在所有测试方法执行完后，都会自动执行该方法</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java面向对象编程</title>
      <link href="2020/03/21/Java-02-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B/"/>
      <url>2020/03/21/Java-02-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<p>所有 Java 程序都使用对象，对象的类型由类或接口定义。每个 Java 程序都定义成类，而复杂的程序会定义很多类和接口。</p><hr><h2 id="对象导论">对象导论</h2><h3 id="抽象过程">抽象过程</h3><p>面向对象语言的五个基本特性，这些特性表现了一个纯粹的面向对象的程序设计方式：</p><ol><li>万物皆对象。将对象视为奇特的变量，它可以储存数据，除此之外，你还可以要求它在自身上执行操作。理论上讲，你可以抽取待求解决的任何概念化构件（狗、建筑物、服务等），将其表示为程序中的对象。</li><li>程序是对象的集合，它们通过发送消息来告知彼此要做的。要想请求一个对象，就必须对该对象发送一条消息。更具体地说，可以把消息想象为对某个特定对象的方法的调用请求。</li><li>每个对象都有自己的由其他对象所构成的储存。换句话说，可以通过创建包含现有对象的包的方式来创建新类型的对象。因此，可以在程序中构建复杂的体系，同时将其复杂性隐藏在对象的简单性背后。</li><li>每个对象都拥有其类型。按照通用的说法，“每个对象都是某个类（class）的一个实例（instance）”，这里“类”就是“类型”的同义词。每个类最重要的区别于其他类型的特征就是“可以发送什么样的消息给它”。</li><li>某一个特定类型的所有对象都可以接受同样的消息。可替代性是OOP中最强有力的概念之一</li></ol><p>对象具有状态、行为和标识。这意味着每一个对象都可以拥有内部类数据（它们给出了该对象的状态）和方法（它们产生行为），并且每一个对象都可以唯一地与其他对象区分开来，具体说来，就是每一个对象在内存中都有一个唯一的地址。</p><h2 id="面向对象程序设计概述">面向对象程序设计概述</h2><p>面向对象程序设计（object-oriented programming，OOP）是当今主流的程序设计范型，它取代了20世纪70年代的“结构化”或过程式编程技术。由于Java是面向对象的所以你必须熟悉OOP才能够很好地使用Java。</p><p>面向对象的程序是由对象组成的，每个对象包含用户公开的特定功能部分和隐藏的实现部分。程序中很多兑现来自标准库，还有一些是自定义的。究竟是自己构造对象，还是从外界购买对象完全取决于对开发项目的预算和时间。但是，从根本上说，只有对象能够满足要求，就不必关心其功能到底是如何实现的。</p><p>传统的结构化程序设计通过设计一系列的过程（即算法）来求解问题。一旦确定了这些过程，就要开始考虑储存数据的适当方式。这就是Pascal语言的设计者Niklaus Wirth将其著作命名为《算法+数据结构=程序》的原因。需要注意的是，在Wirth的这个书名中，算法是第一位的，数据结构是第二位的，这就明确地表述了程序员的工作方式。首先要确定如何操作数据，然后再决定如何组织数据的结构，一边于操作数据。而OOP却调换了这个次序，将数据放在第一位，然后再考虑操作数据的算法。</p><p>对于一些规模较小的问题，将其分解为过程开发比较理想。面向对象更加适合解决规模较大的问题。</p><h3 id="类">类</h3><p>类（class）是构造对象的模板或蓝图。我们可以将类想象成制作小甜饼的模具，将对象想象为小甜饼。由类构造（construct）对象的过程称为创建类的实例（instance）</p><p>用Java编写的所有代码都位于某个类里面。标准Java库中提供了几千个类，可用于各种目的，如用户界面设计、日期、日历和网络编程。尽管如此，在Java中还是需要创建一些自己的类，以便描述你的应用程序所对应的问题领域中的对象。</p><p>封装（encapsulation，有时称为数据隐藏）是处理对象的一个重要概念。从形式上看，封装就是将数据和行为组合在一个包中，并对对象的使用者隐藏具体的实现方式。对象中的数据为实例字段（instance field），操作数据的过程称为方法（method）。作为一个类的实例，特定对象都有一组特定的实例字段值。这些值的集合就是这个对象的当前状态（state）。无论何时，只要在对象上调用一个方法，它的状态就有可能发生改变。</p><p>实现封装的关键在于，绝对不能让类中的方法直接访问其他类的实例字段，程序只能通过对象的方法与对象的数据进行交互。封装给对象赋予了“黑盒”特征，这是提高重用性合可靠性的关键。这意味着一个类可以完全改变存储数据的方式，只要仍旧使用同样的方法操作数据，其他对象就不会知道也不用关系这个类所发生的变化。</p><p>OOP的另一个原则会让用户自定义Java类变得更为容易，这就是：可以通过扩展其他类来构建新类。事实上，在Java中，所有的类都源自一个“神通广大的超类”，它就是<code>Object</code>。所有其他类都扩展自这个<code>Object</code>类</p><p>在扩展一个已有的类时，这个扩展后的新类具有被扩展的类的全部属性合方法。你只需要在新类中提供适用于这个新类的新方法和数据字段就可以了。通过扩展一个类来建立另外一个类的过程称为继承（inheritance）。</p><h3 id="对象">对象</h3><p>要想使用OOP，一定要清楚对象的三个主要特性：</p><ul><li>对象的行为（behavior）：可以对对象完成哪些操作，或者可以对对象应用哪些方法</li><li>对象的状态（state）：当调用哪些方法时，对象会如何响应</li><li>对象的标识（identity）：如何区分具有相同行为与状态的不同对象</li></ul><h3 id="识别类">识别类</h3><h3 id="类之间的关系">类之间的关系</h3><h2 id="使用预定义类">使用预定义类</h2><h3 id="对象与对象变量">对象与对象变量</h3><p>要想使用对象，首先必须构造对象，并指定其初始状态。然后对对象应用方法。</p><p>在Java程序设计语言中，要使用构造器（constructor，或称为构造函数）构造新实例。构造器是一种特殊的方法，用来构造并初始化对象。下面看一个例子。在标准Java库中包含一个<code>Date</code>类。它的对象可以描述一个时间点。</p><p>构造器的名字应该与类名相同。因此<code>Date</code>类的构造器名为<code>Date</code>。想要构造一个<code>Date</code>对象，需要在构造器前面加上<code>new</code>操作符，如下所示：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这个表达式构造了一个新对象。这个对象被初始化为当前的日期和时间。</p><p>如果需要的话，也可以将这个对象传递给一个方法：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>或者，也可以对刚刚创建的对象应用一个方法。<code>Date</code>类中有一个<code>toString</code>方法。这个方法将返回日期的字符串描述。下面的语句可以说明如何对新构造的<code>Date</code>对象应用<code>toString</code>方法。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">String</span> s <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在着两个例子中，构造的对象仅使用了一次。通常你会希望构造的对象可以多次使用，因此，需要将对象存放在一个变量中：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Date</span> birthday <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在对象与对象之间存在着一个重要的区别。例如，一下语句：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Date</span> deadline；<span class="token comment">// deadline doesn't refer to any object</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>定义了一个对象变量<code>deadline</code>，它可以引用<code>Date</code>类型的对象。但是，一定要认识到：变量<code>deadline</code>不是一个对象，而且实际上它也没有引用任何对象。此时还不能在这个变量上使用任何<code>Date</code>方法。必须首先初始化变量<code>deadline</code>，这里有两个选择。</p><p>可以初始化这个变量，让它引用一个新的构造的对象：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">deadline <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>也可以设置这个变量，让它引用一个已有的对象：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">deadline <span class="token operator">=</span> birthday；<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>现在，这两个变量都引用同一个对象，要认识到重要的一点：对象变量并没有实际包含一个对象，它只是引用一个对象。</p><p>在Java中，任何对象变量的值都是对存储在另外一个地方的某个对象的引用，下面的语句：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Date</span> deadline <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>有两个部分。表达式<code>new Date()</code>构造了一个<code>Date</code>类型的对象，它的</p><p>P98</p><h2 id="类简介">类简介</h2><p>类是 Java 程序最基本的元素结构。编写 Java 代码不可能不定义类。所有 Java 语句都在类中，而且所有方法都在类中实现。</p><h3 id="面向对象的基本概念">面向对象的基本概念</h3><p>类：类由一些保存值的数据字段和处理这些值的方法组成。类定义一种新的引用类型。</p><p>对象：对象是类的实例。对象一般通过实例化类创建，方法是使用 new 关键字并调用构造方法。</p><p>一个类的定义包含一个签名和一个主体。类的签名定义类的名称，可能还会指定其他重要信息。类的主体是一些放在花括号里的成员。类的成员一般包含字段和方法，也可以包含构造方法、初始化程序和嵌套类型。成员可以是静态的，也可以是非静态的。静态成员属于类本身，而非静态成员关联在类的实例上。</p><blockquote><p>常见的成员有四种：类字段、类方法、实例字段和实例方法。Java 的主要工作就是与这些成员交互。</p></blockquote><p>类的签名可能会声明它扩展自其他类。被扩展的类叫作超类，扩展其他类的类叫作子类。子类继承超类的成员，而且可以声明新成员，或者使用新的实现覆盖继承的方法。</p><p>类的成员可以使用访问修饰符 <code>public</code>、<code>protected</code> 或 <code>private</code>。这些修饰符指定成员在使用方和子类中是否可见以及能否访问。类通过这种方式控制对非公开 API 成员的访问。隐藏成员是一种面向对象设计技术，叫作数据封装（data encapsulation）</p><h3 id="其他引用类型">其他引用类型</h3><p>类的签名可能还会声明类实现了一个或多个接口。接口是一种类似于类的引用类型，其中定义了方法签名，但一般没有实现方法的方法主体。</p><p>不过，从 Java 8 开始，接口可以使用关键字 <code>default</code> 指明其中的方法是可选的。如果方法是可选的，接口文件必须包含默认的实现（因此才选用 <code>default</code> 这个关键词）；所有实现这个接口的类，如果没有实现可选的方法，就使用接口中默认的实现。</p><p>实现接口的类必须为接口的非默认方法提供主体。实现某个接口的类的实例，也是这个接口类型的实例。</p><p>类和接口是 Java 定义的五种基本引用类型中最重要的两个。另外三个基本引用类型是数组、枚举类型和注解类型（通常直接叫“注解”）。枚举是特殊的类，注解是特殊的接口。</p><h3 id="定义类的句法">定义类的句法</h3><p>最简单的类定义方式是在关键字 <code>class</code> 后面放上类的名称，然后在花括号中放一些类的成员。<code>class</code> 关键字前面可以放修饰符关键字或注解。</p><ul><li>如果类扩展其他类，类名后面要加上<code>extends</code> 关键字和要扩展的类名。</li><li>如果类实现一个或多个接口，类名或 <code>extends</code> 子句之后要加上 <code>implements</code> 关键字和用逗号分隔的接口名。</li></ul><p>例如：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Integer</span> <span class="token keyword">extends</span> <span class="token class-name">Number</span> <span class="token keyword">implements</span> <span class="token class-name">Serializable</span><span class="token punctuation">,</span> <span class="token class-name">Comparable</span> <span class="token punctuation">&#123;</span>     <span class="token comment">// 这里是类的成员 </span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>定义泛型类时还可以指定类型参数和通配符。</p><p>类声明可以包含修饰符关键字。除访问控制修饰符（<code>public</code>、<code>protected</code> 等）之外，还可以使用：</p><ul><li><code>abstract</code>：<code>abstract</code> 修饰的类未完全实现，不能实例化。只要类中有 <code>abstract</code> 修饰的方法，这个<br>类就必须使用 <code>abstract</code> 声明。</li><li><code>final</code>：<code>final</code> 修饰符指明这个类无法被扩展。类不能同时声明为 <code>abstract</code> 和 <code>final</code>。</li><li><code>strictfp</code>：如果类声明为 <code>strictfp</code>，那么其中所有的方法都声明为 <code>strictfp</code>。这个修饰符极少使用。</li></ul><h2 id="字段和方法">字段和方法</h2><p>类可以看成是由一些数据（也叫状态）和操作这些状态的代码组成的。数据存储在字段中，操作数据的代码则组织在方法中。</p><p>字段和方法有两种不同的类型：关联在类自身上的类成员（也叫静态成员），关联在类的单个实例（即对象）身上的实例成员。因此成员分为四类：类字段、类方法、实例字段、实例方法</p><p>示例定义了一个简单的类 <code>Circle</code>，包含所有这四种成员类型：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Circle</span> <span class="token punctuation">&#123;</span>   <span class="token comment">// 类字段 </span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">double</span> PI<span class="token operator">=</span> <span class="token number">3.14159</span><span class="token punctuation">;</span>  <span class="token comment">// 有用的常量 </span>   <span class="token comment">// 类方法：基于参数计算得到一个值 </span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">double</span> <span class="token function">radiansToDegrees</span><span class="token punctuation">(</span><span class="token keyword">double</span> radians<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>     <span class="token keyword">return</span> radians <span class="token operator">*</span> <span class="token number">180</span> <span class="token operator">/</span> PI<span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span>    <span class="token comment">// 实例字段 </span>  <span class="token keyword">public</span> <span class="token keyword">double</span> r<span class="token punctuation">;</span>               <span class="token comment">// 圆的半径 </span>   <span class="token comment">// 两个实例方法：处理对象的实例字段 </span>  <span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">area</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>         <span class="token comment">// 计算圆的面积 </span>    <span class="token keyword">return</span> PI <span class="token operator">*</span> r <span class="token operator">*</span> r<span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">circumference</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">// 计算圆的周长 </span>     <span class="token keyword">return</span> <span class="token number">2</span> <span class="token operator">*</span> PI <span class="token operator">*</span> r<span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="声明字段的句法">声明字段的句法</h3><p>声明字段的句法和声明局部变量的句法很像，不过声明字段时还可以使用修饰符。最简单的字段声明包含字段类型和字段名。类型前面可以放零个或多个修饰符关键字或注解，名称后面可以跟着一个等号和初始化表达式，提供字段的初始值。如果两个或多个字段的类型和修饰符都相同，那么可以把一些用逗号分隔的字段名和初始化表达式放在类型后面。如下是一些有效的字段声明：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span> <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> DAYS_PER_WEEK <span class="token operator">=</span> <span class="token number">7</span><span class="token punctuation">;</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> daynames <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span>DAYS_PER_WEEK<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">private</span> <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">17</span><span class="token punctuation">,</span> b <span class="token operator">=</span> <span class="token number">37</span><span class="token punctuation">,</span> c <span class="token operator">=</span> <span class="token number">53</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>字段的修饰符由零个或多个下述关键字组成。</p><ul><li><code>public</code>、<code>protected</code>、<code>private</code>：这些访问控制修饰符指明字段是否能在定义它的类之外使用，以及能在何处使用。</li><li><code>static</code>：如果使用，这个修饰符指明字段关联在定义它的类自身上，而不是类的实例身上。</li><li><code>final</code>：这个修饰符指明，字段一旦初始化，其值就不能改变。如果字段同时使用 <code>static</code> 和<code>final</code> 修饰，那么这个字段就是编译时常量，javac 会将其内联化。<code>final</code> 修饰的字段也可以用来创建实例不可变的类。</li><li><code>transient</code>：这个修饰符指明字段不是对象持久状态的一部分，无需跟对象的其他内容一起序列化。</li><li><code>volatile</code>：这个修饰符指明字段有额外的语义，可被两个或多个线程同时使用。<code>volatile</code> 修饰符的意思是，字段的值必须始终从主存储器中读取和释放，不能被线程缓存（在寄存器或CPU 缓存中）。</li></ul><h3 id="类字段">类字段</h3><p>类字段关联在定义它的类身上，而不是类的实例身上。下面这行代码声明一个类字段：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">double</span> PI <span class="token operator">=</span> <span class="token number">3.14159</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这行代码声明了一个字段，类型为 <code>double</code>，名称为 <code>PI</code>，并且把值设为 <code>3.14159</code>。<code>static</code> 修饰符表明这个字段是类字段。因为使用了 <code>static</code> 修饰符，所以类字段有时也叫静态字段。<code>final</code> 修饰符表明这个字段的值不会改变。因为字段 <code>PI</code> 表示一个常量，而且声明时加上了 <code>final</code>，所以无法修改它的值。在 Java（以及很多其他语言）中，习惯使用大写字母命名常量，因此这个字段的名称是 PI，而不是 pi。类字段经常用来定义常量，也就是说，<code>static</code> 和 <code>final</code> 修饰符经常放在一起使用。然而，并不是所有类字段都是常量，因此字段可以声明为<code>static</code> 但不声明为 <code>final</code>。</p><p>公开的静态字段其实就是全局变量。不过，类字段的名称会被定义它的类名限定，因此，如果不同的模块定义了同名的全局变量，Java 不会出现其他语言遇到的名称冲突问题。关于静态字段，有个重点要理解，即字段的值只有一个副本。字段关联在类自身上，而不是类的实例身上。看一下 <code>Circle</code> 类中的各个方法，它们都使用了同一个字段。在<code>Circle</code> 类内部，可以直接使用 <code>PI</code> 引用这个字段。但是在类的外部，既要使用类名也要使用字段名，这样才能引用这个独一无二的字段。<code>Circle</code> 类外部的方法要使用 <code>Circle.PI</code>才能访问这个字段。</p><h3 id="类方法">类方法</h3><p>和类字段一样，类方法也使用 <code>static</code> 修饰符声明：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">double</span> <span class="token function">radiansToDegrees</span><span class="token punctuation">(</span><span class="token keyword">double</span> rads<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>   <span class="token keyword">return</span> rads <span class="token operator">*</span> <span class="token number">180</span> <span class="token operator">/</span> PI<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>上述代码声明了一个类方法，名为 <code>radiansToDegrees()</code>。这个方法只有一个参数，类型为<code>double</code>，而且会返回一个 <code>double</code> 类型的值。</p><p>和类字段一样，类方法也关联在类身上，而不是对象身上。在类的外部调用类方法时，既要指定类名也要指定方法名。例如：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 2.0弧度等于多少角度？ </span><span class="token keyword">double</span> d <span class="token operator">=</span> <span class="token class-name">Circle</span><span class="token punctuation">.</span><span class="token function">radiansToDegrees</span><span class="token punctuation">(</span><span class="token number">2.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>如果想在定义类方法的类中调用类方法，则不用指定类名。还可以使用静态成员导入声明，减少输入的代码量。<br>注意，<code>Circle.radiansToDegrees()</code> 方法的主体使用了类字段 <code>PI</code>。类方法可以使用所在类（或其他类）中的任何类字段和类方法。</p><p>类方法不能使用任何实例字段或实例方法，因为类方法不关联在类的实例身上。也就是说，虽然 <code>adiansToDegrees()</code> 方法在 <code>Circle</code> 类中定义，但它不能使用 <code>Circle</code> 对象的任何实例成员。</p><h3 id="实例字段">实例字段</h3><p>声明时没使用 <code>static</code> 修饰符的字段是实例字段：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">double</span> r<span class="token punctuation">;</span>    <span class="token comment">// 圆的半径</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>实例字段关联在类的实例身上，所以创建的每个 <code>Circle</code> 对象都有自己的一个 <code>double</code> 类型 r 字段副本。在这个例子中，r 表示某个圆的半径。每个 <code>Circle</code> 对象的半径和其他所有<code>Circle</code> 对象的都不同。</p><p>在类定义内部，实例字段只通过名称引用。在实例方法 <code>circumference()</code> 的主体中有一个例子。在类外部，实例字段的名称前面必须加上包含这个字段的对象的引用。例如，如果变量 <code>c</code> 保存的是一个 <code>Circle</code> 对象的引用，那么可以使用表达式 <code>c.r</code> 引用这个圆的半径：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Circle</span> c <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Circle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 创建一个Circle对象，把引用存储在c中 </span>c<span class="token punctuation">.</span>r <span class="token operator">=</span> <span class="token number">2.0</span><span class="token punctuation">;</span>               <span class="token comment">// 把一个值赋值给实例字段r </span><span class="token class-name">Circle</span> d <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Circle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 再创建一个Circle对象 </span>d<span class="token punctuation">.</span>r <span class="token operator">=</span> c<span class="token punctuation">.</span>r <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">;</span>           <span class="token comment">// 让这个圆是前一个的两倍大</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>实例字段是面向对象编程的关键。实例字段保存对象的状态，实例字段的值把两个对象区分开来。</p><h3 id="实例方法">实例方法</h3><p>实例方法处理类的具体实例（对象），只要声明方法时没使用 static 关键字，这个方法默认就是实例方法。</p><p>实例方法这个特性让面向对象编程开始变得有趣。示例中定义的 Circle 类包含两个实例方法，<code>area()</code> 和 <code>circumference()</code>，分别计算指定 Circle 对象表示的圆的面积和周长。若想在定义实例方法的类之外使用实例方法，必须在方法名前加上要处理的实例引用。例如：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 创建一个Circle对象，存储在变量c中 </span><span class="token class-name">Circle</span> c <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Circle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> c<span class="token punctuation">.</span>r <span class="token operator">=</span> <span class="token number">2.0</span><span class="token punctuation">;</span>              <span class="token comment">// 设定这个对象的实例字段 </span><span class="token keyword">double</span> a <span class="token operator">=</span> c<span class="token punctuation">.</span><span class="token function">area</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 调用这个对象的实例方法</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>在实例方法内部，可以自然地访问属于调用这个方法的对象的实例字段。前面说过，经常可以把对象理解为包含状态（通过对象的字段表示）和行为（处理状态的方法）的包（bundle）。<br>实现所有实例方法时都使用了一个隐式参数，方法签名里没显示这个参数。这个隐式参数是 <code>this</code>，它的值是调用这个方法的对象引用。在我们的例子中，是一个 <code>Circle</code> 对象。</p><h3 id="this引用的工作方式"><code>this</code>引用的工作方式</h3><p>方法签名中不显示隐式参数 <code>this</code>，是因为往往用不到。只要 Java 方法在类中访问实例字段，都默认访问 <code>this</code> 参数指向的对象中的字段。实例方法调用同一个类中的其他实例方法时也一样，可以理解为“在当前对象上调用实例方法”。</p><p>不过，如果想明确表明方法访问的是自己的字段或方法，可以显式使用 <code>this</code> 关键字。例如，可以改写 <code>area()</code> 方法，显式使用 <code>this</code> 引用实例字段：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">area</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> <span class="token class-name">Circle</span><span class="token punctuation">.</span>PI <span class="token operator">*</span> <span class="token keyword">this</span><span class="token punctuation">.</span>r <span class="token operator">*</span> <span class="token keyword">this</span><span class="token punctuation">.</span>r<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>上述代码还显式使用类名引用类字段 <code>PI</code>。在这样简单的方法中，一般无需如此明确。然而，遇到复杂情况时，在不强制要求使用 <code>this</code> 的地方使用 <code>this</code>，有时可以让代码的意图更明确。</p><p>不过，有些情况下必须使用 <code>this</code> 关键字。例如，如果方法的参数或方法中的局部变量和类中的某个字段同名，那么就必须使用 <code>this</code> 引用这个字段，因为只使用字段名的话，引用的是方法的参数或局部变量。</p><p>例如，可以把下述方法添加到 <code>Circle</code> 类中：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setRadius</span><span class="token punctuation">(</span><span class="token keyword">double</span> r<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>   <span class="token keyword">this</span><span class="token punctuation">.</span>r <span class="token operator">=</span> r<span class="token punctuation">;</span>      <span class="token comment">// 把参数r的值赋值给字段this.r </span>                   <span class="token comment">// 注意，不能写成r = r </span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>有些开发者会谨慎选择方法的参数名，避免和字段名冲突，因此可以最大限度地少使用<code>this</code>。</p><p>最后，注意，实例方法可以使用 <code>this</code> 关键字，但类方法不能使用。这是因为类方法不关联在单个对象身上。</p><h2 id="创建和初始化对象">创建和初始化对象</h2><p>构造方法是类成员，作用是初始化新建实例中的字段。</p><p>再看一下创建 Circle 对象的方式：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Circle</span> c <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Circle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这行代码的意思是，调用看起来有点儿像方法的东西创建一个新 Circle 实例。其实，<code>Circle()</code> 是一种构造方法，是类中的成员，和类同名，而且像方法一样，有主体。</p><p>构造方法的工作方式是这样的：</p><ul><li><p><code>new</code> 运算符表明我们想创建类的一个新实例。</p></li><li><p>首先，分配内存存储新建的对象实例；</p></li><li><p>然后，调用构造方法的主体，并传入指定的参数；</p></li><li><p>最后，构造方法使用这些参数执行初始化新对象所需的一切操作。</p></li></ul><p>Java 中的每个类都至少有一个构造方法，其作用是执行初始化新对象所需的操作。定义的 Circle 类没有显式定义构造方法，因此 javac 编译器自动为我们提供了一个构造方法（叫作默认构造方法）。这个构造方法没有参数，而且不执行任何特殊的初始化操作。</p><h3 id="定义构造方法">定义构造方法</h3><p>可是 <code>Circle</code> 对象显然要做些初始化操作，下面就来定义一个构造方法。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Circle</span> <span class="token punctuation">&#123;</span>     <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">double</span> PI <span class="token operator">=</span> <span class="token number">3.14159</span><span class="token punctuation">;</span> <span class="token comment">// 常量 </span>    <span class="token comment">// 实例字段，保存圆的半径 </span>    <span class="token keyword">protected</span> <span class="token keyword">double</span> r<span class="token punctuation">;</span>      <span class="token comment">// 构造方法：初始化r字段</span>    <span class="token keyword">public</span> <span class="token class-name">Circle</span><span class="token punctuation">(</span><span class="token keyword">double</span> r<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>r <span class="token operator">=</span> r<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>      <span class="token comment">// 实例方法：基于半径计算得到值 </span>    <span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">circumference</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> <span class="token number">2</span> <span class="token operator">*</span> PI <span class="token operator">*</span> r<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>     <span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">area</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> PI <span class="token operator">*</span> r<span class="token operator">*</span>r<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>     <span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">radius</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> r<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>重新定义了 <code>Circle</code> 类，包含一个构造方法，指定新建 <code>Circle</code> 对象的半径。借此机会，我们还把字段改成了受保护的（禁止对象随意访问）。</p><p>如果依赖编译器提供的默认构造方法，就要编写如下的代码显式初始化半径：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Circle</span> c <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Circle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> c<span class="token punctuation">.</span>r <span class="token operator">=</span> <span class="token number">0.25</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>添加上述构造方法后，初始化变成创建对象过程的一部分：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Circle</span> c <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Circle</span><span class="token punctuation">(</span><span class="token number">0.25</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>下面是一些关于命名、声明和编写构造方法的基本注意事项。</p><ul><li>构造方法的名称始终和类名一样。</li><li>声明构造方法时不指定返回值类型，连 <code>void</code> 都不用。</li><li>构造方法的主体初始化对象。可以把主体的作用想象为设定 <code>this</code> 引用的内容。</li><li>构造方法不能返回 <code>this</code> 或任何其他值。</li></ul><h3 id="定义多个构造方法">定义多个构造方法</h3><p>有时，根据遇到的情况，可能想在多个不同的方式中选择一个最便利的方式初始化对象。例如，我们可能想使用指定的值初始化圆的半径，或者使用一个合理的默认值初始化。为<code>Circle</code> 类定义两个构造方法的方式如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">Circle</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> r <span class="token operator">=</span> <span class="token number">1.0</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span> <span class="token keyword">public</span> <span class="token class-name">Circle</span><span class="token punctuation">(</span><span class="token keyword">double</span> r<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>r <span class="token operator">=</span> r<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><code>Circle</code> 类只有一个实例字段，由此并没有太多的初始化方式。不过在复杂的类中，经常会定义不同的构造方法。<br>只要构造方法的参数列表不同，为一个类定义多个构造方法完全是合法的。编译器会根据提供的参数数量和类型判断你想使用的是哪个构造方法。定义多个构造方法和方法重载的原理类似。</p><h3 id="在一个构造方法中调用另一个构造方法">在一个构造方法中调用另一个构造方法</h3><p>如果类有多个构造方法，会用到 <code>this</code> 关键字的一种特殊用法。在一个构造方法中可以使用<code>this</code> 关键字调用同一个类中的另一个构造方法。因此，前面 <code>Circle</code> 类的两个构造方法可以改写成：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 这是基本构造方法：初始化半径 </span><span class="token keyword">public</span> <span class="token class-name">Circle</span><span class="token punctuation">(</span><span class="token keyword">double</span> r<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>r <span class="token operator">=</span> r<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span> <span class="token comment">// 这个构造方法使用this()调用前一个构造方法 </span><span class="token keyword">public</span> <span class="token class-name">Circle</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">this</span><span class="token punctuation">(</span><span class="token number">1.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>如果一些构造方法共用大量的初始化代码，这种技术是有用的，因为能避免代码重复。</li><li>如果构造方法执行很多初始化操作，在这种复杂的情况下，这种技术十分有用。</li></ul><p>使用 <code>this()</code> 时有个重大的限制：只能出现在构造方法的第一个语句中。但是，调用这个方法后，可以执行构造方法所需的任何其他初始化操作。这个限制的原因涉及自动调用超类的构造方法。</p><h3 id="字段的默认值和初始化程序">字段的默认值和初始化程序</h3><p>类中的字段不一定要初始化。如果没有指定初始值，字段自动使用默认值初始化：false、\u0000、0、0.0 或 null。具体使用哪个值，根据字段的类型而定。这些默认值由 Java 语言规范规定，实例字段和类字段都适用。</p><p>如果字段的默认值不适合字段，可以显式提供其他的初始值。例如：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">double</span> PI <span class="token operator">=</span> <span class="token number">3.14159</span><span class="token punctuation">;</span> <span class="token keyword">public</span> <span class="token keyword">double</span> r <span class="token operator">=</span> <span class="token number">1.0</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>字段声明不是任何方法的一部分。Java 编译器会自动为字段生成初始化代码，然后把这些代码放在类的所有构造方法中。这些初始化代码按照字段在源码中出现的顺序插入构造方法，因此，字段的初始化程序可以使用在其之<br>前声明的任何字段的初始值。</p><p>例如下述代码片段是一个假设类，定义了一个构造方法和两个实例字段：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SampleClass</span> <span class="token punctuation">&#123;</span>   <span class="token keyword">public</span> <span class="token keyword">int</span> len <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>   <span class="token keyword">public</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> table <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>len<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">SampleClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>     <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> table<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span>    <span class="token comment">// 类余下的内容省略了…… </span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>对这个例子来说，javac 生成的构造方法其实和下述代码等效：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">SampleClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>   <span class="token keyword">int</span> len <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>   <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> table <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>len<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> table<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果某个构造方法的开头使用 <code>this()</code> 调用其他构造方法，那么字段的初始化代码不会出现在这个构造方法中。此时，初始化由 <code>this()</code> 调用的构造方法处理。</p><p>既然实例字段在构造方法中初始化，那么类字段在哪初始化呢？就算从不创建类的实例，类字段也关联在类身上。这意味着，类字段要在调用构造方法之前初始化。</p><p>为此，javac 会为每个类自动生成一个类初始化方法。类字段在这个方法的主体中初始化。这个方法只在首次使用类之前调用一次（经常是在 Java 虚拟机首次加载类时）</p><p>和实例字段的初始化一样，类字段的初始化表达式按照类字段在源码中的顺序插入类初始化方法。因此，类字段的初始化表达式可以使用在其之前声明的类字段。类初始化方法是内部方法，对 Java 程序员不可见。在类文件中，它的名称是 <code>&lt;clinit&gt;</code>（例如，使用 javap检查类文件时可以看到这个方法）。</p><p><strong>初始化程序块</strong></p><p>至此，我们知道对象可以通过字段的初始化表达式和构造方法中的任何代码初始化。类有一个类初始化方法，这个方法和构造方法不一样，不能像构造方法那样显式定义主体。不过，Java 允许编写用于初始化类字段的代码，所用的结构叫静态初始化程序。静态初始化程序由 static 关键字及随后的花括号中的代码块组成。在类定义中，静态初始化程序可以放在字段和方法定义能出现的任何位置。例如，下述代码为两个类字段执行一些重要的初始化操作：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 我们可以使用三角函数画出圆的轮廓 </span><span class="token comment">// 不过，三角函数很慢，所以预先算出一些值 </span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TrigCircle</span> <span class="token punctuation">&#123;</span>   <span class="token comment">// 这是静态查找表和各自的初始化程序 </span>  <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> NUMPTS <span class="token operator">=</span> <span class="token number">500</span><span class="token punctuation">;</span>   <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">double</span> sines<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">double</span><span class="token punctuation">[</span>NUMPTS<span class="token punctuation">]</span><span class="token punctuation">;</span>   <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">double</span> cosines<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">double</span><span class="token punctuation">[</span>NUMPTS<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment">// 这是一个静态初始化程序，填充上述数组 </span>  <span class="token keyword">static</span> <span class="token punctuation">&#123;</span>     <span class="token keyword">double</span> x <span class="token operator">=</span> <span class="token number">0.0</span><span class="token punctuation">;</span>     <span class="token keyword">double</span> delta_x <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Circle</span><span class="token punctuation">.</span>PI<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token punctuation">(</span>NUMPTS<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> x <span class="token operator">=</span> <span class="token number">0.0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> NUMPTS<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">,</span> x <span class="token operator">+=</span> delta_x<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>       sines<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">sin</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>       cosines<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">cos</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">&#125;</span>   <span class="token punctuation">&#125;</span>   <span class="token comment">// 类余下的内容省略了…… </span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>一个类可以有任意多个静态初始化程序。各个初始化程序块的主体会和所有静态字段的初始化表达式一起合并到类初始化方法中。静态初始化程序和类方法的相同点是，不能使用this 关键字，也不能使用类中的任何实例字段或实例方法。</p><p>类还可以有实例初始化程序。实例初始化程序和静态初始化程序类似，不过初始化的是对象而不是类。一个类可以有任意多个实例初始化程序，而且实例初始化程序可以放在字段和方法定义能出现的任何位置。各个实例初始化程序的主体和所有实例字段初始化表达式一起，放在类中每个构造方法的开头。实例初始化程序的外观和静态初始化程序类似，不过不使用 static 关键字。也就是说，实例初始化程序只是放在花括号里的任意 Java 代码。</p><p>实例初始化程序可以初始化数组或其他需要复杂初始化操作的字段。实例初始化程序有时很有用，因为它们把初始化代码放在字段后面，而不是单独放在构造方法中。例如：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> NUMPTS <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span> <span class="token keyword">private</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> data <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>NUMPTS<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token punctuation">&#123;</span> <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> NUMPTS<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> data<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>不过，现实中很少使用实例初始化程序。</p><h2 id="子类和继承">子类和继承</h2><p>前面定义的 <code>Circle</code> 是个简单的类，只通过半径区分不同的圆。假设我们要同时使用大小和位置表示圆。例如，在笛卡儿平面中，圆心在 (0, 0)、半径为 1.0 的圆，与圆心在 (1, 2)、半径为 1.0 的圆不同。为此，需要一个新类，我们称其为 <code>PlaneCircle</code>。</p><p>我们想添加表示圆所在位置的功能，但不想失去 <code>Circle</code> 类的任何现有功能。为此，可以把<code>PlaneCircle</code> 类定义为 <code>Circle</code> 类的子类，让 <code>PlaneCircle</code> 类继承超类 <code>Circle</code> 的字段和方法。</p><p>通过定义子类或扩展超类向类中添加功能的能力，是面向对象编程范式的核心。</p><h3 id="扩展类">扩展类</h3><p>如何把 <code>PlaneCircle</code> 类定义为 <code>Circle</code> 类的子类：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PlaneCircle</span> <span class="token keyword">extends</span> <span class="token class-name">Circle</span> <span class="token punctuation">&#123;</span>   <span class="token comment">// 自动继承了Circle类的字段和方法， </span>  <span class="token comment">// 因此只要在这里编写新代码 </span>  <span class="token comment">// 新实例字段，存储圆心的位置 </span>  <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">double</span> cx<span class="token punctuation">,</span> cy<span class="token punctuation">;</span>    <span class="token comment">// 新构造方法，用于初始化新字段 </span>  <span class="token comment">// 使用特殊的句法调用构造方法Circle() </span>  <span class="token keyword">public</span> <span class="token class-name">PlaneCircle</span><span class="token punctuation">(</span><span class="token keyword">double</span> r<span class="token punctuation">,</span> <span class="token keyword">double</span> x<span class="token punctuation">,</span> <span class="token keyword">double</span> y<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>     <span class="token keyword">super</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// 调用超类的构造方法Circle() </span>    <span class="token keyword">this</span><span class="token punctuation">.</span>cx <span class="token operator">=</span> x<span class="token punctuation">;</span>   <span class="token comment">// 初始化实例字段cx </span>    <span class="token keyword">this</span><span class="token punctuation">.</span>cy <span class="token operator">=</span> y<span class="token punctuation">;</span>   <span class="token comment">// 初始化实例字段cy </span>  <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">getCentreX</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>     <span class="token keyword">return</span> cx<span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">getCentreY</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>     <span class="token keyword">return</span> cy<span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span>    <span class="token comment">// area()和circumference()方法继承自Circle类 </span>  <span class="token comment">// 新实例方法，检查点是否在圆内 </span>  <span class="token comment">// 注意，这个方法使用了继承的实例字段r </span>  <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isInside</span><span class="token punctuation">(</span><span class="token keyword">double</span> x<span class="token punctuation">,</span> <span class="token keyword">double</span> y<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>     <span class="token keyword">double</span> dx <span class="token operator">=</span> x <span class="token operator">-</span> cx<span class="token punctuation">,</span> dy <span class="token operator">=</span> y <span class="token operator">-</span> cy<span class="token punctuation">;</span>            <span class="token comment">// 到圆心的距离 </span>    <span class="token keyword">double</span> distance <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">sqrt</span><span class="token punctuation">(</span>dx<span class="token operator">*</span>dx <span class="token operator">+</span> dy<span class="token operator">*</span>dy<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 勾股定理 </span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>distance <span class="token operator">&lt;</span> r<span class="token punctuation">)</span><span class="token punctuation">;</span>                      <span class="token comment">// 返回true或false </span>  <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>第一行中使用的 <code>extends</code> 关键字。这个关键字告诉 Java，<code>PlaneCircle</code> 类扩展 <code>Circle</code> 类（或者说是 <code>Circle</code> 类的子类），这意味着 <code>PlaneCircle</code> 类会继承 <code>Circle</code> 类的字段和方法。</p><blockquote><p>有多种方式能表达新对象类型具有 <code>Circle</code> 的特征，而且有位置。这或许是最简单的方式，但不一定是最合适的方式，尤其是在大型系统中。</p></blockquote><p><code>isInside()</code> 方法的定义展示了字段继承：这个方法使用了字段 <code>r</code>（由 <code>Circle</code> 类定义），就像这个字段是在 <code>PlaneCircle</code> 中定义的一样。<code>PlaneCircle</code> 还继承了 <code>Circle</code> 的方法。因此，如果变量 <code>pc</code> 保存的值是一个 <code>PlaneCircle</code> 对象引用，那么可以编写如下代码：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">double</span> ratio <span class="token operator">=</span> pc<span class="token punctuation">.</span><span class="token function">circumference</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">/</span> pc<span class="token punctuation">.</span><span class="token function">area</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这么做就好像 <code>area()</code> 和 <code>circumference()</code> 两个方法是在 <code>PlaneCircle</code> 中定义的一样。</p><p>子类的另一个特性是，每个 <code>PlaneCircle</code> 对象都是完全合法的 <code>Circle</code> 对象。如果 <code>pc</code> 是一个 <code>PlaneCircle</code> 对象的引用，那么可以把这个引用赋值给 <code>Circle</code> 类型的变量，忽略它表示的位置：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 位置在原点的单位圆 </span><span class="token class-name">PlaneCircle</span> pc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PlaneCircle</span><span class="token punctuation">(</span><span class="token number">1.0</span><span class="token punctuation">,</span> <span class="token number">0.0</span><span class="token punctuation">,</span> <span class="token number">0.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token class-name">Circle</span> c <span class="token operator">=</span> pc<span class="token punctuation">;</span>     <span class="token comment">// 无需校正，赋值给Circle类型的变量</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>把 <code>PlaneCircle</code> 对象赋值给 <code>Circle</code> 类型的变量时无需校正。<code>Circle</code> 类型的变量 <code>c</code> 中保存的值仍然是有效的 <code>PlaneCircle</code> 对象，但编译器不确定这一点，因此不校正无法反向（缩小）转换：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 缩小转换需要校正（虚拟机还要做运行时检查） </span><span class="token class-name">PlaneCircle</span> pc2 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">PlaneCircle</span><span class="token punctuation">)</span> c<span class="token punctuation">;</span> <span class="token keyword">boolean</span> origininside <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">PlaneCircle</span><span class="token punctuation">)</span> c<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isInside</span><span class="token punctuation">(</span><span class="token number">0.0</span><span class="token punctuation">,</span> <span class="token number">0.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>如果声明类时使用了 <code>final</code> 修饰符，那么这个类无法被扩展或定义子类。<code>java.lang.String</code> 是 final 类的一个示例。把类声明为 <code>final</code> 可以避免不需要的类扩展：在 String 对象上调用方法时，就算 String 类来自某个未知的外部源，你也知道这个方法是在 String 类中定义的。</p><h3 id="超类、对象和类层次结构">超类、对象和类层次结构</h3><p>在这个示例中，<code>PlaneCircle</code> 是 <code>Circle</code> 的子类，也可以说 <code>Circle</code> 是 <code>PlaneCircle</code> 的超类。类的超类在 <code>extends</code> 子句中指定：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PlaneCircle</span> <span class="token keyword">extends</span> <span class="token class-name">Circle</span> <span class="token punctuation">&#123;</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>你定义的每个类都有超类。如果没使用 <code>extends</code> 子句指定超类，那么超类是 <code>java.lang.Object</code>。<code>Object</code> 是特殊的类，原因有如下两个：</p><ul><li>它是 Java 中唯一一个没有超类的类；</li><li>所有 Java 类都从 <code>Object</code> 类中继承方法。</li></ul><p>因为每个类（除了 <code>Object</code> 类）都有超类，所以 Java 中的类组成一个类层次结构。</p><h3 id="子类的构造方法">子类的构造方法</h3><p>再看一下示例中的 <code>PlaneCircle()</code> 构造方法：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">PlaneCircle</span><span class="token punctuation">(</span><span class="token keyword">double</span> r<span class="token punctuation">,</span> <span class="token keyword">double</span> x<span class="token punctuation">,</span> <span class="token keyword">double</span> y<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>   <span class="token keyword">super</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment">// 调用超类的构造方法Circle() </span>  <span class="token keyword">this</span><span class="token punctuation">.</span>cx <span class="token operator">=</span> x<span class="token punctuation">;</span>    <span class="token comment">// 初始化实例字段cx </span>  <span class="token keyword">this</span><span class="token punctuation">.</span>cy <span class="token operator">=</span> y<span class="token punctuation">;</span>    <span class="token comment">// 初始化实例字段cy </span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>虽然这个构造方法显式初始化了 <code>PlaneCircle</code> 类中新定义的字段 <code>cx</code> 和 <code>cy</code>，但仍使用超类的 <code>Circle()</code> 构造方法初始化继承的字段。为了调用超类的构造方法，这个构造方法调用了<code>super()</code> 方法。</p><p><code>super</code> 是 Java 的保留字。它的用法之一是，在子类的构造方法中调用超类的构造方法。这种用法和在一个构造方法中使用 <code>this()</code> 调用同一个类中的其他构造方法类似。使用<code>super()</code> 调用构造方法和使用 <code>this()</code> 调用构造方法有同样的限制：</p><ul><li>只能在构造方法中像这样使用 <code>super()</code>；</li><li>必须在构造方法的第一个语句中调用超类的构造方法，甚至要放在局部变量声明之前。</li></ul><p>传给 <code>super()</code> 的实参必须与超类构造方法的形参匹配。如果超类定义了多个构造方法，那么 <code>super()</code> 可以调用其中任何一个，具体是哪个，由传入的参数决定。</p><h3 id="构造方法链">构造方法链</h3><ul><li>创建类的实例时，Java 保证一定会调用这个类的构造方法；</li><li>创建任何子类的实例时，Java还保证一定会调用超类的构造方法。</li></ul><p>为了保证第二点，Java 必须确保每个构造方法都会调用超类的构造方法。</p><p>因此，如果构造方法的第一个语句没有使用 <code>this()</code> 或 <code>super()</code> 显式调用另一个构造方法，javac 编译器会插入 <code>super()</code>（即调用超类的构造方法，而且不传入参数）。如果超类没有无需参数的可见构造方法，这种隐式调用会导致编译出错。</p><p>以 <code>PlaneCircle</code> 类为例，创建这个类的新实例时会发生下述事情：</p><ul><li>首先，调用 <code>PlaneCircle</code> 类的构造方法；</li><li>这个构造方法显示调用了 <code>super(r)</code>，调用 <code>Circle</code> 类的一个构造方法；</li><li><code>Circle()</code> 构造方法会隐式调用 <code>super()</code>，调用 <code>Circle</code> 的超类 <code>Object</code> 的构造方法（Object只有一个构造方法）；</li><li>此时，到达层次结构的顶端了，接下来开始运行构造方法；</li><li>首先运行 <code>Object</code> 构造方法的主体；</li><li>返回后，再运行 <code>Circle()</code> 构造方法的主体；</li><li>最后，对 <code>super(r)</code> 的调用返回后，接着执行 <code>PlaneCircle()</code> 构造方法中余下的语句。</li></ul><p>这个过程表明，构造方法链在一起调用；只要创建对象，就会调用一系列构造方法，从子类到超类，一直向上，直到类层次结构的顶端 <code>Object</code> 类为止。因为超类的构造方法始终在子类的构造方法的第一个语句中调用，所以 <code>Object</code> 类的构造方法的主体始终最先运行，然后运行 <code>Object</code> 的子类的构造方法，就这样沿着类层次结构一直向下，直到实例化的那个类为止。</p><blockquote><p>调用构造方法时，超类中的字段也会被初始化。</p></blockquote><h3 id="默认构造方法">默认构造方法</h3><p>前面对构造方法链的说明漏了一点。如果构造方法没有调用超类的构造方法，Java 会隐式调用。那么，如果类没有声明构造方法呢？此时，Java 会为类隐式添加一个构造方法。这个默认的构造方法什么也不做，只是调用超类的构造方法。</p><p>例如，如果没为 <code>PlaneCircle</code> 类声明构造方法，那么 Java 会隐式插入下述构造方法：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">PlaneCircle</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果超类 <code>Circle</code> 没有声明无参数的构造方法，那么在这个自动插入 <code>PlaneCircle()</code> 类的默认构造方法中调用 <code>super()</code> 会导致编译出错。一般来说，如果类没有定义无参数的构造方法，那么它的所有子类必须定义显式调用超类构造方法的构造方法，而且要传入所需的参数。</p><p>如果类没有定义任何构造方法，默认会为其提供一个无参数的构造方法。声明为 <code>public</code> 的类，提供的构造方法也声明为 <code>public</code>。提供给其他类的默认构造方法则不使用任何可见性修饰符，这些构造方法具有默认的可见性。</p><p>如果创建的 <code>public</code> 类不能公开实例化，就应该至少声明一个非 <code>public</code> 的构造方法，以此避免插入默认的 <code>public</code> 构造方法。从来不会实例化的类（例如 <code>java.lang.Math</code> 或 <code>java.lang.System</code>），应该定义一个 <code>private</code> 构造方法。这种构造方法不能在类外部调用，但可以避免自动插入默认的构造方法。</p><h3 id="遮盖超类的字段">遮盖超类的字段</h3><p>假如 <code>PlaneCircle</code> 类需要知道圆心到原点 (0, 0) 的距离，我们可以再添加一个实例字段保存这个值：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">double</span> r<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在构造方法中添加下述代码可以算出这个字段的值：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">this</span><span class="token punctuation">.</span>r <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">sqrt</span><span class="token punctuation">(</span>cx<span class="token operator">*</span>cx <span class="token operator">+</span> cy<span class="token operator">*</span>cy<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 勾股定理</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>但是等一下，这个新添加的字段 <code>r</code> 和超类 <code>Circle</code> 中表示半径的字段 <code>r</code> 同名了。发生这种情况时，我们说，<code>PlaneCircle</code> 类的 <code>r</code> 字段遮盖了 <code>Circle</code> 类的 <code>r</code> 字段。（当然，这个例子是故意这么做的。新字段其实应该命名为 distanceFromOrigin。）</p><blockquote><p>在你编写的代码中，为字段命名时应该避免遮盖超类的字段。如果遮盖了，几乎就表明代码写得不好。</p></blockquote><p>这样定义 <code>PlaneCircle</code> 类之后，表达式 <code>r</code> 和 <code>this.r</code> 都引用 <code>PlaneCircle</code> 类中的这个字段。那么，如何引用 <code>Circle</code> 类中保存圆的半径的 <code>r</code> 字段呢？有一种特殊的句法可以实现这个需求——使用 <code>super</code> 关键字：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">r       <span class="token comment">// 引用PlaneCircle的字段 </span><span class="token keyword">this</span><span class="token punctuation">.</span>r  <span class="token comment">// 引用PlaneCircle的字段 </span><span class="token keyword">super</span><span class="token punctuation">.</span>r <span class="token comment">// 引用Circle的字段</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>引用被遮盖的字段还有一种方式——把 <code>this</code>（或类的实例）校正为适当的超类，然后再访问字段：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">Circle</span><span class="token punctuation">)</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span>r <span class="token comment">// 引用Circle类的字段</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果想引用的遮盖字段不是在类的直接超类中定义的，这种校正技术特别有用。假如有三个类 A、B 和 C，它们都定义了一个名为 x 的字段，而且 C 是 B 的子类，B 是 A 的子类。那么，在 C 类的方法中可以按照下面的方式引用这些不同的字段：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">x              <span class="token comment">// C类的x字段 </span><span class="token keyword">this</span><span class="token punctuation">.</span>x         <span class="token comment">// C类的x字段 </span><span class="token keyword">super</span><span class="token punctuation">.</span>x        <span class="token comment">// B类的x字段 </span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">B</span><span class="token punctuation">)</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span>x    <span class="token comment">// B类的x字段 </span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">A</span><span class="token punctuation">)</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span>x    <span class="token comment">// A类的x字段 </span><span class="token keyword">super</span><span class="token punctuation">.</span><span class="token keyword">super</span><span class="token punctuation">.</span>x  <span class="token comment">// 非法，不能这样引用A类的x字段</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>类似地，如果 c 是 C 类的实例，那么可以像这样引用这三个字段：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">c<span class="token punctuation">.</span>x           <span class="token comment">// C类的x字段 </span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">B</span><span class="token punctuation">)</span>c<span class="token punctuation">)</span><span class="token punctuation">.</span>x      <span class="token comment">// B类的x字段 </span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">A</span><span class="token punctuation">)</span>c<span class="token punctuation">)</span><span class="token punctuation">.</span>x      <span class="token comment">// A类的x字段</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>目前为止，讨论的都是实例字段。类字段也能被遮盖。引用被遮盖的类字段中的值，可以使用相同的 <code>super</code> 句法，但没必要这么做，因为始终可以把类名放在类字段前引用这个字段。假如 <code>PlaneCircle</code> 的实现方觉得 <code>Circle.PI</code> 字段没有提供足够的小数位，那么他可以自己定义 <code>PI</code> 字段：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">double</span> PI <span class="token operator">=</span> <span class="token number">3.14159265358979323846</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>现在，<code>PlaneCircle</code> 类中的代码可以通过表达式 <code>PI</code> 或 <code>PlaneCircle.PI</code> 使用这个更精确的值，还可以使用表达式 <code>super.PI</code> 和 <code>Circle.PI</code> 引用精度不高的旧值。不过，<code>PlaneCircle</code>继承的 <code>area()</code> 和 <code>circumference()</code> 方法是在 <code>Circle</code> 类中定义的，所以，就算 <code>Circle.PI</code> 被<code>PlaneCircle.PI</code> 遮盖了，这两个方法还是会使用 <code>Circle.PI</code> 的值。</p><h3 id="覆盖超类的方法">覆盖超类的方法</h3><p>如果类中定义的某个实例方法和超类的某个方法有相同的名称、返回值类型和参数，那么这个方法会覆盖（override）超类中对应的方法。在这个类的对象上调用这个方法时，调用的是新定义的方法，而不是超类中定义的旧方法。</p><blockquote><p>覆盖方法的返回值类型可以是原方法返回值的子类（没必要一模一样）。这叫作协变返回（covariant return）。</p></blockquote><p>方法覆盖是面向对象编程中一项重要且有用的技术。<code>PlaneCircle</code> 没有覆盖 <code>Circle</code> 类定义的任何方法，不过，假设我们要再定义一个 <code>Circle</code> 的子类，名为 <code>Ellipse</code>。</p><p>此时，<code>Ellipse</code> 一定要覆盖 <code>Circle</code> 的 <code>area()</code> 和 <code>circumference()</code> 方法，因为计算圆的面积和周长的公式不适用于椭圆。</p><p>下面针对方法覆盖的讨论只涉及实例方法。类方法的运作机制完全不同，无法覆盖。和字段一样，类方法也能被子类遮盖，但不能覆盖。好的编程风格是调用类方法时始终在前面加上定义这个方法的类名。如果把类名当成方法名的一部分，那么这两个方法的名称就不一样，因此其实并没有遮盖什么。</p><p>在进一步讨论方法覆盖之前，要理解方法覆盖和方法重载之间的区别。方法重载指的是（在同一个类中）定义多个名称相同但参数列表不同的方法。这和方法覆盖十分不同，因此别混淆了。</p><h4 id="覆盖不是遮盖">覆盖不是遮盖</h4><p>虽然 Java 使用很多类似的方式对待字段和方法，但方法覆盖和字段遮盖一点儿都不一样。为了引用遮盖的字段，只需把对象校正成适当超类的实例，但不能使用这种技术调用覆盖的实例方法。下述代码展示了这个重要区别：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">A</span> <span class="token punctuation">&#123;</span>                          <span class="token comment">// 定义一个类，名为A </span>  <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>                       <span class="token comment">// 一个实例字段 </span>  <span class="token keyword">int</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> i<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>            <span class="token comment">// 一个实例方法 </span>  <span class="token keyword">static</span> <span class="token keyword">char</span> <span class="token function">g</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> <span class="token string">'A'</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>  <span class="token comment">// 一个类方法 </span><span class="token punctuation">&#125;</span>  <span class="token keyword">class</span> <span class="token class-name">B</span> <span class="token keyword">extends</span> <span class="token class-name">A</span> <span class="token punctuation">&#123;</span>                <span class="token comment">// 定义A的一个子类 </span>  <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>                       <span class="token comment">// 遮盖A类的字段i </span>  <span class="token keyword">int</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> <span class="token operator">-</span>i<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>           <span class="token comment">// 覆盖A类的方法f </span>  <span class="token keyword">static</span> <span class="token keyword">char</span> <span class="token function">g</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> <span class="token string">'B'</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>  <span class="token comment">// 遮盖A类的类方法g() </span><span class="token punctuation">&#125;</span>  <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OverrideTest</span> <span class="token punctuation">&#123;</span>   <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span> args<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>     <span class="token class-name">B</span> b <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">B</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token comment">// 创建一个类型为B的新对象 </span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>b<span class="token punctuation">.</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">// 引用B.i，打印2 </span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>b<span class="token punctuation">.</span><span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// 引用B.f()，打印-2 </span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>b<span class="token punctuation">.</span><span class="token function">g</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// 引用B.g()，打印B </span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">B</span><span class="token punctuation">.</span><span class="token function">g</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// 调用B.g()更好的方式 </span>     <span class="token class-name">A</span> a <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">A</span><span class="token punctuation">)</span> b<span class="token punctuation">;</span>                 <span class="token comment">// 把b校正成A类的实例 </span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">// 现在引用的是A.i，打印1 </span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span><span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// 还是引用B.f()，打印-2 </span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span><span class="token function">g</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// 引用A.g()，打印A </span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">A</span><span class="token punctuation">.</span><span class="token function">g</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// 调用A.g()更好的方式 </span>  <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>初看起来，可能觉得方法覆盖和字段遮盖的这种区别有点奇怪，但稍微想想，确实有道理。</p><p>假设我们要处理一些 <code>Circle</code> 和 <code>Ellipse</code> 对象。为了记录这些圆和椭圆，我们把它们存储在一个 <code>Circle[]</code> 类型的数组中。这么做是可以的，因为 <code>Ellipse</code> 是 <code>Circle</code> 的子类，所以所有 <code>Ellipse</code> 对象都是合法的 <code>Circle</code> 对象。</p><p>遍历这个数组的元素时，不需要知道也无需关心元素是 <code>Circle</code> 对象还是 <code>Ellipse</code> 对象。不过，需要密切关注的是，在数组的元素上调用 <code>area()</code> 方法是否能得到正确的值。也就是说，如果是椭圆对象就不能使用计算圆面积的公式。</p><p>我们真正希望的是，计算面积时对象能“做正确的事”：<code>Circle</code> 对象使用自己的方式计算，<code>Ellipse</code> 对象使用对椭圆来说正确的方式计算。</p><p>这样理解，就不会对 Java 使用不同的方式处理方法覆盖和字段遮盖感到奇怪了。</p><h4 id="虚拟方法查找">虚拟方法查找</h4><p>如果一个 <code>Circle[]</code> 类型的数组保存的是 <code>Circle</code> 和 <code>Ellipse</code> 对象，那么编译器怎么知道要在具体的元素上调用 <code>Circle</code> 类还是 <code>Ellipse</code> 类的 <code>area()</code> 方法呢？事实上，源码编译器在编译时并不知道要调用哪个方法。</p><p>不过，javac 生成的字节码会在运行时使用“虚拟方法查找”（virtual method lookup）。解释器运行代码时，会查找适用于数组中各个对象的 <code>area()</code> 方法。即，解释器解释表达式<code>o.area()</code> 时，会检查变量 <code>o</code> 引用的对象的真正运行时类型，然后找到适用于这个类型的<code>area()</code> 方法。</p><p>JVM 不会直接使用关联在变量 <code>o</code> 表示的静态类型身上的 <code>area()</code> 方法，如果这么做，前面详述的方法覆盖机制就不成立了。Java 的实例方法默认使用虚拟查找。之后会详细介绍编译时和运行时类型，以及它们对虚拟方法查找的影响。</p><h4 id="调用被覆盖的方法">调用被覆盖的方法</h4><p>我们已经说明了方法覆盖和字段遮盖之间的重要区别。然而，调用被覆盖的方法的 Java 句法和访问被遮盖的字段的句法十分类似——都使用 <code>super</code> 关键字。如下述代码所示：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">A</span> <span class="token punctuation">&#123;</span>   <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>                <span class="token comment">// 被子类B遮盖的实例字段 </span>  <span class="token keyword">int</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> i<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>     <span class="token comment">// 被子类B覆盖的实例方法</span><span class="token punctuation">&#125;</span>  <span class="token keyword">class</span> <span class="token class-name">B</span> <span class="token keyword">extends</span> <span class="token class-name">A</span> <span class="token punctuation">&#123;</span>   <span class="token keyword">int</span> i<span class="token punctuation">;</span>                    <span class="token comment">// 这个字段遮盖A类的字段i </span>  <span class="token keyword">int</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                 <span class="token comment">// 这个方法覆盖A类的方法f() </span>    i <span class="token operator">=</span> <span class="token keyword">super</span><span class="token punctuation">.</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>      <span class="token comment">// 可以像这样读取A.i的值 </span>    <span class="token keyword">return</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> i<span class="token punctuation">;</span> <span class="token comment">// 可以像这样调用A.f() </span>  <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>前面说过，使用 <code>super</code> 引用被遮盖的字段时，相当于把 <code>this</code> 校正为超类类型，然后通过超类类型访问字段。不过，使用 <code>super</code> 调用被覆盖的方法和校正 <code>this</code> 引用不是一回事。也就是说，在上述代码中，表达式 <code>super.f()</code> 和 <code>((A)this).f()</code> 的作用不一样。</p><p>解释器使用 <code>super</code> 句法调用实例方法时，会执行一种修改过的虚拟方法查找。第一步和常规的虚拟方法查找一样，确定调用方法的对象属于哪个类。正常情况下，运行时会在这个类中寻找对应的方法定义。但是，使用 <code>super</code> 句法调用方法时，先在这个类的超类中查找。如果超类直接实现了这个方法，那就调用这个方法。如果超类继承了这个方法，那就调用继承的方法。</p><p>注意，<code>super</code> 关键字调用的是方法的直接覆盖版本。假设 A 类有个子类 B，B 类有个子类C，而且这三个类都定义了同一个方法 <code>f()</code>。在 <code>C.f()</code> 方法中使用 <code>super.f()</code> 可以调用方法 <code>B.f()</code>，因为 <code>C.f()</code> 直接覆盖了 <code>B.f()</code>。但是，<code>C.f()</code> 不能直接调用 <code>A.f()</code>，因为 <code>super.super.f()</code> 不是合法的 Java 句法。当然，如果 <code>C.f()</code> 调用了 <code>B.f()</code>，有合理的理由认为，<code>B.f()</code> 可能会调用 <code>A.f()</code>。</p><p>使用被覆盖的方法时，这种链式调用相当常见。覆盖方法是增强方法功能，但不完全取代这个方法的一种方式。</p><blockquote><p>别把调用被覆盖方法的 <code>super</code> 和构造方法中调用超类构造方法的 <code>super()</code> 搞混了。虽然二者使用的关键字相同，但却是两种完全不同的句法。具体而言，可以在类中的任何位置使用 <code>super</code> 调用超类中被覆盖的方法，但是只能在构造方法的第一个语句中使用 <code>super()</code> 调用超类的构造方法。</p></blockquote><p>还有一点很重要，即记住，只能在覆盖某个方法的类内部使用 <code>super</code> 调用被覆盖的方法。假如 <code>e</code> 引用的是一个 <code>Ellipse</code> 对象，那么无法在 <code>e</code> 上调用 <code>Circle</code> 类中定义的 <code>area()</code> 方法。</p><h2 id="数据隐藏和封装">数据隐藏和封装</h2><p>类由一些数据和方法组成。目前，我们尚未说明的最重要的面向对象技术之一是，把数据隐藏在类中，只能通过方法获取。这种技术叫作<strong>封装</strong>（encapsulation），因为它把数据（和内部方法）安全地密封在类这个“容器”中，只能由可信的用户（即这个类中的方法）访问。</p><p>为什么要这么做呢？最重要的原因是，隐藏类的内部实现细节。如果避免让程序员依赖这些细节，你就可以放心地修改实现，而无需担心会破坏使用这个类的现有代码。</p><blockquote><p>你应该始终封装自己的代码。如果没有封装好，那么几乎无法推知并最终确认代码是否正确，尤其是在多线程环境中（而基本上所有 Java 程序都运行在多线程环境中）。</p></blockquote><p>使用封装的另一个原因是保护类，避免有意或无意做了糊涂事。类中经常包含一些相互依赖的字段，而且这些字段的状态必须始终如一。如果允许程序员（包括你自己）直接操作这些字段，修改某个字段后可能不会修改重要的相关字段，那么类的状态就前后不一致了。然而，如果必须调用方法才能修改字段，那么这个方法可以做一切所需的措施，确保状态一致。类似地，如果类中定义的某些方法仅供内部使用，隐藏这些方法能避免这个类的用户调用这些方法。</p><p>封装还可以这样理解：把类的数据都隐藏后，方法就是在这个类的对象上能执行的唯一一种可能的操作。</p><p>只要小心测试和调试方法，就可以认为类能按预期的方式运行。然而，如果类的所有字段都可以直接操作，那么要测试的可能性根本数不完。</p><p>隐藏类的字段和方法还有一些次要的原因。</p><ul><li>如果内部字段和方法在外部可见，会弄乱类的 API。让可见的字段尽量少，可以保持类的整洁，从而更易于使用和理解。</li><li>如果方法对类的使用者可见，就必须为其编写文档。把方法隐藏起来，可以节省时间和精力。</li></ul><h3 id="访问控制">访问控制</h3><p>Java 定义了一些访问控制规则，可以禁止类的成员在类外部使用。 <code>public</code> 关键字，连同 <code>protected</code>和 <code>private</code>（还有一个特殊的），是访问控制修饰符，为字段或方法指定访问规则。</p><h4 id="访问包">访问包</h4><p>Java 语言不直接支持包的访问控制。访问控制一般在类和类的成员这些层级完成</p><h4 id="访问类">访问类</h4><p>默认情况下，顶层类在定义它的包中可以访问。不过，如果顶层类声明为 <code>public</code>，那么在任何地方都能访问。</p><h4 id="访问成员">访问成员</h4><p>类的成员在类的主体里始终可以访问。默认情况下，在定义这个类的包中也可以访问成员。这种默认的访问等级一般叫作包访问。这只是四个可用的访问等级中的一个。其他三个等级使用 <code>public</code>、<code>protected</code> 和 <code>private</code> 修饰符定义。下面是使用这三个修饰符的示例代码：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Laundromat</span> <span class="token punctuation">&#123;</span>      <span class="token comment">// 所有人都可以使用这个类 </span>  <span class="token keyword">private</span> <span class="token class-name">Laundry</span><span class="token punctuation">[</span><span class="token punctuation">]</span> dirty<span class="token punctuation">;</span>     <span class="token comment">// 不能使用这个内部字段 </span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">wash</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">&#125;</span>   <span class="token comment">// 但能使用这两个公开的方法 </span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">dry</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">&#125;</span>    <span class="token comment">// 处理内部字段 </span>  <span class="token comment">// 子类可能会想调整这个字段 </span>  <span class="token keyword">protected</span> <span class="token keyword">int</span> temperature<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>下述访问规则适用于类的成员：</p><ul><li>类中的所有字段和方法在类的主体里始终可以使用。</li><li>如果类的成员使用 <code>public</code> 修饰符声明，那么可以在能访问这个类的任何地方访问这个成员。这是限制最松的访问控制类型。</li><li>如果类的成员声明为 <code>private</code>，那么除了在类内部之外，其他地方都不能访问这个成员。这是限制最严的访问控制类型。</li><li>如果类的成员声明为 <code>protected</code>，那么包里的所有类都能访问这个成员（等同于默认的包访问规则），而且在这个类的任何子类的主体中也能访问这个成员，而不管子类在哪个包中定义。</li><li>如果声明类的成员时没使用任何修饰符，那么使用默认的访问规则（有时叫包访问），包中的所有类都能访问这个成员，但在包外部不能访问。</li></ul><blockquote><p>默认的访问规则比 <code>protected</code> 严格，因为默认规则不允许在包外部的子类中访问成员。</p></blockquote><p>使用 <code>protected</code> 修饰的成员时要格外小心。假设 A 类使用 <code>protected</code> 声明了一个字段 x，而且在另一个包中定义的 B 类继承 A 类（重点是 B 类在另一包中定义）。因此，B 类继承了这个 <code>protected</code> 声明的字段 x，那么，在 B 类的代码中可以访问当前实例的这个字段，而且引用 B 类实例的代码也能访问这个字段。但是，这并不意味着在 B 类的代码中能读取任何一个 A 类实例的受保护字段。</p><p>下面通过代码讲解这个语言细节。A 类的定义如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">javanut6<span class="token punctuation">.</span>ch03</span><span class="token punctuation">;</span>  <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">A</span> <span class="token punctuation">&#123;</span>     <span class="token keyword">protected</span> <span class="token keyword">final</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>      <span class="token keyword">public</span> <span class="token class-name">A</span><span class="token punctuation">(</span><span class="token class-name">String</span> named<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>         name <span class="token operator">=</span> named<span class="token punctuation">;</span>     <span class="token punctuation">&#125;</span>      <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>         <span class="token keyword">return</span> name<span class="token punctuation">;</span>     <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>B 类的定义如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">javanut6<span class="token punctuation">.</span>ch03<span class="token punctuation">.</span>different</span><span class="token punctuation">;</span>  <span class="token keyword">import</span> <span class="token namespace">javanut6<span class="token punctuation">.</span>ch03<span class="token punctuation">.</span></span><span class="token class-name">A</span><span class="token punctuation">;</span>  <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">B</span> <span class="token keyword">extends</span> <span class="token class-name">A</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">public</span> <span class="token class-name">B</span><span class="token punctuation">(</span><span class="token class-name">String</span> named<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>         <span class="token keyword">super</span><span class="token punctuation">(</span>named<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">&#125;</span>      <span class="token annotation punctuation">@Override</span>     <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>         <span class="token keyword">return</span> <span class="token string">"B: "</span> <span class="token operator">+</span> name<span class="token punctuation">;</span>     <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>Java 的包不能“嵌套”，所以 <code>javanut6.ch03.different</code> 和 <code>javanut6.ch03</code>是不同的包。<code>javanut6.ch03.different</code> 不以任何方式包含在 <code>javanut6.ch03</code> 中，也和 <code>javanut6.ch03</code> 没有任何关系。</p></blockquote><p>可是，如果我们试图把下面这个新方法添加到 B 类中，会导致编译出错，因为 B 类的实例无法访问任何一个 A 类的实例：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">examine</span><span class="token punctuation">(</span><span class="token class-name">A</span> a<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>     <span class="token keyword">return</span> <span class="token string">"B sees: "</span> <span class="token operator">+</span> a<span class="token punctuation">.</span>name<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>如果把这个方法改成：</p><pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">public String examine(B b) &#123;     return &quot;B sees another B: &quot; + b.name; &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>就能编译通过，因为同一类型的多个实例可以访问各自的 <code>protected</code> 字段。当然，如果 B 类和 A 类在同一包中，那么任何一个 B 类的实例都能访问任何一个 A 类实例的全部受保护字段，因为使用 <code>protected</code> 声明的字段对同一个包中的每个类都可见。</p><h4 id="访问控制和继承">访问控制和继承</h4><p>Java 规范规定：</p><ul><li>子类继承超类中所有可以访问的实例字段和实例方法；</li><li>如果子类和超类在同一个包中定义，那么子类继承所有没使用 <code>private</code> 声明的实例字段和方法；</li><li>如果子类在其他包中定义，那么它继承所有使用 <code>protected</code> 和 <code>public</code> 声明的实例字段和方法；</li><li>使用 <code>private</code> 声明的字段和方法绝不会被继承；类字段和类方法也一样；</li><li>构造方法不会被继承（而是链在一起调用）。</li></ul><p>不过，有些程序员会对“子类不继承超类中不可访问的字段和方法”感到困惑。这似乎暗示了，创建子类的实例时不会为超类中使用 private 声明的字段分配内存。然而，这不是上述规定想表述的。</p><blockquote><p>其实，子类的每个实例都包含一个完整的超类实例，其中包括所有不可访问的字段和方法。</p></blockquote><p>某些成员可能无法访问，这似乎和类的成员在类的主体中始终可以访问相矛盾。为了避免误解，我们要使用“继承的成员”表示那些可以访问的超类成员。</p><p>那么，关于成员访问性的正确表述应该是：“所有继承的成员和所有在类中定义的成员都是可以访问的。”这句话还可以换种方式说：</p><ul><li>类继承超类的所有实例字段和实例方法（但不继承构造方法）；</li><li>在类的主体中始终可以访问这个类定义的所有字段和方法，而且还可以访问继承自超类的可访问的字段和方法。</li></ul><h4 id="成员访问规则总结">成员访问规则总结</h4><table><thead><tr><th>能否访问</th><th>公开</th><th>受保护</th><th>默认</th><th>私有</th></tr></thead><tbody><tr><td>定义成员的类</td><td>是</td><td>是</td><td>是</td><td>是</td></tr><tr><td>同一个包中的类</td><td>是</td><td>是</td><td>是</td><td>否</td></tr><tr><td>不同包中的子类</td><td>是</td><td>是</td><td>否</td><td>否</td></tr><tr><td>不同的包，也不是子类</td><td>是</td><td>否</td><td>否</td><td>否</td></tr></tbody></table><p>下面是一些使用可见性修饰符的经验法则。</p><ul><li>只使用 <code>public</code> 声明组成类的公开 API 的方法和常量。使用 <code>public</code> 声明的字段只能是常量和不能修改的对象，而且必须同时使用 <code>final</code> 声明。</li><li>使用 <code>protected</code> 声明大多数使用这个类的程序员不会用到的字段和方法，但在其他包中定义子类时可能会用到。</li><li>如果字段和方法供类的内部实现细节使用，但是同一个包中协作的类也要使用，那么就使用默认的包可见性。</li><li>使用 <code>private</code> 声明只在类内部使用，在其他地方都要隐藏的字段和方法。</li></ul><blockquote><p>严格来说，使用 <code>protected</code> 声明的成员是类公开 API 的一部分，必须为其编写文档，而且不能轻易修改，以防破坏依赖这些成员的代码。</p></blockquote><p>如果不确定该使用 <code>protected</code>还是 <code>private</code> ，那么先使用 <code>private</code>。如果太过严格，可以稍微放松访问限制（如果是字段的话，还可以提供访问器方法）。设计 API 时这么做尤其重要，因为提高访问限制是不向后兼容的改动，可能会破坏依赖成员访问性的代码。</p><h3 id="数据访问器方法">数据访问器方法</h3><p>在 <code>Circle</code> 类那个示例中，我们使用 <code>public</code> 声明表示圆半径的字段。<code>Circle</code> 类可能有很好的理由让这个字段可以公开访问；这个类很简单，字段之间不相互依赖。但是，当前实现的 <code>Circle</code> 类允许对象的半径为负数，而半径为负数的圆肯定不存在。可是，只要半径存储在声明为 <code>public</code> 的字段中，任何程序员都能把这个字段的值设为任何想要的值，而不管这个值有多么不合理。唯一的办法是限制程序员，不让他们直接访问这个字段，然后定义<code>public</code> 方法，间接访问这个字段。提供 <code>public</code> 方法读写字段和把字段本身声明为 <code>public</code>不是一回事。目前而言，二者的区别是，方法可以检查错误。</p><p>例如，我们或许不想让 <code>Circle</code> 对象的半径使用负数——负数显然不合理，但目前的实现没有阻止这么做。以下展示了使用数据隐藏和封装技术定义的 <code>Circle</code> 类，避免把半径设为负数。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">shapes</span><span class="token punctuation">;</span>        <span class="token comment">// 为这个类指定一个包 </span> <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Circle</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 这个类还使用public声明 </span>  <span class="token comment">// 这是通用的常量，所以要保证声明为public </span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">double</span> PI <span class="token operator">=</span> <span class="token number">3.14159</span><span class="token punctuation">;</span>     <span class="token keyword">protected</span> <span class="token keyword">double</span> r<span class="token punctuation">;</span>  <span class="token comment">// 半径被隐藏了，但在子类中可见 </span>   <span class="token comment">// 限制半径取值的方法 </span>  <span class="token comment">// 这是子类可能感兴趣的实现细节 </span>  <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">checkRadius</span><span class="token punctuation">(</span><span class="token keyword">double</span> radius<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>     <span class="token keyword">if</span> <span class="token punctuation">(</span>radius <span class="token operator">&lt;</span> <span class="token number">0.0</span><span class="token punctuation">)</span>       <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">"radius may not be negative."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span>    <span class="token comment">// 非默认的构造方法 </span>  <span class="token keyword">public</span> <span class="token class-name">Circle</span><span class="token punctuation">(</span><span class="token keyword">double</span> r<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token function">checkRadius</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">this</span><span class="token punctuation">.</span>r <span class="token operator">=</span> r<span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span>    <span class="token comment">// 公开的数据访问器方法 </span>  <span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">getRadius</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> r<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>   <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setRadius</span><span class="token punctuation">(</span><span class="token keyword">double</span> r<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>     <span class="token function">checkRadius</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">this</span><span class="token punctuation">.</span>r <span class="token operator">=</span> r<span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span>    <span class="token comment">// 操作实例字段的方法 </span>  <span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">area</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> PI <span class="token operator">*</span> r <span class="token operator">*</span> r<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>   <span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">circumference</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> <span class="token number">2</span> <span class="token operator">*</span> PI <span class="token operator">*</span> r<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>Circle</code> 类的这个版本使用 <code>protected</code> 声明 <code>r</code> 字段，还定义了访问器方法 <code>getRadius()</code> 和<code>setRadius()</code>，用于读写这个字段的值，而且限制半径不能为负数。<code>r</code> 字段使用 <code>protected</code>声明，所以可以在子类中直接（且高效地）访问。</p><p>我们在一个名为 <code>shapes</code> 的包中定义 <code>Circle</code> 类。因为 <code>r</code> 字段使用 <code>protected</code> 声明，所以<code>shapes</code> 包中的任何其他类都能直接访问这个字段，而且能把它设为任何值。这里假设<code>shapes</code> 包中的所有类都由同一个作者或者协作的多个作者编写，而且包中的类相互信任，不会滥用拥有的访问权限影响彼此的实现细节。</p><p>最后，限制半径不能使用负数的代码在一个使用 <code>protected</code> 声明的方法中，这个方法是<code>checkRadius()</code>。虽然 <code>Circle</code> 类的用户无法调用这个方法，但这个类的子类可以调用，而且如果想修改对半径的限制，还可以覆盖这个方法。</p><blockquote><p>在 Java 中，数据访问器方法的命名有个通用约定，即以“get”和“set”开头。但是，如果要访问的字段是 boolean 类型，那么读取字段的方法使用的名称可能会以“is”开头。例如，名为 readable 的 boolean 类型字段对应的访问器方法是 <code>isReadable()</code> 而不是 <code>getReadable()</code>。</p></blockquote><h2 id="抽象类和方法">抽象类和方法</h2><p>我们把 <code>Circle</code> 类声明为 <code>shapes</code> 包的一部分。假设我们计划实现多个表示形状的类：Rectangle、Square、Ellipse、Triangle 等。我们可以在这些表示形状的类中定义两个基本方法：<code>area()</code> 和 <code>circumference()</code>。那么，为了能方便处理由形状组成的数组，这些表示形状的类最好有个共同的超类 <code>Shape</code>。这样组织类层次结构的话，每个形状对象，不管具体表示的是什么形状，都能赋予类型为 <code>Shape</code> 的变量、字段或数组元素。我们想在 <code>Shape</code> 类中封装所有形状共用的功能（例如，<code>area()</code> 和 <code>circumference()</code> 方法）。但是，通用的 <code>Shape</code> 类不表示任何类型的形状，所以不能为这些方法定义有用的实现。Java使用抽象方法解决这种问题。</p><p>Java 允许使用 <code>abstract</code> 修饰符声明方法，此时只定义方法但不实现方法。<code>abstract</code> 修饰的方法没有主体，只有一个签名和一个分号。以下是 <code>abstract</code> 方法和这些方法所在的<code>abstract</code> 类相关的规则。</p><ul><li><p>只要类中有一个 <code>abstract</code> 方法，那么这个类本身就自动成为 <code>abstract</code> 类，而且必须声明为 <code>abstract</code> 类，否则会导致编译出错。</p></li><li><p><code>abstract</code> 类无法实例化。</p></li><li><p><code>abstract</code> 类的子类必须覆盖超类的每个 <code>abstract</code> 方法并且把这些方法全部实现（即提供方法主体），才能实例化。这种类一般叫作具体子类（concrete subclass），目的是强调它不是抽象类。</p></li><li><p>如果 <code>abstract</code> 类的子类没有实现继承的所有 <code>abstract</code> 方法，那么这个子类还是抽象类，而且必须使用 <code>abstract</code> 声明。</p></li><li><p>使用 <code>static</code>、<code>private</code> 和 <code>final</code> 声明的方法不能是抽象方法，因为这三种方法在子类中不能覆盖。类似地，<code>final</code> 类中不能有任何 <code>abstract</code> 方法。</p></li><li><p>就算类中没有 <code>abstract</code> 方法，这个类也能声明为 <code>abstract</code>。使用这种方式声明的<code>abstract</code> 类表明实现的不完整，要交给子类实现。这种类不能实例化。</p></li></ul><p>下 面 通 过 一 个 示 例 说 明 这 些 规 则 的 运 作 方 式。 如 果 定 义 <code>Shape</code> 类 时 把 <code>area()</code> 和<code>circumference()</code> 声明为 <code>abstract</code> 方法，那么 <code>Shape</code> 的子类必须实现这两个方法才能实例化。也就是说，每个 <code>Shape</code> 对象都要确保实现了这两个方法。以下示例展示了如何编写代码。在这段代码中，定义了一个抽象的 <code>Shape</code> 类和两个具体子类。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Shape</span> <span class="token punctuation">&#123;</span>   <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">double</span> <span class="token function">area</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                      <span class="token comment">// 两个抽象方法 </span>  <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">double</span> <span class="token function">circumference</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token comment">// 注意，没有主体，只有分号 </span><span class="token punctuation">&#125;</span>  <span class="token keyword">class</span> <span class="token class-name">Circle</span> <span class="token keyword">extends</span> <span class="token class-name">Shape</span> <span class="token punctuation">&#123;</span>   <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">double</span> PI <span class="token operator">=</span> <span class="token number">3.14159265358979323846</span><span class="token punctuation">;</span>   <span class="token keyword">protected</span> <span class="token keyword">double</span> r<span class="token punctuation">;</span>                                 <span class="token comment">// 实例字段 </span>  <span class="token keyword">public</span> <span class="token class-name">Circle</span><span class="token punctuation">(</span><span class="token keyword">double</span> r<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>r <span class="token operator">=</span> r<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>             <span class="token comment">// 构造方法 </span>  <span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">getRadius</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> r<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>             <span class="token comment">// 访问器 </span>  <span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">area</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> PI<span class="token operator">*</span>r<span class="token operator">*</span>r<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>             <span class="token comment">// 实现超类中的 </span>  <span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">circumference</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> <span class="token number">2</span><span class="token operator">*</span>PI<span class="token operator">*</span>r<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>    <span class="token comment">// 两个抽象方法 </span><span class="token punctuation">&#125;</span>  <span class="token keyword">class</span> <span class="token class-name">Rectangle</span> <span class="token keyword">extends</span> <span class="token class-name">Shape</span> <span class="token punctuation">&#123;</span>   <span class="token keyword">protected</span> <span class="token keyword">double</span> w<span class="token punctuation">,</span> h<span class="token punctuation">;</span>                              <span class="token comment">// 实例字段 </span>  <span class="token keyword">public</span> <span class="token class-name">Rectangle</span><span class="token punctuation">(</span><span class="token keyword">double</span> w<span class="token punctuation">,</span> <span class="token keyword">double</span> h<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>              <span class="token comment">// 构造方法 </span>    <span class="token keyword">this</span><span class="token punctuation">.</span>w <span class="token operator">=</span> w<span class="token punctuation">;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>h <span class="token operator">=</span> h<span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span>   <span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">getWidth</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> w<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>              <span class="token comment">// 访问器方法 </span>  <span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">getHeight</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> h<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>             <span class="token comment">// 另一个访问器 </span>  <span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">area</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> w<span class="token operator">*</span>h<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>                <span class="token comment">// 实现超类中的 </span>  <span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">circumference</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> <span class="token number">2</span><span class="token operator">*</span><span class="token punctuation">(</span>w <span class="token operator">+</span> h<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span> <span class="token comment">// 两个抽象方法 </span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Shape 类中每个抽象方法的括号后面都是分号，没有花括号，也没定义方法的主体。使用以上示例中定义的这几个类可以编写如下的代码：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Shape</span><span class="token punctuation">[</span><span class="token punctuation">]</span> shapes <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Shape</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>       <span class="token comment">// 创建一个保存形状的数组 </span>shapes<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Circle</span><span class="token punctuation">(</span><span class="token number">2.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">// 填充这个数组 </span>shapes<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Rectangle</span><span class="token punctuation">(</span><span class="token number">1.0</span><span class="token punctuation">,</span> <span class="token number">3.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> shapes<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Rectangle</span><span class="token punctuation">(</span><span class="token number">4.0</span><span class="token punctuation">,</span> <span class="token number">2.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">double</span> totalArea <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> shapes<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>     totalArea <span class="token operator">+=</span> shapes<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">area</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// 计算这些形状的面积</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>有两点要注意。</p><ul><li>Shape 类的子类对象可以赋值给 Shape 类型数组中的元素，无需校正。这又是一个放大转换引用类型的例子。</li><li>即便 Shape 类没有定义 <code>area()</code> 和 <code>circumference()</code> 方法的主体，各个 Shape 对象还是能调用这两个方法。调用这两个方法时，使用虚拟方法查找技术找到要调用的方法。因此，圆的面积使用 <code>Circle</code> 类中定义的方法计算，矩形的面积使用 <code>Rectangle</code> 类中定义的方法计算。</li></ul><h2 id="转换引用类型">转换引用类型</h2><p>对象可以在不同的引用类型之间转换。和基本类型一样，引用类型转换可以是放大转换（编译器自动完成），也可以是需要校正的缩小转换（或许运行时还要检查）。要想理解引用类型的转换，必须理解引用类型组成的层次结构，这个体系叫作<strong>类层次结构</strong>。</p><p>每个 Java 引用类型都扩展其他类型，被扩展的类型是这个类型的超类。类型继承超类的字段和方法，然后定义属于自己的一些额外的字段和方法。在 Java 中，类层次结构的根是一个特殊的类，名为 <code>Object</code>。所有 Java 类都直接或间接地扩展 <code>Object</code> 类。<code>Object</code> 类定义了一些特殊的方法，所有对象都能继承（或覆盖）这些方法。</p><p>简单理解类层次结构之后，我们可以定义引用类型的转换规则了。</p><ul><li><p>对象不能转换成不相关的类型。例如，就算使用校正运算符，Java 编译器也不允许把<code>String</code> 对象转换成 <code>Point</code> 对象。</p></li><li><p>对象可以转换成超类类型，或者任何祖先类类型。这是放大转换，因此不用校正。例如，<code>String</code> 对象可以赋值给 <code>Object</code> 类型的变量，或者传入期待 <code>Object</code> 类型参数的方法。</p></li><li><p>对象可以转换成子类类型，但这是缩小转换，需要校正。Java 编译器临时允许执行这种转换，但 Java 解释器在运行时会做检查，确保转换有效。根据程序的逻辑，确认对象的确是子类的实例后才会把对象校正成子类类型。否则，解释器会抛出<code>ClassCastException</code> 异常。例如，如果把一个 <code>String</code> 对象赋值给 <code>Object</code> 类型的变量，那么后面可以校正这个变量的值，再变回 <code>String</code> 类型。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Object</span> o <span class="token operator">=</span> <span class="token string">"string"</span><span class="token punctuation">;</span>   <span class="token comment">// 把String对象放大转换成Object类型 </span><span class="token class-name">String</span> s <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span> o<span class="token punctuation">;</span> <span class="token comment">// 程序后面再把这个Object对象缩小转换成String类型</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul><blockquote><p>没有执行转换操作，而是直接把对象当成超类的实例。这种行为有时称为里氏替换原则（Liskov substitution principle）</p></blockquote><p>数组是对象，而且有自己的一套转换规则。首先，任何数组都能放大转换成 <code>Object</code> 对象。带校正的缩小转换能把这个对象转换回数组。下面是一个示例：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 把数组放大转换成Object对象 </span><span class="token class-name">Object</span> o <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span> <span class="token comment">// 程序后面…… </span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> a <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> o<span class="token punctuation">;</span>  <span class="token comment">// 缩小转换回数组类型</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>除了能把数组转换成对象之外，如果两个数组的“基类型”是可以相互转换的引用类型，那么数组还能转换成另一个类型的数组。例如：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 这是一个字符串数组 </span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> strings <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">&#123;</span> <span class="token string">"hi"</span><span class="token punctuation">,</span> <span class="token string">"there"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span> <span class="token comment">// 可以放大转换成CharSequence[]类型 </span><span class="token comment">// 因为String类型可以放大转换成CharSequence类型 </span><span class="token class-name">CharSequence</span><span class="token punctuation">[</span><span class="token punctuation">]</span> sequences <span class="token operator">=</span> strings<span class="token punctuation">;</span> <span class="token comment">// 缩小转换回String[]类型需要校正 </span>strings <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> sequences<span class="token punctuation">;</span> <span class="token comment">// 这是一个由字符串数组组成的数组 </span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> s <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">&#123;</span> strings <span class="token punctuation">&#125;</span><span class="token punctuation">;</span> <span class="token comment">// 不能转换成CharSequence[]类型，因为String[]类型 </span><span class="token comment">// 不能转换成CharSequence类型：维数不匹配 </span> sequences <span class="token operator">=</span> s<span class="token punctuation">;</span> <span class="token comment">// 不会编译这行代码 </span><span class="token comment">// s可以转换成Object类型或Object[]类型，因为所有数组类型 </span><span class="token comment">// （包括String[]和String[][]类型）都能转换成Object类型 </span><span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> objects <span class="token operator">=</span> s<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意，这些数组转换规则只适用于由对象或数组组成的数组。基本类型的数组不能转换为任何其他数组类型，就算基本基类型之间能相互转换也不行：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 就算int类型能放大转换成double类型 </span><span class="token comment">// 也不能把int[]类型转换成double[]类型</span><span class="token comment">// 这行代码会导致编译出错 </span><span class="token keyword">double</span><span class="token punctuation">[</span><span class="token punctuation">]</span> data <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span> <span class="token comment">// 但是，这行代码是合法的，因为int[]类型能转换成Object类型 </span><span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> objects <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="修饰符总结">修饰符总结</h2><h3 id="访问控制修饰符">访问控制修饰符</h3><p>Java中，可以使用访问控制符来保护对类、变量、方法和构造方法的访问。Java 支持 4 种不同的访问权限。</p><ol><li><p><code>default</code> (即默认，什么也不写）：在同一包内可见，不使用任何修饰符。可以使用的对象包括类、接口、变量和方法。</p></li><li><p><code>private</code> ：在同一类内可见。可以使用的对象包括变量和方法。 <strong>注意：不能修饰类（外部类）</strong></p></li><li><p><code>public</code>：对所有类可见。可以使用的对象包括类、接口、变量和方法</p></li><li><p><code>protected</code>： 对同一包内的类和所有子类可见。可以使用的对象包括变量和方法。 <strong>注意：不能修饰类（外部类）</strong>。</p></li></ol><h3 id="非访问修饰符">非访问修饰符</h3><p>为了实现一些其他的功能，Java 也提供了许多非访问修饰符。</p><ol><li><p><code>static</code> 修饰符：用来修饰类方法和类变量。</p><p>静态变量：<code>static</code> 关键字用来声明独立于对象的静态变量，无论一个类实例化多少对象，它的静态变量只有一份拷贝。 静态变量也被称为类变量。局部变量不能被声明为 <code>static</code> 变量。</p><p>静态方法：<code>static</code> 关键字用来声明独立于对象的静态方法。静态方法不能使用类的非静态变量。静态方法从参数列表得到数据，然后计算这些数据。</p><blockquote><p>对类变量和方法的访问可以直接使用 classname.variablename 和 classname.methodname 的方式访问。</p></blockquote></li><li><p><code>final</code> 修饰符：用来修饰类、方法和变量，<code>final</code>修饰的类不能够被继承，修饰的方法不能被继承类重新定义，修饰的变量为常量，是不可修改的。</p><p><code>final</code> 变量：<code>final</code> 表示“最后的、最终的”含义，变量一旦赋值后，不能被重新赋值。被 <code>final</code> 修饰的实例变量必须显式指定初始值。<code>final</code> 修饰符通常和 <code>static</code> 修饰符一起使用来创建类常量</p></li><li><p><code>abstract</code> 修饰符：用来创建抽象类和抽象方法。抽象类：抽象类不能用来实例化对象，声明抽象类的唯一目的是为了将来对该类进行扩充。抽象类可以包含抽象方法和非抽象方法。方法可以通过使用保留词<code>void</code>作为返回类型来表明不会返回任何值。</p><p>一个类不能同时被 <code>abstract</code> 和 <code>final</code> 修饰。如果一个类包含抽象方法，那么该类一定要声明为抽象类，否则将出现编译错误。</p></li><li><p><code>synchronized</code>和 <code>volatile</code>修饰符，主要用于线程的编程。</p></li></ol><h3 id="总结">总结</h3><table><thead><tr><th>修饰符</th><th>用于</th><th>意义</th></tr></thead><tbody><tr><td><code>abstract</code></td><td>类</td><td>这个类不能实例化，而且可能包含未实现的方法</td></tr><tr><td></td><td>接口</td><td>所有接口都是抽象的。声明接口时这个修饰符是可选的</td></tr><tr><td></td><td>方法</td><td>这个方法没有主体，主体由子类提供。签名后面是一个分号。所在的类必须也是抽象的</td></tr><tr><td><code>default</code></td><td>方法</td><td>这个接口方法的实现是可选的。接口为不想实现这个方法的类提供了一个默认实现。</td></tr><tr><td><code>final</code></td><td>类</td><td>不能创建这个类的子类</td></tr><tr><td></td><td>方法</td><td>不能覆盖这个方法</td></tr><tr><td></td><td>字段</td><td>这个字段的值不能改变。<code>static final</code> 修饰的字段是编译时常量</td></tr><tr><td></td><td>变量</td><td>值不能改变的局部变量、方法参数或异常参数</td></tr><tr><td><code>native</code></td><td>方法</td><td>这个方法使用某种与平台无关的方式实现（经常使用 C 语言）。没有提供主体，签名后面是一个分号</td></tr><tr><td>无（包）</td><td>类</td><td>没声明为 public 的类只能在包中访问</td></tr><tr><td></td><td>接口</td><td>没声明为 public 的接口只能在包中访问</td></tr><tr><td></td><td>成员</td><td>没声明为 private、protected 或 public 的成员具有包可见性，只能在包中访问</td></tr><tr><td><code>private</code></td><td>成员</td><td>这个成员只在定义它的类中可以访问</td></tr><tr><td><code>protected</code></td><td>成员</td><td>这个成员只在定义它的包中和子类中可以访问</td></tr><tr><td><code>public</code></td><td>类</td><td>能访问所在包的地方都能访问这个类</td></tr><tr><td></td><td>接口</td><td>能访问所在包的地方都能访问这个接口</td></tr><tr><td></td><td>成员</td><td>能访问所在类的地方都能访问这个成员</td></tr><tr><td><code>strictfp</code></td><td>类</td><td>这个类中的所有方法都隐式声明为 <code>strictfp</code></td></tr><tr><td></td><td>方法</td><td>这个方法必须使用严格遵守 IEEE 754 标准的方式执行浮点运算。具体而言，所有数值，包括中间结果，都要使用 IEEEfloat 或 double 类型表示，而且不能利用本地平台浮点格式或硬件提供的额外精度或取值范围。这个修饰符极少使用</td></tr><tr><td><code>static</code></td><td>类</td><td>使用 <code>static</code> 声明的内部类是顶层类，而不是所在类的成员。</td></tr><tr><td></td><td>方法</td><td><code>static</code> 方法是类方法。不隐式传入 <code>this</code> 对象引用。可通过类名调用</td></tr><tr><td></td><td>字段</td><td><code>static</code> 字段是类字段。不管创建多少类实例，这个字段都只有一个实例。可通过类名访问</td></tr><tr><td></td><td>初始化程序</td><td>这个初始化程序在加载类时运行，而不是创建实例时运行</td></tr><tr><td><code>synchronized</code></td><td>方法</td><td>这个方法对类或实例执行非原子操作，所以必须小心，确保不能让两个线程同时修改类或实例。对 <code>static</code> 方法来说，执行方法之前先为类获取一个锁。对非 static 方法来说，会为具体的对象实例获取一个锁。</td></tr><tr><td><code>transient</code></td><td>字段</td><td>这个字段不是对象持久化状态的一部分，因此不会随对象一起序列化。在对象序列化时使用，参见 <code>java.io.ObjectOutputStream</code></td></tr><tr><td><code>volatile</code></td><td>字段</td><td>这个字段能被异步线程访问，因此必须对其做些特定的优化。这个修饰符有时可以替代 <code>synchronized</code>。</td></tr></tbody></table><h2 id="面向对象编程（OOP）">面向对象编程（OOP）</h2><ul><li>对管理人员，它实现了更快和更廉价的开发与维护过程。</li><li>对分析 与设计人员，建模处理变得更加简单，能生成清晰、易于维护的设计方案。</li><li>对程序员，对象模型显得如此高雅和浅显。</li></ul><p>基本特征：</p><ul><li>所有东西都是对象。可将对象想象成一种新型变量；它保存着数据，但可要求它对自身进行操作。理论上讲，可从要解决的问题身上提出所有概念性的组件，然后在程序中将其表达为一个对象。</li><li>程序是一大堆对象的组合；通过消息传递，各对象知道自己该做些什么。为了向对象发出请求，需向那个对象“发送一条消息”。更具体地讲，可将消息想象为一个调用请求，它调用的是从属于目标对象的一个子例程或函数。</li><li>每个对象都有自己的存储空间，可容纳其他对象。或者说，通过封装现有对象，可制作出新型对象。所以，尽管对象的概念非常简单，但在程序中却可达到任意高的复杂程度。</li><li>每个对象都有一种类型。根据语法，每个对象都是某个“类”的一个“实例”。其中，“类”（Class）是“类型”（Type）的同义词。一个类最重要的特征就是“能将什么消息发给它？”。</li><li>同一类所有对象都能接收相同的消息。由于类型为“圆”（Circle）的一个对象也属于类型为“形状”（Shape）的一个对象，所以一个圆完全能接收形状消息。这意味着可让程序代码统一指挥“形状”，令其自动控制所有符合“形状”描述的对象，其中自然包括“圆”。这一特性称为对象的“可替换性”，是OOP最重要的概念之一。</li></ul><h3 id="面向对象和面向过程的区别"><a href="https://github.com/Snailclimb/JavaGuide/blob/master/docs/java/Java%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86.md">面向对象和面向过程的区别</a></h3><ul><li><p><strong>面向过程</strong> ：<strong>面向过程性能比面向对象高。</strong> 因为类调用时需要实例化，开销比较大，比较消耗资源，所以当性能是最重要的考量因素的时候，比如单片机、嵌入式开发、Linux/Unix等一般采用面向过程开发。但是，<strong>面向过程没有面向对象易维护、易复用、易扩展。</strong></p></li><li><p><strong>面向对象</strong> ：<strong>面向对象易维护、易复用、易扩展。</strong> 因为面向对象有封装、继承、多态性的特性，所以可以设计出低耦合的系统，使系统更加灵活、更加易于维护。但是，<strong>面向对象性能比面向过程低</strong>。</p><blockquote><p>面向过程 ：面向过程性能比面向对象高。 因为类调用时需要实例化，开销比较大，比较消耗资源，所以当性能是最重要的考量因素的时候，比如单片机、嵌入式开发、Linux/Unix等一般采用面向过程开发。</p><p>这个并不是根本原因，面向过程也需要分配内存，计算内存偏移量，Java性能差的主要原因并不是因为它是面向对象语言，而是Java是半编译语言，最终的执行代码并不是可以直接被CPU执行的二进制机械码。</p><p>而面向过程语言大多都是直接编译成机械码在电脑上执行，并且其它一些面向过程的脚本语言性能也并不一定比Java好。</p></blockquote></li></ul><p>Java是一种面向对象的编程语言。面向对象编程，英文是Object-Oriented Programming，简称OOP。</p><p>那什么是面向对象编程？</p><p>和面向对象编程不同的，是面向过程编程。面向过程编程，是把模型分解成一步一步的过程。比如，老板告诉你，要编写一个TODO任务，必须按照以下步骤一步一步来：</p><ol><li>读取文件；</li><li>编写TODO；</li><li>保存文件。</li></ol><p>而面向对象编程，顾名思义，你得首先有个对象：</p><p>有了对象后，就可以和对象进行互动：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">GirlFriend</span> gf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GirlFriend</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>gf<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"Alice"</span><span class="token punctuation">;</span>gf<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">"flowers"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>因此，面向对象编程，是一种通过对象的方式，把现实世界映射到计算机模型的一种编程方法。</p><h2 id="内存的分配">内存的分配</h2><p>有六个地方可以保存数据：</p><ul><li>寄存器。这是最快的保存区域，因为它位于和其他所有保存方式不同的地方：处理器内部。然而，寄存器的数量十分有限，所以寄存器是根据需要由编译器分配。我们对此没有直接的控制权，也不可能在自己的程序里找到寄存器存在的任何踪迹</li><li>堆栈。驻留于常规 RAM（随机访问存储器）区域，但可通过它的“堆栈指针”获得处理的直接支持。堆栈指针若向下移，会创建新的内存；若向上移，则会释放那些内存。这是一种特别快、特别有效的数据保存方式，仅次于寄存器。创建程序时，Java编译器必须准确地知道堆栈内保存的所有数据的“长度”以及“存在时间”。这是由于它必须生成相应的代码，以便向上和向下移动指针。这一限制无疑影响了程序的灵活性，所以尽管有些 Java数据要保存在堆栈里——特别是对象句柄，但Java对象并不放到其中</li><li>堆。一种常规用途的内存池（也在 RAM区域），其中保存了Java对象。和堆栈不同，“内存堆”或“堆”（Heap）最吸引人的地方在于编译器不必知道要从堆里分配多少存储空间，也不必知道存储的数据要<br>在堆里停留多长的时间。因此，用堆保存数据时会得到更大的灵活性。要求创建一个对象时，只需用new命令编制相关的代码即可。执行这些代码时，会在堆里自动进行数据的保存。当然，为达到这种灵活性，必然会付出一定的代价：在堆里分配存储空间时会花掉更长的时间！</li><li>静态存储。这儿的“静态”（Static）是指“位于固定位置”（尽管也在 RAM里）。程序运行期间，静态存储的数据将随时等候调用。可用static关键字指出一个对象的特定元素是静态的。但 Java对象本身永远都不会置入静态存储空间。</li><li>常数存储。常数值通常直接置于程序代码内部。这样做是安全的，因为它们永远都不会改变。有的常数需要严格地保护，所以可考虑将它们置入只读存储器（ROM）。</li><li>非 RAM存储。若数据完全独立于一个程序之外，则程序不运行时仍可存在，并在程序的控制范围之外。其中两个最主要的例子便是“流式对象”和“固定对象”。对于流式对象，对象会变成字节流，通常会发给另一台机器。而对于固定对象，对象保存在磁盘中。即使程序中止运行，它们仍可保持自己的状态不变。对于这些类型的数据存储，一个特别有用的技巧就是它们能存在于其他媒体中。一旦需要，甚至能将它们恢复成普通的、基于RAM的对象。</li></ul><h2 id="面向对象基础">面向对象基础</h2><p>面向对象编程，是一种通过对象的方式，把现实世界映射到计算机模型的一种编程方法。</p><p>现实世界中，我们定义了“人”这种抽象概念，而具体的人则是“小明”、“小红”、“小军”等一个个具体的人。所以，“人”可以定义为一个类（class），而具体的人则是实例（instance）：</p><table><thead><tr><th style="text-align:left">现实世界</th><th style="text-align:left">计算机模型</th><th style="text-align:left">Java代码</th></tr></thead><tbody><tr><td style="text-align:left">人</td><td style="text-align:left">类 / class</td><td style="text-align:left"><code>class Person &#123; &#125;</code></td></tr><tr><td style="text-align:left">小明</td><td style="text-align:left">实例 / ming</td><td style="text-align:left"><code>Person ming = new Person()</code></td></tr><tr><td style="text-align:left">小红</td><td style="text-align:left">实例 / hong</td><td style="text-align:left"><code>Person hong = new Person()</code></td></tr><tr><td style="text-align:left">小军</td><td style="text-align:left">实例 / jun</td><td style="text-align:left"><code>Person jun = new Person()</code></td></tr></tbody></table><p>同样的，“书”也是一种抽象的概念，所以它是类，而《Java核心技术》、《Java编程思想》、《Java学习笔记》则是实例：</p><table><thead><tr><th style="text-align:left">现实世界</th><th style="text-align:left">计算机模型</th><th style="text-align:left">Java代码</th></tr></thead><tbody><tr><td style="text-align:left">书</td><td style="text-align:left">类 / class</td><td style="text-align:left"><code>class Book &#123; &#125;</code></td></tr><tr><td style="text-align:left">Java核心技术</td><td style="text-align:left">实例 / book1</td><td style="text-align:left"><code>Book book1 = new Book()</code></td></tr><tr><td style="text-align:left">Java编程思想</td><td style="text-align:left">实例 / book2</td><td style="text-align:left"><code>Book book2 = new Book()</code></td></tr><tr><td style="text-align:left">Java学习笔记</td><td style="text-align:left">实例 / book3</td><td style="text-align:left"><code>Book book3 = new Book()</code></td></tr></tbody></table><h4 id="class和instance">class和instance</h4><p>所以，只要理解了class和instance的概念，基本上就明白了什么是面向对象编程。</p><p>class是一种对象模版，它定义了如何创建实例，因此，class本身就是一种数据类型</p><p>而instance是对象实例，instance是根据class创建的实例，可以创建多个instance，每个instance类型相同，但各自属性可能不相同</p><h4 id="定义class">定义class</h4><p>在Java中，创建一个类，例如，给这个类命名为<code>Person</code>，就是定义一个<code>class</code>：</p><pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">class Person &#123;    public String name;    public int age;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>一个<code>class</code>可以包含多个字段（<code>field</code>），字段用来描述一个类的特征。上面的<code>Person</code>类，我们定义了两个字段，一个是<code>String</code>类型的字段，命名为<code>name</code>，一个是<code>int</code>类型的字段，命名为<code>age</code>。因此，通过<code>class</code>，把一组数据汇集到一个对象上，实现了数据封装。</p><p><code>public</code>是用来修饰字段的，它表示这个字段可以被外部访问。</p><p>我们再看另一个<code>Book</code>类的定义：</p><pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">class Book &#123;    public String name;    public String author;    public String isbn;    public double price;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="创建实例">创建实例</h4><p>定义了class，只是定义了对象模版，而要根据对象模版创建出真正的对象实例，必须用new操作符。</p><p>new操作符可以创建一个实例，然后，我们需要定义一个引用类型的变量来指向这个实例：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Person</span> ming <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>上述代码创建了一个Person类型的实例，并通过变量<code>ming</code>指向它。</p><p>注意区分<code>Person ming</code>是定义<code>Person</code>类型的变量<code>ming</code>，而<code>new Person()</code>是创建<code>Person</code>实例。</p><p>有了指向这个实例的变量，我们就可以通过这个变量来操作实例。访问实例变量可以用<code>变量.字段</code>，例如：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">ming<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"Xiao Ming"</span><span class="token punctuation">;</span> <span class="token comment">// 对字段name赋值</span>ming<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">12</span><span class="token punctuation">;</span> <span class="token comment">// 对字段age赋值</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>ming<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 访问字段name</span><span class="token class-name">Person</span> hong <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>hong<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"Xiao Hong"</span><span class="token punctuation">;</span>hong<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">15</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上述两个变量分别指向两个不同的实例，它们在内存中的结构如下：</p><pre class="line-numbers language-ascii" data-language="ascii"><code class="language-ascii">            ┌──────────────────┐ming ──────&gt;│Person instance   │            ├──────────────────┤            │name &#x3D; &quot;Xiao Ming&quot;│            │age &#x3D; 12          │            └──────────────────┘            ┌──────────────────┐hong ──────&gt;│Person instance   │            ├──────────────────┤            │name &#x3D; &quot;Xiao Hong&quot;│            │age &#x3D; 15          │            └──────────────────┘<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>两个<code>instance</code>拥有<code>class</code>定义的<code>name</code>和<code>age</code>字段，且各自都有一份独立的数据，互不干扰。</p><h2 id="方法的性质">方法的性质</h2><h4 id="方法的参数按值传递">方法的参数按值传递</h4><p>在方法中参数变量的使用方法和局部变量相同，唯一不同的是参数变量的初始值是由调用方提供的。方法处理的是参数的值，而非参数本身。这种方式产生的结果是在静态方法中改变一个参数变量的值对调用者没有影响。本书中我们一般不会修改参数变量。值传递也意味着数组参数将会是原数组的别名（见 1.1.5.4 节）——方法中使用的参数变量能够引用调用者的数组并改变其内容（只是不能改变原数组变量本身）。例如，Arrays.sort() 将能够改变通过参数传递的数组的内容，将其排序。</p><h4 id="方法名可以被重载">方法名可以被重载</h4><p>例如，Java 的 Math 包使用这种方法为所有的原始数值类型实现了Math.abs()、Math.min() 和 Math.max() 函数。重载的另一种常见用法是为函数定义两个版本，其中一个需要一个参数而另一个则为该参数提供一个默认值。</p><h4 id="方法只能返回一个值，但可以包含多个返回语句">方法只能返回一个值，但可以包含多个返回语句</h4><p>一个 Java 方法只能返回一个值，它的类型是方法签名中声明的类型。静态方法第一次执行到一条返回语句时控制权将会回到调用代码中。尽管可能存在多条返回语句，任何静态方法每次都只会返回一个值，即被执行的第一条返回语句的参数。</p><h4 id="方法可以产生副作用">方法可以产生副作用</h4><p>方法的返回值可以是 void，这表示该方法没有返回值。返回值为void 的静态函数不需要明确的返回语句，方法的最后一条语句执行完毕后控制权将会返回给调用方。我们称 void 类型的静态方法会产生副作用（接受输入、产生输出、修改数组或者改变系统状态）。例如，我们的程序中的静态方法 main() 的返回值就是 void，因为它的作用是向外输出。技术上来说，数学方法的返回值都不会是 void（Math.random() 虽然不接受参数但也有返回值）</p><h2 id="静态方法，-static关键字">静态方法， static关键字</h2><p>通常，我们创建类时会指出那个类的对象的外观与行为。除非用new创建那个类的一个对象，否则实际上并未得到任何东西。只有执行了 new后，才会正式生成数据存储空间，并可使用相应的方法。但在两种特殊的情形下，上述方法并不堪用。</p><ul><li>一种情形是只想用一个存储区域来保存一个特定的数据——无论要创建多少个对象，甚至根本不创建对象。</li><li>另一种情形是我们需要一个特殊的方法，它没有与这个类的任何对象关联。也就是说，即使没有创建对象，也需要一个能调用的方法。</li></ul><p>为满足这两方面的要求，可使用static（静态）关键字。</p><p>这些方法由出现在public或private关键词之后的static关键词标识。方法封装了由一系列语句所描述的运算。</p><p>方法需要参数（某种数据类型的值）并根据参数计算出某种数据类型的返回值（例如数学函数的结果）或者产生某种副作用（例如打印一个值）。</p><p><img src="http://img.whl123456.top/image/%E9%9D%99%E6%80%81%E6%96%B9%E6%B3%95%E8%A7%A3%E6%9E%90.png" alt="静态方法解析"></p><h4 id="典型静态方法的实现">典型静态方法的实现</h4><p>计算一个整数的绝对值</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">abs</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token operator">-</span>x<span class="token punctuation">;</span>    <span class="token keyword">else</span>       <span class="token keyword">return</span> x<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>计算一个浮点数的绝对值</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">double</span> <span class="token function">abs</span><span class="token punctuation">(</span><span class="token keyword">double</span> x<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>     <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">&lt;</span> <span class="token number">0.0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token operator">-</span>x<span class="token punctuation">;</span>    <span class="token keyword">else</span>         <span class="token keyword">return</span> x<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>判定一个数是否是素数</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">isPrime</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token class-name">N</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>     <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">N</span> <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> i<span class="token operator">*</span>i <span class="token operator">&lt;=</span> <span class="token class-name">N</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">N</span> <span class="token operator">%</span> i <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>计算平方根（牛顿迭代法）</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">double</span> <span class="token function">sqrt</span><span class="token punctuation">(</span><span class="token keyword">double</span> c<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>     <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token class-name">Double</span><span class="token punctuation">.</span><span class="token class-name">NaN</span><span class="token punctuation">;</span>    <span class="token keyword">double</span> err <span class="token operator">=</span> <span class="token number">1e-15</span><span class="token punctuation">;</span>    <span class="token keyword">double</span> t <span class="token operator">=</span> c<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span>t <span class="token operator">-</span> c<span class="token operator">/</span>t<span class="token punctuation">)</span> <span class="token operator">></span> err <span class="token operator">*</span> t<span class="token punctuation">)</span>        t <span class="token operator">=</span> <span class="token punctuation">(</span>c<span class="token operator">/</span>t <span class="token operator">+</span> t<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2.0</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> t<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>计算直角三角形的斜边</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">double</span> <span class="token function">hypotenuse</span><span class="token punctuation">(</span><span class="token keyword">double</span> a<span class="token punctuation">,</span> <span class="token keyword">double</span> b<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">sqrt</span><span class="token punctuation">(</span>a<span class="token operator">*</span>a <span class="token operator">+</span> b<span class="token operator">*</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>计算调和级数</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">double</span> <span class="token class-name">H</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token class-name">N</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>     <span class="token keyword">double</span> sum <span class="token operator">=</span> <span class="token number">0.0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token class-name">N</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        sum <span class="token operator">+=</span> <span class="token number">1.0</span> <span class="token operator">/</span> i<span class="token punctuation">;</span>    <span class="token keyword">return</span> sum<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>五十音图</title>
      <link href="2020/02/27/%E4%BA%94%E5%8D%81%E9%9F%B3%E5%9B%BE/"/>
      <url>2020/02/27/%E4%BA%94%E5%8D%81%E9%9F%B3%E5%9B%BE/</url>
      
        <content type="html"><![CDATA[<p>五十音图</p><hr><h2 id="五十音">五十音</h2><table><thead><tr><th>あ　ア（a）</th><th>い　イ（i）</th><th>う　ウ（u）</th><th>え　エ（e）</th><th>お　オ（o）</th></tr></thead><tbody><tr><td>か　カ（ka）</td><td>き　キ（ki）</td><td>く　ク（ku）</td><td>け　ケ（ke）</td><td>こ　コ（ko）</td></tr><tr><td>さ　サ（sa）</td><td>し　シ（shi）</td><td>す　ス（su）</td><td>せ　セ（se）</td><td>そ　ソ（so）</td></tr><tr><td>た　タ（ta）</td><td>ち　チ（chi）</td><td>つ　ツ（tsu）</td><td>て　テ（te）</td><td>と　ト（to）</td></tr><tr><td>な　ナ（na）</td><td>に　ニ（ni）</td><td>ぬ　ヌ（nu）</td><td>ね　ネ（ne）</td><td>の　ノ（no）</td></tr><tr><td>は　ハ（ha）</td><td>ひ　ヒ（hi）</td><td>ふ　フ（fu）</td><td>へ　ヘ（he）</td><td>ほ　ホ（ho）</td></tr><tr><td>ま　マ（ma）</td><td>み　ミ（mi）</td><td>む　ム（mu）</td><td>め　メ（me）</td><td>も　モ（mo）</td></tr><tr><td>や　ヤ（ya）</td><td></td><td>ゆ　ユ（yu）</td><td></td><td>よ　ヨ（yo）</td></tr><tr><td>ら　ラ（ra）</td><td>り　リ（ri）</td><td>る　ル（ru）</td><td>れ　レ（re）</td><td>ろ　ロ（ro）</td></tr><tr><td>わ　ワ（wa）</td><td></td><td></td><td></td><td>を　ヲ（o）</td></tr><tr><td>ん　ン（n）</td><td></td><td></td><td></td><td></td></tr></tbody></table><h2 id="浊音">浊音</h2><table><thead><tr><th>が　ガ（ga）</th><th>ぎ　ギ（gi）</th><th>ぐ　グ（gu）</th><th>げ　ゲ（ge）</th><th>ご　ゴ（go）</th></tr></thead><tbody><tr><td>ざ　ザ（za）</td><td>じ　ジ（ji）</td><td>ず　ズ（zu）</td><td>ぜ　ゼ（ze）</td><td>ぞ　ゾ（zo）</td></tr><tr><td>だ　ダ（da）</td><td>ぢ　ヂ（ji）</td><td>づ　ヅ（zu）</td><td>で　デ（ze）</td><td>ど　ド（do）</td></tr><tr><td>ば　バ（ba）</td><td>び　ビ（bi）</td><td>ぶ　ブ（bu）</td><td>べ　ベ（be）</td><td>ぼ　ボ（bo）</td></tr><tr><td>ぱ　パ（pa）</td><td>ぴ　ピ（pi）</td><td>ぷ　プ（pu）</td><td>ぺ　ペ（pe）</td><td>ぽ　ポ（po）</td></tr></tbody></table><h2 id="拗音">拗音</h2><table><thead><tr><th>きゃ　キャ（kya）</th><th>きゅ　キュ（kyu）</th><th>きょ　キョ（kyo）</th></tr></thead><tbody><tr><td>しゃ　シャ（sha）</td><td>しゅ　シュ（shu）</td><td>しょ　ショ（sho）</td></tr><tr><td>ちゃ　チャ（cha）</td><td>ちゅ　チュ（chu）</td><td>ちょ　チョ（cho）</td></tr><tr><td>にゃ　ニャ（nya）</td><td>にゃ　チャ（nyu）</td><td>にょ　ニョ（nyo）</td></tr><tr><td>ひゃ　ひゃ（hya）</td><td>ひゃ　ヒュ（hyu）</td><td>ひょ　ヒョ（gyo）</td></tr><tr><td>みゃ　ミャ（mya）</td><td>みゅ　ミュ（myu）</td><td>みょ　ミョ（myo）</td></tr><tr><td>りゃ　リャ（rya）</td><td>りゅ　リュ（ryu）</td><td>りょ　リョ（ryo）</td></tr><tr><td>ぎゃ　ギャ（gya）</td><td>ぎゅ　ギュ（gyu）</td><td>ぎょ　ギョ（gyo）</td></tr><tr><td>じゃ　ジャ（ja）</td><td>じゅ　ジュ（ju）</td><td>じょ　ジョ（jo）</td></tr><tr><td>びゃ　ビャ（bya）</td><td>びゅ　ビュ（byu）</td><td>びょ　ビョ（byo）</td></tr><tr><td>ぴゃ　ぴゃ（pya）</td><td>ぴゅ　ピュ（pyu）</td><td>ぴょ　ピョ（pyo）</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 日语 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 日语 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux学习笔记</title>
      <link href="2020/01/03/Linux%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>2020/01/03/Linux%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<p>用于记录Linux学习过程,基于CentOS</p><hr><h2 id="Linux简单介绍">Linux简单介绍</h2><p>Linux可划分为以下四个部分：</p><ul><li>Linux内核：主要负责系统内存管理、软件程序管理、硬件设备管理和文件系统管理四种功能</li><li>GNU工具：</li><li>图形化桌面环境</li><li>应用软件</li></ul><p><img src="http://img.whl123456.top/image/Linux.png" alt="Linux系统"></p><h3 id="内存管理系统">内存管理系统</h3><p>Linux内核不仅管理服务器上的可用物理内存，还可以创建和管理虚拟内存。</p><p>内核通过硬盘上的存储空间来实现虚拟内存，这块区域称为<strong>交换空间</strong>（swap space）。</p><p>内存存储单元按组划分成很多块，这些块称作页面（page）。内核将每个内存页面放在物理 内存或交换空间。然后，内核会维护一个内存页面表，指明哪些页面位于物理内存内，哪些页面被换到了磁盘上。</p><p>内核会记录哪些内存页面正在使用中，并自动把一段时间未访问的内存页面复制到交换空间区域（称为换出，swapping out）——即使还有可用内存。当程序要访问一个已被换出的内存页面时，内核必须从物理内存换出另外一个内存页面给它让出空间，然后从交换空间换入请求的内存页面。显然，这个过程要花费时间，拖慢运行中的进程。只要Linux系统在运行，为运行中的程序换出内存页面的过程就不会停歇。</p><h3 id="软件程序管理">软件程序管理</h3><p>Linux操作系统将运行中的程序称为<strong>进程</strong>。内核控制着Linux系统如何管理运行在系统上的所有进程。</p><p>内核创建了第一个进程（称为init进程）来启动系统上所有其他进程。</p><blockquote><p>脚本通过到/etc/init.d目录下的入口启动</p></blockquote><p>当内核启动时，它会将init进程加载到虚拟内存中。内核在启动任何其他进程时，都会在虚拟内存中给新进程分配一 块专有区域来存储该进程用到的数据和代码。</p><h3 id="硬件设备管理">硬件设备管理</h3><p>任何Linux系统需要与之通信的设备，都需要在内核代码中加入其驱动程序代码。驱动程序代码相当于应用程序和硬件设备的中间人，允许内核与设备之间交换数据。</p><p>在Linux内核中有两种方法用于插入设备驱动代码：</p><ul><li>编译进内核的设备驱动代码</li><li>可插入内核的设备驱动模块</li></ul><p>开发人员提出了内核模块的概念。它允许将驱动代码插入到运行中的内核而无需重新编译内 核。</p><p>Linux系统将硬件设备当成特殊的文件，称为设备文件。设备文件有3种分类：</p><ul><li>字符型设备文件</li><li>块设备文件</li><li>网络设备文件</li></ul><p>字符型设备文件是指处理数据时每次只能处理一个字符的设备。大多数类型的调制解调器和终端都是作为字符型设备文件创建的。</p><p>块设备文件是指处理数据时每次能处理大块数据的设备，比如硬盘。</p><p>网络设备文件是指采用数据包发送和接收数据的设备，包括各种网卡和一个特殊的回环设备。这个回环设备允许Linux系统使用常见的网络编程协议同自身通信。</p><p>Linux为系统上的每个设备都创建一种称为<strong>节点</strong>的特殊文件。与设备的所有通信都通过设备节点完成。每个节点都有唯一的数值对供Linux内核标识它。数值对包括一个主设备号和一个次设备号。类似的设备被划分到同样的主设备号下。次设备号用于标识主设备组下的某个特定设备。</p><h3 id="文件系统管理">文件系统管理</h3><p><img src="http://img.whl123456.top/image/image-20200611200821228.png" alt="Linux文件系统"></p><h2 id="注意事项">注意事项</h2><ul><li><p>Linux严格区分大小写</p></li><li><p>Linux中所有的内容以文件形式保存，包括硬件</p></li><li><p>Linux不靠扩展名区分文件类型，基于权限</p><blockquote><p>压缩包：.gz、.bz2、.tar.bz2、.tgz<br>二进制包：.rpm<br>脚本文件：.sh<br>配置文件：.conf</p></blockquote></li><li><p>设备需要挂载后才能使用</p></li><li><p>Linux使用正斜线（\）在文件路径中划分目录，反斜线（/）用来标志转义字符</p></li></ul><h2 id="Linux各目录的作用">Linux各目录的作用</h2><ul><li>/bin/：存放系统命令目录，所有用户都可以执行</li><li>/sbin/：只有root可以设置</li><li>/usr/bin/：存放与系统启动无关的命令，单用户下无法执行</li><li>/usr/sbin/：只有root可以设置</li><li>/boot/：系统启动目录，保存系统相关的文件</li><li>/dev/：设备保存位置</li><li>/etc/：配置文件保存位置</li><li>/home/：普通用户目录</li><li>/lib/：系统调用的函数库</li><li>/opt/：第三方安装的软件保存位置，习惯把软件放置到/usr/local/</li><li>/lost+found/：这个目录一般情况下是空的，当系统非法关机后，这里就存放了一些文件</li><li>/root/：该目录为系统管理员，也称作超级权限者的用户主目录。</li><li>/proc/：虚拟文件系统，设备状态信息，数据保存在内存中</li><li>/sys/：保存内核相关信息</li><li>/root/：超级用户</li><li>/srv/：服务数据目录</li><li>/tmp/：临时目录，可以清空</li><li>/usr/：系统软件资源目录</li><li>/var/：动态数据保存位置，日志，软件运行产生的文件</li></ul><h2 id="Linux常用命令">Linux常用命令</h2><p>命令格式：命令 [-选项]  [参数]</p><h3 id="目录处理">目录处理</h3><ol><li><p>显示目录文件：<code>ls</code></p><p>命令英文原意：list</p><ul><li><code>-a</code> 显示所有文件，包括隐藏文件</li><li><code>-l</code> 显示详情信息[h]人性化显示（可以直接使用<code>ll</code>）</li><li><code>-d</code> 查看目录属性</li><li><code>-i</code> 文件ID号</li></ul><blockquote><p>-rw-r–r–</p><p>第1个“-”文件类型包括：-二进制文件，d目录，l软连接文件</p><p>第2-4个所有者</p><p>第5-7个所属组</p><p>第8-10个其他人</p><p>r读、w写、x执行</p></blockquote></li><li><p>创建目录：<code>mkdir</code><br>命令英文原意：make directories</p><ul><li><code>-p</code> 递归创建</li></ul></li><li><p>切换目录：<code>cd</code></p><p>命令英文原意：change directory</p></li><li><p>查看当前目录：<code>pwd</code></p></li><li><p>删除空目录：<code>rmdir</code><br>命令英文原意：remove empty directories</p></li><li><p>复制文件或目录：<code>cp</code><br>命令英文原意：copy</p><ul><li><code>-rp</code>[原目录] [目标目录]</li><li><code>-r</code> 复制目录</li><li><code>-p</code> 保留文件属性</li></ul></li><li><p>剪切或改名文件：<code>mv</code><br>命令英文原意：move</p><ul><li>mv [原目录] [目标目录]</li></ul></li><li><p>删除文件：<code>rm</code><br>命令英文原意：remove</p><ul><li><code>-r</code> 删除目录</li><li><code>-f</code> 强制删除</li></ul></li></ol><h3 id="文件处理">文件处理</h3><ol><li>创建空文件：<code>touch</code></li><li>显示文件内容：<code>cat</code> ；<code>tac</code>（反向展示）[-n]</li><li>分页显示文件内容：more；less<ul><li>空格或f翻页</li><li>回车换行</li><li>q退出</li><li>less b向上翻页</li><li>less 查找n</li></ul></li><li>显示文件前几行：<code>head</code> [-n]指定行数</li><li>显示文件后几行：<code>tail</code> [-f] 查看动态变化[-n]</li></ol><h3 id="链接命令">链接命令</h3><p>生成链接文件：<code>ln</code>（link）[-s]创建软链接</p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>脚注测试页</title>
      <link href="2019/12/25/%E8%84%9A%E6%B3%A8%E6%B5%8B%E8%AF%95%E9%A1%B5/"/>
      <url>2019/12/25/%E8%84%9A%E6%B3%A8%E6%B5%8B%E8%AF%95%E9%A1%B5/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start">Quick Start</h2><h3 id="Create-a-new-post">Create a new post</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server">Run server</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a><br>使用 Markdown<sup class="footnote-ref"><a href="#fn1" id="fnref1">[1]</a></sup>可以效率的书写文档, 直接转换成 HTML, 你可以使用 Typora<sup class="footnote-ref"><a href="#fn2" id="fnref2">[2]</a></sup> 编辑器进行书写。</p><p>使用 Markdown<sup class="footnote-ref"><a href="#fn3" id="fnref3">[3]</a></sup>可以效率的书写文档, 直接转换成 HTML<sup class="footnote-ref"><a href="#fn4" id="fnref4">[4]</a></sup>, 你可以使用 Typora<sup class="footnote-ref"><a href="#fn5" id="fnref5">[5]</a></sup> 编辑器进行书写。</p><h3 id="Generate-static-files">Generate static files</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo generate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites">Deploy to remote sites</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p><hr class="footnotes-sep"><section class="footnotes"><ol class="footnotes-list"><li id="fn1" class="footnote-item"><p>Markdown是一种纯文本标记语言 <a href="#fnref1" class="footnote-backref">↩︎</a></p></li><li id="fn2" class="footnote-item"><p>NEW WAY TO READ &amp; WRITE MARKDOWN. <a href="#fnref2" class="footnote-backref">↩︎</a></p></li><li id="fn3" class="footnote-item"><p>Markdown是一种纯文本标记语言 <a href="#fnref3" class="footnote-backref">↩︎</a></p></li><li id="fn4" class="footnote-item"><p>HyperText Markup Language 超文本标记语言 <a href="#fnref4" class="footnote-backref">↩︎</a></p></li><li id="fn5" class="footnote-item"><p>NEW WAY TO READ &amp; WRITE MARKDOWN. <a href="#fnref5" class="footnote-backref">↩︎</a></p></li></ol></section>]]></content>
      
      
      <categories>
          
          <category> 测试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 测试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>代码高亮测试</title>
      <link href="2019/12/21/%E4%BB%A3%E7%A0%81%E9%AB%98%E4%BA%AE%E6%B5%8B%E8%AF%95/"/>
      <url>2019/12/21/%E4%BB%A3%E7%A0%81%E9%AB%98%E4%BA%AE%E6%B5%8B%E8%AF%95/</url>
      
        <content type="html"><![CDATA[<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Hello World!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloWorld</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Hello World!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>        <span class="token keyword">echo</span> <span class="token double-quoted-string string">"Hello World!"</span><span class="token punctuation">;</span><span class="token delimiter important">?></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby">puts <span class="token string">"Hello World!"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token string">"fmt"</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"Hello World!\n God Bless You!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">'Hello, World'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">"Hello, World"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 测试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 测试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>面向对象</title>
      <link href="2019/10/18/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"/>
      <url>2019/10/18/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/</url>
      
        <content type="html"><![CDATA[<p>面向对象</p><hr><p><img src="https://puui.qpic.cn/fans_admin/0/3_1409075683_1572055659163/0" alt=""></p><h2 id="面向对象有关概念">面向对象有关概念</h2><ul><li><p><strong>类(Class)</strong>： 用来描述具有相同的属性和方法的对象的集合。它定义了该集合中每个对象所共有的属性和方法。对象是类的实例。</p></li><li><p><strong>方法</strong>：类中定义的函数。</p></li><li><p><strong>类变量</strong>：类变量在整个实例化的对象中是公用的。类变量定义在类中且在函数体之外。类变量通常不作为实例变量使用。</p></li><li><p><strong>数据成员</strong>：类变量或者实例变量用于处理类及其实例对象的相关的数据。</p></li><li><p><strong>方法重写</strong>：如果从父类继承的方法不能满足子类的需求，可以对其进行改写，这个过程叫方法的覆盖（override），也称为方法的重写。</p></li><li><p><strong>局部变量</strong>：定义在方法中的变量，只作用于当前实例的类。</p></li><li><p><strong>实例变量</strong>：在类的声明中，属性是用变量来表示的。这种变量就称为实例变量，是在类声明的内部但是在类的其他成员方法之外声明的。</p></li><li><p><strong>继承</strong>：即一个派生类（derived class）继承基类（base class）的字段和方法。继承也允许把一个派生类的对象作为一个基类对象对待。例如，有这样一个设计：一个Dog类型的对象派生自Animal类，这是模拟&quot;是一个（is-a）&quot;关系（例图，Dog是一个Animal）。</p></li><li><p><strong>实例化</strong>：创建一个类的实例，类的具体对象。</p></li><li><p><strong>对象</strong>：通过类定义的数据结构实例。对象包括两个数据成员（类变量和实例变量）和方法。</p></li></ul><h3 id="类和实例">类和实例</h3><p>面向对象最重要的概念就是类（Class）和实例（Instance）</p><p>类是抽象的模板，比如Student类</p><p>实例是根据类创建出来的一个个具体的“对象”，每个对象都拥有相同的方法，各个实例拥有的数据都互相独立，互不影响</p><p>方法就是与实例绑定的函数，和普通函数不同，方法可以直接访问实例的数据</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 定义一个Dog类</span><span class="token keyword">class</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token punctuation">,</span> age<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token comment"># 写进属性,第一个参数是self</span>        self<span class="token punctuation">.</span>name <span class="token operator">=</span> name        self<span class="token punctuation">.</span>age <span class="token operator">=</span> age        self<span class="token punctuation">.</span>ages <span class="token operator">=</span> <span class="token number">0</span>    <span class="token comment"># 类中定义的函数,第一个参数永远是实例变量self,并且调用时不用传递该参数</span>    <span class="token keyword">def</span> <span class="token function">update_ages</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> ages<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>ages <span class="token operator">=</span> ages    <span class="token keyword">def</span> <span class="token function">sit</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>name<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">" is now sitting."</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">roll_over</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>name<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">" rolled over!"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="数据封装">数据封装</h3><p>面向对象编程的一个重要特点就是数据封装。</p><p>封装数据的函数是和类本身是关联起来的,称之为类的方法</p><h3 id="访问限制">访问限制</h3><p>如果要让内部属性不被外部访问，可以把属性的名称前加上两个下划线__，在Python中，实例的变量名如果以__开头，就变成了一个私有变量（private），只有内部可以访问，外部不能访问</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 实例化类</span>my_dog <span class="token operator">=</span> Dog<span class="token punctuation">(</span><span class="token string">"Willie"</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span>my_dog<span class="token punctuation">.</span>ages <span class="token operator">=</span> <span class="token number">7</span> <span class="token comment"># 直接修改属性值</span>my_dog<span class="token punctuation">.</span>update_ages<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span> <span class="token comment"># 通过方法修改属性值</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"My dog's name is "</span> <span class="token operator">+</span> my_dog<span class="token punctuation">.</span>name<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'.'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"My dog is "</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>my_dog<span class="token punctuation">.</span>age<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" years old."</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"My dog is "</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>my_dog<span class="token punctuation">.</span>ages<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" years old."</span><span class="token punctuation">)</span>my_dog<span class="token punctuation">.</span>sit<span class="token punctuation">(</span><span class="token punctuation">)</span>my_dog<span class="token punctuation">.</span>roll_over<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="继承">继承</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Wolf</span><span class="token punctuation">(</span>Dog<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token punctuation">,</span> age<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token builtin">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span>name<span class="token punctuation">,</span> age<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>ears <span class="token operator">=</span> <span class="token string">'long'</span>    <span class="token keyword">def</span> <span class="token function">sit</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>name<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" don't sit"</span><span class="token punctuation">)</span>my_wolf <span class="token operator">=</span> Wolf<span class="token punctuation">(</span><span class="token string">'wolf'</span><span class="token punctuation">,</span> <span class="token number">123</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"My wolf's name is "</span> <span class="token operator">+</span> my_wolf<span class="token punctuation">.</span>name<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'.'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"My wolf is "</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>my_wolf<span class="token punctuation">.</span>age<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" years old."</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"My wolf is "</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>my_wolf<span class="token punctuation">.</span>ages<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" years old."</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>my_wolf<span class="token punctuation">.</span>ears<span class="token punctuation">)</span>my_wolf<span class="token punctuation">.</span>sit<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token triple-quoted-string string">"""    My wolf's name is Wolf.    My wolf is 123 years old.    My wolf is 0 years old.    long    Wolf don't sit"""</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>函数式编程</title>
      <link href="2019/10/01/%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B/"/>
      <url>2019/10/01/%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<p>函数式编程的一个特点就是，允许把函数本身作为参数传入另一个函数，还允许返回一个函数！</p><hr><p><img src="https://pic.superbed.cn/item/5db3aa6e8b58bc7bf718ef58.jpg" alt=""></p><h2 id="高阶函数">高阶函数</h2><h3 id="变量可以指向函数">变量可以指向函数</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python">x <span class="token operator">=</span> <span class="token builtin">abs</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token comment"># 10</span>f <span class="token operator">=</span> <span class="token builtin">abs</span><span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token comment"># &lt;built-in function abs></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>结论：函数本身也可以赋值给变量，即：变量可以指向函数。</p><h3 id="map-reduce">map()/reduce()</h3><p><code>map()</code>函数接收两个参数，一个是函数，一个是<code>Iterable</code>(可迭代对象)，<code>map</code>将传入的函数依次作用到序列的每个元素，并把结果作为新的<code>Iterator</code>返回。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">f</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> x <span class="token operator">*</span> xr <span class="token operator">=</span> <span class="token builtin">map</span><span class="token punctuation">(</span>f<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">list</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment"># [1, 4, 9, 16, 25, 36, 49, 64, 81]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><code>reduce</code>把一个函数作用在一个序列<code>[x1, x2, x3, ...]</code>上，这个函数必须接收两个参数，<code>reduce</code>把结果继续和序列的下一个元素做累积计算，其效果就是：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token builtin">reduce</span><span class="token punctuation">(</span>f<span class="token punctuation">,</span> <span class="token punctuation">[</span>x1<span class="token punctuation">,</span> x2<span class="token punctuation">,</span> x3<span class="token punctuation">,</span> x4<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">=</span> f<span class="token punctuation">(</span>f<span class="token punctuation">(</span>f<span class="token punctuation">(</span>x1<span class="token punctuation">,</span> x2<span class="token punctuation">)</span><span class="token punctuation">,</span> x3<span class="token punctuation">)</span><span class="token punctuation">,</span> x4<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="filter">filter()</h3><p>和<code>map()</code>类似，<code>filter()</code>也接收一个函数和一个序列。和<code>map()</code>不同的是，<code>filter()</code>把传入的函数依次作用于每个元素，然后根据返回值是<code>True</code>还是<code>False</code>决定保留还是丢弃该元素。</p><h3 id="sorted">sorted()</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token builtin">sorted</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'bob'</span><span class="token punctuation">,</span> <span class="token string">'about'</span><span class="token punctuation">,</span> <span class="token string">'Zoo'</span><span class="token punctuation">,</span> <span class="token string">'Credit'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> key<span class="token operator">=</span><span class="token builtin">str</span><span class="token punctuation">.</span>lower<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="返回函数">返回函数</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    fs <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">def</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>             <span class="token keyword">return</span> i<span class="token operator">*</span>i        fs<span class="token punctuation">.</span>append<span class="token punctuation">(</span>f<span class="token punctuation">)</span>    <span class="token keyword">return</span> fsf1<span class="token punctuation">,</span> f2<span class="token punctuation">,</span> f3 <span class="token operator">=</span> count<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">f</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">def</span> <span class="token function">g</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> j<span class="token operator">*</span>j        <span class="token keyword">return</span> g    fs <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        fs<span class="token punctuation">.</span>append<span class="token punctuation">(</span>f<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment"># f(i)立刻被执行，因此i的当前值被传入f()</span>    <span class="token keyword">return</span> fs f1<span class="token punctuation">,</span> f2<span class="token punctuation">,</span> f3 <span class="token operator">=</span> count<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="匿名函数">匿名函数</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">map</span><span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span> x <span class="token operator">*</span> x<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="装饰器">装饰器</h3><p>由于函数也是一个对象，而且函数对象可以被赋值给变量，所以，通过变量也能调用该函数。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'2015-3-25'</span><span class="token punctuation">)</span>f <span class="token operator">=</span> nowf<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment"># 2015-3-25</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>函数对象有一个<code>__name__</code>属性，可以拿到函数的名字：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">now<span class="token punctuation">.</span>__name__<span class="token string">'now'</span>f<span class="token punctuation">.</span>__name__<span class="token string">'now'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>现在，假设我们要增强<code>now()</code>函数的功能，比如，在函数调用前后自动打印日志，但又不希望修改<code>now()</code>函数的定义，这种在代码运行期间动态增加功能的方式，称之为“装饰器”（Decorator）。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">log</span><span class="token punctuation">(</span>func<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">wrapper</span><span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kw<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'call %s():'</span> <span class="token operator">%</span> func<span class="token punctuation">.</span>__name__<span class="token punctuation">)</span>        <span class="token keyword">return</span> func<span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kw<span class="token punctuation">)</span>    <span class="token keyword">return</span> wrapper<span class="token decorator annotation punctuation">@log</span><span class="token keyword">def</span> <span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'2015-3-25'</span><span class="token punctuation">)</span>now<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># call now():</span><span class="token comment"># 2015-3-25</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>把<code>@log</code>放到<code>now()</code>函数的定义处，相当于执行了语句：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">now <span class="token operator">=</span> log<span class="token punctuation">(</span>now<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>由于<code>log()</code>是一个decorator，返回一个函数，所以，原来的<code>now()</code>函数仍然存在，只是现在同名的<code>now</code>变量指向了新的函数，于是调用<code>now()</code>将执行新函数，即在<code>log()</code>函数中返回的<code>wrapper()</code>函数。</p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 函数式编程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>二级Python基础</title>
      <link href="2019/09/03/%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%BA%8C%E7%BA%A7Python%E5%9F%BA%E7%A1%80/"/>
      <url>2019/09/03/%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%BA%8C%E7%BA%A7Python%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<p>参考<a href="https://github.com/Xanxus-5/NCRE-Python">Xanxus-5/NCRE-Python</a></p><hr><p><img src="https://puui.qpic.cn/fans_admin/0/3_1409075683_1572058823439/0" alt=""></p><h2 id="程序设计基本方法">程序设计基本方法</h2><h3 id="程序设计语言概述">程序设计语言概述</h3><ul><li>程序设计语言是计算机能够理解和识别用户操作意图的一种交互体系，它按照特定规则组织计算机指令，使计算机能够自动进行各种运算处理。</li><li>按照程序设计语言规则组织起来的一组计算机指令称为计算机程序.</li><li>高级编程语言根据执行机制不同可分成两类：<strong>静态语言</strong>和<strong>脚本语言</strong>，静态语言采用编译方式执行，脚本语言采用解释方式执行。例如，C语言是静 态语言，Python语言是脚本语言。</li><li>采用<strong>编译执行的编程语言是静态语言</strong>，如C语言、Java语言；<strong>采用解释执行的编程语言是脚本语言</strong>，如JavaScript语言、PHP语言<ul><li><p><strong>编译</strong>是将源代码转换成目标代码的过程，通常，源代码是高级语言代码，目标代码是机器语言代码，执行编译的计算机程序称为编译器</p><blockquote><p>对于相同源代码，编译所产生的目标代码执行速度更快。</p><p>目标代码不需要编译器就可以运行，在同类型操作系统上使用灵活。</p></blockquote></li><li><p><strong>解释</strong>是将源代码逐条转换成目标代码同时逐条运行目标代码的过程。执行解释的计算机程序称为解释器。</p><blockquote><p>解释执行需要保留源代码，程序纠错和维护十分方便。</p><p>只要存在解释器，源代码可以在任何操作系统上运行，可移植性好</p></blockquote></li></ul></li></ul><h3 id="计算机编程">计算机编程</h3><p>计算思维是区别于以数学为代表的逻辑思维和以物理为代表的实证思维的第三种思维模式。</p><p>编程是一个求解问题的过程</p><ul><li>首先需要分析问题，抽象内容之间的交互关系</li><li>设计利用计算机求解问题的确定性方法，</li><li>进而通过编写和调试代码解决问题</li></ul><p>这是从抽象问题到解决问题的完整过程。</p><h3 id="程序的基本编写方法">程序的基本编写方法</h3><p>IPO程序编写方法</p><ul><li><p>输入数据</p><p>输入（Input）是一个程序的开始。程序要处理的数据有多种来源，形成了多种输入方式，包括：文件输入、网络输入、控制台输入、交互界面输出、随机数据输入、内部参数输入等。</p></li><li><p>处理数据</p><p>处理（Process）是程序对输入数据进行计算产生输出结果的过程。计算问题的处理方法统称为“算法”，它是程序最重要的组成部分。可以说，算法是一个程序的灵魂。</p></li><li><p>输出数据</p><p>输出（Output）是程序展示运算成果的方式。程序的输出方式包括：控制台输出、图形输出、文件输出、网络输出、操作系统内部变量输出等。</p></li></ul><h3 id="Python语言概述">Python语言概述</h3><p>Python重要特点：</p><ol><li><p>具有通用性；</p><p>Python语言可以用于几乎任何与程序设计相关应用的开发，不仅适合训练变成思维，更适合诸如数据分析、机器学习、人工智能、Web开发等具体的技术领域。</p></li><li><p>语法简洁；</p><p>只有33个保留字</p></li><li><p>生态高产；</p><p>Python解释器提供了几百个内置类和函数库，此外，世界各地程序员通过开源社区贡献了十几万个第三方函数库，几乎覆盖了计算机技术的各个领域，编写Python程序可以大量利用已有内置或第三方代码，具备良好的编程生态。</p></li></ol><p>具体特点：</p><ol><li><p>平台无关；</p><p>Python程序可以在任何安装解释器的计算机环境中执行，因此，可以不经修改地实现跨操作系统运行。</p></li><li><p>强制可续；</p><p>Python通过强制缩进（类似文章段落的首行空格）来体现语句间的逻辑关系，显著提高了程序的可读性，进而增强了Python程序的可维护性。</p></li><li><p>支持中文；</p></li><li><p>格式多样；</p></li><li><p>类库便捷；</p></li><li><p>开源理念；</p></li></ol><h3 id="实例">实例</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#斐波那契数列(F(n) = F(n-2) + F(n-1)）, n >= 2)</span>a<span class="token punctuation">,</span> b <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token keyword">while</span> a <span class="token operator">&lt;</span> <span class="token number">1000</span> <span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> end <span class="token operator">=</span> <span class="token string">','</span><span class="token punctuation">)</span>a<span class="token punctuation">,</span> b <span class="token operator">=</span> b<span class="token punctuation">,</span> a <span class="token operator">+</span> b<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#计算圆半径</span>r <span class="token operator">=</span> <span class="token number">25</span>area <span class="token operator">=</span> <span class="token number">3.1415</span> <span class="token operator">*</span> r <span class="token operator">*</span> r<span class="token keyword">print</span><span class="token punctuation">(</span>area<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'&#123;:.2f&#125;'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>area<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">#两位小数</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#绘制五角星</span><span class="token keyword">from</span> turtle <span class="token keyword">import</span> <span class="token operator">*</span>color<span class="token punctuation">(</span><span class="token string">'red'</span><span class="token punctuation">,</span> <span class="token string">'red'</span><span class="token punctuation">)</span>begin_fill<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    fd<span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span>    rt<span class="token punctuation">(</span><span class="token number">144</span><span class="token punctuation">)</span>end_fill<span class="token punctuation">(</span><span class="token punctuation">)</span>done<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#程序运行计时</span><span class="token keyword">import</span> timelimit <span class="token operator">=</span> <span class="token number">10</span> <span class="token operator">*</span> <span class="token number">1000</span> <span class="token operator">*</span> <span class="token number">1000</span>start <span class="token operator">=</span> time<span class="token punctuation">.</span>perf_counter<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>    limit <span class="token operator">-=</span> <span class="token number">1</span>    <span class="token keyword">if</span> limit <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">:</span>        <span class="token keyword">break</span>delta <span class="token operator">=</span> time<span class="token punctuation">.</span>perf<span class="token punctuation">.</span>counter<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> start<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'时间是:&#123;&#125;秒'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>delta<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#绘制七种圆圈</span><span class="token keyword">import</span> turtlecolors <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'red'</span><span class="token punctuation">,</span> <span class="token string">'orange'</span><span class="token punctuation">,</span> <span class="token string">'yellow'</span><span class="token punctuation">,</span> <span class="token string">'green'</span><span class="token punctuation">,</span> <span class="token string">'blue'</span><span class="token punctuation">,</span> <span class="token string">'indigo'</span><span class="token punctuation">,</span> <span class="token string">'purple'</span><span class="token punctuation">]</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    c <span class="token operator">=</span> color<span class="token punctuation">[</span>i<span class="token punctuation">]</span>    turtle<span class="token punctuation">.</span>color<span class="token punctuation">(</span>c<span class="token punctuation">.</span>c<span class="token punctuation">)</span>    turtle<span class="token punctuation">.</span>begin_fill<span class="token punctuation">(</span><span class="token punctuation">)</span>    turtle<span class="token punctuation">.</span>rt<span class="token punctuation">(</span><span class="token number">360</span><span class="token operator">/</span><span class="token number">7</span><span class="token punctuation">)</span>    turtle<span class="token punctuation">.</span>circle<span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span>    turtle<span class="token punctuation">.</span>end_fill<span class="token punctuation">(</span><span class="token punctuation">)</span>turtle<span class="token punctuation">.</span>done<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Python基本语法元素">Python基本语法元素</h2><h3 id="语法元素的名称">语法元素的名称</h3><p><strong>缩进</strong>：表示程序的逻辑。指每行语句开始前的空白局域，用来表示Python程序之间的<strong>包含和层次关系</strong>。1个缩进 = 4个空格。缩进是Python语言中<strong>表明程序框架的唯一手段</strong>。</p><p><strong>注释</strong>：注释是代码中的辅助性文字，<strong>会被编译或解释器略去，不被计算机执行</strong>，一般用于程序员对代码的说明。Python语言采用#表示一行注释的开始，多行注释需要在每行开始都使用#。</p><p><strong>变量</strong>：可以随时命名、赋值、使用。</p><p><strong>命名</strong>：Python语言允许采用大写字母、小写字母、数字、下划线(_)和汉字等字符及其组合给变量命名，但名字的首字符不能是数字，中间不能出现空格，长度没有限制，标识符对大小写敏感。</p><p>保留字（keyword）：</p><table><thead><tr><th style="text-align:center">and</th><th style="text-align:center">as</th><th style="text-align:center">assert</th><th style="text-align:center">break</th><th style="text-align:center">class</th><th style="text-align:center">continue</th></tr></thead><tbody><tr><td style="text-align:center">def</td><td style="text-align:center">del</td><td style="text-align:center">elif</td><td style="text-align:center">else</td><td style="text-align:center">except</td><td style="text-align:center">False</td></tr><tr><td style="text-align:center">finally</td><td style="text-align:center">for</td><td style="text-align:center">from</td><td style="text-align:center">global</td><td style="text-align:center">if</td><td style="text-align:center">import</td></tr><tr><td style="text-align:center">in</td><td style="text-align:center">is</td><td style="text-align:center">lambda</td><td style="text-align:center">None</td><td style="text-align:center">nonlocal</td><td style="text-align:center">not</td></tr><tr><td style="text-align:center">or</td><td style="text-align:center">pass</td><td style="text-align:center">return</td><td style="text-align:center">True</td><td style="text-align:center">try</td><td style="text-align:center">while</td></tr><tr><td style="text-align:center">with</td><td style="text-align:center">yield</td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr></tbody></table><h3 id="数据类型">数据类型</h3><p>Python语言支持多种数据类型，最简单的包括数字类型、字符串类型，略微复杂的包括元组类型、集合类型、列表类型、字典类型等。</p><p><strong>数字类型</strong>：整数、浮点数、复数</p><p>一个整数值可以表示为十进制、十六进制、八进制和二进制等不同进制形式。</p><ul><li>二进制： 0b001111110010</li><li>八进制： 0o1762</li><li>十进制： 1010</li><li>十六进制：0x3F2</li></ul><p>一个浮点数可以表示为带有小数点的一般形式，也可以采用科学计数法表示。例如：浮点数123.456，两种表示方式如下：</p><ul><li>一般形式： 123.456</li><li>科学计数法： 1.23456e2</li></ul><p>复数类型与数学中的复数相一致，采用a+bj的形式表示，存在实部和虚部。</p><p><strong>字符串</strong>：双引号与单引号作用相同</p><p><strong>切片</strong>：[N : M]格式获取字符串的子串（从N到M但不包含M）。</p><p><img src="%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%BA%8C%E7%BA%A7Python%E5%9F%BA%E7%A1%80/1568883436400.png" alt="1568883436400"></p><p><strong>如果字符串长度为L，正向递增需要以最左侧字符序号为0，向右依次递增，最右侧字符序号为L-1；</strong></p><p><strong>反向递减序号以最右侧字符序号为-1，向左依次递减，最左侧字符序号为-L。</strong></p><p>可以通过Python默认提供的<code>len()</code>函数获取字符串的长度，一个中文字符和西文字符的长度都记为1</p><h3 id="程序的语句元素">程序的语句元素</h3><p><strong>表达式</strong>:产生或计算新数据值的代码片段称为表达式。</p><p><strong>赋值语句</strong>：&lt;变量&gt; = &lt;表达式&gt;</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 变量x和y交换</span>t <span class="token operator">=</span> xx <span class="token operator">=</span> yy <span class="token operator">=</span> t<span class="token comment"># 等价于</span>x<span class="token punctuation">,</span> y <span class="token operator">=</span> y<span class="token punctuation">,</span> x<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>引用</strong>：</p><p>python程序会经常使用当前程序之外已有的功能代码，这个过程叫“引用”。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> <span class="token operator">&lt;</span>库名称<span class="token operator">></span><span class="token comment"># 调用具体功能</span><span class="token operator">&lt;</span>库名称<span class="token operator">></span><span class="token punctuation">.</span><span class="token operator">&lt;</span>函数名称<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="基本输入输出函数">基本输入输出函数</h3><p><code>input()</code>:获得用户输入</p><p><code>&lt;变量&gt; = input(&quot;&lt;提示性文字&gt;&quot;)</code></p><pre class="line-numbers language-python" data-language="python"><code class="language-python">a <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">'请输入：'</span><span class="token punctuation">)</span><span class="token comment"># >请输入: X</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token comment"># >X</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><code>eval()</code>：去掉字符串最外侧的引号。</p><p>以Python表达式的方式解析并执行字符串，将返回结果输出</p><p><code>&lt;变量&gt; = eval(&quot;&lt;字符串&gt;&quot;)</code></p><p><code>print()</code>：用于输出运算结果</p><ol><li><p>仅输出：<code>print('&lt;字符串&gt;')</code>；</p></li><li><p>仅输出一个或多个变量：<code>print(&lt;变量1&gt;, &lt;变量2&gt;, ..., &lt;变量n&gt;)</code>；</p></li><li><p>混合：<code>print(&lt;输出字符串模板&gt;.format(&lt;变量1&gt;, &lt;变量2&gt;..., &lt;变量n&gt;)</code>。例：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">a<span class="token punctuation">,</span> b <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">66</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'数字&#123;&#125;和数字&#123;&#125;的和是&#123;&#125;'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> a<span class="token operator">+</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># >数字3和数字66的和是69</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>默认会在最后增加一个换行，或用：<code>print('&lt;内容&gt;', end = '&lt;结尾&gt;')</code></p></li></ol><h3 id="实例解析–倒背如流">实例解析–倒背如流</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 将输入字符反向输出</span><span class="token comment"># 方法一</span><span class="token comment"># 采用正向递增序号，利用len()函数将i设为最后一个字符的索引序号，然后逐次输出至第一个字符。</span>s <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">"请输入一段文本："</span><span class="token punctuation">)</span>i <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token keyword">while</span> i <span class="token operator">>=</span> <span class="token number">0</span> <span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">)</span>    i <span class="token operator">=</span> i <span class="token operator">-</span> <span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 方法二</span><span class="token comment"># 采用反向递减序号，将i首先设置为-1，直接索引最后一个字符，然后逐次输出至第一个字符。</span>s <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">"请输入一段文本："</span><span class="token punctuation">)</span>i <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token keyword">while</span> i <span class="token operator">>=</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">*</span> <span class="token builtin">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">)</span>    i <span class="token operator">=</span> i <span class="token operator">-</span> <span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="⭐基本数据类型">⭐基本数据类型</h2><h3 id="⭐整数类型">⭐整数类型</h3><p>|   种类   | 引导符号 |                         描述                        |<br>|  :------:| :------: | :-------------------------------------------- —: |<br>|  十进制  |    无    |               默认情况，例：1010,-1010               |<br>|  二进制  | 0b 或 0B |          由字符0和1组成，例：0b1010，0B1010           |<br>|  八进制  | 0o 或 0O |          由字符0到7组成，例：0o1010，0O1010           |<br>| 十六进制 | 0x 或 0X |由字符0到9、a 到 f 或 A 到 F 组成，例：0x1010，0X1010  |</p><p>不同进制的整数可以<strong>直接运算</strong></p><h3 id="浮点数类型">浮点数类型</h3><p>必须带有小数部分，小数可以是0。</p><p>除十进制外，浮点数没有其他进制表示形式</p><p>科学计算法使用字母 e 或 E 作为幂的符号，以10为基数</p><p>不确定尾数：两个浮点数运算，有一定概率在运算结果后增加一些不确定尾数</p><p><code>round()</code>函数：对字符串四舍五入。</p><p><code>round(1.2345, 2) = 1.23</code></p><h3 id="复数类型">复数类型</h3><p>基本单位元素 j 或 J ,叫做“虚数单位”。含有虚数单位的数被称为复数</p><p>复数可以看作是二元有序实数对（a, b），表示 a + bj，a 是实数部分，b 是虚数部分。</p><p><strong>当 b 是1时，1不能省略，即’1j’表示复数</strong>而单独j则表示Python程序中的一个变量。</p><p>对于复数 z，可以用 <code>z.real</code> 和 <code>z.imag</code>分别获得它的实部和虚部</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">1.23e4</span> <span class="token operator">+</span> <span class="token number">5.67e4j</span><span class="token punctuation">)</span><span class="token punctuation">.</span>real <span class="token punctuation">)</span> <span class="token comment"># 12300.0</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">1.23e4</span> <span class="token operator">+</span> <span class="token number">5.67e4j</span><span class="token punctuation">)</span><span class="token punctuation">.</span>imag<span class="token punctuation">)</span>  <span class="token comment"># 56700.0</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">1.23e4</span> <span class="token operator">+</span> <span class="token number">5.67e4j</span><span class="token punctuation">.</span>imag<span class="token punctuation">)</span>    <span class="token comment">#先获得5.67e4j的虚部，再与1.23e4进行求和计算 69000.0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="数字类型的运算">数字类型的运算</h3><h4 id="运算操作符">运算操作符</h4><table><thead><tr><th style="text-align:center">操作符</th><th style="text-align:center">描述</th></tr></thead><tbody><tr><td style="text-align:center">x + y</td><td style="text-align:center">和</td></tr><tr><td style="text-align:center">x - y</td><td style="text-align:center">差</td></tr><tr><td style="text-align:center">x * y</td><td style="text-align:center">积</td></tr><tr><td style="text-align:center">x / y</td><td style="text-align:center">商，产生结果为浮点数</td></tr><tr><td style="text-align:center">x // y</td><td style="text-align:center">整数商，即：不大于 x 与 y 之商的最打整数</td></tr><tr><td style="text-align:center">x % y</td><td style="text-align:center">商的余数，称为模运算</td></tr><tr><td style="text-align:center">-x</td><td style="text-align:center">负值，即 x * (-1)</td></tr><tr><td style="text-align:center">+x</td><td style="text-align:center">x本身</td></tr><tr><td style="text-align:center">x ** y</td><td style="text-align:center">x 的 y 次幂</td></tr></tbody></table><p>基本规则：</p><ul><li><p>整数和浮点数混合运算，输出结果是浮点数；</p></li><li><p>整数之间运算，产生结果类型与操作符相关，<code>/</code> 的结果是浮点数；</p></li><li><p>整数或浮点数与复数运算，输出结果是复数；</p></li></ul><p><strong>所有</strong>二元运算操作符都可以与赋值符号（=）相连，形成<strong>增强赋值操作符</strong>（+=，-=等）。用 ‘op’ 表示运算操作符，增强赋值操作符的用法如下：</p><p>x op= y 等价于 x = x op y，op 与 = 之间不用加空格</p><h4 id="数值运算函数">数值运算函数</h4><table><thead><tr><th style="text-align:center">函数</th><th style="text-align:center">描述</th></tr></thead><tbody><tr><td style="text-align:center"><code>abs(x)</code></td><td style="text-align:center">x的绝对值</td></tr><tr><td style="text-align:center"><code>divmod(x, y)</code></td><td style="text-align:center">(x // y, x % y)，输出为二元组形式（也称为元组类型）</td></tr><tr><td style="text-align:center"><code>pow(x, y[, z])</code></td><td style="text-align:center">x**y[(x **y) % z]，幂运算</td></tr><tr><td style="text-align:center"><code>round(x[, d])</code></td><td style="text-align:center">对 x 四舍五入，保留 d 位小数</td></tr><tr><td style="text-align:center"><code>max(a, b, c, d, ...)</code></td><td style="text-align:center">最大值</td></tr><tr><td style="text-align:center"><code>min(a, b, c, d, ...)</code></td><td style="text-align:center">最小值</td></tr></tbody></table><h3 id="字符串类型及格式化">字符串类型及格式化</h3><p>单行字符串可以由一对单引号或双引号作为边界表示<br>多行字符串可以由一对三单引号或三双引号作为边界表示</p><p>反斜杠字符（<code>\</code>）表示“转义”，即该字符与后面相邻的一个字符共同组成了新的含义。</p><ul><li><code>\n</code>：换行；</li><li><code>\\</code>：反斜杠</li><li><code>\'</code>表示单引号</li><li><code>\&quot;</code>表示双引号</li><li><code>\t</code>：制表符</li></ul><p><strong><code>\</code> 的额外作用：续行</strong></p><h4 id="format-方法的基本使用"><code>format()</code>方法的基本使用</h4><p>字符串<code>format()</code>方法的基本使用格式是：<code>&lt;模板字符串&gt;.format(&lt;逗号分隔的参数&gt;)</code></p><p>模板字符串是一个由字符串和槽组成的字符，用来控制字符串和变量的显示效果</p><p><code>&#123;&lt;参数符号&gt;:&lt;格式控制标记&gt;&#125;</code></p><p><code>:</code>引导符号</p><p>格式控制标记包括：<code>&lt;填充&gt;</code>、<code>&lt;对齐&gt;</code>、<code>&lt;宽度&gt;</code>、<code>&lt;.(精度)&gt;</code>、<code>英文逗号</code>、<code>&lt;类型&gt;</code>6个字段，这些字段都是可选的，可以组合使用</p><p><code>&lt;填充&gt;</code>、<code>&lt;对齐&gt;</code>和<code>&lt;宽度&gt;</code>主要用于对显示格式的规范。</p><ul><li><p><code>&lt;填充&gt;</code>:可以修改默认填充字符，填充字符只能有一个。</p></li><li><p><code>&lt;对齐&gt;</code>:<code>&lt;</code> 左对齐；<code>&gt;</code>右对齐；<code>^</code> 居中</p></li><li><p><code>&lt;宽度&gt;</code>:槽的设定输出宽度<br>宽度指当前槽的设定输出字符宽度，如果该槽参数实际值比宽度设定值大，则使用参数实际长度。如果该值的实际位数小于指定宽度，则按照对齐指定方式在宽度内对齐，默认以空格字符补充。</p></li><li><p><code>英文逗号</code>:数字的千位分隔符，适用于整数和浮点数<br><code>&lt;.精度&gt;</code> <code>&lt;类型&gt;</code>主要用于对数值本身的规范</p></li><li><p><code>&lt;.(精度)&gt;</code>:浮点数小数部分的精度或字符串的最大输出长度</p></li><li><p><code>&lt;类型&gt;</code>:整数类型：b, c, d, o, x, X；浮点数类型：e, E, f, %</p></li></ul><p>整数类型：</p><ul><li>b：输出整数的二进制方式；</li><li>c：输出整数对应的Unicode字符；</li><li>d：输出整数的十进制方式；</li><li>o：输出整数的八进制方式；</li><li>x：输出整数的小写十六进制方式；</li><li>X：输出整数的大写十六进制方式</li></ul><p>浮点类型：</p><ul><li>e：输出浮点数对应的小写字母e的指数形式；</li><li>E：输出浮点数对应的大写字母E的指数形式</li><li>f：输出浮点数的标准浮点形式；</li><li>%：输出浮点数的百分形式</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'&#123;:.2f&#125;'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span><span class="token number">3.14159</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">#输出小数后2位</span><span class="token comment"># '3.14'</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'&#123;:X&#125;'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span><span class="token number">1010</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">#输出十六进制形式</span><span class="token comment"># '3F2'</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'&#123;:.5&#125;'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span><span class="token string">'这是一个很长的字符串'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">#输出前5位</span><span class="token comment"># '这是一个很'</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'&#123;:-^10&#125;'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span><span class="token string">'PYTHON'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">#居中并以 - 填充</span><span class="token comment"># '--PYTHON--'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="字符串类型的操作">字符串类型的操作</h3><h4 id="字符串操作符">字符串操作符</h4><table><thead><tr><th style="text-align:center">操作符</th><th style="text-align:center">描述</th></tr></thead><tbody><tr><td style="text-align:center">x + y</td><td style="text-align:center">连接两个字符串 x 与 y</td></tr><tr><td style="text-align:center">x *n 或 n* x</td><td style="text-align:center">复制 n 次字符串 x</td></tr><tr><td style="text-align:center">x in s</td><td style="text-align:center">如果 x 是 s 的字符串，返回True，否则False</td></tr></tbody></table><h4 id="字符串处理函数">字符串处理函数</h4><table><thead><tr><th style="text-align:center">函数</th><th style="text-align:center">描述</th></tr></thead><tbody><tr><td style="text-align:center"><code>len(x)</code></td><td style="text-align:center">返回 x 的长度，也可以返回其他组合数据类型的元素个数</td></tr><tr><td style="text-align:center"><code>str(x)</code></td><td style="text-align:center">返回任意类型 x 的字符串形式</td></tr><tr><td style="text-align:center"><code>chr(x)</code></td><td style="text-align:center">返回 Unicode 编码 x 对应的单字符</td></tr><tr><td style="text-align:center"><code>ord(x)</code></td><td style="text-align:center">返回单字符 x 表示的 Unicod 编码</td></tr><tr><td style="text-align:center"><code>hex(x)</code></td><td style="text-align:center">返回整数 x 对应十六进制的小写形式字符串</td></tr><tr><td style="text-align:center"><code>oct(x)</code></td><td style="text-align:center">返回整数 x 对应八进制的小写形式字符串</td></tr></tbody></table><h4 id="字符串处理方法">字符串处理方法</h4><table><thead><tr><th style="text-align:center">方法</th><th style="text-align:center">描述</th></tr></thead><tbody><tr><td style="text-align:center"><code>str.lower(x)</code></td><td style="text-align:center">返回 str 全部小写</td></tr><tr><td style="text-align:center"><code>str.upper(x)</code></td><td style="text-align:center">返回 str 全部大写</td></tr><tr><td style="text-align:center"><code>str.split(sep = None)</code></td><td style="text-align:center">返回由 str 根据 sep 被分割构成的列表，默认以空格分割</td></tr><tr><td style="text-align:center"><code>str.count(sub)</code></td><td style="text-align:center">返回 sub 出现的次数</td></tr><tr><td style="text-align:center"><code>str.replace(old, new)</code></td><td style="text-align:center">返回 old 被替换为 new 的 str</td></tr><tr><td style="text-align:center"><code>str.center(width, fillchar)</code></td><td style="text-align:center">字符串居中函数，fillchar 可选，两侧新增字符采用fillchar填充</td></tr><tr><td style="text-align:center"><code>str.strip(chars)</code></td><td style="text-align:center">从 str 中去掉其左右 chars 中列出的字符</td></tr><tr><td style="text-align:center"><code>str.join(iter)</code></td><td style="text-align:center">将 iter 变量的每一个元素后增加一个 str</td></tr></tbody></table><p>例：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Python is an excellent language.'</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'#'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># 'Python is #n excellent l#ngu#ge.'</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Python'</span><span class="token punctuation">.</span>center<span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">,</span> <span class="token string">'='</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># '===Python==='</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Python'</span><span class="token punctuation">.</span>center<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">'='</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># 'Python' #当 width 小于 str 长度，返回 str</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'   ==Python==   '</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token string">' =n'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># 'Pytho'</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">','</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token string">'12345'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># '1,2,3,4,5'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    str1 <span class="token operator">=</span> <span class="token string">'hello, world!'</span>    str2 <span class="token operator">=</span> <span class="token string">'HeLLo, wOrld!'</span>    <span class="token comment"># 通过len函数计算字符串的长度</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>str1<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 13</span>    <span class="token comment"># 获得字符串首字母大写的copy</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>str1<span class="token punctuation">.</span>capitalize<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># Hello, world!</span>    <span class="token comment"># 获得字符串变大写后的copy</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>str1<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># Hello, World!</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>str2<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># Hello, World!</span>    <span class="token comment"># 获得以首字母大写的方式显示每个单词后的copy</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>str1<span class="token punctuation">.</span>upper<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># HELLO, WORLD!</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>str2<span class="token punctuation">.</span>lower<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># hello, world!</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    main<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    str1 <span class="token operator">=</span> <span class="token string">'hello, world!'</span>    <span class="token comment"># 从字符串中查找子串所在位置</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>str1<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">'or'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 8</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>str1<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">'shit'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># -1</span>    <span class="token comment"># 与find类似但找不到子串时会引发异常</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>str1<span class="token punctuation">.</span>index<span class="token punctuation">(</span><span class="token string">'or'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment"># 8</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>str1<span class="token punctuation">.</span>index<span class="token punctuation">(</span><span class="token string">'shit'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment"># ValueError: substring not found</span>    <span class="token comment"># 检查字符串是否以指定的字符串开头</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>str1<span class="token punctuation">.</span>startswith<span class="token punctuation">(</span><span class="token string">'He'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># False</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>str1<span class="token punctuation">.</span>startswith<span class="token punctuation">(</span><span class="token string">'hel'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># True</span>    <span class="token comment"># 检查字符串是否以指定的字符串结尾</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>str1<span class="token punctuation">.</span>endswith<span class="token punctuation">(</span><span class="token string">'!'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># True</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    main<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    str1 <span class="token operator">=</span> <span class="token string">'hello, world!'</span>    <span class="token comment"># 将字符串以指定的宽度居中并在两侧填充指定的字符</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>str1<span class="token punctuation">.</span>center<span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">,</span> <span class="token string">'*'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment"># 将字符串以指定的宽度靠右放置左侧填充指定的字符</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>str1<span class="token punctuation">.</span>rjust<span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">,</span> <span class="token string">' '</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    str3 <span class="token operator">=</span> <span class="token string">'abc123456'</span>    <span class="token comment"># 从字符串中取出指定位置的字符(下标运算)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>str3<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment"># c</span>    <span class="token comment"># 字符串切片(从指定的开始索引到指定的结束索引)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>str3<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment"># c12</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>str3<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment"># c123456</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>str3<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment"># c246</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>str3<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment"># ac246</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>str3<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment"># 654321cba</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>str3<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment"># 45</span>    <span class="token comment"># 检查字符串是否由数字构成</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>str3<span class="token punctuation">.</span>isdigit<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># False</span>    <span class="token comment"># 检查字符串是否以字母构成</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>str3<span class="token punctuation">.</span>isalpha<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># False</span>    <span class="token comment"># 检查字符串是否以数字和字母构成</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>str3<span class="token punctuation">.</span>isalnum<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># True</span>    str4 <span class="token operator">=</span> <span class="token string">'  hello, worl d   '</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>str4<span class="token punctuation">)</span>    <span class="token comment"># 获得字符串修剪空格的拷贝</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>str4<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 'hello, worl d'</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>str4<span class="token punctuation">.</span>rstrip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment"># '  hello, worl d   '</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>str4<span class="token punctuation">.</span>lstrip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment"># 'hello, worl d   '</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    main<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="类型判断和类型间转换">类型判断和类型间转换</h4><p><code>type(x)</code>：对 x 进行类型判断，适用于任何数据类型</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">n <span class="token operator">=</span> <span class="token builtin">eval</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">'请输入一个数字：'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">if</span> <span class="token builtin">type</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token builtin">type</span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'输入的是整数'</span><span class="token punctuation">)</span><span class="token keyword">elif</span> <span class="token builtin">type</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token builtin">type</span><span class="token punctuation">(</span><span class="token number">11.3</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'输入的是浮点数'</span><span class="token punctuation">)</span><span class="token keyword">else</span> <span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'无法判断'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>int(x)</code>：将 x 转为整数</p><p><code>float(x)</code>：将 x 转为浮点数</p><p><code>str(x)</code>：将 x 转为字符串</p><h3 id="实例解析–凯撒密码">实例解析–凯撒密码</h3><p>恺撒撒密码是古罗马恺撒大帝用来对军事情报进行加密的算法，它采用了替换方法对信息中的每一个英文字符循环替换为字母表序列该字符后面第三个字符：<br>原文：A B C D E F G H I J K L M N O P Q R S T U V W X Y Z<br>密文：D E F G H I J K L M N O P Q R S T U V W X Y Z A B C</p><p>原文字符P，其密文字符C满足如下条件：C = ( P + 3 ) mod 26</p><p>解密方法反之，满足：P = ( C – 3 ) mod 26</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 恺撒密码-加密</span>ptxt <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">"请输入明文文本: "</span><span class="token punctuation">)</span><span class="token keyword">for</span> p <span class="token keyword">in</span> ptxt<span class="token punctuation">:</span>    <span class="token keyword">if</span> <span class="token string">"a"</span> <span class="token operator">&lt;=</span> p <span class="token operator">&lt;=</span> <span class="token string">"z"</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token builtin">ord</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">(</span><span class="token builtin">ord</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token operator">-</span><span class="token builtin">ord</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">26</span><span class="token punctuation">)</span><span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">)</span>    <span class="token keyword">elif</span> <span class="token string">"A"</span> <span class="token operator">&lt;=</span> p <span class="token operator">&lt;=</span> <span class="token string">"Z"</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token builtin">ord</span><span class="token punctuation">(</span><span class="token string">"A"</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">(</span><span class="token builtin">ord</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token operator">-</span><span class="token builtin">ord</span><span class="token punctuation">(</span><span class="token string">"A"</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">26</span><span class="token punctuation">)</span><span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 恺撒密码-解密</span>etxt <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">"请输入加密后文本: "</span><span class="token punctuation">)</span><span class="token keyword">for</span> p <span class="token keyword">in</span> etxt<span class="token punctuation">:</span>    <span class="token keyword">if</span> <span class="token string">"a"</span> <span class="token operator">&lt;=</span> p <span class="token operator">&lt;=</span> <span class="token string">"z"</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token builtin">ord</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">(</span><span class="token builtin">ord</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token operator">-</span><span class="token builtin">ord</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">26</span><span class="token punctuation">)</span><span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">)</span>    <span class="token keyword">elif</span> <span class="token string">"A"</span> <span class="token operator">&lt;=</span> p <span class="token operator">&lt;=</span> <span class="token string">"Z"</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token builtin">ord</span><span class="token punctuation">(</span><span class="token string">"A"</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">(</span><span class="token builtin">ord</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token operator">-</span><span class="token builtin">ord</span><span class="token punctuation">(</span><span class="token string">"A"</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">26</span><span class="token punctuation">)</span><span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="程序的控制结构">程序的控制结构</h2><h3 id="程序流程图">程序流程图</h3><p>描述一个计算问题的程序过程有多种方式：IPO、流程图、伪代码和程序代码。</p><ul><li>起止框：表示程序逻辑的开始或结束；</li><li>判断框：表示一个判断条件，并根据判断结果选择不同的执行路径；</li><li>处理框：表示一组处理过程，对应于顺序执行的程序逻辑；</li><li>输入输出框：表示程序中的数据输入或结果输出；</li><li>注释框：表示程序的注释；</li><li>流向线：表示程序的控制流，以带箭头直线或曲线表达程序的执行路径；</li><li>连接点：表示多个流程图的连接方式，常用于将多个较小流程图组织成较大流程图。</li></ul><h3 id="程序控制结构">程序控制结构</h3><p>三种基本结构：</p><ol><li>顺序结构：按照线性顺序依次执行；</li><li>分支结构：根据条件判断结果而选择不同向前执行路径；</li><li>循环结构：根据条件判断结果向后执行的一种运行方式。</li></ol><p>任何程序都由这三种基本结构组合而成</p><h3 id="单分支结构-if语句">单分支结构: if语句</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">if</span> <span class="token operator">&lt;</span>条件<span class="token operator">></span> <span class="token punctuation">:</span>    <span class="token operator">&lt;</span>语句块<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>&lt;条件&gt;可一个或多个，用 and 与 or 连接多个条件。</p><h4 id="二分支结构-if-else语句">二分支结构: if-else语句</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">if</span> <span class="token operator">&lt;</span>条件<span class="token operator">></span> <span class="token punctuation">:</span>    <span class="token operator">&lt;</span>语句块<span class="token number">1</span><span class="token operator">></span><span class="token keyword">else</span> <span class="token punctuation">:</span>    <span class="token operator">&lt;</span>语句块<span class="token number">2</span><span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>更简洁的表达方式：适合&lt;语句块1&gt;和&lt;语句块2&gt;都只包含简单表达式的情况。</p><p><code>&lt;表达式1&gt; if &lt;条件&gt; else &lt;表达式2&gt;</code></p><pre class="line-numbers language-python" data-language="python"><code class="language-python">s <span class="token operator">=</span> <span class="token builtin">eval</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">'请输入一个整数：'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>token <span class="token operator">=</span> <span class="token string">''</span> <span class="token keyword">if</span> s <span class="token operator">%</span> <span class="token number">3</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token keyword">and</span> s <span class="token operator">%</span> <span class="token number">5</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token keyword">else</span> <span class="token string">"不"</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'这个数字&#123;&#125;能够同时被3和5整除。'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="多分支结构-if-elif-else语句">多分支结构: if-elif-else语句</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">if</span> <span class="token operator">&lt;</span>条件<span class="token number">1</span><span class="token operator">></span> <span class="token punctuation">:</span>    <span class="token operator">&lt;</span>语句<span class="token number">1</span><span class="token operator">></span><span class="token keyword">elif</span> <span class="token operator">&lt;</span>条件<span class="token number">2</span><span class="token operator">></span> <span class="token punctuation">:</span>    <span class="token operator">&lt;</span>语句<span class="token number">2</span><span class="token operator">></span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token keyword">else</span> <span class="token punctuation">:</span>    <span class="token operator">&lt;</span>语句N<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>按照多分支结构的代码顺序依次评估判断条件，寻找并执行第一个结果为 True 条件对应的语句块，然后跳过整个 if - elif -else 结构。（只有条件为 False 才会进入 elif）</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">score <span class="token operator">=</span> <span class="token builtin">eval</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">'输入成绩：'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">if</span> score <span class="token operator">>=</span> <span class="token number">90</span> <span class="token punctuation">:</span>    grade <span class="token operator">=</span> <span class="token string">'A'</span><span class="token keyword">elif</span> score <span class="token operator">>=</span> <span class="token number">80</span> <span class="token punctuation">:</span>    grade <span class="token operator">=</span> <span class="token string">'B'</span><span class="token keyword">elif</span> score <span class="token operator">>=</span> <span class="token number">70</span> <span class="token punctuation">:</span>    grade <span class="token operator">=</span> <span class="token string">'C'</span><span class="token keyword">elif</span> score <span class="token operator">>=</span> <span class="token number">60</span> <span class="token punctuation">:</span>    grade <span class="token operator">=</span> <span class="token string">'D'</span><span class="token keyword">else</span> <span class="token punctuation">:</span>    grade <span class="token operator">=</span> <span class="token string">'E'</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'对应的等级是：&#123;&#125;'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>grade<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="判断条件及组合">判断条件及组合</h3><p>判断条件可以使用任何能够产生 True 或 False 的语句或函数</p><table><thead><tr><th style="text-align:center">操作符</th><th style="text-align:center">数学符号</th><th style="text-align:center">含义</th></tr></thead><tbody><tr><td style="text-align:center">&lt;</td><td style="text-align:center">&lt;</td><td style="text-align:center">小于</td></tr><tr><td style="text-align:center">&lt;=</td><td style="text-align:center">$\leq$</td><td style="text-align:center">小于等于</td></tr><tr><td style="text-align:center">&gt;=</td><td style="text-align:center">$\geq$</td><td style="text-align:center">大于等于</td></tr><tr><td style="text-align:center">&gt;</td><td style="text-align:center">&gt;</td><td style="text-align:center">大于</td></tr><tr><td style="text-align:center">==</td><td style="text-align:center">=</td><td style="text-align:center">等于</td></tr><tr><td style="text-align:center">!=</td><td style="text-align:center">$\neq$</td><td style="text-align:center">不等于</td></tr></tbody></table><p>Python 中，任何非零的数值、非空的数据类型都等价于 True，反之可以可直接用作判断条件。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">0</span> <span class="token operator">==</span> <span class="token boolean">False</span><span class="token punctuation">)</span><span class="token comment"># True</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">''</span> <span class="token operator">==</span> <span class="token boolean">True</span><span class="token punctuation">)</span><span class="token comment"># False</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>Python语言使用保留字not、and和or对条件进行逻辑运算或组合</p><p>not : 否；and : 与；or : 或</p><h3 id="程序的循环结构">程序的循环结构</h3><p>Python语言的循环结构包括两种：遍历循环和无限循环。</p><ul><li>遍历循环使用保留字<code>for</code>依次提取遍历结构各元素进行处理；</li><li>无限循环使用保留字<code>while</code>根据判断条件执行程序。</li></ul><h4 id="遍历循环-for">遍历循环: for</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">for</span> <span class="token operator">&lt;</span>循环变量<span class="token operator">></span> <span class="token keyword">in</span> <span class="token operator">&lt;</span>遍历结构<span class="token operator">></span> <span class="token punctuation">:</span>    <span class="token operator">&lt;</span>语句<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>遍历结构可以是字符串、文件、<code>range()</code>函数或组合数据类型等。</p><p>字符串：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">for</span> <span class="token operator">&lt;</span>循环变量<span class="token operator">></span> <span class="token keyword">in</span> <span class="token operator">&lt;</span>字符串<span class="token operator">></span> <span class="token punctuation">:</span>    <span class="token operator">&lt;</span>语句块<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><code>range()</code>函数：可以制定语句块的循环次数。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">for</span> <span class="token operator">&lt;</span>循环变量<span class="token operator">></span> <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token operator">&lt;</span>循环次数<span class="token operator">></span><span class="token punctuation">)</span> <span class="token punctuation">:</span>    <span class="token operator">&lt;</span>语句块<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>扩展模式：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">for</span> <span class="token operator">&lt;</span>变量<span class="token operator">></span> <span class="token keyword">in</span> <span class="token operator">&lt;</span>结构<span class="token operator">></span> <span class="token punctuation">:</span>    <span class="token operator">&lt;</span>语句<span class="token number">1</span><span class="token operator">></span><span class="token keyword">else</span> <span class="token punctuation">:</span>    <span class="token operator">&lt;</span>语句<span class="token number">2</span><span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>当 for 循环正常结束后，程序会执行 else 语句。</p><p>else语句只在循环正常执行之后才执行并结束，因此，可以在&lt;语句块2&gt;中放置判断循环执行情况的语句。</p><h4 id="无限循环-while">无限循环: while</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">while</span> <span class="token operator">&lt;</span>条件<span class="token operator">></span> <span class="token punctuation">:</span>    <span class="token operator">&lt;</span>语句块<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>&lt;条件&gt;与 if 一样，结果为 True 或 False。</p><p>当判断条件为 True，执行循环体语句，结束后再次判断条件；当 False，循环终止，执行与 while 同级别缩进的后续语句。</p><p>else 扩展：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">while</span> <span class="token operator">&lt;</span>条件<span class="token operator">></span> <span class="token punctuation">:</span>    <span class="token operator">&lt;</span>语句<span class="token number">1</span><span class="token operator">></span><span class="token keyword">else</span> <span class="token punctuation">:</span>    <span class="token operator">&lt;</span>语句<span class="token number">2</span><span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="循环控制-break和continue">循环控制: break和continue</h4><p><code>break</code> : 用来跳出<strong>最内层</strong> for 或 while 循环，脱离后从循环后的代码继续执行。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">while</span> <span class="token boolean">True</span> <span class="token punctuation">:</span>    s <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">'请输入名字(按Q退出)：'</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> s <span class="token operator">==</span> <span class="token string">'Q'</span> <span class="token punctuation">:</span>        <span class="token keyword">break</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'输入的是：'</span><span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'程序退出'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>continue</code> : 结束当前当次循环，跳出循环体下面尚未执行的语句，但不跳出整个循环。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">for</span> s <span class="token keyword">in</span> <span class="token string">'PYTHON'</span> <span class="token punctuation">:</span>    <span class="token keyword">if</span> s <span class="token operator">==</span> <span class="token string">'Y'</span> <span class="token punctuation">:</span>        <span class="token keyword">continue</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> end <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><code>continue</code>语句和<code>break</code>语句的区别是：<code>continue</code>语句只结束本次循环，不终止整个循环的执行，而<code>break</code>具备结束循环的能力。</p><h3 id="程序的异常处理">程序的异常处理</h3><h4 id="try-except">try  except</h4><p>Python 用 try 和 except 进行异常处理。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">try</span> <span class="token punctuation">:</span>    <span class="token operator">&lt;</span>语句<span class="token number">1</span><span class="token operator">></span><span class="token keyword">except</span> <span class="token punctuation">:</span>    <span class="token operator">&lt;</span>语句<span class="token number">2</span><span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>语句1是正常执行的程序内容，当执行这个语句发生异常时，则执行 except 后的语句2。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">try</span> <span class="token punctuation">:</span>    n <span class="token operator">=</span> <span class="token builtin">eval</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">'请输入一个数字：'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'输入数字的3次方的值为：'</span><span class="token punctuation">,</span> n <span class="token operator">**</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token keyword">except</span> <span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'输入错误，请输入一个数字！'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="实例解析——猜数字游戏">实例解析——猜数字游戏</h3><p>编写一个“猜数字游戏”的程序，在1到1000之间随机产生一个数，然后请用户循环猜测这个数字，对于每个答案只回答“猜大了”或“猜小了”，直到猜测准确为止，输出用户的猜测次数。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> randomtarget <span class="token operator">=</span> random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span>count <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">while</span> <span class="token boolean">True</span> <span class="token punctuation">:</span>    <span class="token keyword">try</span> <span class="token punctuation">:</span>        guess <span class="token operator">=</span> <span class="token builtin">eval</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">'请输入一个猜测的整数（1至1000）：'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">except</span> <span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'输入有误，请重试。'</span><span class="token punctuation">)</span>        <span class="token keyword">continue</span>    count <span class="token operator">=</span> count <span class="token operator">+</span> <span class="token number">1</span>    <span class="token keyword">if</span> guess <span class="token operator">></span> target <span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'大了'</span><span class="token punctuation">)</span>    <span class="token keyword">elif</span> guess <span class="token operator">&lt;</span> target <span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'小了'</span><span class="token punctuation">)</span>    <span class="token keyword">else</span> <span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'猜对了'</span><span class="token punctuation">)</span>        <span class="token keyword">break</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'此轮的猜测次数是：'</span><span class="token punctuation">,</span> count<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="函数和代码复用">函数和代码复用</h2><h3 id="函数的定义：def">函数的定义：def</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token operator">&lt;</span>函数名<span class="token operator">></span><span class="token punctuation">(</span><span class="token operator">&lt;</span>参数列表<span class="token operator">></span><span class="token punctuation">)</span> <span class="token punctuation">:</span>    <span class="token operator">&lt;</span>函数体<span class="token operator">></span>    <span class="token keyword">return</span> <span class="token operator">&lt;</span>返回值列表<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">fact</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span> <span class="token punctuation">:</span>    s <span class="token operator">=</span> <span class="token number">1</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        s <span class="token operator">*=</span> i    <span class="token keyword">return</span> s<span class="token keyword">print</span> <span class="token punctuation">(</span>fact<span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用步骤：</p><ol><li>函数定义；</li><li>函数调用；</li><li>函数执行；</li><li>函数返回</li></ol><h3 id="函数的参数传递">函数的参数传递</h3><h4 id="可选参数传递">可选参数传递</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token operator">&lt;</span>函数名<span class="token operator">></span><span class="token punctuation">(</span><span class="token operator">&lt;</span>非可选参数<span class="token operator">></span><span class="token punctuation">,</span> <span class="token operator">&lt;</span>可选参数<span class="token operator">></span> <span class="token operator">=</span> <span class="token operator">&lt;</span>默认值<span class="token operator">></span><span class="token punctuation">)</span> <span class="token punctuation">:</span>    <span class="token operator">&lt;</span>函数体<span class="token operator">></span>    <span class="token keyword">return</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">multiply</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>x <span class="token operator">*</span> y<span class="token punctuation">)</span>mulitply<span class="token punctuation">(</span><span class="token number">99</span><span class="token punctuation">)</span><span class="token comment"># 990</span>multiply<span class="token punctuation">(</span><span class="token number">99</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token comment"># 198</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="参数名称传递">参数名称传递</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">multiply</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>x <span class="token operator">*</span> y<span class="token punctuation">)</span>multiply<span class="token punctuation">(</span>x <span class="token operator">=</span> <span class="token number">99</span><span class="token punctuation">)</span><span class="token comment"># 990</span>multiply<span class="token punctuation">(</span>y <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">,</span> x <span class="token operator">=</span> <span class="token number">99</span><span class="token punctuation">)</span><span class="token comment"># 198</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>不需要保持参数传递的顺序，参数之间的顺序可以任意调整。</strong></p><h3 id="函数的返回值">函数的返回值</h3><p><strong>⭐return 语句用来结束函数并将程序返回到函数被调用的位置继续执行。</strong></p><p>return语句可以出现在函数中的任何部分，同时可以将0个、1个或多个函数运算的结果返回给函数被调用处的变量。</p><h3 id="变量的作用域">变量的作用域</h3><h4 id="局部变量">局部变量</h4><p>在函数内部定义的变量，仅在函数内部有效，当函数退出时变量将不再存在。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"> <span class="token keyword">def</span> <span class="token function">mul</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token punctuation">:</span>    z <span class="token operator">=</span> x <span class="token operator">*</span> y <span class="token comment">#z是局部变量</span>    <span class="token keyword">return</span> zs <span class="token operator">=</span> mul<span class="token punctuation">(</span><span class="token number">99</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token comment"># 198</span><span class="token keyword">print</span><span class="token punctuation">(</span>z<span class="token punctuation">)</span><span class="token comment"># error : ...</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="全局变量">全局变量</h4><p>在函数之外定义的变量，在程序执行全过程有效。全局变量在函数内部使用时，需提前使用 global 声明。<code>global &lt;全局变量&gt;</code></p><pre class="line-numbers language-python" data-language="python"><code class="language-python">n <span class="token operator">=</span> <span class="token number">2</span> <span class="token comment">#n是全局变量</span><span class="token keyword">def</span> <span class="token function">mul</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token punctuation">:</span>    <span class="token keyword">global</span> n    <span class="token keyword">return</span> x <span class="token operator">*</span> y <span class="token operator">*</span> ns <span class="token operator">=</span> mul <span class="token punctuation">(</span><span class="token number">99</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token number">396</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="代码复用">代码复用</h3><p>好处：</p><ul><li>避免相同功能代码在被调用处重复编写；</li><li>当更新函数功能时，所有被调用处的功能都被更新。</li></ul><p>模块化设计：指通过函数的封装功能将程序划分为主程序、子程序和子程序间关系的表达。</p><p>模块化设计基本要求：</p><ul><li>紧耦合：尽可能合理划分功能块，功能块内部耦合紧密；</li><li>松耦合：模块间关系尽可能简单，功能块之间耦合度低。</li></ul><p>耦合性：指程序结构中各模块之间相互关联的程度，它取决于各模块间接口的复杂程度和调用方式。</p><ul><li>紧耦合：模块或系统间关系紧密，存在较多或复杂的相互调用。缺点：更新一个模块可能导致其他模块变化，复用较困难。</li><li>松耦合：一般基于消息或协议实现，系统间交互简单。</li></ul><h3 id="实例解析–软文的诗词风">实例解析–软文的诗词风</h3><p>软文的诗词风将原有文章根据标点符号重新切分成短句并居中排版，对小屏幕阅读十分有利。使用程序将普通文章变成软文的诗词风十分有趣</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">txt <span class="token operator">=</span> <span class="token triple-quoted-string string">'''人生得意须尽欢，莫使金樽空对月。天生我材必有用，千金散尽还复来。'''</span>linewidth <span class="token operator">=</span> <span class="token number">30</span>  <span class="token comment"># 预定的输出宽度</span><span class="token keyword">def</span> <span class="token function">lineSplit</span><span class="token punctuation">(</span>line<span class="token punctuation">)</span><span class="token punctuation">:</span>    plist <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">','</span><span class="token punctuation">,</span> <span class="token string">'!'</span><span class="token punctuation">,</span> <span class="token string">'?'</span><span class="token punctuation">,</span> <span class="token string">'，'</span><span class="token punctuation">,</span> <span class="token string">'。'</span><span class="token punctuation">,</span> <span class="token string">'！'</span><span class="token punctuation">,</span> <span class="token string">'？'</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> p <span class="token keyword">in</span> plist<span class="token punctuation">:</span>        line <span class="token operator">=</span> line<span class="token punctuation">.</span>replace<span class="token punctuation">(</span>p<span class="token punctuation">,</span> <span class="token string">'\n'</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> line<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">linePrint</span><span class="token punctuation">(</span>line<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">global</span> linewidth    <span class="token keyword">print</span><span class="token punctuation">(</span>line<span class="token punctuation">.</span>center<span class="token punctuation">(</span>linewidth<span class="token punctuation">,</span> <span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token number">12288</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>newlines <span class="token operator">=</span> lineSplit<span class="token punctuation">(</span>txt<span class="token punctuation">)</span><span class="token keyword">for</span> newline <span class="token keyword">in</span> newlines<span class="token punctuation">:</span>    linePrint<span class="token punctuation">(</span>newline<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="组合数据类型">组合数据类型</h2><h3 id="组合数据类型基本概念">组合数据类型基本概念</h3><p>能够表示多个数据的类型成为组合数据类型</p><ul><li>集合类型：元素集合，元素之间无序，相同元素在集合中唯一存在；</li><li>序列类型：元素向量，元素之间存在先后关系，通过序号访问，元素之间不排他；</li><li>映射类型：“键—值”数据项的组合，每个元素是一个键值对，表示为(key, value)。</li></ul><h4 id="集合类型概述">集合类型概述</h4><p>包含0个或多个数据的无序组合，用大括号({})表示，集合中的元素可以动态增加或删除。</p><p>元素类型只能是不可变数据类型：整数、浮点数、字符串、元组等。</p><p>使用集合类型能够<strong>过滤重复元素</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python">T <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">1010</span><span class="token punctuation">,</span> <span class="token string">'1010'</span><span class="token punctuation">,</span> <span class="token number">12.3</span><span class="token punctuation">,</span> <span class="token number">1010</span><span class="token punctuation">,</span> <span class="token number">1010</span><span class="token punctuation">&#125;</span><span class="token keyword">print</span><span class="token punctuation">(</span>T<span class="token punctuation">)</span><span class="token comment"># &#123;1010, '1010', 12.3&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><table><thead><tr><th style="text-align:center">操作符及运算</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td style="text-align:center">S - T</td><td style="text-align:left">差集，返回一个新集合，包括在集合 S 中但不在集合 T 中的元素</td></tr><tr><td style="text-align:center">S &amp; T</td><td style="text-align:left">交集，返回一个新集合，包括同时在集合 S 和 T 中的元素</td></tr><tr><td style="text-align:center">S ^ T</td><td style="text-align:left">补集，返回一个新集合，包括集合 S 和 T 中非共同元素</td></tr><tr><td style="text-align:center">S | T</td><td style="text-align:left">并集，返回一个新集合，包括集合 S 和 T 中所有元素</td></tr></tbody></table><table><thead><tr><th style="text-align:center">函数或方法</th><th>描述</th></tr></thead><tbody><tr><td style="text-align:center"><code>S.add(x)</code></td><td>如果数据项 x 不在集合 S 中，将 x 增加到 S</td></tr><tr><td style="text-align:center"><code>S.remove(x)</code></td><td>如果 x 在集合 S 中，移除 x；不在则产生 KeyError 异常</td></tr><tr><td style="text-align:center"><code>S.clear()</code></td><td>移除 S 中所有数据项</td></tr><tr><td style="text-align:center"><code>len(S)</code></td><td>返回集合 S 元素个数</td></tr><tr><td style="text-align:center"><code>x in S</code></td><td>如果 x 是 S 的元素，返回 True；否则 False</td></tr><tr><td style="text-align:center"><code>x not in S</code></td><td>如果 x 不是 S 的元素，返回 True；否则 False</td></tr></tbody></table><p>set(x) 函数将其他的组合数据类型变成集合类型，也可以生成空集合变量。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">S <span class="token operator">=</span> <span class="token builtin">set</span><span class="token punctuation">(</span><span class="token string">'知之为知之不知为不知'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>S<span class="token punctuation">)</span><span class="token comment"># &#123;'不', '为', '之', '知'&#125;</span><span class="token keyword">for</span> i <span class="token keyword">in</span> S <span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> end <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">)</span><span class="token comment"># 不为之知</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="序列类型概述">序列类型概述</h4><p>序列类型是一维元素向量，元素之间存在先后关系，通过序号访问。</p><table><thead><tr><th style="text-align:center">操作符</th><th>描述</th></tr></thead><tbody><tr><td style="text-align:center"><code>x in s</code></td><td>如果 x 是 s 的元素，返回 True，否则 False</td></tr><tr><td style="text-align:center"><code>x not in s</code></td><td>如果 x 不是 s 的元素，返回 True，否则 False</td></tr><tr><td style="text-align:center"><code>s + t</code></td><td>连接 s 和 t</td></tr><tr><td style="text-align:center"><code>s * n 或 n * s</code></td><td>将序列 s 复制 n 次</td></tr><tr><td style="text-align:center"><code>s[i]</code></td><td>索引，返回 s 的第 i 个元素</td></tr><tr><td style="text-align:center"><code>s[i : j]</code></td><td>切片，返回包含 s 第 i 到 j 个元素的子序列（不包含 j）</td></tr><tr><td style="text-align:center"><code>s[i : j : k]</code></td><td>步骤切片，返回包含 s 第 i 到 j 个元素以 k 为步数的子序列</td></tr><tr><td style="text-align:center"><code>len(s)</code></td><td>s 的元素个数（长度）</td></tr><tr><td style="text-align:center"><code>min(s)</code></td><td>s 中的最小元素</td></tr><tr><td style="text-align:center"><code>max(s)</code></td><td>s 中的最大元素</td></tr><tr><td style="text-align:center"><code>s.index(x)</code></td><td>s 中第一次出现元素 x 的位置</td></tr><tr><td style="text-align:center"><code>s.count(x)</code></td><td>s 中出现 x 的总次数</td></tr></tbody></table><h4 id="映射类型概述">映射类型概述</h4><p>映射类型是“键-值”数据项的组合，每个元素是一个键值对，即元素是(key, value)，元素之间是无序的。键值对是一种二元关系，源于属性和值的映射关系</p><h3 id="列表类型">列表类型</h3><h4 id="定义">定义</h4><ul><li>列表是包含0个或多个元组的有序序列，属于序列类型。</li><li>可进行元素的增加、删除、替换、查找。</li><li>没有长度限制，元素类型可以不同，不需要预定长度。</li><li>列表类型用中括号(<code>[]</code>)，也可以通过<code>list()</code> 函数将集合或字符串类型转换成列表类型。</li></ul><p>列表属于序列类型，所以列表类型支持序列类型对应的操作</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token builtin">list</span><span class="token punctuation">(</span><span class="token string">'举个栗子'</span><span class="token punctuation">)</span><span class="token comment"># ['举', '个', '栗', '子']</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="索引">索引</h4><p>沿用序列类型的索引方式，即正向递增序号或反负递减序号，用中括号作为索引操作符，不得超过列表的元素范围，否则 IndexError。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">ls <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1010</span><span class="token punctuation">,</span> <span class="token string">'1010'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1010</span><span class="token punctuation">,</span> <span class="token string">'1010'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">1010</span><span class="token punctuation">]</span>ls <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token comment"># 1010</span>ls<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token comment"># [1010, '1010']</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以用<strong>遍历循环</strong>进行操作</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">for</span> <span class="token operator">&lt;</span>循环变量<span class="token operator">></span> <span class="token keyword">in</span> <span class="token operator">&lt;</span>列表变量<span class="token operator">></span> <span class="token punctuation">:</span>    <span class="token operator">&lt;</span>语句块<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">ls <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1010</span><span class="token punctuation">,</span> <span class="token string">'1010'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1010</span><span class="token punctuation">,</span> <span class="token string">'1010'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">1010</span><span class="token punctuation">]</span><span class="token keyword">for</span> i <span class="token keyword">in</span> ls <span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>i <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token comment"># 2020</span><span class="token comment"># 10101010</span><span class="token comment"># [1010, '1010', 1010, '1010']</span><span class="token comment"># 2020</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="切片">切片</h4><p>切片后的结果也是列表类型</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&lt;</span>列表或列表变量<span class="token operator">></span><span class="token punctuation">[</span>N <span class="token punctuation">:</span> M<span class="token punctuation">]</span>或<span class="token operator">&lt;</span>列表或列表变量<span class="token operator">></span><span class="token punctuation">[</span>N <span class="token punctuation">:</span> M <span class="token punctuation">:</span> K<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>在 [ ] 中表示区间需要用冒号（:），表示枚举使用英文逗号</p><p>一般要求 N 小于 M，当 N 大于 M 时，返回空列表</p><h3 id="列表类型的操作">列表类型的操作</h3><h4 id="操作函数">操作函数</h4><table><thead><tr><th style="text-align:center">函数</th><th>描述</th></tr></thead><tbody><tr><td style="text-align:center"><code>len(ls)</code></td><td>列表 ls 的元素个数（长度）</td></tr><tr><td style="text-align:center"><code>min(ls)</code></td><td>ls 中的最小元素</td></tr><tr><td style="text-align:center"><code>max(ls)</code></td><td>ls 中的最大元素</td></tr><tr><td style="text-align:center"><code>list(x)</code></td><td>将 x 转变成列表类型</td></tr></tbody></table><h4 id="列表的操作方法">列表的操作方法</h4><p><code>&lt;列表变量&gt;.&lt;方法名称&gt;(&lt;方法参数&gt;)</code></p><table><thead><tr><th style="text-align:center">方法</th><th>描述</th></tr></thead><tbody><tr><td style="text-align:center"><code>ls.append(x)</code></td><td>在 ls 最后增加 x</td></tr><tr><td style="text-align:center"><code>ls.insert(i, x)</code></td><td>在 ls 第 i 位置增加 x</td></tr><tr><td style="text-align:center"><code>ls.clear()</code></td><td>删除 ls 中所有元素</td></tr><tr><td style="text-align:center"><code>ls.pop(i)</code></td><td>将 ls 中第 i 项元素取出并从 ls  中删除</td></tr><tr><td style="text-align:center"><code>ls.remove(x)</code></td><td>将 ls 中出现的第一个 x 删除</td></tr><tr><td style="text-align:center"><code>ls.reverse()</code></td><td>ls 中元素反转</td></tr><tr><td style="text-align:center"><code>ls.copy()</code></td><td>生成新列表，复制 ls</td></tr></tbody></table><p><strong>del</strong>对列表元素或片段进行删除，使用方法如下：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">del</span> <span class="token operator">&lt;</span>列表变量<span class="token operator">></span><span class="token punctuation">[</span><span class="token operator">&lt;</span>索引序号<span class="token operator">></span><span class="token punctuation">]</span> 或<span class="token keyword">del</span> <span class="token operator">&lt;</span>列表变量<span class="token operator">></span><span class="token punctuation">[</span><span class="token operator">&lt;</span>索引起始<span class="token operator">></span><span class="token punctuation">:</span> <span class="token operator">&lt;</span>索引结束<span class="token operator">></span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">ls <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token keyword">del</span> ls<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>ls<span class="token punctuation">)</span><span class="token comment"># [1, 3, 4]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>ls.copy()</strong> 生成的新列表不受旧列表影响</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">ls <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span>lsn <span class="token operator">=</span> ls<span class="token punctuation">.</span>copy<span class="token punctuation">(</span><span class="token punctuation">)</span>ls<span class="token punctuation">.</span>clear<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>lsn<span class="token punctuation">)</span><span class="token comment"># [1, 2, 3, 4]</span>lt <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span>ls <span class="token operator">=</span> ltlt<span class="token punctuation">.</span>clear<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>ls<span class="token punctuation">)</span><span class="token comment"># []</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    list1 <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    list1<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>list1<span class="token punctuation">)</span>  <span class="token comment"># [1, 3, 5, 7, 100]</span>    list2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'hello'</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token number">5</span>      <span class="token keyword">print</span><span class="token punctuation">(</span>list2<span class="token punctuation">)</span>  <span class="token comment"># ['hello', 'hello', 'hello', 'hello', 'hello']</span>    <span class="token comment"># 计算列表长度(元素个数)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>list1<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 5</span>    <span class="token comment"># 下标(索引)运算，访问列表</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>list1<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment"># 1</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>list1<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment"># 100</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>list1<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment"># IndexError: list index out of range</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>list1<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment"># 100</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>list1<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment"># 5</span>    <span class="token comment"># 替换元素</span>    list1<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">300</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>list1<span class="token punctuation">)</span>  <span class="token comment"># [1, 3, 300, 7, 100]</span>    <span class="token comment"># 添加元素</span>    list1<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span>  <span class="token comment"># 添加到尾部</span>    list1<span class="token punctuation">.</span>insert<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">400</span><span class="token punctuation">)</span>  <span class="token comment"># 插入到对应索引号</span>    list1 <span class="token operator">+=</span> <span class="token punctuation">[</span><span class="token number">1000</span><span class="token punctuation">,</span> <span class="token number">2000</span><span class="token punctuation">]</span>  <span class="token comment"># 添加到尾部</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>list1<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>list1<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment"># 删除元素</span>    <span class="token keyword">del</span> list1<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>  <span class="token comment"># 删除对应索引号的元素</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>list1<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>list1<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 弹出末尾元素，括号内输入索引值便可弹出对应元素</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>list1<span class="token punctuation">)</span>    list1<span class="token punctuation">.</span>remove<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>  <span class="token comment"># 根据值删除元素，只删除第一个指定的值</span>    <span class="token keyword">if</span> <span class="token number">1234</span> <span class="token keyword">in</span> list1<span class="token punctuation">:</span>  <span class="token comment"># 进行优化</span>        list1<span class="token punctuation">.</span>remove<span class="token punctuation">(</span><span class="token number">1234</span><span class="token punctuation">)</span>    <span class="token keyword">del</span> list1<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>list1<span class="token punctuation">)</span>    <span class="token comment"># 清空列表元素</span>    <span class="token comment"># list1 = []</span>    list2 <span class="token operator">=</span> list1    list1<span class="token punctuation">.</span>clear<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 采用clear函数清理关联列表</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>list1<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>list2<span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    main<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    list1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'orange'</span><span class="token punctuation">,</span> <span class="token string">'apple'</span><span class="token punctuation">,</span> <span class="token string">'zoo'</span><span class="token punctuation">,</span> <span class="token string">'internationalization'</span><span class="token punctuation">,</span> <span class="token string">'blueberry'</span><span class="token punctuation">]</span>    <span class="token comment"># sorted函数返回列表排序后的拷贝不会修改传入的列表</span>    list2 <span class="token operator">=</span> <span class="token builtin">sorted</span><span class="token punctuation">(</span>list1<span class="token punctuation">)</span>    <span class="token comment"># 函数的设计就应该像sorted函数一样尽可能不产生副作用</span>    list3 <span class="token operator">=</span> <span class="token builtin">sorted</span><span class="token punctuation">(</span>list1<span class="token punctuation">,</span> reverse<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    <span class="token comment"># 通过key关键字参数指定根据字符串长度进行排序而不是默认的字母表顺序</span>    list4 <span class="token operator">=</span> <span class="token builtin">sorted</span><span class="token punctuation">(</span>list1<span class="token punctuation">,</span> key<span class="token operator">=</span><span class="token builtin">len</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>list1<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>list2<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>list3<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>list4<span class="token punctuation">)</span>    <span class="token comment"># 给列表对象发出排序消息直接在列表对象上进行排序</span>    list1<span class="token punctuation">.</span>sort<span class="token punctuation">(</span>reverse<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>  <span class="token comment"># 参数reverse=True按字母反向排序</span>    list1<span class="token punctuation">.</span>reverse<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 反转列表</span>    <span class="token comment"># list1[::-1]</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>list1<span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    main<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="字典的索引">字典的索引</h3><p><code>&lt;值&gt; = &lt;字典变量&gt;[&lt;键&gt;]</code></p><pre class="line-numbers language-python" data-language="python"><code class="language-python">d <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">'20101'</span><span class="token punctuation">:</span><span class="token string">'小明'</span><span class="token punctuation">,</span> <span class="token string">'20102'</span><span class="token punctuation">:</span><span class="token string">'小红'</span><span class="token punctuation">,</span> <span class="token string">'20103'</span><span class="token punctuation">:</span><span class="token string">'小白'</span><span class="token punctuation">&#125;</span><span class="token keyword">print</span><span class="token punctuation">(</span>d<span class="token punctuation">[</span><span class="token string">'20102'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment"># 小红</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>大括号 { } 可以创建字典，索引和赋值可以增加元素。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">t <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>t<span class="token punctuation">[</span><span class="token string">'20104'</span><span class="token punctuation">:</span><span class="token string">'小新'</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token comment"># &#123;'20104':'小新'&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>字典是存储可变数量键值对的数据结构，<strong>键和值可以是任意数据类型</strong>。</p><p><strong>键必须是不可变的</strong>，如字符串，数字或元组。</p><h3 id="字典的操作">字典的操作</h3><h4 id="相关操作函数">相关操作函数</h4><table><thead><tr><th style="text-align:center">函数</th><th>描述</th></tr></thead><tbody><tr><td style="text-align:center"><code>len(d)</code></td><td>字典 d 的元素个数（长度）</td></tr><tr><td style="text-align:center"><code>min(d)</code></td><td>字典 d 中键的最小值</td></tr><tr><td style="text-align:center"><code>max(d)</code></td><td>字典 d 中键的最大值</td></tr><tr><td style="text-align:center"><code>dict()</code></td><td>生成一个空字典</td></tr></tbody></table><h4 id="操作方法">操作方法</h4><p><code>&lt;字典变量&gt;.&lt;方法名称&gt;(&lt;方法参数&gt;)</code></p><table><thead><tr><th style="text-align:center">方法</th><th>描述</th></tr></thead><tbody><tr><td style="text-align:center"><code>d.keys()</code></td><td>返回所有的键信息</td></tr><tr><td style="text-align:center"><code>d.values()</code></td><td>返回所有的值信息</td></tr><tr><td style="text-align:center"><code>d.items()</code></td><td>返回所有的键值对</td></tr><tr><td style="text-align:center"><code>d.get(key, default)</code></td><td>键存在则返回相应值，否则返回默认值</td></tr><tr><td style="text-align:center"><code>d.pop(key, default)</code></td><td>键存在则返回并删除值对，否则返回默认值</td></tr><tr><td style="text-align:center"><code>d.popitem()</code></td><td>随机从字典中去取出一个键值对，以元组(key, value)形式返回，并从字典中删除</td></tr><tr><td style="text-align:center"><code>d.clear()</code></td><td>删除所有的键值对</td></tr></tbody></table><pre class="line-numbers language-python" data-language="python"><code class="language-python">d <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">'1'</span><span class="token punctuation">:</span><span class="token string">'A'</span><span class="token punctuation">,</span> <span class="token string">'2'</span><span class="token punctuation">:</span><span class="token string">'B'</span><span class="token punctuation">,</span> <span class="token string">'3'</span><span class="token punctuation">:</span><span class="token string">'C'</span><span class="token punctuation">&#125;</span>d<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># dict_items([('1','A'), ('2', 'B'), ('3', 'C')])</span>d<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'4'</span><span class="token punctuation">)</span>d<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'4'</span><span class="token punctuation">,</span> <span class="token string">'不存在'</span><span class="token punctuation">)</span><span class="token comment"># '不存在'</span><span class="token keyword">del</span> d<span class="token punctuation">[</span><span class="token string">'1'</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token comment"># &#123;'2':'B', '3':'C'&#125;</span><span class="token string">'1'</span> <span class="token keyword">in</span> d<span class="token comment"># True</span><span class="token string">'4'</span> <span class="token keyword">in</span> d<span class="token comment"># False</span><span class="token keyword">for</span> k <span class="token keyword">in</span> d<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'The key and value are &#123;&#125; and &#123;&#125;'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>k<span class="token punctuation">,</span> d<span class="token punctuation">.</span>get<span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># The key and value are 1 and A</span><span class="token comment"># The key and value are 2 and B</span><span class="token comment"># The key and value are 3 and C</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    scores <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">'骆昊'</span><span class="token punctuation">:</span> <span class="token number">95</span><span class="token punctuation">,</span> <span class="token string">'白元芳'</span><span class="token punctuation">:</span> <span class="token number">78</span><span class="token punctuation">,</span> <span class="token string">'狄仁杰'</span><span class="token punctuation">:</span> <span class="token number">82</span><span class="token punctuation">&#125;</span>    <span class="token comment"># 通过键可以获取字典中对应的值</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>scores<span class="token punctuation">[</span><span class="token string">'骆昊'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>scores<span class="token punctuation">[</span><span class="token string">'狄仁杰'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token comment"># 对字典进行遍历(遍历的其实是键再通过键取对应的值)</span>    <span class="token keyword">for</span> elem <span class="token keyword">in</span> scores<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'%s\t--->\t%d'</span> <span class="token operator">%</span> <span class="token punctuation">(</span>elem<span class="token punctuation">,</span> scores<span class="token punctuation">[</span>elem<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment"># 更新字典中的元素</span>    scores<span class="token punctuation">[</span><span class="token string">'白元芳'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">65</span>    scores<span class="token punctuation">[</span><span class="token string">'诸葛王朗'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">71</span>    scores<span class="token punctuation">.</span>update<span class="token punctuation">(</span>冷面<span class="token operator">=</span><span class="token number">67</span><span class="token punctuation">,</span> 方启鹤<span class="token operator">=</span><span class="token number">85</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>scores<span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token string">'武则天'</span> <span class="token keyword">in</span> scores<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>scores<span class="token punctuation">[</span><span class="token string">'武则天'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>scores<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'武则天'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment"># get方法也是通过键获取对应的值但是可以设置默认值</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>scores<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'武则天'</span><span class="token punctuation">,</span> <span class="token number">60</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment"># 删除字典中的元素</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>scores<span class="token punctuation">.</span>popitem<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>scores<span class="token punctuation">.</span>popitem<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>scores<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token string">'骆昊'</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment"># 清空字典</span>    scores<span class="token punctuation">.</span>clear<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>scores<span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    main<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="实例解析——文本词频统计">实例解析——文本词频统计</h3><p>在很多情况下，会遇到这样的问题：对于一篇给定文章，希望统计其中多次出现的词语，进而概要分析文章的内容。这个问题的解决可用于对网络信息进行自动检索和归档。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token triple-quoted-string string">'''第一步：分解并提取英文文章的单词通过txt.lower()函数将字母变成小写，排除原文大小写差异对词频统计的干扰。为统一分隔方式，可以将各种特殊字符和标点符号使用txt.replace()方法替换成空格，再提取单词。'''</span><span class="token keyword">def</span> <span class="token function">getText</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    txt <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'hamlet.txt'</span><span class="token punctuation">,</span> <span class="token string">'r'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>    txt <span class="token operator">=</span> txt<span class="token punctuation">.</span>lower<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> ch <span class="token keyword">in</span> <span class="token string">'!"#$&amp;%()*+,-./:;&lt;=>?@[\\]^_&#123;|&#125;~'</span><span class="token punctuation">:</span>        txt <span class="token operator">=</span> txt<span class="token punctuation">.</span>replace<span class="token punctuation">(</span>ch<span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> txthamletTxt <span class="token operator">=</span> getText<span class="token punctuation">(</span><span class="token punctuation">)</span>words <span class="token operator">=</span> hamletTxt<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span>counts <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token triple-quoted-string string">'''第二步：对每个单词进行计数或者，这个处理逻辑可以更简洁的表示为如下代码：counts[word] = counts.get(word,0) + 1'''</span><span class="token keyword">for</span> word <span class="token keyword">in</span> words<span class="token punctuation">:</span>    counts<span class="token punctuation">[</span>word<span class="token punctuation">]</span> <span class="token operator">=</span> count<span class="token punctuation">.</span>get<span class="token punctuation">(</span>word<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token triple-quoted-string string">'''对单词的统计值从高到低进行排序由于字典类型没有顺序，需要将其转换为有顺序的列表类型，再使用sort()方法和lambda函数配合实现根据单词次数对元素进行排序。'''</span>items <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span>counts<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment"># 将字典转换为记录列表</span>items<span class="token punctuation">.</span>sort<span class="token punctuation">(</span>key <span class="token operator">=</span> <span class="token keyword">lambda</span> x<span class="token punctuation">:</span>x<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> reverse <span class="token operator">=</span> <span class="token boolean">True</span><span class="token punctuation">)</span> <span class="token comment"># 以第2列排序</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    word<span class="token punctuation">,</span> count <span class="token operator">=</span> items<span class="token punctuation">[</span>i<span class="token punctuation">]</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'&#123;0:&lt;10&#125;&#123;1:>5&#125;'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>word<span class="token punctuation">,</span> count<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="文件和数据格式化">文件和数据格式化</h2><h3 id="文件的使用">文件的使用</h3><p>两种类型：文本文件、二进制文件</p><p>存储在辅助存储器上的一组数据序列。</p><h4 id="文件的类型">文件的类型</h4><p>文本文件：由单一特定编码的字符组成；</p><p>二进制文件：直接由比特0和比特1组成，没有统一的字符编码，文件内部数据的组织格式与文件用途有关。</p><h4 id="打开和关闭">打开和关闭</h4><p>文件的存储状态是默认状态，打开后变成占用状态，关闭后再次回到存储状态。</p><p><code>open()</code>函数：打开一个文件，并返回一个操作这个文件的变量</p><p><code>&lt;变量名&gt; = open(&lt;文件路径及文件名&gt;, &lt;打开模式&gt;)</code></p><table><thead><tr><th style="text-align:center">打开模式</th><th>含义</th></tr></thead><tbody><tr><td style="text-align:center"><code>'r'</code></td><td>只读，如果文件不存在返回异常 FileNotFoundError，默认值</td></tr><tr><td style="text-align:center"><code>'w'</code></td><td>覆盖写，文件不存在则创建，存在则完全覆盖原文件</td></tr><tr><td style="text-align:center"><code>'x'</code></td><td>创建写，文件不存在则创建，存在则返回异常 FileExistsError</td></tr><tr><td style="text-align:center"><code>'a'</code></td><td>追加写，文件不存在则创建，存在则在源文件最后追加内容</td></tr><tr><td style="text-align:center"><code>'b'</code></td><td>二进制文件模式</td></tr><tr><td style="text-align:center"><code>'t'</code></td><td>文本文件模式，默认值</td></tr><tr><td style="text-align:center"><code>'+'</code></td><td>与 r w x d 一同使用，在原功能上增加读写功能</td></tr></tbody></table><p>&lt;变量名&gt;.close() 关闭文件，释放文件的使用授权。</p><p>**表示路径时，使用 <code>\\\</code> 或 / 代替  <code>\\</code> **</p><h4 id="文件的读写">文件的读写</h4><table><thead><tr><th style="text-align:center">读取方法</th><th>含义</th></tr></thead><tbody><tr><td style="text-align:center"><code>f.read(size = -1)</code></td><td>从文件中读入整个文件内容。参数可选，读入前size长度的字符串或字节流</td></tr><tr><td style="text-align:center"><code>f.readline(size = -1)</code></td><td>从文件中读入一行内容。参数可选，读入该行前size长度的字符串或字节流</td></tr><tr><td style="text-align:center"><code>f.readlines(hint  = -1)</code></td><td>从文件中读入所有行，以每行为元素形成一个列表。参数可选，读入 hint 行</td></tr><tr><td style="text-align:center"><code>f.seek(offset)</code></td><td>改变当前文件操作指针的位置。offset : 0为文件开头；2为文件结尾</td></tr></tbody></table><table><thead><tr><th style="text-align:center">写入方法</th><th>含义</th></tr></thead><tbody><tr><td style="text-align:center"><code>f.write(s)</code></td><td>向文件写入一个字符串或字节流</td></tr><tr><td style="text-align:center"><code>f.writelines(s)</code></td><td>将一个元素为字符串的列表整体写入文件</td></tr></tbody></table><p>f.write(s) 写入字符串 s，每次写入后，将会记录一个<strong>写入指针</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python">f <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'d:/c.txt'</span><span class="token punctuation">,</span> <span class="token string">'w'</span><span class="token punctuation">)</span>f<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">'123\n'</span><span class="token punctuation">)</span>f<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">'456\n'</span><span class="token punctuation">)</span>f<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>要显式地<strong>使用<code>\n</code>进行分行</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python">ls <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'123'</span><span class="token punctuation">,</span> <span class="token string">'456'</span><span class="token punctuation">,</span> <span class="token string">'789'</span><span class="token punctuation">]</span>f <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'d:/d.txt'</span><span class="token punctuation">,</span> <span class="token string">'w'</span><span class="token punctuation">)</span>f<span class="token punctuation">.</span>writelinese<span class="token punctuation">(</span>ls<span class="token punctuation">)</span>f<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="数据组织的维度">数据组织的维度</h3><h4 id="一维数据">一维数据</h4><p>由对等关系的有序或无序数据构成，采用线性方式组织。</p><p>任何表现为序列或集合的内容都可以看作是一维数据。</p><h4 id="二维数据">二维数据</h4><p>也称表格数据，由关联系数构成，采用二维表格方式组成。</p><h4 id="高维数据">高维数据</h4><p>由键值对类型的数据组成，采用对象方式组织，可以多层嵌套。</p><p>高维数据在Web系统中十分常用，作为当今Internet组织内容的主要方式，高位数据衍生出HTML、XML、JSON等具体数据组织的语法结构。</p><h3 id="一维数据处理">一维数据处理</h3><h4 id="表示">表示</h4><p>由于是线性结构，因此主要采用列表形式表示。</p><h4 id="存储">存储</h4><p>4种方法：</p><ol><li>采用空格分隔元素：A 12 数据</li><li>采用逗号分隔元素：A, 12, 数据</li><li>采用续行分隔元素：A<br>12<br>数据</li><li>其他特殊符号分隔，如分号：A; 12; 数据</li></ol><p>逗号分隔的存储格式为 CSV 格式（Comma_Separated Values），它是<strong>一种通用的、相对简单的文件格式</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python">ls <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'北京'</span><span class="token punctuation">,</span> <span class="token string">'上海'</span><span class="token punctuation">,</span> <span class="token string">'广州'</span><span class="token punctuation">]</span>f <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'city.csv'</span><span class="token punctuation">,</span> <span class="token string">'w'</span><span class="token punctuation">)</span>f<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">','</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>ls<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'\n'</span><span class="token punctuation">)</span>f<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="处理">处理</h4><p>首先需要从 CSV 文件读入一维数据，并将其表示为列表对象。</p><p>默认包含了一个换行符 <code>\n</code>。<strong>采用 <code>.strip()</code> 去掉</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python">f <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'city.csv'</span><span class="token punctuation">,</span> <span class="token string">'r'</span><span class="token punctuation">)</span>ls <span class="token operator">=</span> f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">','</span><span class="token punctuation">)</span>f<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>ls<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="二维数据的处理">二维数据的处理</h3><h4 id="表示方法">表示方法</h4><p>二维数据可以采用二维列表来表示。</p><p>二维数据一般采用相同的数据类型存储</p><h4 id="存储方式">存储方式</h4><p>用 csv 文件存储</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># ls 代表二维列表</span>f <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'cpi.csv'</span><span class="token punctuation">,</span> <span class="token string">'w'</span><span class="token punctuation">)</span><span class="token keyword">for</span> row <span class="token keyword">in</span> ls<span class="token punctuation">:</span>    f<span class="token punctuation">.</span>wrtie<span class="token punctuation">(</span><span class="token string">','</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>row<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'\n'</span><span class="token punctuation">)</span>f<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="处理代码">处理代码</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python">f <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'cpi.csv'</span><span class="token punctuation">,</span> <span class="token string">'r'</span><span class="token punctuation">)</span>ls <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">for</span> line <span class="token keyword">in</span> f <span class="token punctuation">:</span>    ls<span class="token punctuation">.</span>append<span class="token punctuation">(</span>line<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">','</span><span class="token punctuation">)</span><span class="token punctuation">)</span>f<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>ls<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>与一维列表不同，二维列表一般需要借助<strong>循环遍历</strong>实现对每个数据的处理</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">for</span> row <span class="token keyword">in</span> ls <span class="token punctuation">:</span>    <span class="token keyword">for</span> item <span class="token keyword">in</span> row<span class="token punctuation">:</span>对第 row 行第 item 列元素进行处理<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>对二维数据进行格式化输出，打印成表格形状：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#此出省去从 CSV 获得的 ls</span><span class="token keyword">for</span> row <span class="token keyword">in</span> ls<span class="token punctuation">:</span>    line <span class="token operator">=</span> <span class="token string">''</span>    <span class="token keyword">for</span> item <span class="token keyword">in</span> row<span class="token punctuation">:</span>        line <span class="token operator">+=</span> <span class="token string">'&#123;:10&#125;\t'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span> <span class="token comment">#\t 横行制表符</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>line<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="zip-函数"><code>zip()</code>函数</h4><p>用来获取两个组合数据类，并将它的元素交织返回</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">x <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span>y <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">zip</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># [(1, 4), (2, 5), (3, 6)]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="实例解析–国家财政数据趋势演算">实例解析–国家财政数据趋势演算</h3><p>由个别数据预测规律属于数值分析的内容，可以通过线性回归方程建立简单模型，</p><p>线性回归方程的公式为： $\hat y$ = b$\hat x$ + a</p><p>X代表年份，Y代表各年份对应的数值。Python实现的国家财政数据趋势演算，根据上述三个数值计算出更多年份的可能数据。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">means</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> <span class="token builtin">sum</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token builtin">len</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">linearRegression</span><span class="token punctuation">(</span>xlist<span class="token punctuation">,</span> ylist<span class="token punctuation">)</span><span class="token punctuation">:</span>    xmeans<span class="token punctuation">,</span> ymeans <span class="token operator">=</span> means<span class="token punctuation">(</span>xlist<span class="token punctuation">)</span><span class="token punctuation">,</span> means<span class="token punctuation">(</span>ylist<span class="token punctuation">)</span>    bNumerator <span class="token operator">=</span> <span class="token operator">-</span><span class="token builtin">len</span><span class="token punctuation">(</span>xlist<span class="token punctuation">)</span> <span class="token operator">*</span> xmeans <span class="token operator">*</span> ymeans    bDenominator <span class="token operator">=</span> <span class="token operator">-</span><span class="token builtin">len</span><span class="token punctuation">(</span>xlist<span class="token punctuation">)</span> <span class="token operator">*</span> xmeans <span class="token operator">**</span> <span class="token number">2</span>    <span class="token keyword">for</span> x<span class="token punctuation">,</span> y <span class="token keyword">in</span> <span class="token builtin">zip</span><span class="token punctuation">(</span>xlist<span class="token punctuation">,</span> ylist<span class="token punctuation">)</span><span class="token punctuation">:</span>        bNumerator <span class="token operator">+=</span> x <span class="token operator">*</span> y        bDenominator <span class="token operator">+=</span> x <span class="token operator">**</span> <span class="token number">2</span>    b <span class="token operator">=</span> bNumerator <span class="token operator">/</span> bDenominator    a <span class="token operator">=</span> ymeas <span class="token operator">-</span> b <span class="token operator">*</span> xmeans    <span class="token keyword">return</span> a<span class="token punctuation">,</span> b<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">parseCSV</span><span class="token punctuation">(</span>filename<span class="token punctuation">)</span><span class="token punctuation">:</span>    dataNames<span class="token punctuation">,</span> data <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    f <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span>filename<span class="token punctuation">,</span> <span class="token string">'r'</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> line <span class="token keyword">in</span> f<span class="token punctuation">:</span>        splitedLine <span class="token operator">=</span> line<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">','</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token string">'指标'</span> <span class="token keyword">in</span> splitedLine<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">:</span>            years <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">(</span>x<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">for</span> x <span class="token keyword">in</span> splitedLine<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">]</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            dataNames<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token string">'&#123;:10&#125;'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>splitedLine<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            data<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token builtin">float</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token keyword">for</span> x <span class="token keyword">in</span> splitedLine<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    f<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> years<span class="token punctuation">,</span> dataNames<span class="token punctuation">,</span> data<span class="token comment"># 线性回归代码</span><span class="token keyword">def</span> <span class="token function">means</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> <span class="token builtin">sum</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token builtin">len</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">linearRegression</span><span class="token punctuation">(</span>xlist<span class="token punctuation">,</span> ylist<span class="token punctuation">)</span><span class="token punctuation">:</span>    xmeans<span class="token punctuation">,</span> ymeans <span class="token operator">=</span> means<span class="token punctuation">(</span>xlist<span class="token punctuation">)</span><span class="token punctuation">,</span> means<span class="token punctuation">(</span>ylist<span class="token punctuation">)</span>    bNumerator <span class="token operator">=</span> <span class="token operator">-</span> <span class="token builtin">len</span><span class="token punctuation">(</span>xlist<span class="token punctuation">)</span> <span class="token operator">*</span> xmeans <span class="token operator">*</span> ymeans    bDenominator <span class="token operator">=</span>  <span class="token operator">-</span> <span class="token builtin">len</span><span class="token punctuation">(</span>xlist<span class="token punctuation">)</span> <span class="token operator">*</span> xmeans <span class="token operator">**</span> <span class="token number">2</span>    <span class="token keyword">for</span> x<span class="token punctuation">,</span> y <span class="token keyword">in</span> <span class="token builtin">zip</span><span class="token punctuation">(</span>xlist<span class="token punctuation">,</span> ylist<span class="token punctuation">)</span><span class="token punctuation">:</span>        bNumerator <span class="token operator">+=</span> x <span class="token operator">*</span> y        bDenominator <span class="token operator">+=</span> x <span class="token operator">**</span> <span class="token number">2</span>    b <span class="token operator">=</span> bNumerator <span class="token operator">/</span> bDenominator    a <span class="token operator">=</span> ymeans <span class="token operator">-</span> b <span class="token operator">*</span> xmeans    <span class="token keyword">return</span> a<span class="token punctuation">,</span> b<span class="token keyword">def</span> <span class="token function">calNewData</span><span class="token punctuation">(</span>newyears<span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token punctuation">(</span>a <span class="token operator">+</span> b <span class="token operator">*</span> x<span class="token punctuation">)</span> <span class="token keyword">for</span> x <span class="token keyword">in</span> newyears<span class="token punctuation">]</span><span class="token keyword">def</span> <span class="token function">showResults</span><span class="token punctuation">(</span>years<span class="token punctuation">,</span> dataNames<span class="token punctuation">,</span> newDatas<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'&#123;:^60&#125;'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span><span class="token string">'国家财政收支线性估计'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    header <span class="token operator">=</span> <span class="token string">'指标       '</span>    <span class="token keyword">for</span> year <span class="token keyword">in</span> years<span class="token punctuation">:</span>        header <span class="token operator">+=</span> <span class="token string">'&#123;:10&#125;'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>year<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>header<span class="token punctuation">)</span>    <span class="token keyword">for</span> name<span class="token punctuation">,</span> lineData <span class="token keyword">in</span> <span class="token builtin">zip</span><span class="token punctuation">(</span>dataNames<span class="token punctuation">,</span> newDatas<span class="token punctuation">)</span><span class="token punctuation">:</span>        line <span class="token operator">=</span> name        <span class="token keyword">for</span> data <span class="token keyword">in</span> lineData<span class="token punctuation">:</span>            line <span class="token operator">+=</span> <span class="token string">'&#123;:>10.1f&#125;'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>line<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    newyears <span class="token operator">=</span> <span class="token punctuation">[</span>x<span class="token operator">+</span><span class="token number">2010</span> <span class="token keyword">for</span> x <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">]</span>    newDatas <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    years<span class="token punctuation">,</span> dataNames<span class="token punctuation">,</span> datas <span class="token operator">=</span> parseCSV<span class="token punctuation">(</span><span class="token string">'finance.csv'</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> data <span class="token keyword">in</span> datas<span class="token punctuation">:</span>        a<span class="token punctuation">,</span> b <span class="token operator">=</span> linearRegression<span class="token punctuation">(</span>years<span class="token punctuation">,</span> data<span class="token punctuation">)</span>        newDatas<span class="token punctuation">.</span>append<span class="token punctuation">(</span>calNewData<span class="token punctuation">(</span>newyears<span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">)</span>    showResults<span class="token punctuation">(</span>newyears<span class="token punctuation">,</span> dataNames<span class="token punctuation">,</span> newDatas<span class="token punctuation">)</span>main<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Python-计算生态">Python 计算生态</h2><h3 id="计算思维">计算思维</h3><p>程序设计是实践计算思维的重要手段</p><p>本质：抽象和自动化</p><p>算法（Algorithm）：<strong>解决问题的清晰指令</strong></p><h3 id="程序设计方法论">程序设计方法论</h3><p>一个解决复杂问题行之有效的方法被称作自顶而下的设计方法，其基本思想是以一个总问题开始，试图把它表达为很多小问题组成的解决方案。再用同样的技术依次攻破每个小问题，最终问题变得非常小，以至于可以很容易解决。然后只需把所有的碎片组合起来，就可以得到一个程序。</p><h4 id="自顶向下设计：最重要是顶层设计">自顶向下设计：最重要是顶层设计</h4><p>是一种开发复杂程序最具价值的设计理念和工具，设计过程自然且简单，自顶向下设计通过封装实现抽象，利用了模块化设计的思想。</p><h4 id="自底向上执行">自底向上执行</h4><p>开展测试的更好办法也是将程序分成小部分逐个测试</p><p>执行中等规模程序的最好方法是从结构图最底层开始，而不是从顶部开始，然后逐步上升。或者说，先运行和测试每一个基本函数，再测试由基础函数组成的整体函数，这样有助于定位错误</p><h3 id="计算生态">计算生态</h3><p>Python官方网站提供了第三方库索引功能<a href="https://pypi.python.org/pypi">PyPI</a></p><p>函数库并非都采用 Python 编写，很多采用 C 等语言编写的库可以通过简单的接口封装供 Python 程序调用。“胶水语言”。</p><p>Python 第三方程序包：</p><ul><li>库 library；</li><li>模块 module；</li><li>类 class；</li><li>程序包 package</li></ul><h3 id="实例解析–Web页面元素提取">实例解析–Web页面元素提取</h3><p>Web页面，一般是HTML页面，是Internet组织信息的基础元素。Web页面元素提取是一类常见问题，在网络爬虫、浏览器等程序中有着不可或缺的重要作用。</p><p>HTML指超文本标记语言，严格来说，HTML不是一种编程语言，而是一种对信息的标记语言，对Web的内容、格式进行描述。</p><p>自动地从一个链接获取HTML页面是网络爬虫的功能，本实例功能可以整体分成如下4个步骤：</p><ul><li>步骤1: 读取保存在本地的html文件；</li><li>步骤2：解析并提取其中的图片链接；</li><li>步骤3：输出提取结果到屏幕；</li><li>步骤4：保存提取结果为文件。</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token triple-quoted-string string">'''根据上述步骤，可以写出主程序如下。其中设置了4个函数getHTMLlines()、extractImageUrls()、showResults()和saveResults()分别对应上述4个步骤。'''</span><span class="token keyword">def</span> <span class="token function">getHTMLlines</span><span class="token punctuation">(</span>htmlpath<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">'''    getHTMLlines()函数读取HTML文件并内容，    并将结果转换为一个分行列表，    为了兼容不同编码，建议在open()函数中增加encoding字段，    设置采用UTF-8编码打开文件。    '''</span>    f <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span>htmlpath<span class="token punctuation">,</span> <span class="token string">"r"</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span>    ls <span class="token operator">=</span> f<span class="token punctuation">.</span>readlines<span class="token punctuation">(</span><span class="token punctuation">)</span>    f<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> ls<span class="token keyword">def</span> <span class="token function">extractImageUrls</span><span class="token punctuation">(</span>htmllist<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">'''    extractImageUrls()是程序的核心，用于解析文件并提取图像的URL。    '''</span>    urls <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> line <span class="token keyword">in</span> htmllist<span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token string">'img'</span> <span class="token keyword">in</span> line<span class="token punctuation">:</span>            url <span class="token operator">=</span> line<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">'src='</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">'"'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>            <span class="token keyword">if</span> <span class="token string">'http'</span> <span class="token keyword">in</span> url<span class="token punctuation">:</span>                urls<span class="token punctuation">.</span>append<span class="token punctuation">(</span>url<span class="token punctuation">)</span>    <span class="token keyword">return</span> urls<span class="token keyword">def</span> <span class="token function">showResults</span><span class="token punctuation">(</span>urls<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">'''    showResults()函数将获取的链接输出到屏幕上，    增加一个计数变量提供更好用户体验    '''</span>    count <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">for</span> url <span class="token keyword">in</span> urls<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'第&#123;:2&#125;个URL:&#123;&#125;'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>count<span class="token punctuation">,</span> url<span class="token punctuation">)</span><span class="token punctuation">)</span>        count <span class="token operator">+=</span> <span class="token number">1</span><span class="token keyword">def</span> <span class="token function">saveResults</span><span class="token punctuation">(</span>filepath<span class="token punctuation">,</span> urls<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment"># 保存结果到文件</span>    f <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span>filepath<span class="token punctuation">,</span> <span class="token string">"w"</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> url <span class="token keyword">in</span> urls<span class="token punctuation">:</span>        f<span class="token punctuation">.</span>write<span class="token punctuation">(</span>url<span class="token operator">+</span><span class="token string">"\n"</span><span class="token punctuation">)</span>    f<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">'''    定义main()函数的目的是为了让代码更加清晰，    作为主程序，也可以不采用函数形式而直接编写。    main()前两行分别制定了拟获取HTML文件的路径和结果输出路径。    '''</span>    inputfile  <span class="token operator">=</span> <span class="token string">'nationalgeographic.html'</span>    outputfile <span class="token operator">=</span> <span class="token string">'nationalgeographic-urls.txt'</span>    htmlLines <span class="token operator">=</span> getHTMLlines<span class="token punctuation">(</span>inputfile<span class="token punctuation">)</span>    imageUrls <span class="token operator">=</span> extractImageUrls<span class="token punctuation">(</span>htmlLines<span class="token punctuation">)</span>    showResults<span class="token punctuation">(</span>imageUrls<span class="token punctuation">)</span>    saveResults<span class="token punctuation">(</span>outputfile<span class="token punctuation">,</span> imageUrls<span class="token punctuation">)</span>main<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Python-标准库概览">Python 标准库概览</h2><p>有一部分Python计算生态随Python安装包一起发布，用户可以随时使用，被称为Python标准库。</p><h3 id="turtle库概述">turtle库概述</h3><p>turtle 是 Python 重要的标准库之一，它能够进行基本的图形绘制。概念诞生于1969年，成功应用于 LOGO 编程语言。</p><p>基本框架：一个龟在坐标系中爬行，其爬行轨迹形成了绘制图形。</p><p>刚开始时，位于正中央，前进方向为水平右方。</p><p>三种引用方式：</p><ol><li><pre><code class="language-python">import turtleturtle.&lt;函数名&gt;()<pre class="line-numbers language-none"><code class="language-none">2. &#96;&#96;&#96;python   from turtle import *   &lt;函数名&gt;()<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></code></pre></li><li><pre><code class="language-python">import turtle as t(也可以是其他别名)t.&lt;函数名&gt;()<pre class="line-numbers language-none"><code class="language-none">### turtle库与基本绘图turtle库包含100多个功能函数，主要包括窗体函数、画笔状态函数、画笔运动函数等三类。#### 窗体函数：turtle.setup()&#96;turtle.setup(width, height, startx, starty)&#96;作用：设置主窗体的大小和位置。width：窗口宽度。整数：像素值；小数：窗口宽度与屏幕的比例。height：窗口高度。startx：窗口左侧与屏幕左侧的像素距离。None：水平中央。starty：窗口顶部与屏幕顶部的像素距离。None：垂直中央。#### 画笔状态函数|           函数            | 作用                                        || :-----------------------: | ------------------------------------------- ||        &#96;pendown()&#96;        | 放下画笔                                    ||         &#96;penup()&#96;         | 提起画笔，与 pendown() 配对使用             ||        &#96;pensize()&#96;        | 设置画笔线条的粗细                          ||       &#96;pencolor()&#96;        | 设置颜色                                    ||      &#96;begin_fill()&#96;       | 填充前，调用                                ||       &#96;end_fill()&#96;        | 填充结束                                    ||        &#96;filling()&#96;        | 返回填充的状态，True 为填充，False 为未填充 ||         &#96;clear()&#96;         | 清空当前窗口，但不改变当前画笔位置          ||         &#96;reset()&#96;         | 清空并重置                                  ||      &#96;screensize()&#96;       | 设置画布的长与宽                            ||      &#96;showturtle()&#96;       | 显示画笔的 turtle 形状                      ||      &#96;hideturtle()&#96;       | 隐藏画笔的 turtle 形状                      ||       &#96;isvisible()&#96;       | 如果 turtle 可见，则返回 True               || &#96;write(str, font &#x3D; None)&#96; | 输出 font 字体的 str                        |#### 画笔运动函数|        函数         | 作用                               || :-----------------: | ---------------------------------- ||     &#96;forward()&#96;     | 前进指定距离                       ||    &#96;backward()&#96;     | 后退指定距离                       ||   &#96;right(angle)&#96;    | 向右旋转 angle 角度                ||    &#96;left(angle)&#96;    | 向左旋转 angle 角度                ||    &#96;goto(x, y)&#96;     | 移动到（x，y）处                   ||      &#96;setx()&#96;       | 将当前 x 轴移动到指定位置          ||      &#96;sety()&#96;       | 将当前 y 轴移动到指定位置          || &#96;setheading(angle)&#96; | 设置当前朝向为 angle 角度          ||      &#96;home()&#96;       | 设置当前位置为原点，朝向东         || &#96;circle(radius, e)&#96; | 绘制一个半径 r 和角度 e 的园或弧形 ||   &#96;dot(r, color)&#96;   | 绘制一个半径 r 和颜色的圆点        ||      &#96;undo()&#96;       | 撤销画笔最后一个动作               ||      &#96;speed()&#96;      | 设置绘制速度，参数为0~10           |### random 库概述用于产生各种分布的伪随机数序列。采用梅森旋转算法（Mersenne twiste）生成伪随机数序列，可用于除随机性要求更高的加密算法外大多数工程应用。最基本函数：&#96;random.random()&#96;，它生成 [0.0, 1.0)之间的小数### random 库与随机数应用|             函数              | 作用                                                || :---------------------------: | --------------------------------------------------- ||        &#96;seed(a &#x3D; None)&#96;       | 初始化随机数种子，默认值为当前系统时间              ||           &#96;random()&#96;          | 生成 [0.0, 1.0] 之间的小数                          ||         &#96;randint(a, b)&#96;         | 生成一个 [a, b] 之间的整数                          ||        &#96;getrandbits(k)&#96;       | 生成一个 k 比特长度的随机整数                       || &#96;randrange(start, stop [step])&#96; | 生成一个 [start, stop) 之间以 step 为步数的随机整数 ||       &#96;uniform(a, b)&#96;      | 生成一个 [a, b] 之间的随机小数                      ||          &#96;choice(seq)&#96;          | 从序列类型（如列表）中随机返回一个元素              ||         &#96;shuffle(seq)&#96;        | 将序列类型中元素随机排列，返回序列                  ||        &#96;sample(pop, k)&#96;       | 从 pop 类型中随机选取 k 个元素，以列表类型返回      |### time 库概述Python 提供的处理时间标准库。提供系统级精确计时器的计时功能，可以用来分析程序性能，也可以让程序暂停运行时间。3方面主要功能：1. 时间处理：&#96;time.time()&#96;、&#96;time.gmtime()&#96;、&#96;time.localtime()&#96;、&#96;time.ctime()&#96;2. 时间格式化：&#96;time.mktime()&#96;、&#96;time.strftime()&#96;、&#96;time.strptime()&#96;3. 计时：&#96;time.sleep()&#96;、&#96;time.monotonic()&#96;、&#96;time.perf_counter()&#96;|         函数          | 作用                                                         || :-------------------: | ------------------------------------------------------------ ||     &#96;time.time()&#96;     | 获取当前的时间戳                                             ||    &#96;time.gmtime()&#96;    | 获取当前时间戳对应的 struct_time 对象                        ||  &#96;time.localtime()&#96;   | 获取当前时间戳对应的本地时间的 struct_time 对象              ||    &#96;time.ctime()&#96;     | 获取当前时间戳对应的易读字符串表示，内部会调用 time.localtime() ||    &#96;time.mktime()&#96;    | 将 srtuct_time 转换为时间戳                                  ||   &#96;time.strftime()&#96;   | 时间格式化最有效的方法，几乎可以以任何通用格式输出时间       ||   &#96;time.strptime()&#96;   | 提取字符串中的时间来生成 struct_time                         || &#96;time.perf_counter()&#96; | 返回计时器的精准时间（系统的运行时间），包含整个系统的睡眠时间。由于返回值的基准点是未定义的，所以，只有连续调用的结果之间的差才是有效的。&lt;br &#x2F;&gt;调用一次 &#96;perf_counter()&#96;，从计算机系统里随机选一个时间点A，计算其距离当前时间点B1有多少秒。当第二次调用该函数时，默认从第一次调用的时间点A算起，距离当前时间点B2有多少秒。两个函数取差，即实现从时间点B1到B2的计时功能。 |&#96;struct_time&#96; 元素| 下标 |   属性   | 值                           || :--: | :------: | ---------------------------- ||  0   | tm_year  | 年份，整数                   ||  1   |  tm_mon  | 月份 [1, 12]                 ||  2   | tm_mday  | 日期 [1, 31]                 ||  3   | tm_hour  | 小时 [0, 23]                 ||  4   |  tm_min  | 分钟 [0, 59]                 ||  5   |  tm_sec  | 秒 [0, 61]                   ||  6   | tm_wday  | 星期 [0, 6] （0 表示星期一） ||  7   | tm_yday  | 该年第几天 [1, 366]          ||  8   | tm_isdst | 是否夏令时，0否，1是，-1未知 |&#96;time.strftime()&#96;:&#96;time.strftime(&#39;&lt;参数&gt;&#39;, time)&#96;| 参数符号 |  日期&#x2F;时间  |       值范围       || :------: | :---------: | :----------------: ||    %Y    |    年份     |    0001 - 9999     ||    %m    |    月份     |      01 - 12       ||    %B    |    月名     | January - December ||    %b    |  月名缩写   |    Jan. - Dec.     ||    %d    |    日期     |      01 - 31       ||    %A    |    星期     |  Monday - Sunday   ||    %a    |  星期缩写   |    Mon. - Sun.     ||    %H    | 小时（24h） |      00 - 23       ||    %I    |     12h     |      01 - 12       ||    %p    |   上&#x2F;下午   |       AM, PM       ||    %M    |    分钟     |       00 -59       ||    %S    |     秒      |      00 - 59       |### time 库与程序计时三要素：+ 程序开始&#x2F;结束时间+ 程序运行时间+ 程序各核心模块运行时间&#96;time.sleep(t)&#96;：推迟 t 秒执行&#96;time.perf_counter()&#96;：计时器，每次调用记录当前执行时间### 实例解析--雪景艺术绘图turtle图形艺术，指利用turtle库画笔创造性绘制绚丽多彩艺术图形的过程turtle图形艺术效果中隐含着很多随机元素，如随机颜色、尺寸、位置和数量等。在图形艺术绘制中需要引入随机函数库random。常用randint()函数，生成指定范围内的随机数绘制分为三个步骤:1. 构建图的背景2. 绘制雪花效果3. 绘制雪地效果&#96;&#96;&#96;pythonfrom turtle import *from random import *# 第二步，绘制雪花效果。def drawSnow():    hideturtle()    pensize(2)    for i in range(100):        r, g, b &#x3D; random(), random(), random()        pencolor(r,g,b)        penup()        setx(randint(-350,350))        sety(randint(1,270))        pendown()        dens &#x3D; randint(8,12)        snowsize &#x3D; randint(10,14)        for j in range(dens):            forward(snowsize)            backward(snowsize)            right(360&#x2F;dens)# 第三步，绘制雪地效果。def drawGround():    hideturtle()    for i in range(400):        pensize(randint(5,10))        x &#x3D; randint(-400,350)        y &#x3D; randint(-280,-1)        r, g, b &#x3D; -y&#x2F;280, -y&#x2F;280, -y&#x2F;280        pencolor((r,g,b))        penup()        goto(x,y)        pendown()        forward(randint(40,100))# 第一步，构建图的背景setup(800,600,200,200)tracer(False)bgcolor(&quot;black&quot;)drawSnow()drawGround()done()<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></code></pre></li></ol><h2 id="Python-第三方库概览">Python 第三方库概览</h2><h3 id="获取和安装">获取和安装</h3><h4 id="pip-工具">pip 工具</h4><p>是 Python 官方提供并维护的在线第三方库安装工具。</p><p><code>pip install &lt;库名&gt;</code></p><h4 id="自定义安装">自定义安装</h4><p>一般适用于在 pip 中尚无登记或安装失败的第三方库</p><p>美国加州大学尔湾分校提供了一个页面，帮助Python用户获得Windows可直<br>接安装的第三方库文件，<a href="https://www.lfd.uci.edu/~gohlke/pythonlibs/">链接地址</a></p><p>这里以scipy为例说明，首先在上述页面中找到scipy库对应的内容。选择其中的.whl文件下载，这里选择适用于Python 3.5版本解释器和32位系统的对应文件：scipy-0 . 1 7 . 1 - c p 3 5 - c p 3 5 m - w i n 3 2 . w h l ， 下载该文件到<br>D:\pycodes目录。</p><p>然后，采用pip命令安装该文件。</p><p><code>pip install D:\pycodes\scipy-0.17.1-cp35-cp35m-win32.whl</code></p><h4 id="pip-工具使用">pip 工具使用</h4><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">pip install &lt;库名> <span class="token comment">#安装</span>pip uninstall &lt;库名> <span class="token comment">#卸载</span>pip list <span class="token comment">#列出当前系统以安装的第三方库</span>pip show &lt;库名> <span class="token comment">#列出某个以安装库的详细信息</span>pip download &lt;库名> <span class="token comment">#下载第三方库的安装包，但不安装</span>pip search &lt;关键字> <span class="token comment">#联网搜索库名或摘要中的关键字</span>pip <span class="token operator">-</span>h  <span class="token comment">#列出pip常用的子命令</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="PyInstaller-库">PyInstaller 库</h3><p>将 Python 源文件（.py）打包，变成直接可运行的可执行文件。</p><p>使用PyInstaller库对Python源文件打包十分简单，使用方法如下：</p><p><code>PyInstaller &lt;程序文件名&gt;</code></p><p>生成 dist 和 build 文件夹。build 是存储临时文件的目录。最终的打包程序在dist内部与源文件同名的目录中。</p><p>注意问题：</p><ul><li>文件路径中不能出现空格和英文句号（.）</li><li>源文件必须是 UTF-8 编码</li></ul><table><thead><tr><th style="text-align:center">常用参数</th><th>描述</th></tr></thead><tbody><tr><td style="text-align:center">-h, --help</td><td>查看帮助</td></tr><tr><td style="text-align:center">–clean</td><td>清理打包过程中的临时文件</td></tr><tr><td style="text-align:center">-D, --onedir</td><td>默认值，生成 dist 目录</td></tr><tr><td style="text-align:center">-F, --onefile</td><td>在 dist 文件夹中只生成独立的打包文件</td></tr><tr><td style="text-align:center">-i, &lt;图标.ico&gt;</td><td>指定打包程序使用的图标文件</td></tr></tbody></table><h3 id="jieba-库">jieba 库</h3><p>重要的第三方中文分词函数库</p><p>原理：是利用一个中文词库，将待分词的内容与分词词库进行比对，通过图结构和动态规划方法找到最大概率的词组。除了分词，jieba还提供增加自定义中文单词的功能。</p><p>三模式：</p><ol><li>精确模式：最精确地切开，适合文本分析；</li><li>全模式：把句子中所有可以成词的词语都扫描出来，但是不能解歧义；</li><li>搜索引擎模式：在精确模式的基础上，对长词再次切分，提高召回率，适合用于搜索引擎分词</li></ol><table><thead><tr><th style="text-align:center">函数</th><th>作用</th></tr></thead><tbody><tr><td style="text-align:center"><code>lcut(s)</code></td><td>精确模式，返回列表</td></tr><tr><td style="text-align:center"><code>lcut(s, cut_all = True)</code></td><td>全模式</td></tr><tr><td style="text-align:center"><code>lcut_for_search(s)</code></td><td>搜索模式</td></tr><tr><td style="text-align:center"><code>add_word(w)</code></td><td>向词典中添加新词 w</td></tr></tbody></table><h3 id="wordcloud-库">wordcloud 库</h3><p>“关键词云层”、“关键词渲染”</p><table><thead><tr><th style="text-align:center">常用参数</th><th>功能</th></tr></thead><tbody><tr><td style="text-align:center"><code>font_path</code></td><td>指定字体文件的完整路径，默认 None</td></tr><tr><td style="text-align:center"><code>width</code></td><td>生成图片宽度，默认400像素</td></tr><tr><td style="text-align:center"><code>height</code></td><td>生成图片高度，默认200像素</td></tr><tr><td style="text-align:center"><code>mask</code></td><td>词云形状，默认 None，方形图</td></tr><tr><td style="text-align:center"><code>min_font_size</code></td><td>词云中最小的字体字号，默认4号</td></tr><tr><td style="text-align:center"><code>font_step</code></td><td>字号步进间隔，默认1</td></tr><tr><td style="text-align:center"><code>stopwords</code></td><td>被排除词列表，排除词不再词云中显示</td></tr><tr><td style="text-align:center"><code>background_color</code></td><td>背景颜色，默认黑色</td></tr><tr><td style="text-align:center"><code>max_words</code></td><td>词云中最大词数，默认200</td></tr><tr><td style="text-align:center"><code>max_font_size</code></td><td>词云中最大的字体字号，默认 None，根据高度自动调整</td></tr></tbody></table><table><thead><tr><th style="text-align:center">常用方法</th><th>功能</th></tr></thead><tbody><tr><td style="text-align:center"><code>generate(text)</code></td><td>生成词云</td></tr><tr><td style="text-align:center"><code>tofile(filename)</code></td><td>保存</td></tr></tbody></table><p>图像词云：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> scipy<span class="token punctuation">.</span>misc <span class="token keyword">import</span> imreadmask <span class="token operator">=</span> imread<span class="token punctuation">(</span><span class="token string">'***.png'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="实例解析–《红楼梦》人物出场词云">实例解析–《红楼梦》人物出场词云</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 先输出排序前15的单词</span><span class="token keyword">import</span> jiebaf <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">"红楼梦.txt"</span><span class="token punctuation">,</span> <span class="token string">"r"</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span>txt <span class="token operator">=</span> f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>f<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>words  <span class="token operator">=</span> jieba<span class="token punctuation">.</span>lcut<span class="token punctuation">(</span>txt<span class="token punctuation">)</span>counts <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token keyword">for</span> word <span class="token keyword">in</span> words<span class="token punctuation">:</span>    <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>word<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>  <span class="token comment">#排除单个字符的分词结果</span>        <span class="token keyword">continue</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        counts<span class="token punctuation">[</span>word<span class="token punctuation">]</span> <span class="token operator">=</span> counts<span class="token punctuation">.</span>get<span class="token punctuation">(</span>word<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span>items <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span>counts<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>items<span class="token punctuation">.</span>sort<span class="token punctuation">(</span>key<span class="token operator">=</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span>x<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> reverse<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">15</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    word<span class="token punctuation">,</span> count <span class="token operator">=</span> items<span class="token punctuation">[</span>i<span class="token punctuation">]</span>    <span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">"&#123;0:&lt;10&#125;&#123;1:>5&#125;"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>word<span class="token punctuation">,</span> count<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 需要排除一些人名无关词汇，如“什么”、“一个”等</span><span class="token keyword">import</span> jiebaexcludes <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">"什么"</span><span class="token punctuation">,</span><span class="token string">"一个"</span><span class="token punctuation">,</span><span class="token string">"我们"</span><span class="token punctuation">,</span><span class="token string">"那里"</span><span class="token punctuation">,</span><span class="token string">"你们"</span><span class="token punctuation">,</span><span class="token string">"如今"</span><span class="token punctuation">,</span> \            <span class="token string">"说道"</span><span class="token punctuation">,</span><span class="token string">"知道"</span><span class="token punctuation">,</span><span class="token string">"老太太"</span><span class="token punctuation">,</span><span class="token string">"起来"</span><span class="token punctuation">,</span><span class="token string">"姑娘"</span><span class="token punctuation">,</span><span class="token string">"这里"</span><span class="token punctuation">,</span> \            <span class="token string">"出来"</span><span class="token punctuation">,</span><span class="token string">"他们"</span><span class="token punctuation">,</span><span class="token string">"众人"</span><span class="token punctuation">,</span><span class="token string">"自己"</span><span class="token punctuation">,</span><span class="token string">"一面"</span><span class="token punctuation">,</span><span class="token string">"太太"</span><span class="token punctuation">,</span> \            <span class="token string">"只见"</span><span class="token punctuation">,</span><span class="token string">"怎么"</span><span class="token punctuation">,</span><span class="token string">"奶奶"</span><span class="token punctuation">,</span><span class="token string">"两个"</span><span class="token punctuation">,</span><span class="token string">"没有"</span><span class="token punctuation">,</span><span class="token string">"不是"</span><span class="token punctuation">,</span> \            <span class="token string">"不知"</span><span class="token punctuation">,</span><span class="token string">"这个"</span><span class="token punctuation">,</span><span class="token string">"听见"</span><span class="token punctuation">&#125;</span>f <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">"红楼梦.txt"</span><span class="token punctuation">,</span> <span class="token string">"r"</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span>txt <span class="token operator">=</span> f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>f<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>words  <span class="token operator">=</span> jieba<span class="token punctuation">.</span>lcut<span class="token punctuation">(</span>txt<span class="token punctuation">)</span>counts <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token keyword">for</span> word <span class="token keyword">in</span> words<span class="token punctuation">:</span>    <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>word<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>  <span class="token comment">#排除单个字符的分词结果</span>        <span class="token keyword">continue</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        counts<span class="token punctuation">[</span>word<span class="token punctuation">]</span> <span class="token operator">=</span> counts<span class="token punctuation">.</span>get<span class="token punctuation">(</span>word<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token keyword">for</span> word <span class="token keyword">in</span> excludes<span class="token punctuation">:</span>    <span class="token keyword">del</span><span class="token punctuation">(</span>counts<span class="token punctuation">[</span>word<span class="token punctuation">]</span><span class="token punctuation">)</span>items <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span>counts<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>items<span class="token punctuation">.</span>sort<span class="token punctuation">(</span>key<span class="token operator">=</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span>x<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> reverse<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    word<span class="token punctuation">,</span> count <span class="token operator">=</span> items<span class="token punctuation">[</span>i<span class="token punctuation">]</span>    <span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">"&#123;0:&lt;10&#125;&#123;1:>5&#125;"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>word<span class="token punctuation">,</span> count<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 结合已经将结果的词云效果，利用wordcloud库，将人物出场统计以词云的方式展现出来</span><span class="token keyword">import</span> jieba<span class="token keyword">from</span> wordcloud <span class="token keyword">import</span> WordCloudexcludes <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">"什么"</span><span class="token punctuation">,</span><span class="token string">"一个"</span><span class="token punctuation">,</span><span class="token string">"我们"</span><span class="token punctuation">,</span><span class="token string">"那里"</span><span class="token punctuation">,</span><span class="token string">"你们"</span><span class="token punctuation">,</span><span class="token string">"如今"</span><span class="token punctuation">,</span> \            <span class="token string">"说道"</span><span class="token punctuation">,</span><span class="token string">"知道"</span><span class="token punctuation">,</span><span class="token string">"老太太"</span><span class="token punctuation">,</span><span class="token string">"起来"</span><span class="token punctuation">,</span><span class="token string">"姑娘"</span><span class="token punctuation">,</span><span class="token string">"这里"</span><span class="token punctuation">,</span> \            <span class="token string">"出来"</span><span class="token punctuation">,</span><span class="token string">"他们"</span><span class="token punctuation">,</span><span class="token string">"众人"</span><span class="token punctuation">,</span><span class="token string">"自己"</span><span class="token punctuation">,</span><span class="token string">"一面"</span><span class="token punctuation">,</span><span class="token string">"太太"</span><span class="token punctuation">,</span> \            <span class="token string">"只见"</span><span class="token punctuation">,</span><span class="token string">"怎么"</span><span class="token punctuation">,</span><span class="token string">"奶奶"</span><span class="token punctuation">,</span><span class="token string">"两个"</span><span class="token punctuation">,</span><span class="token string">"没有"</span><span class="token punctuation">,</span><span class="token string">"不是"</span><span class="token punctuation">,</span> \            <span class="token string">"不知"</span><span class="token punctuation">,</span><span class="token string">"这个"</span><span class="token punctuation">,</span><span class="token string">"听见"</span><span class="token punctuation">&#125;</span>f <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">"红楼梦.txt"</span><span class="token punctuation">,</span> <span class="token string">"r"</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span>txt <span class="token operator">=</span> f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>f<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>words  <span class="token operator">=</span> jieba<span class="token punctuation">.</span>lcut<span class="token punctuation">(</span>txt<span class="token punctuation">)</span>newtxt <span class="token operator">=</span> <span class="token string">' '</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>words<span class="token punctuation">)</span>wordcloud <span class="token operator">=</span> WordCloud<span class="token punctuation">(</span>background_color<span class="token operator">=</span><span class="token string">"white"</span><span class="token punctuation">,</span> \                          width<span class="token operator">=</span><span class="token number">800</span><span class="token punctuation">,</span> \                          height<span class="token operator">=</span><span class="token number">600</span><span class="token punctuation">,</span> \                          font_path<span class="token operator">=</span><span class="token string">"msyh.ttc"</span><span class="token punctuation">,</span> \                          max_words<span class="token operator">=</span><span class="token number">200</span><span class="token punctuation">,</span> \                          max_font_size<span class="token operator">=</span><span class="token number">80</span><span class="token punctuation">,</span> \                          stopwords <span class="token operator">=</span> excludes<span class="token punctuation">,</span> \                          <span class="token punctuation">)</span><span class="token punctuation">.</span>generate<span class="token punctuation">(</span>newtxt<span class="token punctuation">)</span>wordcloud<span class="token punctuation">.</span>to_file<span class="token punctuation">(</span><span class="token string">'红楼梦基本词云.png'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Python-第三方库纵览">Python 第三方库纵览</h2><h3 id="网络爬虫方向">网络爬虫方向</h3><p>自动进行 HTTP 访问并捕获 HTML 页面的程序。</p><h4 id="requests">requests</h4><p>简洁且简单</p><table><thead><tr><th style="text-align:center">函数</th><th>功能</th></tr></thead><tbody><tr><td style="text-align:center"><code>request()</code></td><td>构建一个请求</td></tr><tr><td style="text-align:center"><code>get()</code></td><td>获取 HTML 网页的主要方法</td></tr><tr><td style="text-align:center"><code>head()</code></td><td>获取 HTML 网页头信息</td></tr><tr><td style="text-align:center"><code>post()</code></td><td>提交 POST 请求</td></tr><tr><td style="text-align:center"><code>patch()</code></td><td>提交局部修改请求</td></tr><tr><td style="text-align:center"><code>delete()</code></td><td>提交删除请求</td></tr><tr><td style="text-align:center"><code>put()</code></td><td>提交 PUT 请求</td></tr></tbody></table><h4 id="scrapy">scrapy</h4><p>快速的、高层次的 web 获取框架</p><h3 id="数据分析方向">数据分析方向</h3><h4 id="numpy">numpy</h4><p>开源数值计算扩展第三方库，用于处理数据类型相同的多维数据（ndarray），“数组”。</p><h4 id="scipy">scipy</h4><p>在 numpy 库的基础沈阳增加了众多的科学、数学以及工程计算中常用的库函数。包括统计、优化、整合、线性代数、傅里叶变换、信号分析、图像处理、常微分方程求解等众多模块。</p><h4 id="pandas">pandas</h4><p>基于 numpy 扩展。为解决数据分析任务。</p><h3 id="文本处理方向">文本处理方向</h3><h4 id="pdfminer">pdfminer</h4><p>一个可以从 PDF 文档中提取各类信息的第三方库。</p><h4 id="openpyxl">openpyxl</h4><p>一个处理 Excel 文档的 Python 第三方库。</p><h4 id="python-docx">python_docx</h4><p>一个处理 Word 文档的第三方库。</p><h4 id="beautifulsoup4">beautifulsoup4</h4><p>用于解析和处理 HTML 和 XML。</p><h3 id="数据可视化方向">数据可视化方向</h3><p>指根据数据特点将其展示为易于理解的图形的过程。</p><h4 id="matplotlib">matplotlib</h4><p>主要进行二维图标数据展示，广泛用于科学计算的数据可视化。</p><h4 id="TVTK">TVTK</h4><p>专业可编程的三维可视化工具。</p><h4 id="mayavi">mayavi</h4><p>基于 VTK 开发，完全用 Python 编写。</p><h3 id="用户图形界面方向">用户图形界面方向</h3><h4 id="PyQt5">PyQt5</h4><p>最成熟的商业级 GUI 第三方库。</p><h4 id="wxPython">wxPython</h4><p>wxPython是Python语言的一套优秀的GUI图形库，它是跨平台GUI库wxWidgets的Python封装，可以使Python程序员能够轻松地创建健壮可靠、功能强大的图形用户界面的程序。</p><h4 id="PyGTK">PyGTK</h4><h3 id="机器学习方向">机器学习方向</h3><h4 id="scikit-learn">scikit-learn</h4><p>一个简单且高效的数据挖掘和数据分析工具。</p><h4 id="TensorFlow">TensorFlow</h4><p>Google 基于 DistBelief 进行研发的第二代人工智能学习系统。</p><h4 id="Theano">Theano</h4><p>为执行深度学习中大规模神经网络算法而设计，擅长处理多维数组。</p><h3 id="Web-开发方向">Web 开发方向</h3><h4 id="Django">Django</h4><p>最流行的开源 Web 应用框架。</p><h4 id="Pyramid">Pyramid</h4><p>相对小巧、快速、灵活的开源 Python Web 框架。</p><h4 id="Flask">Flask</h4><p>轻量级 Web 应用框架。</p><h3 id="8-游戏开发方向">8.游戏开发方向</h3><h4 id="Pygame">Pygame</h4><p>在 SDL 库基础上进行封装的、面向游戏开发入门的 Python 第三方库。</p><h4 id="Panda3D">Panda3D</h4><p>一个开源、跨平台的3D渲染和游戏开发库。</p><h4 id="cocos2d">cocos2d</h4><p>一个构建2D游戏和图形界面交互式应用的框架。</p><h3 id="更多">更多</h3><h4 id="PIL">PIL</h4><p>在图像处理方面的重要第三方库。</p><ul><li>图像归档：<ol><li>对图像进行批处理；</li><li>生成图像预览；</li><li>图像格式转换等。</li></ol></li><li>图像处理：<ol><li>基本处理；</li><li>像素处理；</li><li>颜色处理等。</li></ol></li></ul><h4 id="SymPY">SymPY</h4><p>一个支持符号计算的第三方库。一个全功能的计算机代数系统。</p><h4 id="NLTK">NLTK</h4><p>自然语言处理第三方库。</p><p>语料处理、文本统计、内容理解、情感分析等多种应用。</p><h4 id="WeRoBot">WeRoBot</h4><p>一个微信公众号开发框架，也成为微信机器人框架。</p><h4 id="MyQR">MyQR</h4><p>一个能够产生基本二维码、艺术二维码和动态二维码的第三方库。</p><h2 id="附录">附录</h2><h3 id="常用-Unicode-编码表">常用 Unicode 编码表</h3><table><thead><tr><th style="text-align:center">名称</th><th style="text-align:center">范围</th></tr></thead><tbody><tr><td style="text-align:center">基础汉字</td><td style="text-align:center">[0x4e00, 0x9fa5]</td></tr><tr><td style="text-align:center">数字</td><td style="text-align:center">[0x0030, 0x0039]</td></tr><tr><td style="text-align:center">小写字母</td><td style="text-align:center">[0x0061, 0x007a]</td></tr><tr><td style="text-align:center">大写字母</td><td style="text-align:center">[0x0041, 0x005a]</td></tr><tr><td style="text-align:center">箭头</td><td style="text-align:center">[0x2190, 0x21ff]</td></tr><tr><td style="text-align:center">数字运算符</td><td style="text-align:center">[0x2200, 0x22ff]</td></tr><tr><td style="text-align:center">封闭式字母数字</td><td style="text-align:center">[0x2460, 0x24ff]</td></tr><tr><td style="text-align:center">制表符</td><td style="text-align:center">[0x2500, 0x257f]</td></tr><tr><td style="text-align:center">方块元素</td><td style="text-align:center">[0x2580, 0x259f]</td></tr><tr><td style="text-align:center">几何图形</td><td style="text-align:center">[0x25A0, 0x25ff]</td></tr><tr><td style="text-align:center">一般标点符号</td><td style="text-align:center">[0x2000, 0x206f]</td></tr><tr><td style="text-align:center">韩文</td><td style="text-align:center">[0xAC00, 0xD7A3]</td></tr><tr><td style="text-align:center">货币</td><td style="text-align:center">[0x20a0, 0x20cf]</td></tr><tr><td style="text-align:center">泰文</td><td style="text-align:center">[0x0e00, 0x07f]</td></tr><tr><td style="text-align:center">中日韩符号</td><td style="text-align:center">[0x3000, 0x303f]</td></tr><tr><td style="text-align:center">中日韩括号数字</td><td style="text-align:center">[0x3200, 0x32ff]</td></tr></tbody></table><h3 id="转义字符">转义字符</h3><table><thead><tr><th style="text-align:center">符号</th><th>作用</th></tr></thead><tbody><tr><td style="text-align:center"><code>\</code></td><td>（在行尾时）续行符</td></tr><tr><td style="text-align:center"><code>\\</code></td><td>反斜杠符号</td></tr><tr><td style="text-align:center"><code>'</code></td><td>单引号</td></tr><tr><td style="text-align:center"><code>&quot;</code></td><td>双引号</td></tr><tr><td style="text-align:center"><code>\a</code></td><td>响铃</td></tr><tr><td style="text-align:center"><code>\b</code></td><td>退格（Backspace）</td></tr><tr><td style="text-align:center"><code>\e</code></td><td>转义</td></tr><tr><td style="text-align:center"><code>\000</code></td><td>空</td></tr><tr><td style="text-align:center"><code>\n</code></td><td>换行</td></tr><tr><td style="text-align:center"><code>\v</code></td><td>纵向制表符</td></tr><tr><td style="text-align:center"><code>\t</code></td><td>横向制表符</td></tr><tr><td style="text-align:center"><code>\r</code></td><td>回车</td></tr><tr><td style="text-align:center"><code>\f</code></td><td>换页</td></tr></tbody></table><h3 id="基本的Python内置函数">基本的Python内置函数</h3><p>Python解释器提供了68个内置函数</p><table><thead><tr><th>函数名称</th><th>函数说明</th></tr></thead><tbody><tr><td><code>abs(x)</code></td><td>x的绝对值，如果x是复数，返回复数的模</td></tr><tr><td><code>all(x)</code></td><td>组合类型变量x中所有元素都为真时返回True，否则返回False；若x为空，返回True</td></tr><tr><td><code>any(x)</code></td><td>组合类型变量x中任一元素都为真时返回True，否则返回False；若x为空，返回False</td></tr><tr><td><code>bin(x)</code></td><td>将整数x转换为等值的二进制字符串<br /><code>bin(1010)</code>的结果是’0b1111110010’</td></tr><tr><td><code>bool(x)</code></td><td>将x转换为Boolean类型，即True或False<br /><code>bool('')</code>的结果是False</td></tr><tr><td><code>chr(i)</code></td><td>返回Unicode为i的字符<br/><code>chr(9996)</code>的结果是’✌ ’</td></tr><tr><td><code>complex(r,i)</code></td><td>创建一个复数 r + i*1j，其中i可以省略<br/><code>complex(10,10)</code>的结果是10+10j</td></tr><tr><td><code>dict()</code></td><td>创建字典类型<br/><code>dict()</code>的结果是一个空字典{}</td></tr><tr><td><code>divmod(a,b)</code></td><td>返回a和b的商及余数<br/><code>divmod(10,3)</code>结果是一个(3,1)</td></tr><tr><td><code>eval(s)</code></td><td>计算字符串s作为Python表达式的值<br/><code>eval('1+99')</code>的结果是100</td></tr><tr><td><code>exec(s)</code></td><td>计算字符串s作为Python语句的值<br /><code>exec('a = 1+999')</code>运行后，变量a的值为1000</td></tr><tr><td><code>float(x)</code></td><td>将x转换成浮点数<br/><code>float(1010)</code>的结果是1010.0</td></tr><tr><td><code>hex(x)</code></td><td>将整数转换为16进制字符串<br/><code>hex(1010)</code>的结果是’0x3f2</td></tr><tr><td><code>input(s)</code></td><td>获取用户输入，其中s是字符串，作为提示信息可选</td></tr><tr><td><code>int(x)</code></td><td>将x转换成整数<br/>int(9.9)的结果是9</td></tr><tr><td><code>list(x)</code></td><td>创建或将变量x转换成一个列表类型<br/><code>list(&#123;10,9,8&#125;)</code>的结果是<code>[8,9,10]</code></td></tr><tr><td><code>max(a1,a2,…)</code></td><td>返回参数的最大值</td></tr><tr><td><code>min(a1,a2,…)</code></td><td>返回参数的最小值</td></tr><tr><td><code>oct(x)</code></td><td>将整数x转换成等值的八进制字符串形式<br /><code>oct(1010)</code>的结果是’0o1762’</td></tr><tr><td><code>open(fname, m)</code></td><td>打开文件，包括文本方式和二进制方式等<br/>其中，m部分可以省略，默认是以文本可读形式打开</td></tr><tr><td><code>ord(c)</code></td><td>返回一个字符的Unicode编码值<br/><code>ord('字')</code>的结果是23383</td></tr><tr><td><code>pow(x,y</code></td><td>返回x的y次幂<br/><code>pow(2,pow(2,2))</code>的结果是16</td></tr><tr><td><code>print(x)</code></td><td>打印变量或字符串x<br/><code>print()</code>的end参数用来表示输出的结尾字符</td></tr><tr><td><code>range(a,b,s)</code></td><td>从a到b(不含)以s为步长产生一个序列<br /><code>list(range(1,10,3))</code>的结果是[1, 4, 7]</td></tr><tr><td><code>reversed(r)</code></td><td>返回组合类型r的逆序迭代形式<br/><code>for i in reversed([1,2,3])</code>将逆序遍历列表</td></tr><tr><td><code>round(n)</code></td><td>四舍五入方式计算n<br/><code>round(10.6)</code>的结果是11</td></tr><tr><td><code>set(x)</code></td><td>将组合数据类型x转换成集合类型<br/><code>set([1,1,1,1])</code>的结果是{1}</td></tr><tr><td><code>sorted(x)</code></td><td>对组合数据类型x进行排序，默认从小到大<br/><code>sorted([1,3,5,2,4])</code>的结果是<code>[1,2,3,4,5]</code></td></tr><tr><td><code>str(x)</code></td><td>将x转换为等值的字符串类型<br/><code>str(0x1010)</code>的结果是’4112’</td></tr><tr><td><code>sum(x)</code></td><td>对组合数据类型x计算求和结果<br/><code>sum([1,3,5,2,4])</code>的结果是15</td></tr><tr><td><code>type(x)</code></td><td>返回变量x的数据类型<br/><code>type(&#123;1:2&#125;)</code>的结果是<code>&lt;class 'dict'&gt;</code></td></tr></tbody></table>]]></content>
      
      
      
        <tags>
            
            <tag> Pyhton </tag>
            
            <tag> 计算机二级 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS学习笔记</title>
      <link href="2019/08/13/CSS%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>2019/08/13/CSS%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.w3school.com.cn/css/css_jianjie.asp">CSS</a>学习笔记</p><hr><h2 id="CSS-概述">CSS 概述</h2><ul><li>CSS 指层叠样式表 (<strong>C</strong>ascading <strong>S</strong>tyle <strong>S</strong>heets)</li><li>样式定义<strong>如何显示</strong> HTML 元素</li><li>样式通常存储在<strong>样式表</strong>中</li><li>把样式添加到 HTML 4.0 中，是为了<strong>解决内容与表现分离的问题</strong></li><li><strong>外部样式表</strong>可以极大提高工作效率</li><li>外部样式表通常存储在 <strong>CSS 文件</strong>中</li><li>多个样式定义可<strong>层叠</strong>为一</li></ul><h3 id="样式解决了一个普遍的问题">样式解决了一个普遍的问题</h3><p>HTML 标签原本被设计为用于定义文档内容。通过使用 <code>&lt;h1&gt;</code>、<code>&lt;p&gt;</code>、<code>&lt;table&gt;</code> 这样的标签，HTML 的初衷是表达“这是标题”、“这是段落”、“这是表格”之类的信息。同时文档布局由浏览器来完成，而不使用任何的格式化标签。</p><p>由于两种主要的浏览器（Netscape 和 Internet Explorer）不断地将新的 HTML 标签和属性（比如字体标签和颜色属性）添加到 HTML 规范中，创建文档内容清晰地独立于文档表现层的站点变得越来越困难。</p><p>为了解决这个问题，万维网联盟（W3C），这个非营利的标准化联盟，肩负起了 HTML 标准化的使命，并在 HTML 4.0 之外创造出样式（Style）。</p><p>所有的主流浏览器均支持层叠样式表。</p><h3 id="样式表极大地提高了工作效率">样式表极大地提高了工作效率</h3><p>样式表定义如何显示 HTML 元素，就像 HTML 3.2 的字体标签和颜色属性所起的作用那样。样式通常保存在外部的 .css 文件中。通过仅仅编辑一个简单的 CSS 文档，外部样式表使你有能力同时改变站点中所有页面的布局和外观。</p><p>由于允许同时控制多重页面的样式和布局，CSS 可以称得上 WEB 设计领域的一个突破。作为网站开发者，你能够为每个 HTML 元素定义样式，并将之应用于你希望的任意多的页面中。如需进行全局的更新，只需简单地改变样式，然后网站中的所有元素均会自动地更新。</p><h3 id="多重样式将层叠为一个">多重样式将层叠为一个</h3><p>样式表允许以多种方式规定样式信息。样式可以规定在单个的 HTML 元素中，在 HTML 页的头元素中，或在一个外部的 CSS 文件中。甚至可以在同一个 HTML 文档内部引用多个外部样式表。</p><h4 id="层叠次序-优先顺序">层叠次序(优先顺序)</h4><p><strong>当同一个 HTML 元素被不止一个样式定义时，会使用哪个样式呢？</strong></p><p>一般而言，所有的样式会根据下面的规则层叠于一个新的虚拟样式表中，其中数字 4 拥有最高的优先权。</p><ol><li>浏览器缺省设置</li><li>外部样式表</li><li>内部样式表（位于 <code>&lt;head&gt; </code>标签内部）</li><li>内联样式（在 HTML 元素内部）</li></ol><p>因此，内联样式（在 HTML 元素内部）拥有最高的优先权，这意味着它将优先于以下的样式声明：<code>&lt;head&gt;</code> 标签中的样式声明，外部样式表中的样式声明，或者浏览器中的样式声明（缺省值）。</p><h2 id="CSS-基础语法">CSS 基础语法</h2><h3 id="CSS-语法">CSS 语法</h3><p>CSS 规则由两个主要的部分构成：选择器，以及一条或多条声明。</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">selector</span> <span class="token punctuation">&#123;</span>declaration1<span class="token punctuation">;</span> declaration2<span class="token punctuation">;</span> ... declarationN <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>选择器通常是您需要改变样式的 HTML 元素。</p><p>每条声明由一个属性和一个值组成。</p><p>属性（property）是您希望设置的样式属性（style attribute）。每个属性有一个值。属性和值被冒号分开。</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">selector</span> <span class="token punctuation">&#123;</span><span class="token property">property</span><span class="token punctuation">:</span> value<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>下面这行代码的作用是将 h1 元素内的文字颜色定义为红色，同时将字体大小设置为 14 像素。</p><p>在这个例子中，h1 是选择器，color 和 font-size 是属性，red 和 14px 是值。</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">h1</span> <span class="token punctuation">&#123;</span><span class="token property">color</span><span class="token punctuation">:</span>red<span class="token punctuation">;</span> <span class="token property">font-size</span><span class="token punctuation">:</span>14px<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="值的不同写法和单位">值的不同写法和单位</h3><p>除了英文单词 red，我们还可以使用十六进制的颜色值 #ff0000：</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">p</span> <span class="token punctuation">&#123;</span> <span class="token property">color</span><span class="token punctuation">:</span> #ff0000<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>为了节约字节，我们可以使用 CSS 的缩写形式：</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">p</span> <span class="token punctuation">&#123;</span> <span class="token property">color</span><span class="token punctuation">:</span> #f00<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>我们还可以通过两种方法使用 RGB 值：</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">p</span> <span class="token punctuation">&#123;</span> <span class="token property">color</span><span class="token punctuation">:</span> <span class="token function">rgb</span><span class="token punctuation">(</span>255<span class="token punctuation">,</span>0<span class="token punctuation">,</span>0<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token selector">p</span> <span class="token punctuation">&#123;</span> <span class="token property">color</span><span class="token punctuation">:</span> <span class="token function">rgb</span><span class="token punctuation">(</span>100%<span class="token punctuation">,</span>0%<span class="token punctuation">,</span>0%<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>请注意，当使用 RGB 百分比时，即使当值为 0 时也要写百分比符号。但是在其他的情况下就不需要这么做了。比如说，当尺寸为 0 像素时，0 之后不需要使用 px 单位，因为 0 就是 0，无论单位是什么。</p><h3 id="记得写引号">记得写引号</h3><p>**提示：**如果值为若干单词，则要给值加引号：</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">p</span> <span class="token punctuation">&#123;</span><span class="token property">font-family</span><span class="token punctuation">:</span> <span class="token string">"sans serif"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="多重声明：">多重声明：</h3><p>**提示：**如果要定义不止一个声明，则需要用分号将每个声明分开。下面的例子展示出如何定义一个红色文字的居中段落。最后一条规则是不需要加分号的，因为分号在英语中是一个分隔符号，不是结束符号。然而，大多数有经验的设计师会在每条声明的末尾都加上分号，这么做的好处是，当你从现有的规则中增减声明时，会尽可能地减少出错的可能性。就像这样：</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">p</span> <span class="token punctuation">&#123;</span><span class="token property">text-align</span><span class="token punctuation">:</span>center<span class="token punctuation">;</span> <span class="token property">color</span><span class="token punctuation">:</span>red<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>你应该在每行只描述一个属性，这样可以增强样式定义的可读性，就像这样：</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">p</span> <span class="token punctuation">&#123;</span>  <span class="token property">text-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>  <span class="token property">color</span><span class="token punctuation">:</span> black<span class="token punctuation">;</span>  <span class="token property">font-family</span><span class="token punctuation">:</span> arial<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="空格和大小写">空格和大小写</h3><p>大多数样式表包含不止一条规则，而大多数规则包含不止一个声明。多重声明和空格的使用使得样式表更容易被编辑：</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">body</span> <span class="token punctuation">&#123;</span>  <span class="token property">color</span><span class="token punctuation">:</span> #000<span class="token punctuation">;</span>  <span class="token property">background</span><span class="token punctuation">:</span> #fff<span class="token punctuation">;</span>  <span class="token property">margin</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>  <span class="token property">padding</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>  <span class="token property">font-family</span><span class="token punctuation">:</span> Georgia<span class="token punctuation">,</span> Palatino<span class="token punctuation">,</span> serif<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>是否包含空格不会影响 CSS 在浏览器的工作效果，同样，与 XHTML 不同，CSS 对大小写不敏感。不过存在一个例外：如果涉及到与 HTML 文档一起工作的话，class 和 id 名称对大小写是敏感的。</p><h2 id="CSS-高级语法">CSS 高级语法</h2><h3 id="选择器的分组">选择器的分组</h3><p>你可以对选择器进行分组，这样，被分组的选择器就可以分享相同的声明。用逗号将需要分组的选择器分开。在下面的例子中，我们对所有的标题元素进行了分组。所有的标题元素都是绿色的。</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">h1,h2,h3,h4,h5,h6</span> <span class="token punctuation">&#123;</span>  <span class="token property">color</span><span class="token punctuation">:</span> green<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="继承及其问题">继承及其问题</h3><p>根据 CSS，子元素从父元素继承属性。但是它并不总是按此方式工作。看看下面这条规则：</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">body</span> <span class="token punctuation">&#123;</span>     <span class="token property">font-family</span><span class="token punctuation">:</span> Verdana<span class="token punctuation">,</span> sans-serif<span class="token punctuation">;</span>     <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>根据上面这条规则，站点的 body 元素将使用 Verdana 字体（假如访问者的系统中存在该字体的话）。</p><p>通过 CSS 继承，子元素将继承最高级元素（在本例中是 body）所拥有的属性（这些子元素诸如 p, td, ul, ol, ul, li, dl, dt,和 dd）。不需要另外的规则，所有 body 的子元素都应该显示 Verdana 字体，子元素的子元素也一样。并且在大部分的现代浏览器中，也确实是这样的。</p><p>但是在那个浏览器大战的血腥年代里，这种情况就未必会发生，那时候对标准的支持并不是企业的优先选择。比方说，Netscape 4 就不支持继承，它不仅忽略继承，而且也忽略应用于 body 元素的规则。IE/Windows 直到 IE6 还存在相关的问题，在表格内的字体样式会被忽略。我们又该如何是好呢？</p><h3 id="友善地对待Netscape-4">友善地对待Netscape 4</h3><p>幸运地是，你可以通过使用我们称为 “Be Kind to Netscape 4” 的冗余法则来处理旧式浏览器无法理解继承的问题。</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">body</span>  <span class="token punctuation">&#123;</span>     <span class="token property">font-family</span><span class="token punctuation">:</span> Verdana<span class="token punctuation">,</span> sans-serif<span class="token punctuation">;</span>     <span class="token punctuation">&#125;</span><span class="token selector">p, td, ul, ol, li, dl, dt, dd</span>  <span class="token punctuation">&#123;</span>     <span class="token property">font-family</span><span class="token punctuation">:</span> Verdana<span class="token punctuation">,</span> sans-serif<span class="token punctuation">;</span>     <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>4.0 浏览器无法理解继承，不过他们可以理解组选择器。这么做虽然会浪费一些用户的带宽，但是如果需要对 Netscape 4 用户进行支持，就不得不这么做。</p><h3 id="继承是一个诅咒吗？">继承是一个诅咒吗？</h3><p>如果你不希望 “Verdana, sans-serif” 字体被所有的子元素继承，又该怎么做呢？比方说，你希望段落的字体是 Times。没问题。创建一个针对 p 的特殊规则，这样它就会摆脱父元素的规则：</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">body</span>  <span class="token punctuation">&#123;</span>     <span class="token property">font-family</span><span class="token punctuation">:</span> Verdana<span class="token punctuation">,</span> sans-serif<span class="token punctuation">;</span>     <span class="token punctuation">&#125;</span><span class="token selector">td, ul, ol, ul, li, dl, dt, dd</span>  <span class="token punctuation">&#123;</span>     <span class="token property">font-family</span><span class="token punctuation">:</span> Verdana<span class="token punctuation">,</span> sans-serif<span class="token punctuation">;</span>     <span class="token punctuation">&#125;</span><span class="token selector">p</span>  <span class="token punctuation">&#123;</span>     <span class="token property">font-family</span><span class="token punctuation">:</span> Times<span class="token punctuation">,</span> <span class="token string">"Times New Roman"</span><span class="token punctuation">,</span> serif<span class="token punctuation">;</span>     <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="CSS-派生选择器">CSS 派生选择器</h2><h3 id="派生选择器">派生选择器</h3><p><strong>通过依据元素在其位置的上下文关系来定义样式，你可以使标记更加简洁。</strong></p><p>在 CSS1 中，通过这种方式来应用规则的选择器被称为上下文选择器 (contextual selectors)，这是由于它们依赖于上下文关系来应用或者避免某项规则。在 CSS2 中，它们称为派生选择器，但是无论你如何称呼它们，它们的作用都是相同的。</p><p>派生选择器允许你根据文档的上下文关系来确定某个标签的样式。通过合理地使用派生选择器，我们可以使 HTML 代码变得更加整洁。</p><p>比方说，你希望列表中的 strong 元素变为斜体字，而不是通常的粗体字，可以这样定义一个派生选择器：</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">li strong</span> <span class="token punctuation">&#123;</span>    <span class="token property">font-style</span><span class="token punctuation">:</span> italic<span class="token punctuation">;</span>    <span class="token property">font-weight</span><span class="token punctuation">:</span> normal<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>请注意标记为 <code>&lt;strong&gt;</code> 的蓝色代码的上下文关系：</p><pre class="line-numbers language-css" data-language="css"><code class="language-css">&lt;p>&lt;strong>我是粗体字，不是斜体字，因为我不在列表当中，所以这个规则对我不起作用&lt;/strong>&lt;/p>&lt;ol>&lt;li>&lt;strong>我是斜体字。这是因为 strong 元素位于 li 元素内。&lt;/strong>&lt;/li>&lt;li>我是正常的字体。&lt;/li>&lt;/ol><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在上面的例子中，只有 li 元素中的 strong 元素的样式为斜体字，无需为 strong 元素定义特别的 class 或 id，代码更加简洁。</p><p>再看看下面的 CSS 规则：</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">strong</span> <span class="token punctuation">&#123;</span>     <span class="token property">color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>     <span class="token punctuation">&#125;</span><span class="token selector">h2</span> <span class="token punctuation">&#123;</span>     <span class="token property">color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>     <span class="token punctuation">&#125;</span><span class="token selector">h2 strong</span> <span class="token punctuation">&#123;</span>     <span class="token property">color</span><span class="token punctuation">:</span> blue<span class="token punctuation">;</span>     <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>下面是它施加影响的 HTML：</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>The strongly emphasized word in this paragraph is<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>strong</span><span class="token punctuation">></span></span>red<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>strong</span><span class="token punctuation">></span></span>.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span>This subhead is also red.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span>The strongly emphasized word in this subhead is<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>strong</span><span class="token punctuation">></span></span>blue<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>strong</span><span class="token punctuation">></span></span>.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="CSS-id-选择器">CSS id 选择器</h2><h3 id="id-选择器">id 选择器</h3><p><strong>id 选择器可以为标有特定 id 的 HTML 元素指定特定的样式。</strong></p><p><strong>id 选择器以 “#” 来定义。</strong></p><p>下面的两个 id 选择器，第一个可以定义元素的颜色为红色，第二个定义元素的颜色为绿色：</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">#red</span> <span class="token punctuation">&#123;</span><span class="token property">color</span><span class="token punctuation">:</span>red<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">#green</span> <span class="token punctuation">&#123;</span><span class="token property">color</span><span class="token punctuation">:</span>green<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>下面的 HTML 代码中，id 属性为 red 的 p 元素显示为红色，而 id 属性为 green 的 p 元素显示为绿色。</p><pre class="line-numbers language-css" data-language="css"><code class="language-css">&lt;p id=<span class="token string">"red"</span>>这个段落是红色。&lt;/p>&lt;p id=<span class="token string">"green"</span>>这个段落是绿色。&lt;/p><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>**注意：**id 属性只能在每个 HTML 文档中出现一次。想知道原因吗，请参阅 <a href="https://www.w3school.com.cn/xhtml/xhtml_structural_01.asp">XHTML:网站重构</a>。</p><h3 id="id-选择器和派生选择器">id 选择器和派生选择器</h3><p><strong>在现代布局中，id 选择器常常用于建立派生选择器。</strong></p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">#sidebar p</span> <span class="token punctuation">&#123;</span><span class="token property">font-style</span><span class="token punctuation">:</span> italic<span class="token punctuation">;</span><span class="token property">text-align</span><span class="token punctuation">:</span> right<span class="token punctuation">;</span><span class="token property">margin-top</span><span class="token punctuation">:</span> 0.5em<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面的样式只会应用于出现在 id 是 sidebar 的元素内的段落。这个元素很可能是 div 或者是表格单元，尽管它也可能是一个表格或者其他块级元素。它甚至可以是一个内联元素，比如<code> &lt;em&gt;</code> <code>&lt;/em&gt;</code> 或者<code> &lt;span&gt;</code> <code>&lt;/span&gt;</code>，不过这样的用法是非法的，因为不可以在内联元素 <code>&lt;span&gt;</code> 中嵌入<code> &lt;p&gt;</code> （如果你忘记了原因，请参阅 <a href="https://www.w3school.com.cn/xhtml/xhtml_structural_01.asp">XHTML:网站重构</a>）。</p><h4 id="一个选择器，多种用法">一个选择器，多种用法</h4><p><strong>即使被标注为 sidebar 的元素只能在文档中出现一次，这个 id 选择器作为派生选择器也可以被使用很多次：</strong></p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">#sidebar p</span> <span class="token punctuation">&#123;</span><span class="token property">font-style</span><span class="token punctuation">:</span> italic<span class="token punctuation">;</span><span class="token property">text-align</span><span class="token punctuation">:</span> right<span class="token punctuation">;</span><span class="token property">margin-top</span><span class="token punctuation">:</span> 0.5em<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">#sidebar h2</span> <span class="token punctuation">&#123;</span><span class="token property">font-size</span><span class="token punctuation">:</span> 1em<span class="token punctuation">;</span><span class="token property">font-weight</span><span class="token punctuation">:</span> normal<span class="token punctuation">;</span><span class="token property">font-style</span><span class="token punctuation">:</span> italic<span class="token punctuation">;</span><span class="token property">margin</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span><span class="token property">line-height</span><span class="token punctuation">:</span> 1.5<span class="token punctuation">;</span><span class="token property">text-align</span><span class="token punctuation">:</span> right<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在这里，与页面中的其他 p 元素明显不同的是，sidebar 内的 p 元素得到了特殊的处理，同时，与页面中其他所有 h2 元素明显不同的是，sidebar 中的 h2 元素也得到了不同的特殊处理。</p><h3 id="单独的选择器">单独的选择器</h3><p><strong>id 选择器即使不被用来创建派生选择器，它也可以独立发挥作用：</strong></p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">#sidebar</span> <span class="token punctuation">&#123;</span><span class="token property">border</span><span class="token punctuation">:</span> 1px dotted #000<span class="token punctuation">;</span><span class="token property">padding</span><span class="token punctuation">:</span> 10px<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>根据这条规则，id 为 sidebar 的元素将拥有一个像素宽的黑色点状边框，同时其周围会有 10 个像素宽的内边距（padding，内部空白）。老版本的 Windows/IE 浏览器可能会忽略这条规则，除非你特别地定义这个选择器所属的元素：</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">div #sidebar</span> <span class="token punctuation">&#123;</span><span class="token property">border</span><span class="token punctuation">:</span> 1px dotted #000<span class="token punctuation">;</span><span class="token property">padding</span><span class="token punctuation">:</span> 10px<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="CSS-类选择器">CSS 类选择器</h3><p><strong>在 CSS 中，类选择器以一个点号显示：</strong></p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.center</span> <span class="token punctuation">&#123;</span><span class="token property">text-align</span><span class="token punctuation">:</span> center<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在上面的例子中，所有拥有 center 类的 HTML 元素均为居中。</p><p>在下面的 HTML 代码中，h1 和 p 元素都有 center 类。这意味着两者都将遵守 “.center” 选择器中的规则。</p><pre class="line-numbers language-css" data-language="css"><code class="language-css">&lt;h1 class=<span class="token string">"center"</span>>This heading will be center-aligned&lt;/h1>&lt;p class=<span class="token string">"center"</span>>This paragraph will also be center-aligned.&lt;/p><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>**注意：**类名的第一个字符不能使用数字！它无法在 Mozilla 或 Firefox 中起作用。</p><p><strong>和 id 一样，class 也可被用作派生选择器：</strong></p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.fancy td</span> <span class="token punctuation">&#123;</span><span class="token property">color</span><span class="token punctuation">:</span> #f60<span class="token punctuation">;</span><span class="token property">background</span><span class="token punctuation">:</span> #666<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>在上面这个例子中，类名为 fancy 的更大的元素内部的表格单元都会以灰色背景显示橙色文字。（名为 fancy 的更大的元素可能是一个表格或者一个 div）</p><p><strong>元素也可以基于它们的类而被选择：</strong></p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">td.fancy</span> <span class="token punctuation">&#123;</span><span class="token property">color</span><span class="token punctuation">:</span> #f60<span class="token punctuation">;</span><span class="token property">background</span><span class="token punctuation">:</span> #666<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>在上面的例子中，类名为 fancy 的表格单元将是带有灰色背景的橙色。</p><pre class="line-numbers language-css" data-language="css"><code class="language-css">&lt;td class=<span class="token string">"fancy"</span>><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>你可以将类 fancy 分配给任何一个表格元素任意多的次数。那些以 fancy 标注的单元格都会是带有灰色背景的橙色。那些没有被分配名为 fancy 的类的单元格不会受这条规则的影响。还有一点值得注意，class 为 fancy 的段落也不会是带有灰色背景的橙色，当然，任何其他被标注为 fancy 的元素也不会受这条规则的影响。这都是由于我们书写这条规则的方式，这个效果被限制于被标注为 fancy 的表格单元（即使用 td 元素来选择 fancy 类）。</p><h2 id="创建-CSS">创建 CSS</h2><h3 id="如何插入样式表">如何插入样式表</h3><p><strong>当读到一个样式表时，浏览器会根据它来格式化 HTML 文档。插入样式表的方法有三种：</strong></p><h3 id="外部样式表">外部样式表</h3><p>当样式需要应用于很多页面时，外部样式表将是理想的选择。在使用外部样式表的情况下，你可以通过改变一个文件来改变整个站点的外观。每个页面使用 <code>&lt;link&gt; </code>标签链接到样式表。<code>&lt;link&gt;</code> 标签在（文档的）头部：</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>mystyle.css<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>浏览器会从文件 mystyle.css 中读到样式声明，并根据它来格式文档。</p><p>外部样式表可以在任何文本编辑器中进行编辑。文件不能包含任何的 html 标签。样式表应该以 .css 扩展名进行保存。下面是一个样式表文件的例子：</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">hr</span> <span class="token punctuation">&#123;</span><span class="token property">color</span><span class="token punctuation">:</span> sienna<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">p</span> <span class="token punctuation">&#123;</span><span class="token property">margin-left</span><span class="token punctuation">:</span> 20px<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">body</span> <span class="token punctuation">&#123;</span><span class="token property">background-image</span><span class="token punctuation">:</span> <span class="token url"><span class="token function">url</span><span class="token punctuation">(</span><span class="token string url">"images/back40.gif"</span><span class="token punctuation">)</span></span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>不要在属性值与单位之间留有空格。假如你使用 “margin-left: 20 px” 而不是 “margin-left: 20px” ，它仅在 IE 6 中有效，但是在 Mozilla/Firefox 或 Netscape 中却无法正常工作。</p><h3 id="内部样式表">内部样式表</h3><p>当单个文档需要特殊的样式时，就应该使用内部样式表。你可以使用 <code>&lt;style&gt;</code> 标签在文档头部定义内部样式表，就像这样:</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">  <span class="token selector">hr</span> <span class="token punctuation">&#123;</span><span class="token property">color</span><span class="token punctuation">:</span> sienna<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>  <span class="token selector">p</span> <span class="token punctuation">&#123;</span><span class="token property">margin-left</span><span class="token punctuation">:</span> 20px<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>  <span class="token selector">body</span> <span class="token punctuation">&#123;</span><span class="token property">background-image</span><span class="token punctuation">:</span> <span class="token url"><span class="token function">url</span><span class="token punctuation">(</span><span class="token string url">"images/back40.gif"</span><span class="token punctuation">)</span></span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="内联样式">内联样式</h3><p>由于要将表现和内容混杂在一起，内联样式会损失掉样式表的许多优势。请慎用这种方法，例如当样式仅需要在一个元素上应用一次时。</p><p>要使用内联样式，你需要在相关的标签内使用样式（style）属性。Style 属性可以包含任何 CSS 属性。本例展示如何改变段落的颜色和左外边距：</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">color</span><span class="token punctuation">:</span> sienna<span class="token punctuation">;</span> <span class="token property">margin-left</span><span class="token punctuation">:</span> 20px</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>This is a paragraph<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="多重样式">多重样式</h3><p>如果某些属性在不同的样式表中被同样的选择器定义，那么属性值将从更具体的样式表中被继承过来。</p><p>例如，外部样式表拥有针对 h3 选择器的三个属性：</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">h3</span> <span class="token punctuation">&#123;</span>  <span class="token property">color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>  <span class="token property">text-align</span><span class="token punctuation">:</span> left<span class="token punctuation">;</span>  <span class="token property">font-size</span><span class="token punctuation">:</span> 8pt<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>而内部样式表拥有针对 h3 选择器的两个属性：</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">h3</span> <span class="token punctuation">&#123;</span>  <span class="token property">text-align</span><span class="token punctuation">:</span> right<span class="token punctuation">;</span>   <span class="token property">font-size</span><span class="token punctuation">:</span> 20pt<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>假如拥有内部样式表的这个页面同时与外部样式表链接，那么 h3 得到的样式是：</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token property">color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span> <span class="token property">text-align</span><span class="token punctuation">:</span> right<span class="token punctuation">;</span> <span class="token property">font-size</span><span class="token punctuation">:</span> 20pt<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>即颜色属性将被继承于外部样式表，而文字排列（text-alignment）和字体尺寸（font-size）会被内部样式表中的规则取代。</p><h1>CSS样式</h1><h2 id="CSS-背景">CSS 背景</h2><p><strong>CSS 允许应用纯色作为背景，也允许使用背景图像创建相当复杂的效果。</strong></p><p><strong>CSS 在这方面的能力远远在 HTML 之上。</strong></p><h3 id="背景色">背景色</h3><p>可以使用 <a href="https://www.w3school.com.cn/cssref/pr_background-color.asp">background-color 属性</a>为元素设置背景色。这个属性接受任何合法的颜色值。</p><p>这条规则把元素的背景设置为灰色：</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">p</span> <span class="token punctuation">&#123;</span><span class="token property">background-color</span><span class="token punctuation">:</span> gray<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果您希望背景色从元素中的文本向外少有延伸，只需增加一些内边距：</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">p</span> <span class="token punctuation">&#123;</span><span class="token property">background-color</span><span class="token punctuation">:</span> gray<span class="token punctuation">;</span> <span class="token property">padding</span><span class="token punctuation">:</span> 20px<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>可以为所有元素设置背景色，这包括 body 一直到 em 和 a 等行内元素。</p><p>background-color 不能继承，其默认值是 transparent。transparent 有“透明”之意。也就是说，如果一个元素没有指定背景色，那么背景就是透明的，这样其祖先元素的背景才能可见。</p><h3 id="背景图像">背景图像</h3><p>要把图像放入背景，需要使用 <a href="https://www.w3school.com.cn/cssref/pr_background-image.asp">background-image 属性</a>。background-image 属性的默认值是 none，表示背景上没有放置任何图像。</p><p>如果需要设置一个背景图像，必须为这个属性设置一个 URL 值：</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">body</span> <span class="token punctuation">&#123;</span><span class="token property">background-image</span><span class="token punctuation">:</span> <span class="token url"><span class="token function">url</span><span class="token punctuation">(</span>/i/eg_bg_04.gif<span class="token punctuation">)</span></span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>大多数背景都应用到 body 元素，不过并不仅限于此。</p><p>下面例子为一个段落应用了一个背景，而不会对文档的其他部分应用背景：</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">p.flower</span> <span class="token punctuation">&#123;</span><span class="token property">background-image</span><span class="token punctuation">:</span> <span class="token url"><span class="token function">url</span><span class="token punctuation">(</span>/i/eg_bg_03.gif<span class="token punctuation">)</span></span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>您甚至可以为行内元素设置背景图像，下面的例子为一个链接设置了背景图像：</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">a.radio</span> <span class="token punctuation">&#123;</span><span class="token property">background-image</span><span class="token punctuation">:</span> <span class="token url"><span class="token function">url</span><span class="token punctuation">(</span>/i/eg_bg_07.gif<span class="token punctuation">)</span></span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>理论上讲，甚至可以向 textareas 和 select 等替换元素的背景应用图像，不过并不是所有用户代理都能很好地处理这种情况。</p><p>另外还要补充一点，background-image 也不能继承。事实上，所有背景属性都不能继承。</p><h3 id="背景重复">背景重复</h3><p>如果需要在页面上对背景图像进行平铺，可以使用 <a href="https://www.w3school.com.cn/cssref/pr_background-repeat.asp">background-repeat 属性</a>。</p><p>属性值 repeat 导致图像在水平垂直方向上都平铺，就像以往背景图像的通常做法一样。repeat-x 和 repeat-y 分别导致图像只在水平或垂直方向上重复，no-repeat 则不允许图像在任何方向上平铺。</p><p>默认地，背景图像将从一个元素的左上角开始。请看下面的例子：</p><pre class="line-numbers language-none"><code class="language-none">body  &#123;   background-image: url(&#x2F;i&#x2F;eg_bg_03.gif);  background-repeat: repeat-y;  &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="背景定位">背景定位</h3><p>可以利用 <a href="https://www.w3school.com.cn/cssref/pr_background-position.asp">background-position 属性</a>改变图像在背景中的位置。</p><p>下面的例子在 body 元素中将一个背景图像居中放置：</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">body</span>  <span class="token punctuation">&#123;</span>     <span class="token property">background-image</span><span class="token punctuation">:</span><span class="token url"><span class="token function">url</span><span class="token punctuation">(</span><span class="token string url">'/i/eg_bg_03.gif'</span><span class="token punctuation">)</span></span><span class="token punctuation">;</span>    <span class="token property">background-repeat</span><span class="token punctuation">:</span>no-repeat<span class="token punctuation">;</span>    <span class="token property">background-position</span><span class="token punctuation">:</span>center<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>为 background-position 属性提供值有很多方法。首先，可以使用一些关键字：top、bottom、left、right 和 center。通常，这些关键字会成对出现，不过也不总是这样。还可以使用长度值，如 100px 或 5cm，最后也可以使用百分数值。不同类型的值对于背景图像的放置稍有差异。</p><h3 id="关键字">关键字</h3><p>图像放置关键字最容易理解，其作用如其名称所表明的。例如，top right 使图像放置在元素内边距区的右上角。</p><p>根据规范，位置关键字可以按任何顺序出现，只要保证不超过两个关键字 - 一个对应水平方向，另一个对应垂直方向。</p><p>如果只出现一个关键字，则认为另一个关键字是 center。</p><p>所以，如果希望每个段落的中部上方出现一个图像，只需声明如下：</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">p</span>  <span class="token punctuation">&#123;</span>     <span class="token property">background-image</span><span class="token punctuation">:</span><span class="token url"><span class="token function">url</span><span class="token punctuation">(</span><span class="token string url">'bgimg.gif'</span><span class="token punctuation">)</span></span><span class="token punctuation">;</span>    <span class="token property">background-repeat</span><span class="token punctuation">:</span>no-repeat<span class="token punctuation">;</span>    <span class="token property">background-position</span><span class="token punctuation">:</span>top<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>下面是等价的位置关键字：</p><table><thead><tr><th style="text-align:left">单一关键字</th><th style="text-align:left">等价的关键字</th></tr></thead><tbody><tr><td style="text-align:left">center</td><td style="text-align:left">center center</td></tr><tr><td style="text-align:left">top</td><td style="text-align:left">top center 或 center top</td></tr><tr><td style="text-align:left">bottom</td><td style="text-align:left">bottom center 或 center bottom</td></tr><tr><td style="text-align:left">right</td><td style="text-align:left">right center 或 center right</td></tr><tr><td style="text-align:left">left</td><td style="text-align:left">left center 或 center left</td></tr></tbody></table><h3 id="百分数值">百分数值</h3><p>百分数值的表现方式更为复杂。假设你希望用百分数值将图像在其元素中居中，这很容易：</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">body</span>  <span class="token punctuation">&#123;</span>     <span class="token property">background-image</span><span class="token punctuation">:</span><span class="token url"><span class="token function">url</span><span class="token punctuation">(</span><span class="token string url">'/i/eg_bg_03.gif'</span><span class="token punctuation">)</span></span><span class="token punctuation">;</span>    <span class="token property">background-repeat</span><span class="token punctuation">:</span>no-repeat<span class="token punctuation">;</span>    <span class="token property">background-position</span><span class="token punctuation">:</span>50% 50%<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这会导致图像适当放置，其中心与其元素的中心对齐。**换句话说，百分数值同时应用于元素和图像。**也就是说，图像中描述为 50% 50% 的点（中心点）与元素中描述为 50% 50% 的点（中心点）对齐。</p><p>如果图像位于 0% 0%，其左上角将放在元素内边距区的左上角。如果图像位置是 100% 100%，会使图像的右下角放在右边距的右下角。</p><p>因此，如果你想把一个图像放在水平方向 2/3、垂直方向 1/3 处，可以这样声明：</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">body</span>  <span class="token punctuation">&#123;</span>     <span class="token property">background-image</span><span class="token punctuation">:</span><span class="token url"><span class="token function">url</span><span class="token punctuation">(</span><span class="token string url">'/i/eg_bg_03.gif'</span><span class="token punctuation">)</span></span><span class="token punctuation">;</span>    <span class="token property">background-repeat</span><span class="token punctuation">:</span>no-repeat<span class="token punctuation">;</span>    <span class="token property">background-position</span><span class="token punctuation">:</span>66% 33%<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果只提供一个百分数值，所提供的这个值将用作水平值，垂直值将假设为 50%。这一点与关键字类似。</p><p>background-position 的默认值是 0% 0%，在功能上相当于 top left。这就解释了背景图像为什么总是从元素内边距区的左上角开始平铺，除非您设置了不同的位置值。</p><h3 id="长度值">长度值</h3><p>长度值解释的是元素内边距区左上角的偏移。偏移点是图像的左上角。</p><p>比如，如果设置值为 50px 100px，图像的左上角将在元素内边距区左上角向右 50 像素、向下 100 像素的位置上：</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">body</span>  <span class="token punctuation">&#123;</span>     <span class="token property">background-image</span><span class="token punctuation">:</span><span class="token url"><span class="token function">url</span><span class="token punctuation">(</span><span class="token string url">'/i/eg_bg_03.gif'</span><span class="token punctuation">)</span></span><span class="token punctuation">;</span>    <span class="token property">background-repeat</span><span class="token punctuation">:</span>no-repeat<span class="token punctuation">;</span>    <span class="token property">background-position</span><span class="token punctuation">:</span>50px 100px<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意，这一点与百分数值不同，因为偏移只是从一个左上角到另一个左上角。也就是说，图像的左上角与 background-position 声明中的指定的点对齐。</p><h3 id="背景关联">背景关联</h3><p>如果文档比较长，那么当文档向下滚动时，背景图像也会随之滚动。当文档滚动到超过图像的位置时，图像就会消失。</p><p>您可以通过 <a href="https://www.w3school.com.cn/cssref/pr_background-attachment.asp">background-attachment 属性</a>防止这种滚动。通过这个属性，可以声明图像相对于可视区是固定的（fixed），因此不会受到滚动的影响：</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">body</span>   <span class="token punctuation">&#123;</span>  <span class="token property">background-image</span><span class="token punctuation">:</span><span class="token url"><span class="token function">url</span><span class="token punctuation">(</span>/i/eg_bg_02.gif<span class="token punctuation">)</span></span><span class="token punctuation">;</span>  <span class="token property">background-repeat</span><span class="token punctuation">:</span>no-repeat<span class="token punctuation">;</span>  <span class="token property">background-attachment</span><span class="token punctuation">:</span>fixed  <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="CSS-背景属性">CSS 背景属性</h3><table><thead><tr><th style="text-align:left">属性</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td style="text-align:left"><a href="https://www.w3school.com.cn/cssref/pr_background.asp">background</a></td><td style="text-align:left">简写属性，作用是将背景属性设置在一个声明中。</td></tr><tr><td style="text-align:left"><a href="https://www.w3school.com.cn/cssref/pr_background-attachment.asp">background-attachment</a></td><td style="text-align:left">背景图像是否固定或者随着页面的其余部分滚动。</td></tr><tr><td style="text-align:left"><a href="https://www.w3school.com.cn/cssref/pr_background-color.asp">background-color</a></td><td style="text-align:left">设置元素的背景颜色。</td></tr><tr><td style="text-align:left"><a href="https://www.w3school.com.cn/cssref/pr_background-image.asp">background-image</a></td><td style="text-align:left">把图像设置为背景。</td></tr><tr><td style="text-align:left"><a href="https://www.w3school.com.cn/cssref/pr_background-position.asp">background-position</a></td><td style="text-align:left">设置背景图像的起始位置。</td></tr><tr><td style="text-align:left"><a href="https://www.w3school.com.cn/cssref/pr_background-repeat.asp">background-repeat</a></td><td style="text-align:left">设置背景图像是否及如何重复。</td></tr></tbody></table><h3 id="CSS-背景实例">CSS 背景实例</h3><ul><li><p><a href="https://www.w3school.com.cn/tiy/t.asp?f=csse_background-color">设置背景颜色</a></p><p>本例演示如何为元素设置背景颜色。</p></li><li><p><a href="https://www.w3school.com.cn/tiy/t.asp?f=csse_text_background">设置文本的背景颜色</a></p><p>本例颜色如何设置部分文本的背景颜色。</p></li><li><p><a href="https://www.w3school.com.cn/tiy/t.asp?f=csse_background-image">将图像设置为背景</a></p><p>本例演示如何将图像设置为背景。</p></li><li><p><a href="https://www.w3school.com.cn/tiy/t.asp?f=csse_background-image_2">将图像设置为背景 2</a></p><p>本例演示如何为多个元素同时设置背景图像。</p></li><li><p><a href="https://www.w3school.com.cn/tiy/t.asp?f=csse_background-repeat">如何重复背景图像</a></p><p>本例演示如何重复背景图像。</p></li><li><p><a href="https://www.w3school.com.cn/tiy/t.asp?f=csse_background-repeaty">如何在垂直方向重复背景图像</a></p><p>本例演示如何垂直地重复背景图像。</p></li><li><p><a href="https://www.w3school.com.cn/tiy/t.asp?f=csse_background-repeatx">如何在水平方向重复背景图像</a></p><p>本例演示如何水平地重复背景图像。</p></li><li><p><a href="https://www.w3school.com.cn/tiy/t.asp?f=csse_background-repeat_no-repeat">如何仅显示一次背景图像</a></p><p>本例演示如何仅显示一次背景图像。</p></li><li><p><a href="https://www.w3school.com.cn/tiy/t.asp?f=csse_background-position">如何放置背景图像</a></p><p>本例演示如何在页面上放置背景图像。</p></li><li><p><a href="https://www.w3school.com.cn/tiy/t.asp?f=csse_background-position_percent">如何使用%来定位背景图像</a></p><p>本例演示如何使用百分比来在页面上定位背景图像。</p></li><li><p><a href="https://www.w3school.com.cn/tiy/t.asp?f=csse_background-position_pixel">如何使用像素来定位背景图像</a></p><p>本例演示如何使用像素来在页面上定位背景图像。</p></li><li><p><a href="https://www.w3school.com.cn/tiy/t.asp?f=csse_background-attachment">如何设置固定的背景图像</a></p><p>本例演示如何设置固定的背景图像。图像不会随着页面的其他部分滚动。</p></li><li><p><a href="https://www.w3school.com.cn/tiy/t.asp?f=csse_background">所有背景属性在一个声明之中</a></p><p>本例演示如何使用简写属性来将所有背景属性设置在一个声明之中。</p></li></ul><h2 id="CSS-文本"><a href="https://www.w3school.com.cn/css/css_text.asp">CSS 文本</a></h2><p><strong>CSS 文本属性可定义文本的外观。</strong></p><p><strong>通过文本属性，您可以改变文本的颜色、字符间距，对齐文本，装饰文本，对文本进行缩进，等等。</strong></p><h2 id="CSS-文本属性">CSS 文本属性</h2><table><thead><tr><th style="text-align:left">属性</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td style="text-align:left"><a href="https://www.w3school.com.cn/cssref/pr_text_color.asp">color</a></td><td style="text-align:left">设置文本颜色</td></tr><tr><td style="text-align:left"><a href="https://www.w3school.com.cn/cssref/pr_text_direction.asp">direction</a></td><td style="text-align:left">设置文本方向。</td></tr><tr><td style="text-align:left"><a href="https://www.w3school.com.cn/cssref/pr_dim_line-height.asp">line-height</a></td><td style="text-align:left">设置行高。</td></tr><tr><td style="text-align:left"><a href="https://www.w3school.com.cn/cssref/pr_text_letter-spacing.asp">letter-spacing</a></td><td style="text-align:left">设置字符间距。</td></tr><tr><td style="text-align:left"><a href="https://www.w3school.com.cn/cssref/pr_text_text-align.asp">text-align</a></td><td style="text-align:left">对齐元素中的文本。</td></tr><tr><td style="text-align:left"><a href="https://www.w3school.com.cn/cssref/pr_text_text-decoration.asp">text-decoration</a></td><td style="text-align:left">向文本添加修饰。</td></tr><tr><td style="text-align:left"><a href="https://www.w3school.com.cn/cssref/pr_text_text-indent.asp">text-indent</a></td><td style="text-align:left">缩进元素中文本的首行。</td></tr><tr><td style="text-align:left">text-shadow</td><td style="text-align:left">设置文本阴影。CSS2 包含该属性，但是 CSS2.1 没有保留该属性。</td></tr><tr><td style="text-align:left"><a href="https://www.w3school.com.cn/cssref/pr_text_text-transform.asp">text-transform</a></td><td style="text-align:left">控制元素中的字母。</td></tr><tr><td style="text-align:left">unicode-bidi</td><td style="text-align:left">设置文本方向。</td></tr><tr><td style="text-align:left"><a href="https://www.w3school.com.cn/cssref/pr_text_white-space.asp">white-space</a></td><td style="text-align:left">设置元素中空白的处理方式。</td></tr><tr><td style="text-align:left"><a href="https://www.w3school.com.cn/cssref/pr_text_word-spacing.asp">word-spacing</a></td><td style="text-align:left">设置字间距。</td></tr></tbody></table><h2 id="CSS-字体"><a href="https://www.w3school.com.cn/css/css_font.asp">CSS 字体</a></h2><p><strong>CSS 字体属性定义文本的字体系列、大小、加粗、风格（如斜体）和变形（如小型大写字母）。</strong></p><h3 id="CSS-字体属性">CSS 字体属性</h3><table><thead><tr><th style="text-align:left">属性</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td style="text-align:left"><a href="https://www.w3school.com.cn/cssref/pr_font_font.asp">font</a></td><td style="text-align:left">简写属性。作用是把所有针对字体的属性设置在一个声明中。</td></tr><tr><td style="text-align:left"><a href="https://www.w3school.com.cn/cssref/pr_font_font-family.asp">font-family</a></td><td style="text-align:left">设置字体系列。</td></tr><tr><td style="text-align:left"><a href="https://www.w3school.com.cn/cssref/pr_font_font-size.asp">font-size</a></td><td style="text-align:left">设置字体的尺寸。</td></tr><tr><td style="text-align:left"><a href="https://www.w3school.com.cn/cssref/pr_font_font-size-adjust.asp">font-size-adjust</a></td><td style="text-align:left">当首选字体不可用时，对替换字体进行智能缩放。（CSS2.1 已删除该属性。）</td></tr><tr><td style="text-align:left"><a href="https://www.w3school.com.cn/cssref/pr_font_font-stretch.asp">font-stretch</a></td><td style="text-align:left">对字体进行水平拉伸。（CSS2.1 已删除该属性。）</td></tr><tr><td style="text-align:left"><a href="https://www.w3school.com.cn/cssref/pr_font_font-style.asp">font-style</a></td><td style="text-align:left">设置字体风格。</td></tr><tr><td style="text-align:left"><a href="https://www.w3school.com.cn/cssref/pr_font_font-variant.asp">font-variant</a></td><td style="text-align:left">以小型大写字体或者正常字体显示文本。</td></tr><tr><td style="text-align:left"><a href="https://www.w3school.com.cn/cssref/pr_font_weight.asp">font-weight</a></td><td style="text-align:left">设置字体的粗细。</td></tr></tbody></table><h2 id="CSS-链接"><a href="https://www.w3school.com.cn/css/css_link.asp">CSS 链接</a></h2><p><strong>我们能够以不同的方法为链接设置样式。</strong></p><h3 id="设置链接的样式">设置链接的样式</h3><p>能够设置链接样式的 CSS 属性有很多种（例如 color, font-family, background 等等）。</p><p>链接的特殊性在于能够根据它们所处的状态来设置它们的样式。</p><p>链接的四种状态：</p><ul><li>a:link - 普通的、未被访问的链接</li><li>a:visited - 用户已访问的链接</li><li>a:hover - 鼠标指针位于链接的上方</li><li>a:active - 链接被点击的时刻</li></ul><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">a:link</span> <span class="token punctuation">&#123;</span><span class="token property">color</span><span class="token punctuation">:</span>#FF0000<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/* 未被访问的链接 */</span><span class="token selector">a:visited</span> <span class="token punctuation">&#123;</span><span class="token property">color</span><span class="token punctuation">:</span>#00FF00<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/* 已被访问的链接 */</span><span class="token selector">a:hover</span> <span class="token punctuation">&#123;</span><span class="token property">color</span><span class="token punctuation">:</span>#FF00FF<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/* 鼠标指针移动到链接上 */</span><span class="token selector">a:active</span> <span class="token punctuation">&#123;</span><span class="token property">color</span><span class="token punctuation">:</span>#0000FF<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/* 正在被点击的链接 */</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>当为链接的不同状态设置样式时，请按照以下次序规则：</p><ul><li>a:hover 必须位于 a:link 和 a:visited 之后</li><li>a:active 必须位于 a:hover 之后</li></ul><h3 id="常见的链接样式">常见的链接样式</h3><p>在上面的例子中，链接根据其状态改变颜色。</p><p>让我们看看其他几种常见的设置链接样式的方法：</p><h4 id="文本修饰">文本修饰</h4><p>text-decoration 属性大多用于去掉链接中的下划线：</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">a:link</span> <span class="token punctuation">&#123;</span><span class="token property">text-decoration</span><span class="token punctuation">:</span>none<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">a:visited</span> <span class="token punctuation">&#123;</span><span class="token property">text-decoration</span><span class="token punctuation">:</span>none<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">a:hover</span> <span class="token punctuation">&#123;</span><span class="token property">text-decoration</span><span class="token punctuation">:</span>underline<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">a:active</span> <span class="token punctuation">&#123;</span><span class="token property">text-decoration</span><span class="token punctuation">:</span>underline<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="背景色-2">背景色</h3><p>background-color 属性规定链接的背景色：</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">a:link</span> <span class="token punctuation">&#123;</span><span class="token property">background-color</span><span class="token punctuation">:</span>#B2FF99<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">a:visited</span> <span class="token punctuation">&#123;</span><span class="token property">background-color</span><span class="token punctuation">:</span>#FFFF85<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">a:hover</span> <span class="token punctuation">&#123;</span><span class="token property">background-color</span><span class="token punctuation">:</span>#FF704D<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">a:active</span> <span class="token punctuation">&#123;</span><span class="token property">background-color</span><span class="token punctuation">:</span>#FF704D<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="CSS-列表"><a href="https://www.w3school.com.cn/css/css_list.asp">CSS 列表</a></h2><p><strong>CSS 列表属性允许你放置、改变列表项标志，或者将图像作为列表项标志。</strong></p><h3 id="CSS-列表属性">CSS 列表属性</h3><table><thead><tr><th style="text-align:left">属性</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td style="text-align:left"><a href="https://www.w3school.com.cn/cssref/pr_list-style.asp">list-style</a></td><td style="text-align:left">简写属性。用于把所有用于列表的属性设置于一个声明中。</td></tr><tr><td style="text-align:left"><a href="https://www.w3school.com.cn/cssref/pr_list-style-image.asp">list-style-image</a></td><td style="text-align:left">将图象设置为列表项标志。</td></tr><tr><td style="text-align:left"><a href="https://www.w3school.com.cn/cssref/pr_list-style-position.asp">list-style-position</a></td><td style="text-align:left">设置列表中列表项标志的位置。</td></tr><tr><td style="text-align:left"><a href="https://www.w3school.com.cn/cssref/pr_list-style-type.asp">list-style-type</a></td><td style="text-align:left">设置列表项标志的类型。</td></tr></tbody></table><h2 id="CSS-表格"><a href="https://www.w3school.com.cn/css/css_table.asp">CSS 表格</a></h2><p><strong>CSS 表格属性可以帮助您极大地改善表格的外观。</strong></p><h3 id="CSS-表格属性">CSS 表格属性</h3><table><thead><tr><th style="text-align:left">属性</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td style="text-align:left"><a href="https://www.w3school.com.cn/cssref/pr_tab_border-collapse.asp">border-collapse</a></td><td style="text-align:left">设置是否把表格边框合并为单一的边框。</td></tr><tr><td style="text-align:left"><a href="https://www.w3school.com.cn/cssref/pr_tab_border-spacing.asp">border-spacing</a></td><td style="text-align:left">设置分隔单元格边框的距离。</td></tr><tr><td style="text-align:left"><a href="https://www.w3school.com.cn/cssref/pr_tab_caption-side.asp">caption-side</a></td><td style="text-align:left">设置表格标题的位置。</td></tr><tr><td style="text-align:left"><a href="https://www.w3school.com.cn/cssref/pr_tab_empty-cells.asp">empty-cells</a></td><td style="text-align:left">设置是否显示表格中的空单元格。</td></tr><tr><td style="text-align:left"><a href="https://www.w3school.com.cn/cssref/pr_tab_table-layout.asp">table-layout</a></td><td style="text-align:left">设置显示单元、行和列的算法。</td></tr></tbody></table><h2 id="CSS-轮廓">CSS 轮廓</h2><p><strong>轮廓（outline）是绘制于元素周围的一条线，位于边框边缘的外围，可起到突出元素的作用。</strong></p><p><strong>CSS outline 属性规定元素轮廓的样式、颜色和宽度。</strong></p><h3 id="CSS-边框属性">CSS 边框属性</h3><p>“CSS” 列中的数字指示哪个 CSS 版本定义了该属性。</p><table><thead><tr><th style="text-align:left">属性</th><th style="text-align:left">描述</th><th style="text-align:left">CSS</th></tr></thead><tbody><tr><td style="text-align:left"><a href="https://www.w3school.com.cn/cssref/pr_outline.asp">outline</a></td><td style="text-align:left">在一个声明中设置所有的轮廓属性。</td><td style="text-align:left">2</td></tr><tr><td style="text-align:left"><a href="https://www.w3school.com.cn/cssref/pr_outline-color.asp">outline-color</a></td><td style="text-align:left">设置轮廓的颜色。</td><td style="text-align:left">2</td></tr><tr><td style="text-align:left"><a href="https://www.w3school.com.cn/cssref/pr_outline-style.asp">outline-style</a></td><td style="text-align:left">设置轮廓的样式。</td><td style="text-align:left">2</td></tr><tr><td style="text-align:left"><a href="https://www.w3school.com.cn/cssref/pr_outline-width.asp">outline-width</a></td><td style="text-align:left">设置轮廓的宽度。</td><td style="text-align:left">2</td></tr></tbody></table><h1>CSS 框模型</h1><h2 id="CSS-框模型概述">CSS 框模型概述</h2><p><strong>CSS 框模型 (Box Model) 规定了元素框处理元素内容、内边距、边框 和 外边距 的方式。</strong></p><p>元素框的最内部分是实际的内容，直接包围内容的是内边距。内边距呈现了元素的背景。内边距的边缘是边框。边框以外是外边距，外边距默认是透明的，因此不会遮挡其后的任何元素。</p><p>**提示：**背景应用于由内容和内边距、边框组成的区域。</p><p>内边距、边框和外边距都是可选的，默认值是零。但是，许多元素将由用户代理样式表设置外边距和内边距。可以通过将元素的 margin 和 padding 设置为零来覆盖这些浏览器样式。这可以分别进行，也可以使用通用选择器对所有元素进行设置：</p><h2 id="背景与边框">背景与边框</h2>]]></content>
      
      
      <categories>
          
          <category> Web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTML基本内容</title>
      <link href="2019/08/09/HTML%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>2019/08/09/HTML%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<p>HTML是名词，CSS是形容词，JavaScript是动词</p><hr><h2 id="HTML-简介">HTML 简介</h2><p>HTML 是用来描述网页的一种语言。</p><ul><li>HTML 指的是超文本标记语言 (<strong>H</strong>yper <strong>T</strong>ext <strong>M</strong>arkup <strong>L</strong>anguage)</li><li>HTML 不是一种编程语言，而是一种<strong>标记语言</strong> (markup language)</li><li>标记语言是一套<strong>标记标签</strong> (markup tag)</li><li>HTML 使用<strong>标记标签</strong>来描述网页</li></ul><h4 id="HTML-标签">HTML 标签</h4><ul><li>HTML 标签是由<strong>尖括号</strong>包围的关键词，比如 <code>&lt;html&gt;</code></li><li>HTML 标签通常是<strong>成对出现</strong>的，比如<code>&lt;b&gt;</code>和 <code>&lt;/b&gt;</code></li><li>标签对中的第一个标签是<strong>开始标签</strong>，第二个标签是<strong>结束标签</strong></li><li>开始和结束标签也被称为<strong>开放标签</strong>和<strong>闭合标签</strong></li></ul><h4 id="HTML-文档-网页">HTML 文档 = 网页</h4><ul><li>HTML 文档<strong>描述网页</strong></li><li>HTML 文档<strong>包含 HTML 标签</strong>和纯文本</li><li>HTML 文档也被称为<strong>网页</strong></li></ul><h2 id="HTML基础">HTML基础</h2><h4 id="HTML-标题">HTML 标题</h4><p>HTML 标题（Heading）是通过<code>&lt;h1&gt;</code> - <code>&lt;h6&gt;</code> 等标签进行定义的。</p><pre class="line-numbers language-HTML" data-language="HTML"><code class="language-HTML">&lt;h1&gt;This is a heading&lt;&#x2F;h1&gt;&lt;h2&gt;This is a heading&lt;&#x2F;h2&gt;&lt;h3&gt;This is a heading&lt;&#x2F;h3&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="HTML-段落">HTML 段落</h4><p>HTML 段落是通过 <code>&lt;p&gt;</code> 标签进行定义的。</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>This is a paragraph.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>This is another paragraph.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="HTML-链接">HTML 链接</h4><p>HTML 链接是通过 <code>&lt;a&gt; </code>标签进行定义的。</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3school.com.cn<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>This is a link<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="HTML-图像">HTML 图像</h4><p>HTML 图像是通过 <code>&lt;img&gt;</code> 标签进行定义的。</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>xxxx.jpg<span class="token punctuation">"</span></span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>104<span class="token punctuation">"</span></span> <span class="token attr-name">height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>142<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="HTML-元素">HTML 元素</h2><p><strong>HTML 文档是由 HTML 元素定义的。</strong></p><p>HTML 元素指的是从开始标签（start tag）到结束标签（end tag）的所有代码。</p><blockquote><p>开始标签常被称为开放标签（opening tag），结束标签常称为闭合标签（closing tag）。</p></blockquote><p><strong>HTML 元素语法</strong></p><ul><li>HTML 元素以<strong>开始标签</strong>起始</li><li>HTML 元素以<strong>结束标签</strong>终止</li><li>元素的内容是开始标签与结束标签之间的内容</li><li>某些 HTML 元素具有<strong>空内容</strong>（empty content）</li><li>空元素<strong>在开始标签中进行关闭</strong>（以开始标签的结束而结束）</li><li>大多数 HTML 元素可拥有<strong>属性</strong></li><li>大多数 HTML 元素可以<strong>嵌套</strong>（可以包含其他 HTML 元素）。</li></ul><p><strong><code>&lt;p&gt;</code> 元素：</strong></p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>This is my first paragraph.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这个 <code>&lt;p&gt;</code> 元素定义了 HTML 文档中的一个段落。</p><p>这个元素拥有一个开始标签 <code>&lt;p&gt;</code>，以及一个结束标签 <code>&lt;/p&gt;</code>。</p><p>元素内容是：This is my first paragraph。</p><p><strong><code>&lt;body&gt;</code> 元素：</strong></p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>This is my first paragraph.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><code>&lt;body&gt;</code> 元素定义了 HTML 文档的主体。</p><p>这个元素拥有一个开始标签 <code>&lt;body&gt;</code>，以及一个结束标签 <code>&lt;/body&gt;</code>。</p><p>元素内容是另一个 HTML 元素（<code>&lt;p&gt;</code>元素）。</p><p><strong><code>&lt;html&gt;</code> 元素：</strong></p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>This is my first paragraph.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>&lt;html&gt;</code> 元素定义了整个 HTML 文档。</p><p>这个元素拥有一个开始标签 <code>&lt;html&gt;</code>，以及一个结束标签 <code>&lt;/html&gt;</code>。</p><p>元素内容是另一个 HTML 元素（body 元素）。</p><p><strong>空的 HTML 元素</strong></p><p>没有内容的 HTML 元素被称为空元素。空元素是在开始标签中关闭的。</p><p><code>&lt;br&gt;</code> 就是没有关闭标签的空元素（<code>&lt;br&gt;</code> 标签定义换行）。在 XHTML、XML 以及未来版本的 HTML 中，所有元素都必须被关闭。</p><p>在开始标签中添加斜杠，比如 <code>&lt;br /&gt;</code>，是关闭空元素的正确方法，HTML、XHTML 和 XML 都接受这种方式。</p><p>即使 <code>&lt;br&gt;</code> 在所有浏览器中都是有效的，但使用 <code>&lt;br /&gt;</code> 其实是更长远的保障。</p><h2 id="HTML-属性">HTML 属性</h2><ul><li>HTML 标签可以拥有<strong>属性</strong>。属性提供了有关 HTML 元素的<strong>更多的信息</strong>。</li><li>属性总是以名称/值对的形式出现，比如：<strong>name=“value”</strong>。</li><li>属性总是在 HTML 元素的<strong>开始标签</strong>中规定。</li><li>属性值应该始终被包括在引号内。双引号是最常用的，不过使用单引号也没有问题。（在某些个别的情况下，比如属性值本身就含有双引号，那么必须使用单引号）</li></ul><p><a href="https://www.w3school.com.cn/tags/html_ref_standardattributes.asp">HTML 标准属性参考手册</a></p><p><a href="https://www.w3school.com.cn/tags/html_ref_byfunc.asp">完整的 HTML 参考手册</a></p><h2 id="HTML标题">HTML标题</h2><p>标题（Heading）是通过 <code>&lt;h1&gt;</code> - <code>&lt;h6&gt; </code>等标签进行定义的。</p><p><code>&lt;h1&gt;</code> 定义最大的标题。<code>&lt;h6&gt;</code> 定义最小的标题。</p><blockquote><p>浏览器会自动地在标题的前后添加空行。</p><p>默认情况下，HTML 会自动地在块级元素前后添加一个额外的空行，比如段落、标题元素前后。</p></blockquote><p><strong>标题很重要</strong></p><p>请确保将 HTML heading 标签只用于标题。不要仅仅是为了产生粗体或大号的文本而使用标题。</p><p>搜索引擎使用标题为您的网页的结构和内容编制索引。</p><p>因为用户可以通过标题来快速浏览您的网页，所以用标题来呈现文档结构是很重要的。</p><p>应该将 h1 用作主标题（最重要的），其后是 h2（次重要的），再其次是 h3，以此类推。</p><h3 id="HTML-水平线">HTML 水平线</h3><p><code>&lt;hr/&gt; </code>标签在 HTML 页面中创建水平线。可用于分隔内容。</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>This is a paragraph<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>hr</span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>This is a paragraph<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>hr</span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>This is a paragraph<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>使用水平线 (<code>&lt;hr&gt;</code> 标签) 来分隔文章中的小节是一个办法（但并不是唯一的办法）。</p></blockquote><h3 id="HTML-注释">HTML 注释</h3><p>可以将注释插入 HTML 代码中，这样可以提高其可读性，使代码更易被人理解。浏览器会忽略注释，也不会显示它们。</p><p><strong>注释标签</strong></p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token comment">&lt;!-- This is a comment --></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>开始括号之后（左边的括号）需要紧跟一个叹号，结束括号之前（右边的括号）不需要。</p><p>合理地使用注释可以对未来的代码编辑工作产生帮助</p></blockquote><p><strong>条件注释</strong></p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token comment">&lt;!--[if IE 8]>    .... some HTML here ....&lt;![endif]--></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><p>条件注释定义只有 Internet Explorer 执行的 HTML 标签。</p></blockquote><h2 id="HTML-段落-2">HTML 段落</h2><p>段落是通过 <code>&lt;p&gt;</code> 标签定义的。</p><blockquote><p>浏览器会自动地在段落的前后添加空行。（<code>&lt;p&gt;</code> 是块级元素）</p><p>使用空的段落标记<code>&lt;p&gt;``&lt;/p&gt;</code>去插入一个空行是个坏习惯。用 <code>&lt;br/&gt;</code> 标签代替它！</p><p>不要用 <code>&lt;br/&gt;</code> 标签去创建列表</p></blockquote><h3 id="HTML-折行">HTML 折行</h3><p>不产生一个新段落的情况下进行换行（新行），请使用 <code>&lt;br/&gt;</code> 标签</p><pre class="line-numbers language-HTML" data-language="HTML"><code class="language-HTML">&lt;p&gt;This is&lt;br &#x2F;&gt;a para&lt;br &#x2F;&gt;graph with line breaks&lt;&#x2F;p&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p><code>&lt;br/&gt;</code> 元素是一个空的 HTML 元素。由于关闭标签没有任何意义，因此它没有结束标签。</p><p>无法通过在 HTML 代码中添加额外的空格或换行来改变输出的效果</p><p>所有连续的空格或空行都会被算作一个空格</p></blockquote><h2 id="HTML-样式">HTML 样式</h2><p><code>style</code> 属性用于改变 HTML 元素的样式。</p><h2 id="不赞成使用的标签和属性">不赞成使用的标签和属性</h2><p>在 HTML 4 中，有若干的标签和属性是被废弃的。被废弃（Deprecated）的意思是在未来版本的 HTML 和 XHTML 中将不支持这些标签和属性。</p><p>这里传达的信息很明确：请避免使用这些被废弃的标签和属性！</p><h3 id="应该避免使用下面这些标签和属性：">应该避免使用下面这些标签和属性：</h3><table><thead><tr><th style="text-align:left">标签</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td style="text-align:left"><code>&lt;center&gt;</code></td><td style="text-align:left">定义居中的内容。</td></tr><tr><td style="text-align:left"><code>&lt;font&gt;</code> 和<code> &lt;basefont&gt;</code></td><td style="text-align:left">定义 HTML 字体。</td></tr><tr><td style="text-align:left"><code>&lt;s&gt;</code> 和 <code>&lt;strike&gt;</code></td><td style="text-align:left">定义删除线文本</td></tr><tr><td style="text-align:left"><code>&lt;u&gt;</code></td><td style="text-align:left">定义下划线文本</td></tr><tr><td style="text-align:left"><strong>属性</strong></td><td style="text-align:left"><strong>描述</strong></td></tr><tr><td style="text-align:left">align</td><td style="text-align:left">定义文本的对齐方式</td></tr><tr><td style="text-align:left">bgcolor</td><td style="text-align:left">定义背景颜色</td></tr><tr><td style="text-align:left">color</td><td style="text-align:left">定义文本颜色</td></tr></tbody></table><p>对于以上这些标签和属性：请使用样式代替！</p><h3 id="背景颜色">背景颜色</h3><p><code>background-color</code> 属性为元素定义了背景颜色</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">background-color</span><span class="token punctuation">:</span>black</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">background-color</span><span class="token punctuation">:</span>red</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>This is a heading<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">background-color</span><span class="token punctuation">:</span>green</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>This is a paragraph.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="字体、颜色和尺寸">字体、颜色和尺寸</h3><p><code>font-family</code>、<code>color</code> 以及<code> font-size</code> 属性分别定义元素中文本的字体系列、颜色和字体尺寸</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">font-family</span><span class="token punctuation">:</span>verdana</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>A heading<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">font-family</span><span class="token punctuation">:</span>arial<span class="token punctuation">;</span><span class="token property">color</span><span class="token punctuation">:</span>red<span class="token punctuation">;</span><span class="token property">font-size</span><span class="token punctuation">:</span>20px<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>A paragraph.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="文本对齐">文本对齐</h3><p><code>text-align </code>属性规定了元素中文本的水平对齐方式</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">text-align</span><span class="token punctuation">:</span>center</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>This is a heading<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>The heading above is aligned to the center of this page.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="HTML文本格式化">HTML文本格式化</h2><h3 id="文本格式化标签">文本格式化标签</h3><table><thead><tr><th style="text-align:left">标签</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td style="text-align:left"><code>&lt;b&gt;</code></td><td style="text-align:left">定义粗体文本。</td></tr><tr><td style="text-align:left"><code>&lt;big&gt;</code></td><td style="text-align:left">定义大号字。</td></tr><tr><td style="text-align:left"><code>&lt;em&gt;</code></td><td style="text-align:left">定义着重文字。</td></tr><tr><td style="text-align:left"><code>&lt;i&gt;</code></td><td style="text-align:left">定义斜体字。</td></tr><tr><td style="text-align:left"><code>&lt;small&gt;</code></td><td style="text-align:left">定义小号字。</td></tr><tr><td style="text-align:left"><code>&lt;strong&gt;</code></td><td style="text-align:left">定义加重语气。</td></tr><tr><td style="text-align:left"><code>&lt;sub&gt;</code></td><td style="text-align:left">定义下标字。</td></tr><tr><td style="text-align:left"><code>&lt;sup&gt;</code></td><td style="text-align:left">定义上标字。</td></tr><tr><td style="text-align:left"><code>&lt;ins&gt;</code></td><td style="text-align:left">定义插入字。</td></tr><tr><td style="text-align:left"><code>&lt;del&gt;</code></td><td style="text-align:left">定义删除字。</td></tr></tbody></table><h3 id="“计算机输出”标签">“计算机输出”标签</h3><table><thead><tr><th style="text-align:left">标签</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td style="text-align:left"><code>&lt;code&gt;</code></td><td style="text-align:left">定义计算机代码。</td></tr><tr><td style="text-align:left"><code>&lt;kdd&gt;</code></td><td style="text-align:left">定义键盘码。</td></tr><tr><td style="text-align:left"><code>&lt;samp&gt;</code></td><td style="text-align:left">定义计算机代码样本</td></tr><tr><td style="text-align:left"><code>&lt;tt&gt;</code></td><td style="text-align:left">定义打字机代码。</td></tr><tr><td style="text-align:left"><code>&lt;var&gt;</code></td><td style="text-align:left">定义变量。</td></tr><tr><td style="text-align:left"><code>&lt;pre&gt;</code></td><td style="text-align:left">定义预格式文本。</td></tr></tbody></table><h3 id="引用、引用和术语定义">引用、引用和术语定义</h3><table><thead><tr><th style="text-align:left">标签</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td style="text-align:left"><code>&lt;abbr&gt;</code></td><td style="text-align:left">定义缩写。</td></tr><tr><td style="text-align:left"><code>&lt;acronym&gt;</code></td><td style="text-align:left">定义首字母缩写。</td></tr><tr><td style="text-align:left"><code>&lt;address&gt;</code></td><td style="text-align:left">定义地址。</td></tr><tr><td style="text-align:left"><code>&lt;bdo&gt;</code></td><td style="text-align:left">定义文字方向。</td></tr><tr><td style="text-align:left"><code>&lt;blockquote&gt;</code></td><td style="text-align:left">定义长的引用。</td></tr><tr><td style="text-align:left"><code>&lt;q&gt;</code></td><td style="text-align:left">定义短的引用语</td></tr><tr><td style="text-align:left"><code>&lt;cite&gt;</code></td><td style="text-align:left">定义引用、引证。</td></tr><tr><td style="text-align:left"><code>&lt;dfn&gt;</code></td><td style="text-align:left">定义一个定义项目。</td></tr></tbody></table><h2 id="HTML-引用"><a href="https://www.w3school.com.cn/html/html_quotation_elements.asp">HTML 引用</a></h2><h2 id="HTML-计算机代码"><a href="https://www.w3school.com.cn/html/html_computercode_elements.asp">HTML 计算机代码</a></h2><h2 id="HTML-CSS">HTML CSS</h2><h3 id="外部样式表">外部样式表</h3><p>当样式需要被应用到很多页面的时候，外部样式表将是理想的选择。使用外部样式表，你就可以通过更改一个文件来改变整个站点的外观</p><h3 id="内部样式表">内部样式表</h3><p>当单个文件需要特别样式时，就可以使用内部样式表。你可以在 head 部分通过 <code>&lt;style&gt;</code> 标签定义内部样式表。</p><h3 id="内联样式">内联样式</h3><p>当特殊的样式需要应用到个别元素时，就可以使用内联样式。 使用内联样式的方法是在相关的标签中使用样式属性。样式属性可以包含任何 CSS 属性。以下实例显示出如何改变段落的颜色和左外边距。</p><h2 id="HTML-链接-2">HTML 链接</h2><h3 id="超链接">超链接</h3><p>超链接可以是一个字，一个词，或者一组词，也可以是一幅图像，您可以点击这些内容来跳转到新的文档或者当前文档中的某个部分。</p><p>当您把鼠标指针移动到网页中的某个链接上时，箭头会变为一只小手。</p><p>我们通过使用 <code>&lt;a&gt; </code>标签在 HTML 中创建链接。</p><p>有两种使用 <code>&lt;a&gt; </code>标签的方式：</p><ul><li>通过使用 <code>href </code>属性 - 创建指向另一个文档的链接</li><li>通过使用 <code>name</code> 属性 - 创建文档内的书签</li></ul><h3 id="链接语法">链接语法</h3><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3school.com.cn/<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Visit W3School<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="target-属性">target 属性</h3><p>使用 Target 属性，你可以定义被链接的文档在何处显示。</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3school.com.cn/<span class="token punctuation">"</span></span> <span class="token attr-name">target</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>_blank<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Visit W3School!<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token comment">&lt;!--如果把链接的 target 属性设置为 "_blank"，该链接会在新窗口中打开。 --></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="name-属性">name 属性</h3><p>name 属性规定锚（anchor）的名称</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>label<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>锚（显示在页面上的文本）<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><a href="http://www.w3school.com.cn/html/html_links.asp#tips">实例-锚</a></p><blockquote><p>假如浏览器找不到已定义的命名锚，那么就会定位到文档的顶端。不会有错误发生。</p></blockquote><h2 id="HTML-图像-2"><a href="https://www.w3school.com.cn/html/html_images.asp">HTML 图像</a></h2><h3 id="图像标签（-img-）和源属性（Src）">图像标签（<code>&lt;img&gt;</code>）和源属性（<code>Src</code>）</h3><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>url<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="替换文本属性（Alt）">替换文本属性（<code>Alt</code>）</h3><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>boat.gif<span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Big Boat<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在浏览器无法载入图像时，替换文本属性告诉读者她们失去的信息</p><h2 id="HTML-表格"><a href="https://www.w3school.com.cn/html/html_tables.asp">HTML 表格</a></h2><hr><pre class="line-numbers language-graphLR" data-language="graphLR"><code class="language-graphLR">A[Hard edge] --&gt;|Link text| B(Round edge)    B --&gt; C&#123;Decision&#125;    C --&gt;|One| D[Result one]    C --&gt;|Two| E[Result two]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre><code>&lt;table&gt;    &lt;tr&gt;        &lt;th rowspan=&quot;2&quot;&gt;值班人员&lt;/th&gt;        &lt;th&gt;星期一&lt;/th&gt;        &lt;th&gt;星期二&lt;/th&gt;        &lt;th&gt;星期三&lt;/th&gt;    &lt;/tr&gt;    &lt;tr&gt;        &lt;td&gt;李强&lt;/td&gt;        &lt;td&gt;张明&lt;/td&gt;        &lt;td&gt;王平&lt;/td&gt;    &lt;/tr&gt;&lt;/table&gt;</code></pre><table>    <tr>        <th rowspan="2">值班人员</th>        <th>星期一</th>        <th>星期二</th>        <th>星期三</th>    </tr>    <tr>        <td>李强</td>        <td>张明</td>        <td>王平</td>    </tr></table><pre class="line-numbers language-none"><code class="language-none">&lt;table&gt;    &lt;tr&gt;        &lt;th rowspan&#x3D;&quot;2&quot;&gt;值班人员&lt;&#x2F;th&gt;        &lt;th&gt;星期一&lt;&#x2F;th&gt;        &lt;th&gt;星期二&lt;&#x2F;th&gt;        &lt;th&gt;星期三&lt;&#x2F;th&gt;    &lt;&#x2F;tr&gt;    &lt;tr&gt;        &lt;td&gt;李强&lt;&#x2F;td&gt;        &lt;td&gt;张明&lt;&#x2F;td&gt;        &lt;td&gt;王平&lt;&#x2F;td&gt;    &lt;&#x2F;tr&gt;&lt;&#x2F;table&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><p>二个注脚<sup class="footnote-ref"><a href="#fn1" id="fnref1">[1]</a></sup>的样例。</p><h2 id="HTML-列表"><a href="https://www.w3school.com.cn/html/html_lists.asp">HTML 列表</a></h2><h2 id="HTML块"><a href="https://www.w3school.com.cn/html/html_blocks.asp">HTML块</a></h2><h3 id="HTML-块元素">HTML 块元素</h3><p>块级元素在浏览器显示时，通常会以新行来开始（和结束）。</p><h3 id="HTML-div-元素">HTML<code>&lt;div&gt;</code>元素</h3><p>HTML <code>&lt;div&gt; </code>元素是块级元素，它是可用于组合其他 HTML 元素的容器。</p><p><code>&lt;div&gt; </code>元素没有特定的含义。除此之外，由于它属于块级元素，浏览器会在其前后显示折行。</p><p>如果与 CSS 一同使用，<code>&lt;div&gt;</code> 元素可用于对大的内容块设置样式属性。</p><p><code>&lt;div&gt;</code> 元素的另一个常见的用途是文档布局。它取代了使用表格定义布局的老式方法。使用 <code>&lt;table&gt;</code> 元素进行文档布局不是表格的正确用法。<code>&lt;table&gt;</code> 元素的作用是显示表格化的数据。</p><h3 id="HTML-内联元素">HTML 内联元素</h3><p>内联元素在显示时通常不会以新行开始。</p><p>HTML <code>&lt;span&gt;</code> 元素是内联元素，可用作文本的容器。</p><p><code>&lt;span&gt;</code> 元素也没有特定的含义。</p><p>当与 CSS 一同使用时，<code>&lt;span&gt; </code>元素可用于为部分文本设置样式属性。</p><h2 id="HTML类"><a href="https://www.w3school.com.cn/html/html_classes.asp">HTML类</a></h2><p>对 HTML 进行分类（设置类），使我们能够为元素的类定义 CSS 样式。</p><p>为相同的类设置相同的样式，或者为不同的类设置不同的样式。</p><h3 id="分类块级元素">分类块级元素</h3><p>HTML <code>&lt;div&gt;</code> 元素是<em>块级元素</em>。它能够用作其他 HTML 元素的容器。</p><p>设置 <code>&lt;div&gt;</code> 元素的类，使我们能够为相同的<code>&lt;div&gt;</code>元素设置相同的类：</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css"><span class="token selector">.cities</span> <span class="token punctuation">&#123;</span>    <span class="token property">background-color</span><span class="token punctuation">:</span>black<span class="token punctuation">;</span>    <span class="token property">color</span><span class="token punctuation">:</span>white<span class="token punctuation">;</span>    <span class="token property">margin</span><span class="token punctuation">:</span>20px<span class="token punctuation">;</span>    <span class="token property">padding</span><span class="token punctuation">:</span>20px<span class="token punctuation">;</span><span class="token punctuation">&#125;</span> </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>cities<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span>London<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>London is the capital city of England. It is the most populous city in the United Kingdom, with a metropolitan area of over 13 million inhabitants.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>cities<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span>Paris<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>Paris is the capital and most populous city of France.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>cities<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span>Tokyo<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>Tokyo is the capital of Japan, the center of the Greater Tokyo Area,and the most populous metropolitan area in the world.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="分类行内元素">分类行内元素</h3><p>HTML <code>&lt;span&gt;</code> 元素是行内元素，能够用作文本的容器。</p><p>设置<code> &lt;span&gt;</code> 元素的类，能够为相同的<code>&lt;span&gt;</code>元素设置相同的样式。</p><h2 id="HTML-布局"><a href="https://www.w3school.com.cn/html/html_layout.asp">HTML 布局</a></h2><h3 id="使用-div-元素的-HTML-布局">使用 <code>&lt;div&gt; </code>元素的 HTML 布局</h3><h3 id="使用-HTML5-的网站布局">使用 HTML5 的网站布局</h3><table><thead><tr><th>HTML5</th><th>语义元素</th></tr></thead><tbody><tr><td>header</td><td>定义文档或节的页眉</td></tr><tr><td>nav</td><td>定义导航链接的容器</td></tr><tr><td>section</td><td>定义文档中的节</td></tr><tr><td>article</td><td>定义独立的自包含文章</td></tr><tr><td>aside</td><td>定义内容之外的内容（比如侧栏）</td></tr><tr><td>footer</td><td>定义文档或节的页脚</td></tr><tr><td>details</td><td>定义额外的细节</td></tr><tr><td>summary</td><td>定义 details 元素的标题</td></tr></tbody></table><hr class="footnotes-sep"><section class="footnotes"><ol class="footnotes-list"><li id="fn1" class="footnote-item"><p>123 <a href="#fnref1" class="footnote-backref">↩︎</a></p></li></ol></section>]]></content>
      
      
      <categories>
          
          <category> Web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTML </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript ECMAScript</title>
      <link href="2019/08/09/JavaScript_ECMAScript/"/>
      <url>2019/08/09/JavaScript_ECMAScript/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.liaoxuefeng.com/wiki/1022910821149312">JavaScript</a>核心（ECMAScript），参考书籍《JavaScript高级程序设计》第三版</p><hr><h2 id="基本概念">基本概念</h2><h3 id="script-元素"><code>&lt;script&gt;</code>元素</h3><p><code>&lt;script&gt;</code>元素具有6个属性：</p><ul><li><code>async</code>：可选。异步，表示应该立即下载脚本，但不应妨碍页面中的其他操作，比如下载其他资源或等待加载其他脚本。只对外部脚本文件有效。建议异步脚本不要在加载期间修改 DOM（属性设置为<code>async=&quot;async&quot;</code>）</li><li><code>charset</code>：可选。表示通过 src 属性指定的代码的字符集。由于大多数浏览器会忽略它的值，因此这个属性很少有人用。</li><li><code>defer</code>：可选。延迟，表示脚本可以<strong>延迟到文档完全被解析和显示之后再执行</strong>。只对外部脚本文件有效。IE7 及更早版本对嵌入脚本也支持这个属性。(属性设置为<code>defer=&quot;defer&quot;</code>)</li><li><code>language</code>：已废弃。原来用于表示编写代码使用的脚本语言（如 JavaScript、JavaScript1.2或 VBScript）。大多数浏览器会忽略这个属性，因此也没有必要再用了。</li><li><code>src</code>：可选。表示包含要执行代码的外部文件。</li><li><code>type</code>：可选。可以看成是<code>language </code>替代属性；表示编写代码使用的脚本语言的内容类型（也称为 MIME 类型）。如果没有指定这个属性，则其默认值为<code>text/javascript</code></li></ul><p><code>&lt;script&gt;</code>通常用以下两种<strong>使用方式</strong></p><ul><li>直接在页面中嵌入 JavaScript 代码</li></ul><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'Hello, world'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>  ...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>由<code>&lt;script&gt;</code>…<code>&lt;/script&gt;</code>包含的代码就是JavaScript代码，它将直接被浏览器执行</p><ul><li>把JavaScript代码放到一个单独的<code>.js</code>文件，然后在HTML中通过<code>&lt;script src=&quot;...&quot;&gt;&lt;/script&gt;</code>引入这个文件</li></ul><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/static/js/abc.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>  ...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这样，<code>/static/js/abc.js</code>就会被浏览器执行。</p><blockquote><p>带有<code>src</code>属性的<code>&lt;script&gt;</code>元素不应该在其<code>&lt;script&gt;</code>和<code>&lt;/script&gt;</code>标签之间再包含额外的 JavaScript 代码。如果包含了嵌入的代码，则只会下载并执行外部脚本文件，嵌入的代码会被忽略。</p></blockquote><h3 id="语法">语法</h3><p>JavaScript的语法和Java语言类似，每个语句以<code>;</code>结束，语句块用<code>&#123;...&#125;</code>。</p><p>但是，JavaScript并不强制要求在每个语句的结尾加<code>;</code>，浏览器中负责执行JavaScript代码的引擎会自动在每个语句的结尾补上<code>;</code>。推荐语句使用分号结束。</p><p><a href="https://www.w3school.com.cn/js/js_reserved.asp">保留词</a></p><h3 id="注释">注释</h3><p>以<code>//</code>开头直到行末的字符被视为单行注释</p><p>另一种块注释是用<code>/*...*/</code>把多行字符包裹起来，把一大“块”视为一个注释</p><h3 id="区分大小写">区分大小写</h3><p>JavaScript<strong>严格区分大小写</strong>，如果弄错了大小写，程序将报错或者运行不正常。</p><h3 id="标识符">标识符</h3><p>标识符是指变量、函数、属性的名字，或者函数的参数。</p><p>标识符可以是按照下列格式规则组合起来的一或多个字符：</p><ul><li>第一个字符必须是一个字母、下划线（_）或一个美元符号（$）；</li><li>其他字符可以是字母、下划线、美元符号或数字</li></ul><p>推荐采用驼峰大小写格式，也就是第一个字母小写，剩下的每个单词的首字母大写</p><h3 id="严格模式">严格模式</h3><p>ECMAScript 5引入了严格模式的概念。 严格模式是为 JavaScript 定义了一种不同的解析与执行模型。</p><p>在严格模式下，ECMAScript3 中的一些不确定的行为将得到处理，而且对某些不安全的操作也会抛出错误。要在整个脚本中启用严格模式，可以在顶部添加如下代码： <code>&quot;use strict&quot;;</code></p><h3 id="变量">变量</h3><p>ECMAScript 的变量是松散类型的，所谓松散类型就是可以用来保存任何类型的数据。与python变量类似</p><p>定义变量时要使用<code>var</code>操作符，后跟变量名（即一个标识符）：<code>var message;</code></p><p>用 var 操作符定义的变量将成为定义该变量的作用域中的局部变量，如果在函数中使用 var 定义一个变量，那么这个变量在函数退出后就会被销毁。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> message <span class="token operator">=</span> <span class="token string">"world"</span><span class="token keyword">function</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> message <span class="token operator">=</span> <span class="token string">"hello"</span><span class="token punctuation">;</span> <span class="token comment">// 局部变量</span><span class="token punctuation">&#125;</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span> <span class="token comment">//world</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> message <span class="token operator">=</span> <span class="token string">"world"</span><span class="token keyword">function</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    message <span class="token operator">=</span> <span class="token string">"hello"</span><span class="token punctuation">;</span> <span class="token comment">// 全局变量</span><span class="token punctuation">&#125;</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span> <span class="token comment">// hello</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>不推荐省略<code>var</code>操作符定义全局变量</p></blockquote><p>可以使用一条语句定义多个变量，变量间使用逗号分隔。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> message <span class="token operator">=</span> <span class="token string">"hello"</span><span class="token punctuation">,</span>found <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="数据类型">数据类型</h2><p>ECMAScript 中有 5 种简单数据类型（也称为基本数据类型）：<code>Undefined</code>、<code>Null</code>、<code>Boolean</code>、<code>Number</code>和 <code>String</code>。还有 1 种复杂数据类型——Object，Object 本质上是由一组无序的名值对组成的。</p><p>JavaScript不区分整数和浮点数，统一用Number表示,以下都是合法的Number类型：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token number">123</span><span class="token punctuation">;</span> <span class="token comment">// 整数123</span><span class="token number">0.456</span><span class="token punctuation">;</span> <span class="token comment">// 浮点数0.456</span><span class="token number">1.2345e3</span><span class="token punctuation">;</span> <span class="token comment">// 科学计数法表示1.2345x1000，等同于1234.5</span><span class="token operator">-</span><span class="token number">99</span><span class="token punctuation">;</span> <span class="token comment">// 负数</span><span class="token number">NaN</span><span class="token punctuation">;</span> <span class="token comment">// NaN表示Not a Number，当无法计算结果时用NaN表示</span><span class="token number">Infinity</span><span class="token punctuation">;</span> <span class="token comment">// Infinity表示无限大，当数值超过了JavaScript的Number所能表示的最大值时，就表示为Infinity</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>十六进制表示整数比较方便，十六进制用0x前缀和0-9，a-f表示，例如：<code>0xff00</code>，<code>0xa5b4c3d2</code>，等等，它们和十进制表示的数值完全一样。</p></blockquote><p>Number可以直接做四则运算，规则和数学一致</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token number">1</span> <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">;</span> <span class="token comment">// 3</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">5</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span> <span class="token comment">// 7.5</span><span class="token number">2</span> <span class="token operator">/</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">// Infinity</span><span class="token number">0</span> <span class="token operator">/</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">// NaN</span><span class="token number">10</span> <span class="token operator">%</span> <span class="token number">3</span><span class="token punctuation">;</span> <span class="token comment">// 1</span><span class="token number">10.5</span> <span class="token operator">%</span> <span class="token number">3</span><span class="token punctuation">;</span> <span class="token comment">// 1.5</span><span class="token comment">// 注意%是求余运算</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="typeof操作符"><code>typeof</code>操作符</h3><p><code>typeof</code>操作符用来检测给定变量的数据类型，返回以下字符串</p><ul><li>“undefined”——这个值未定义；</li><li>“boolean”——这个值是布尔值；</li><li>“string”——这个值是字符串；</li><li>“number”——这个值是数值；</li><li>“object”——这个值是对象或 null；</li><li>“function”——如果这个值是函数</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> message <span class="token operator">=</span> <span class="token string">"hello"</span><span class="token punctuation">,</span>found <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> message<span class="token punctuation">)</span> <span class="token comment">// string</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span><span class="token punctuation">(</span>found<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">// boolean</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> <span class="token keyword">null</span><span class="token punctuation">)</span>  <span class="token comment">// object</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="null和undefined"><code>null</code>和<code>undefined</code></h3><p><code>null</code>表示一个“空”的值，它和<code>0</code>以及空字符串<code>''</code>不同，<code>0</code>是一个数值，<code>''</code>表示长度为0的字符串，而<code>null</code>表示“空”。</p><p><code>null</code>值表示一个空对象指针，而这也正是使用<code>typeof</code>操作符检测<code>null</code>值时会返回&quot;object&quot;的原因</p><p>在其他语言中，也有类似JavaScript的<code>null</code>的表示，例如Java也用<code>null</code>，Swift用<code>nil</code>，Python用<code>None</code>表示。但是，在JavaScript中，还有一个和<code>null</code>类似的<code>undefined</code>，它表示“未定义”。</p><p>JavaScript的设计者希望用<code>null</code>表示一个空的值，而<code>undefined</code>表示值未定义。事实证明，这并没有什么用，区分两者的意义不大。大多数情况下，我们都应该用<code>null</code>。<code>undefined</code>仅仅在判断函数参数是否传递的情况下有用。</p><p>只要意在保存对象的变量还没有真正保存对象，就应该明确地让该变量保存<code>null</code>值。这样做不仅可以体现<code>null</code>作为空对象指针的惯例，而且也有助于进一步区分<code>null</code>和 <code>undefined</code>。****</p><h3 id="String类型"><code>String</code>类型</h3><p>字符串是以单引号<code>'</code>或双引号<code>&quot;</code>括起来的任意文本，比如<code>'abc'</code>，<code>&quot;xyz&quot;</code>等等。<code>''</code>或<code>&quot;&quot;</code>本身只是一种表示方式，不是字符串的一部分，因此，字符串<code>'abc'</code>只有<code>a</code>，<code>b</code>，<code>c</code>这3个字符。</p><p>如果字符串内部既包含<code>'</code>又包含<code>&quot;</code>，可以用转义字符<code>\</code>来标识</p><p>字符字面量</p><table><thead><tr><th>字面量</th><th>含义</th></tr></thead><tbody><tr><td><code>\n</code></td><td>换行</td></tr><tr><td><code>\t</code></td><td>Tab制表</td></tr><tr><td><code>\b</code></td><td>空格</td></tr><tr><td><code>\r</code></td><td>回车</td></tr><tr><td><code>\f</code></td><td>换页</td></tr><tr><td><code>\\</code></td><td>转义斜杠</td></tr><tr><td><code>\xnn</code></td><td>以十六进制代码nn表示的一个字符（其中n为0～F）。例如，\x41表示&quot;A&quot;</td></tr><tr><td><code>\unnnn</code></td><td>以十六进制代码nnnn表示的一个Unicode字符（其中n为0～F）。例如，\u03a3表示希腊字符Σ</td></tr></tbody></table><h4 id="多行字符串">多行字符串</h4><p>由于多行字符串用<code>\n</code>写起来比较费事，所以最新的ES6标准新增了一种多行字符串的表示方法，用反引号表示：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">这是一个多行字符串</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="模板字符串">模板字符串</h4><p>要把多个字符串连接起来，可以用<code>+</code>号连接：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> name <span class="token operator">=</span> <span class="token string">'小明'</span><span class="token punctuation">;</span><span class="token keyword">var</span> age <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span><span class="token keyword">var</span> message <span class="token operator">=</span> <span class="token string">'你好, '</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">', 你今年'</span> <span class="token operator">+</span> age <span class="token operator">+</span> <span class="token string">'岁了!'</span><span class="token punctuation">;</span><span class="token function">alert</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>如果有很多变量需要连接，用<code>+</code>号就比较麻烦。ES6新增了一种模板字符串，表示方法和上面的多行字符串一样，但是它会自动替换字符串中的变量：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> name <span class="token operator">=</span> <span class="token string">'小明'</span><span class="token punctuation">;</span><span class="token keyword">var</span> age <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span><span class="token keyword">var</span> message <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">你好, </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>name<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">, 你今年</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>age<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">岁了!</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span><span class="token function">alert</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="操作字符串">操作字符串</h4><p>字符串常见的操作如下：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> s <span class="token operator">=</span> <span class="token string">'Hello, world!'</span><span class="token punctuation">;</span>s<span class="token punctuation">.</span>length<span class="token punctuation">;</span> <span class="token comment">// 13</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>要获取字符串某个指定位置的字符，使用类似Array的下标操作，索引号从0开始：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> s <span class="token operator">=</span> <span class="token string">'Hello, world!'</span><span class="token punctuation">;</span>s<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 'H'</span>s<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// ' '</span>s<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 'w'</span>s<span class="token punctuation">[</span><span class="token number">12</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// '!'</span>s<span class="token punctuation">[</span><span class="token number">13</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// undefined 超出范围的索引不会报错，但一律返回undefined</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>需要特别注意的是</strong>，字符串是不可变的，如果对字符串的某个索引赋值，不会有任何错误，但是，也没有任何效果：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> s <span class="token operator">=</span> <span class="token string">'Test'</span><span class="token punctuation">;</span>s<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'X'</span><span class="token punctuation">;</span><span class="token function">alert</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// s仍然为'Test'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>JavaScript为字符串提供了一些常用方法，注意，调用这些方法本身不会改变原有字符串的内容，而是返回一个新字符串：</p><h5 id="toUpperCase">toUpperCase</h5><p><code>toUpperCase()</code>把一个字符串全部变为大写：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> s <span class="token operator">=</span> <span class="token string">'Hello'</span><span class="token punctuation">;</span>s<span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 返回'HELLO'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h5 id="toLowerCase">toLowerCase</h5><p><code>toLowerCase()</code>把一个字符串全部变为小写：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> s <span class="token operator">=</span> <span class="token string">'Hello'</span><span class="token punctuation">;</span><span class="token keyword">var</span> lower <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 返回'hello'并赋值给变量lower</span>lower<span class="token punctuation">;</span> <span class="token comment">// 'hello'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h5 id="indexOf">indexOf</h5><p><code>indexOf()</code>会搜索指定字符串出现的位置：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> s <span class="token operator">=</span> <span class="token string">'hello, world'</span><span class="token punctuation">;</span>s<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">'world'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 返回7</span>s<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">'World'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 没有找到指定的子串，返回-1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h5 id="substring">substring</h5><p><code>substring()</code>返回指定索引区间的子串：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> s <span class="token operator">=</span> <span class="token string">'hello, world'</span>s<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 从索引0开始到5（不包括5），返回'hello'</span>s<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 从索引7开始到结束，返回'world'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="Boolean类型"><code>Boolean</code>类型</h3><p>布尔值和布尔代数的表示完全一致，一个布尔值只有<code>true</code>、<code>false</code>两种值，要么是<code>true</code>，要么是<code>false</code>，可以直接用<code>true</code>、<code>false</code>表示布尔值，也可以通过布尔运算计算出来</p><ul><li><code>&amp;&amp;</code>运算是与运算，只有所有都为<code>true</code>，<code>&amp;&amp;</code>运算结果才是<code>true</code></li><li><code>||</code>运算是或运算，只要其中有一个为<code>true</code>，<code>||</code>运算结果就是<code>true</code></li><li><code>!</code>运算是非运算，它是一个单目运算符，把<code>true</code>变成<code>false</code>，<code>false</code>变成<code>true</code></li></ul><p>其他数据类型对于布尔值转换</p><table><thead><tr><th>数据类型</th><th>true</th><th>false</th></tr></thead><tbody><tr><td>Boolean</td><td>true</td><td>false</td></tr><tr><td>String</td><td>非空字符串</td><td>” “</td></tr><tr><td>Number</td><td>非零数字（包括无穷大）</td><td>0和NaN</td></tr><tr><td>Object</td><td>任何对象</td><td>null</td></tr><tr><td>Undefined</td><td>N/A</td><td>undefined</td></tr></tbody></table><h3 id="Number类型"><code>Number</code>类型</h3><p>默认十进制</p><p>八进制前两位为0o</p><p>十六进制前两位为0x</p><p>NaN（Not a Number），0除以 0会返回NaN，因此不会影响其他代码的执行</p><p>NaN 与任何值都不相等，包括NaN本身，ECMAScript 定义了<code>isNaN()</code>函数</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 100</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">0o100</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 64</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">0xAB</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 171</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token operator">/</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// NaN</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">/</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// Infinity</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token operator">/</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// -Infinity</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="操作符">操作符</h3><p>一元操作符，只能操作一个值的操作符</p><p>自增和自减</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> age <span class="token operator">=</span> <span class="token number">29</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token operator">++</span> age<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 30; 与age = age + 1 效果相同</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>age <span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 30</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 31</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="关系操作符">关系操作符</h3><p>当我们对Number做比较时，可以通过比较运算符得到一个布尔值：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token number">2</span> <span class="token operator">></span> <span class="token number">5</span><span class="token punctuation">;</span> <span class="token comment">// false</span><span class="token number">5</span> <span class="token operator">>=</span> <span class="token number">2</span><span class="token punctuation">;</span> <span class="token comment">// true</span><span class="token number">7</span> <span class="token operator">==</span> <span class="token number">7</span><span class="token punctuation">;</span> <span class="token comment">// true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>实际上，JavaScript允许对任意数据类型做比较：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token boolean">false</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">// true</span><span class="token boolean">false</span> <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">// false</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>要特别注意相等运算符<code>==</code>。JavaScript在设计时，有两种比较运算符：</p><p>第一种是<code>==</code>比较，它会自动转换数据类型再比较，很多时候，会得到非常诡异的结果；</p><p>第二种是<code>===</code>比较，它不会自动转换数据类型，如果数据类型不一致，返回<code>false</code>，如果一致，再比较。</p><p>由于JavaScript这个设计缺陷，<strong>不要</strong>使用<code>==</code>比较，始终坚持使用<code>===</code>比较。</p><p>另一个例外是<code>NaN</code>这个特殊的Number与所有其他值都不相等，包括它自己：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token number">NaN</span> <span class="token operator">===</span> <span class="token number">NaN</span><span class="token punctuation">;</span> <span class="token comment">// false</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>唯一能判断<code>NaN</code>的方法是通过<code>isNaN()</code>函数：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">isNaN</span><span class="token punctuation">(</span><span class="token number">NaN</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>最后要注意浮点数的相等比较：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token number">1</span> <span class="token operator">/</span> <span class="token number">3</span> <span class="token operator">===</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">-</span> <span class="token number">2</span> <span class="token operator">/</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这不是JavaScript的设计缺陷。浮点数在运算过程中会产生误差，因为计算机无法精确表示无限循环小数。要比较两个浮点数是否相等，只能计算它们之差的绝对值，看是否小于某个阈值：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">Math<span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">/</span> <span class="token number">3</span> <span class="token operator">-</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">-</span> <span class="token number">2</span> <span class="token operator">/</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0.0000001</span><span class="token punctuation">;</span> <span class="token comment">// true</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="数组">数组</h3><p>数组是一组按顺序排列的集合，集合的每个值称为元素。JavaScript的数组可以包括任意数据类型。例如：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3.14</span><span class="token punctuation">,</span> <span class="token string">'Hello'</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>上述数组包含6个元素。数组用<code>[]</code>表示，元素之间用<code>,</code>分隔。</p><p>另一种创建数组的方法是通过<code>Array()</code>函数实现：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 创建了数组[1, 2, 3]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然而，出于代码的可读性考虑，强烈建议直接使用<code>[]</code>。</p><p>数组的元素可以通过索引来访问。请注意，索引的起始值为<code>0</code>：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3.14</span><span class="token punctuation">,</span> <span class="token string">'Hello'</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">]</span><span class="token punctuation">;</span>arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 返回索引为0的元素，即1</span>arr<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 返回索引为5的元素，即true</span>arr<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 索引超出了范围，返回undefined</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>要取得<code>Array</code>的长度，直接访问<code>length</code>属性：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3.14</span><span class="token punctuation">,</span> <span class="token string">'Hello'</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">]</span><span class="token punctuation">;</span>arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> <span class="token comment">// 6</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>请注意</strong>，直接给<code>Array</code>的<code>length</code>赋一个新的值会导致<code>Array</code>大小的变化：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> <span class="token comment">// 3</span>arr<span class="token punctuation">.</span>length <span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">;</span>arr<span class="token punctuation">;</span> <span class="token comment">// arr变为[1, 2, 3, undefined, undefined, undefined]</span>arr<span class="token punctuation">.</span>length <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>arr<span class="token punctuation">;</span> <span class="token comment">// arr变为[1, 2]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>Array</code>可以通过索引把对应的元素修改为新的值，因此，对<code>Array</code>的索引进行赋值会直接修改这个<code>Array</code>：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'A'</span><span class="token punctuation">,</span> <span class="token string">'B'</span><span class="token punctuation">,</span> <span class="token string">'C'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>arr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">99</span><span class="token punctuation">;</span>arr<span class="token punctuation">;</span> <span class="token comment">// arr现在变为['A', 99, 'C']</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>请注意</strong>，如果通过索引赋值时，索引超过了范围，同样会引起<code>Array</code>大小的变化：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>arr<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'x'</span><span class="token punctuation">;</span>arr<span class="token punctuation">;</span> <span class="token comment">// arr变为[1, 2, 3, undefined, undefined, 'x']</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>大多数其他编程语言不允许直接改变数组的大小，越界访问索引会报错。然而，JavaScript的<code>Array</code>却不会有任何错误。在编写代码时，不建议直接修改<code>Array</code>的大小，访问索引时要确保索引不会越界。</p><h4 id="indexOf-2">indexOf</h4><p>与String类似，<code>Array</code>也可以通过<code>indexOf()</code>来搜索一个指定的元素的位置：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token string">'30'</span><span class="token punctuation">,</span> <span class="token string">'xyz'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>arr<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 元素10的索引为0</span>arr<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 元素20的索引为1</span>arr<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 元素30没有找到，返回-1</span>arr<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">'30'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 元素'30'的索引为2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意了，数字<code>30</code>和字符串<code>'30'</code>是不同的元素。</p><h4 id="slice">slice</h4><p><code>slice()</code>就是对应String的<code>substring()</code>版本，它截取<code>Array</code>的部分元素，然后返回一个新的<code>Array</code>：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'A'</span><span class="token punctuation">,</span> <span class="token string">'B'</span><span class="token punctuation">,</span> <span class="token string">'C'</span><span class="token punctuation">,</span> <span class="token string">'D'</span><span class="token punctuation">,</span> <span class="token string">'E'</span><span class="token punctuation">,</span> <span class="token string">'F'</span><span class="token punctuation">,</span> <span class="token string">'G'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>arr<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 从索引0开始，到索引3结束，但不包括索引3: ['A', 'B', 'C']</span>arr<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 从索引3开始到结束: ['D', 'E', 'F', 'G']</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>注意到<code>slice()</code>的起止参数包括开始索引，不包括结束索引。</p><p>如果不给<code>slice()</code>传递任何参数，它就会从头到尾截取所有元素。利用这一点，我们可以很容易地复制一个<code>Array</code>：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'A'</span><span class="token punctuation">,</span> <span class="token string">'B'</span><span class="token punctuation">,</span> <span class="token string">'C'</span><span class="token punctuation">,</span> <span class="token string">'D'</span><span class="token punctuation">,</span> <span class="token string">'E'</span><span class="token punctuation">,</span> <span class="token string">'F'</span><span class="token punctuation">,</span> <span class="token string">'G'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">var</span> aCopy <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>aCopy<span class="token punctuation">;</span> <span class="token comment">// ['A', 'B', 'C', 'D', 'E', 'F', 'G']</span>aCopy <span class="token operator">===</span> arr<span class="token punctuation">;</span> <span class="token comment">// false</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="push和pop">push和pop</h4><p><code>push()</code>向<code>Array</code>的末尾添加若干元素，<code>pop()</code>则把<code>Array</code>的最后一个元素删除掉：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>arr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">'A'</span><span class="token punctuation">,</span> <span class="token string">'B'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 返回Array新的长度: 4</span>arr<span class="token punctuation">;</span> <span class="token comment">// [1, 2, 'A', 'B']</span>arr<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// pop()返回'B'</span>arr<span class="token punctuation">;</span> <span class="token comment">// [1, 2, 'A']</span>arr<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> arr<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> arr<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 连续pop 3次</span>arr<span class="token punctuation">;</span> <span class="token comment">// []</span>arr<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 空数组继续pop不会报错，而是返回undefined</span>arr<span class="token punctuation">;</span> <span class="token comment">// []</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="unshift和shift">unshift和shift</h4><p>如果要往<code>Array</code>的头部添加若干元素，使用<code>unshift()</code>方法，<code>shift()</code>方法则把<code>Array</code>的第一个元素删掉：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>arr<span class="token punctuation">.</span><span class="token function">unshift</span><span class="token punctuation">(</span><span class="token string">'A'</span><span class="token punctuation">,</span> <span class="token string">'B'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 返回Array新的长度: 4</span>arr<span class="token punctuation">;</span> <span class="token comment">// ['A', 'B', 1, 2]</span>arr<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 'A'</span>arr<span class="token punctuation">;</span> <span class="token comment">// ['B', 1, 2]</span>arr<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> arr<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> arr<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 连续shift 3次</span>arr<span class="token punctuation">;</span> <span class="token comment">// []</span>arr<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 空数组继续shift不会报错，而是返回undefined</span>arr<span class="token punctuation">;</span> <span class="token comment">// []</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="sort">sort</h4><p><code>sort()</code>可以对当前<code>Array</code>进行排序，它会直接修改当前<code>Array</code>的元素位置，直接调用时，按照默认顺序排序：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'B'</span><span class="token punctuation">,</span> <span class="token string">'C'</span><span class="token punctuation">,</span> <span class="token string">'A'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>arr<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>arr<span class="token punctuation">;</span> <span class="token comment">// ['A', 'B', 'C']</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>能否按照我们自己指定的顺序排序呢？完全可以，我们将在后面的函数中讲到。</p><h4 id="reverse">reverse</h4><p><code>reverse()</code>把整个<code>Array</code>的元素给掉个个，也就是反转：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'one'</span><span class="token punctuation">,</span> <span class="token string">'two'</span><span class="token punctuation">,</span> <span class="token string">'three'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>arr<span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> arr<span class="token punctuation">;</span> <span class="token comment">// ['three', 'two', 'one']</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="splice">splice</h4><p><code>splice()</code>方法是修改<code>Array</code>的“万能方法”，它可以从指定的索引开始删除若干元素，然后再从该位置添加若干元素：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'Microsoft'</span><span class="token punctuation">,</span> <span class="token string">'Apple'</span><span class="token punctuation">,</span> <span class="token string">'Yahoo'</span><span class="token punctuation">,</span> <span class="token string">'AOL'</span><span class="token punctuation">,</span> <span class="token string">'Excite'</span><span class="token punctuation">,</span> <span class="token string">'Oracle'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">// 从索引2开始删除3个元素,然后再添加两个元素:</span>arr<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">'Google'</span><span class="token punctuation">,</span> <span class="token string">'Facebook'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 返回删除的元素 ['Yahoo', 'AOL', 'Excite']</span>arr<span class="token punctuation">;</span> <span class="token comment">// ['Microsoft', 'Apple', 'Google', 'Facebook', 'Oracle']</span><span class="token comment">// 只删除,不添加:</span>arr<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// ['Google', 'Facebook']</span>arr<span class="token punctuation">;</span> <span class="token comment">// ['Microsoft', 'Apple', 'Oracle']</span><span class="token comment">// 只添加,不删除:</span>arr<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">'Google'</span><span class="token punctuation">,</span> <span class="token string">'Facebook'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 返回[],因为没有删除任何元素</span>arr<span class="token punctuation">;</span> <span class="token comment">// ['Microsoft', 'Apple', 'Google', 'Facebook', 'Oracle']</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="concat">concat</h4><p><code>concat()</code>方法把当前的<code>Array</code>和另一个<code>Array</code>连接起来，并返回一个新的<code>Array</code>：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'A'</span><span class="token punctuation">,</span> <span class="token string">'B'</span><span class="token punctuation">,</span> <span class="token string">'C'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">var</span> added <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>added<span class="token punctuation">;</span> <span class="token comment">// ['A', 'B', 'C', 1, 2, 3]</span>arr<span class="token punctuation">;</span> <span class="token comment">// ['A', 'B', 'C']</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>请注意</strong>，<code>concat()</code>方法并没有修改当前<code>Array</code>，而是返回了一个新的<code>Array</code>。</p><p>实际上，<code>concat()</code>方法可以接收任意个元素和<code>Array</code>，并且自动把<code>Array</code>拆开，然后全部添加到新的<code>Array</code>里：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'A'</span><span class="token punctuation">,</span> <span class="token string">'B'</span><span class="token punctuation">,</span> <span class="token string">'C'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>arr<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// ['A', 'B', 'C', 1, 2, 3, 4]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="join">join</h4><p><code>join()</code>方法是一个非常实用的方法，它把当前<code>Array</code>的每个元素都用指定的字符串连接起来，然后返回连接后的字符串：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'A'</span><span class="token punctuation">,</span> <span class="token string">'B'</span><span class="token punctuation">,</span> <span class="token string">'C'</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>arr<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">'-'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 'A-B-C-1-2-3'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>如果<code>Array</code>的元素不是字符串，将自动转换为字符串后再连接。</p><h4 id="多维数组">多维数组</h4><p>如果数组的某个元素又是一个<code>Array</code>，则可以形成多维数组，例如：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">400</span><span class="token punctuation">,</span> <span class="token number">500</span><span class="token punctuation">,</span> <span class="token number">600</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">'-'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="对象">对象</h3><p>JavaScript的对象是一组由键-值组成的无序集合，例如：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> person <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    name<span class="token operator">:</span> <span class="token string">'Bob'</span><span class="token punctuation">,</span>    age<span class="token operator">:</span> <span class="token number">20</span><span class="token punctuation">,</span>    tags<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'js'</span><span class="token punctuation">,</span> <span class="token string">'web'</span><span class="token punctuation">,</span> <span class="token string">'mobile'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    city<span class="token operator">:</span> <span class="token string">'Beijing'</span><span class="token punctuation">,</span>    hasCar<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    zipcode<span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>JavaScript对象的键都是字符串类型，值可以是任意数据类型。上述<code>person</code>对象一共定义了6个键值对，其中每个键又称为对象的属性，例如，<code>person</code>的<code>name</code>属性为<code>'Bob'</code>，<code>zipcode</code>属性为<code>null</code>。</p><p>要获取一个对象的属性，我们用<code>对象变量.属性名</code>的方式：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">person<span class="token punctuation">.</span>name<span class="token punctuation">;</span> <span class="token comment">// 'Bob'</span>person<span class="token punctuation">.</span>zipcode<span class="token punctuation">;</span> <span class="token comment">// null</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>JavaScript用一个<code>&#123;...&#125;</code>表示一个对象，键值对以<code>xxx: xxx</code>形式申明，用<code>,</code>隔开。注意，最后一个键值对不需要在末尾加<code>,</code>，如果加了，有的浏览器（如低版本的IE）将报错。</p><p>访问属性是通过<code>.</code>操作符完成的，但这要求属性名必须是一个有效的变量名。如果属性名包含特殊字符，就必须用<code>''</code>括起来：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> xiaohong <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    name<span class="token operator">:</span> <span class="token string">'小红'</span><span class="token punctuation">,</span>    <span class="token string">'middle-school'</span><span class="token operator">:</span> <span class="token string">'No.1 Middle School'</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><code>xiaohong</code>的属性名<code>middle-school</code>不是一个有效的变量，就需要用<code>''</code>括起来。访问这个属性也无法使用<code>.</code>操作符，必须用<code>['xxx']</code>来访问：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">xiaohong<span class="token punctuation">[</span><span class="token string">'middle-school'</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 'No.1 Middle School'</span>xiaohong<span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// '小红'</span>xiaohong<span class="token punctuation">.</span>name<span class="token punctuation">;</span> <span class="token comment">// '小红'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>如果访问一个不存在的属性会返回什么呢？JavaScript规定，访问不存在的属性不报错，而是返回<code>undefined</code></p><p>如果我们要检测<code>xiaoming</code>是否拥有某一属性，可以用<code>in</code>操作符：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> xiaoming <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    name<span class="token operator">:</span> <span class="token string">'小明'</span><span class="token punctuation">,</span>    birth<span class="token operator">:</span> <span class="token number">1990</span><span class="token punctuation">,</span>    school<span class="token operator">:</span> <span class="token string">'No.1 Middle School'</span><span class="token punctuation">,</span>    height<span class="token operator">:</span> <span class="token number">1.70</span><span class="token punctuation">,</span>    weight<span class="token operator">:</span> <span class="token number">65</span><span class="token punctuation">,</span>    score<span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token string">'name'</span> <span class="token keyword">in</span> xiaoming<span class="token punctuation">;</span> <span class="token comment">// true</span><span class="token string">'grade'</span> <span class="token keyword">in</span> xiaoming<span class="token punctuation">;</span> <span class="token comment">// false</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>不过要小心，如果<code>in</code>判断一个属性存在，这个属性不一定是<code>xiaoming</code>的，它可能是<code>xiaoming</code>继承得到的：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token string">'toString'</span> <span class="token keyword">in</span> xiaoming<span class="token punctuation">;</span> <span class="token comment">// true</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>因为<code>toString</code>定义在<code>object</code>对象中，而所有对象最终都会在原型链上指向<code>object</code>，所以<code>xiaoming</code>也拥有<code>toString</code>属性。</p><p>要判断一个属性是否是<code>xiaoming</code>自身拥有的，而不是继承得到的，可以用<code>hasOwnProperty()</code>方法：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> xiaoming <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    name<span class="token operator">:</span> <span class="token string">'小明'</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>xiaoming<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span><span class="token string">'name'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>xiaoming<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span><span class="token string">'toString'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="变量-2">变量</h3><p>变量的概念基本上和初中代数的方程变量是一致的，只是在计算机程序中，变量不仅可以是数字，还可以是任意数据类型。</p><p>变量在JavaScript中就是用一个变量名表示，变量名是大小写英文、数字、<code>$</code>和<code>_</code>的组合，且不能用数字开头。变量名也不能是JavaScript的关键字，如<code>if</code>、<code>while</code>等。申明一个变量用<code>var</code>语句，比如：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> a<span class="token punctuation">;</span> <span class="token comment">// 申明了变量a，此时a的值为undefined</span><span class="token keyword">var</span> $b <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// 申明了变量$b，同时给$b赋值，此时$b的值为1</span><span class="token keyword">var</span> s_007 <span class="token operator">=</span> <span class="token string">'007'</span><span class="token punctuation">;</span> <span class="token comment">// s_007是一个字符串</span><span class="token keyword">var</span> Answer <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span> <span class="token comment">// Answer是一个布尔值true</span><span class="token keyword">var</span> t <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span> <span class="token comment">// t的值是null</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>变量名也可以用中文，但是，请不要给自己找麻烦。</p><p>在JavaScript中，使用等号<code>=</code>对变量进行赋值。可以把任意数据类型赋值给变量，同一个变量可以反复赋值，而且可以是不同类型的变量，但是要注意只能用<code>var</code>申明一次，例如：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">123</span><span class="token punctuation">;</span> <span class="token comment">// a的值是整数123</span>a <span class="token operator">=</span> <span class="token string">'ABC'</span><span class="token punctuation">;</span> <span class="token comment">// a变为字符串</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>这种变量本身类型不固定的语言称之为动态语言，与之对应的是静态语言。静态语言在定义变量时必须指定变量类型，如果赋值的时候类型不匹配，就会报错。例如Java是静态语言，赋值语句如下：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">int a <span class="token operator">=</span> <span class="token number">123</span><span class="token punctuation">;</span> <span class="token comment">// a是整数类型变量，类型用int申明</span>a <span class="token operator">=</span> <span class="token string">"ABC"</span><span class="token punctuation">;</span> <span class="token comment">// 错误：不能把字符串赋给整型变量</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>和静态语言相比，动态语言更灵活，就是这个原因。</p><p>请不要把赋值语句的等号等同于数学的等号。比如下面的代码：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> x <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>x <span class="token operator">=</span> x <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>如果从数学上理解<code>x = x + 2</code>那无论如何是不成立的，在程序中，赋值语句先计算右侧的表达式<code>x + 2</code>，得到结果<code>12</code>，再赋给变量<code>x</code>。由于<code>x</code>之前的值是<code>10</code>，重新赋值后，<code>x</code>的值变成<code>12</code>。</p><h3 id="strict模式">strict模式</h3><p>JavaScript在设计之初，为了方便初学者学习，并不强制要求用<code>var</code>申明变量。这个设计错误带来了严重的后果：如果一个变量没有通过<code>var</code>申明就被使用，那么该变量就自动被申明为全局变量：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">i <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span> <span class="token comment">// i现在是全局变量</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在同一个页面的不同的JavaScript文件中，如果都不用<code>var</code>申明，恰好都使用了变量<code>i</code>，将造成变量<code>i</code>互相影响，产生难以调试的错误结果。</p><p>使用<code>var</code>申明的变量则不是全局变量，它的范围被限制在该变量被申明的函数体内（函数的概念将稍后讲解），同名变量在不同的函数体内互不冲突。</p><p>为了修补JavaScript这一严重设计缺陷，ECMA在后续规范中推出了strict模式，在strict模式下运行的JavaScript代码，强制通过<code>var</code>申明变量，未使用<code>var</code>申明变量就使用的，将导致运行错误。</p><p>启用strict模式的方法是在JavaScript代码的第一行写上：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token string">'use strict'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这是一个字符串，不支持strict模式的浏览器会把它当做一个字符串语句执行，支持strict模式的浏览器将开启strict模式运行JavaScript。</p><h2 id="语句">语句</h2><h3 id="条件判断">条件判断</h3><p>JavaScript使用<code>if () &#123; ... &#125; else &#123; ... &#125;</code>来进行条件判断。例如，根据年龄显示不同内容，可以用<code>if</code>语句实现如下：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> age <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>age <span class="token operator">>=</span> <span class="token number">18</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">// 如果age >= 18为true，则执行if语句块</span>    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'adult'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span> <span class="token comment">// 否则执行else语句块</span>    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'teenager'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其中<code>else</code>语句是可选的。如果语句块只包含一条语句，那么可以省略<code>&#123;&#125;</code>：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> age <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>age <span class="token operator">>=</span> <span class="token number">18</span><span class="token punctuation">)</span>    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'adult'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">else</span>    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'teenager'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="多行条件判断">多行条件判断</h4><p>如果还要更细致地判断条件，可以使用多个<code>if...else...</code>的组合：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> age <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>age <span class="token operator">>=</span> <span class="token number">18</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'adult'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>age <span class="token operator">>=</span> <span class="token number">6</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'teenager'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'kid'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上述多个<code>if...else...</code>的组合实际上相当于两层<code>if...else...</code>：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> age <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>age <span class="token operator">>=</span> <span class="token number">18</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'adult'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>age <span class="token operator">>=</span> <span class="token number">6</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'teenager'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'kid'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="循环">循环</h3><p>JavaScript的循环有两种，一种是<code>for</code>循环，通过初始条件、结束条件和递增条件来循环执行语句块：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> x <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">var</span> i<span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">&lt;=</span><span class="token number">10000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    x <span class="token operator">=</span> x <span class="token operator">+</span> i<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>x<span class="token punctuation">;</span> <span class="token comment">// 50005000</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="for">for</h4><p>让我们来分析一下<code>for</code>循环的控制条件：</p><ul><li>i=1 这是初始条件，将变量i置为1；</li><li>i&lt;=10000 这是判断条件，满足时就继续循环，不满足就退出循环；</li><li>i++ 这是每次循环后的递增条件，由于每次循环后变量i都会加1，因此它终将在若干次循环后不满足判断条件<code>i&lt;=10000</code>而退出循环。</li></ul><p><code>for</code>循环最常用的地方是利用索引来遍历数组：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'Apple'</span><span class="token punctuation">,</span> <span class="token string">'Google'</span><span class="token punctuation">,</span> <span class="token string">'Microsoft'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">var</span> i<span class="token punctuation">,</span> x<span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    x <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>for</code>循环的3个条件都是可以省略的，如果没有退出循环的判断条件，就必须使用<code>break</code>语句退出循环，否则就是死循环：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> x <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">// 将无限循环下去</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">></span> <span class="token number">100</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span> <span class="token comment">// 通过if判断来退出循环</span>    <span class="token punctuation">&#125;</span>    x <span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="for-…-in">for … in</h4><p><code>for</code>循环的一个变体是<code>for ... in</code>循环，它可以把一个对象的所有属性依次循环出来：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> o <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    name<span class="token operator">:</span> <span class="token string">'Jack'</span><span class="token punctuation">,</span>    age<span class="token operator">:</span> <span class="token number">20</span><span class="token punctuation">,</span>    city<span class="token operator">:</span> <span class="token string">'Beijing'</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> key <span class="token keyword">in</span> o<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 'name', 'age', 'city'</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>要过滤掉对象继承的属性，用<code>hasOwnProperty()</code>来实现：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> o <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    name<span class="token operator">:</span> <span class="token string">'Jack'</span><span class="token punctuation">,</span>    age<span class="token operator">:</span> <span class="token number">20</span><span class="token punctuation">,</span>    city<span class="token operator">:</span> <span class="token string">'Beijing'</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> key <span class="token keyword">in</span> o<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>o<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 'name', 'age', 'city'</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>由于<code>Array</code>也是对象，而它的每个元素的索引被视为对象的属性，因此，<code>for ... in</code>循环可以直接循环出<code>Array</code>的索引：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'A'</span><span class="token punctuation">,</span> <span class="token string">'B'</span><span class="token punctuation">,</span> <span class="token string">'C'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token keyword">in</span> a<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// '0', '1', '2'</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 'A', 'B', 'C'</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>请注意</strong>，<code>for ... in</code>对<code>Array</code>的循环得到的是<code>String</code>而不是<code>Number</code>。</p><h4 id="while">while</h4><p><code>for</code>循环在已知循环的初始和结束条件时非常有用。而上述忽略了条件的<code>for</code>循环容易让人看不清循环的逻辑，此时用<code>while</code>循环更佳。</p><p><code>while</code>循环只有一个判断条件，条件满足，就不断循环，条件不满足时则退出循环。比如我们要计算100以内所有奇数之和，可以用while循环实现：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> x <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">var</span> n <span class="token operator">=</span> <span class="token number">99</span><span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>n <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    x <span class="token operator">=</span> x <span class="token operator">+</span> n<span class="token punctuation">;</span>    n <span class="token operator">=</span> n <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>x<span class="token punctuation">;</span> <span class="token comment">// 2500</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在循环内部变量<code>n</code>不断自减，直到变为<code>-1</code>时，不再满足<code>while</code>条件，循环退出。</p><h4 id="do-…-while">do … while</h4><p>最后一种循环是<code>do &#123; ... &#125; while()</code>循环，它和<code>while</code>循环的唯一区别在于，不是在每次循环开始的时候判断条件，而是在每次循环完成的时候判断条件：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> n <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">do</span> <span class="token punctuation">&#123;</span>    n <span class="token operator">=</span> n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">while</span> <span class="token punctuation">(</span>n <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>n<span class="token punctuation">;</span> <span class="token comment">// 100</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>用<code>do &#123; ... &#125; while()</code>循环要小心，循环体会至少执行1次，而<code>for</code>和<code>while</code>循环则可能一次都不执行。</p><h4 id="break和continue">break和continue</h4><p>break 语句会立即退出循环， 强制继续执行循环后面的语句</p><p>continue 语句虽然也是立即退出循环，但退出循环后会从循环的顶部继续执行</p><h3 id="其他">其他</h3><h4 id="with语句">with语句</h4><p>with 语句的作用是将代码的作用域设置到一个特定的对象中</p><p>由于大量使用 with 语句会导致性能下降，同时也会给调试代码造成困难，因此 在开发大型应用程序时，不建议使用 with 语句</p><h4 id="switch语句">switch语句</h4><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">switch</span> <span class="token punctuation">(</span>expression<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">case</span> value<span class="token operator">:</span> statement        <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> value<span class="token operator">:</span> statement        <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> value<span class="token operator">:</span> statement        <span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="函数">函数</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">functionName</span><span class="token punctuation">(</span><span class="token parameter">arg0<span class="token punctuation">,</span> arg1<span class="token punctuation">,</span><span class="token operator">...</span><span class="token punctuation">,</span>argN</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    statements<span class="token punctuation">&#125;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>使用<code>return</code>返回<code>return</code>后语句的返回值</p><p>参数，ECMAScript 函数不介意传递进来多少个参数，也不在乎传进来参数是什么数据类型</p><p>ECMAScript 函数不能像传统意义上那样实现重载</p><p>如果在 ECMAScript 中定义了两个名字相同的函数，则该名字只属于后定义的函数</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">addSomeNumber</span><span class="token punctuation">(</span><span class="token parameter">num</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> num <span class="token operator">+</span> <span class="token number">100</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">addSomeNumber</span><span class="token punctuation">(</span><span class="token parameter">num</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> num <span class="token operator">+</span> <span class="token number">200</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">var</span> result <span class="token operator">=</span> <span class="token function">addSomeNumber</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//300</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>通过检查传入函数中参数的类型和数量并作出不同的反应，可以模仿方法的重载</p>]]></content>
      
      
      <categories>
          
          <category> Web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算机二级公共基础</title>
      <link href="2019/08/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%BA%8C%E7%BA%A7%E5%85%AC%E5%85%B1%E5%9F%BA%E7%A1%80/"/>
      <url>2019/08/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%BA%8C%E7%BA%A7%E5%85%AC%E5%85%B1%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<p>计算机二级公共基础知识</p><hr><p><img src="https://puui.qpic.cn/fans_admin/0/3_1409075683_1572058823439/0" alt="19"></p><h2 id="数据结构与算法">数据结构与算法</h2><h3 id="算法">算法</h3><h4 id="算法的基本概念">算法的基本概念</h4><p>算法：是指<strong>解绝</strong>方案的<strong>准确</strong>而完整的描述。</p><blockquote><p>即是一组严谨地定义运算顺序的规则，并且每一个规则都是有效的，且是明确的，没有二义性，同时该规则将在有限次运算后可终止。</p></blockquote><p>算法不等于程序，也不等于计算机方法。程序的编制不可能优于算法的设计。</p><h5 id="算法的基本特征">算法的基本特征</h5><ul><li><strong>可行性</strong>：算法原则上能够精确地执行。</li><li><strong>确定性</strong>：算法中每一步骤都必须有明确定义，不允许有模棱两可的解释，不允许有多义性。设计的算法是计算工具所能够正常解决问题的过程。</li><li><strong>有穷性</strong>：算法必须能在有限的时间内做完，即能在执行<strong>有限个步骤</strong>后终止。</li><li><strong>拥有足够的情报</strong>：算法的执行与输入的数据和提供的初始条件相关，不同的输入或初始条件会有不同的输出结果，提供准确的初始条件和数据，才能使算法正确执行。</li></ul><h5 id="算法的基本要素">算法的基本要素</h5><p>一是对数据对象的运算和操作；二是算法的控制结构。</p><ul><li>算法中对数据的运算和操作<br>算法实际上是按解题要求从环境能进行的所有操作中选择合适的操作所组成的一组指令序列。即算法是计算机所能够处理的操作所组成的指令序列。</li><li>算法的控制结构<br>算法的功能不仅取决于所选用的操作，而且还与各操作之间的顺序有关。在算法中，操作的执行顺序又称算法的控制结构，一般的算法控制结构有三种：<strong>顺序结构</strong>、<strong>选择结构</strong>、<strong>循环结构</strong>。</li></ul><h5 id="算法基本设计方法">算法基本设计方法</h5><ul><li><p>列举法<br>列举法的基本思想是，根据提出的问题，列举出所有可能的情况，并用问题中给定的条件检验哪些是满足条件的，哪些是不满足条件的。列举法通常用于解决“是否存在”或“有哪些可能”等问题</p></li><li><p>归纳法<br>归纳法的基本思想是，通过列举少量的特殊情况，经过分析，最后找出一般的关系。归纳是一种抽象，即从特殊现象中找出一般规律。但由于在归纳法中不可能对所有的情况进行列举，因此，该方法得到的结论只是一种猜测，还需要进行证明。</p></li><li><p>递推<br>递推，即是从已知的初始条件出发，逐次推出所要求的各个中间环节和最后结果。其中初始条件或问题本身已经给定，或是通过对问题的分析与化简而确定。</p></li><li><p>递归<br>在解决一些复杂问题时，为了降低问题的复杂程序，通常是将问题逐层分解，最后归结为一些最简单的问题。这种将问题逐层分解的过程，并没有对问题进行求解，而只是当解决了最后的问题那些最简单的问题后，再沿着原来分解的逆过程逐步进行综合，这就是递归的方法。</p></li><li><p>减斗递推技术<br>减半递推即将问题的规模减半，然后，重复相同的递推操作</p></li><li><p>回溯法。<br>有些实际的问题很难归纳出一组简单的递推公式或直观的求解步骤，也不能使用无限的列举。对于这类问题，只能采用试探的方法，通过对问题的分析，找出解决问题的线索，然后沿着这个线索进行试探，如果试探成功，就得到问题的解，如果不成功，再逐步回退，换别的路线进行试探。这种方法，即称为回溯法。</p></li></ul><h4 id="算法复杂度">算法复杂度</h4><ol><li><strong>算法时间复杂度</strong>是指执行算法所需要的计算<strong>工作量</strong>。<br>通常，一个算法所用的时间包括编译时间和运行时间。</li><li><strong>算法空间复杂度</strong>是指执行这个算法所需要的<strong>内存空间</strong>。<br>包括算法程序所占的空间，输入的初始数据所占的空间，算法执行过程中所需的额外空间。</li></ol><p><strong>空间复杂度和时间复杂度并不相关。</strong></p><h3 id="数据结构的基本概念">数据结构的基本概念</h3><h4 id="概念">概念</h4><p>数据结构是指相互有关联的数据元素的集合。它包括以下两个方面：</p><ul><li>表示数据元素的信息</li><li>表示各数据之间的前后件关系</li></ul><h5 id="数据的逻辑结构">数据的逻辑结构</h5><p>是指反映数据元素之间的逻辑关系结构。</p><p>数据的逻辑结构有两个要素：</p><ul><li><p><strong>数据元素的集合，通常记为D</strong></p></li><li><p>D上的关系，它反映了<strong>数据元素之间的前后件关系，通常记为R</strong>。</p></li></ul><p>一个数据结构可以表示成 B = (D, R)</p><h5 id="数据的存储结构">数据的存储结构</h5><p>数据的逻辑结构在计算机存储空间中的存放形式称为数据的存储结构，或数据的物理结构。</p><p>即数据存储时，不仅要存放数据元素的信息，而且要存储数据元素之间的前后件关系的信息。</p><p>通常的数据存储结构有顺序、链接、索引等存储结构。</p><h4 id="数据结构的图形表示">数据结构的图形表示</h4><p>数据结构的图形表示有两个元素：</p><ul><li>中间标有元素值的方框表示数据元素，称为数据结点</li><li>用有向线段表示数据元素之间的前后件关系，即有向线段从前件结点指向后件结点</li></ul><blockquote><p>注意：在结构图中，没有前件的结点称为根结点，没有后件的结点称为终端结点，也称叶子结点。</p></blockquote><h4 id="线性结构与非线性结构">线性结构与非线性结构</h4><p>如果一个数据元素都没有，该数据结构称为空数据结构；在空数据结构中插入一个新的元素后数据结构变为非空数据结构；将数据结构中的所有元素均删除，则该数据结构变成空数据结构。</p><p>如果一个非空的数据结构满足如下条件，则该数据结构为线性结构：</p><ul><li>有且只有一个根结点</li><li>每一个结点最多只有一个前件，也最多只有一个后件</li></ul><blockquote><p>线性结构又称线性表。</p><p>注意：在线性结构表中插入或删除元素，该线性表仍然应满足线性结构。如果一个数据结构不满足线性结构，则称为非线性结构。</p></blockquote><h3 id="线性表及其顺序存储结构">线性表及其顺序存储结构</h3><h4 id="基本概念">基本概念</h4><p>线性表是最常用的数据结构，它由一组数据元素组成。</p><blockquote><p>注意：这里的数据元素是一个广义的数据元素，并不仅仅是指一个数据。如，矩阵、学 生记录表等。</p></blockquote><p>非空线性表的结构特征：</p><ul><li><p>有且只有一个根结点，它无前件</p></li><li><p>有且只有一个终端结点，它无后件</p></li><li><p>除根结点和终端结点之外，所有的结点有且只有一个前件和一个后件。线性表中结点的个数称为结点的长度 n 。当 n=0 时，称为空表。</p></li></ul><h4 id="顺序存储结构">顺序存储结构</h4><p>顺序存储结构的特点：</p><ul><li><p>线性表中所有的元素所占的存储空间是连续的</p></li><li><p>线性表中各数据元素在存储空间中是按逻辑顺序依次存放的</p></li></ul><p>通常，顺序存储结构中，线性表中每一个数据元素在计算机存储空间中的存储地址由该元素在线性表中的位置序号唯一确定。</p><p>线性表的顺序存储结构下的基本运算：</p><ul><li><p>在指定位置插入一个元素</p></li><li><p>删除线性表中的指定元素</p></li><li><p>查找某个或某些特定的元素</p></li><li><p>线性表的排序</p></li><li><p>按要求将一个线性表拆分为多个线性表</p></li><li><p>将多个线性表合并为一个线性表</p></li><li><p>复制线性表</p></li><li><p>逆转一个线性表</p></li></ul><h4 id="线性表的基本操作">线性表的基本操作</h4><h5 id="顺序表的插入运算">顺序表的插入运算</h5><p>在顺序存储结构的线性表中插入一个元素。</p><blockquote><p>注意：找到插入位置后，将插入位置开始的所有元素从最后一个元素开始顺序后移。另外，在定义线性表时，一定要定义足够的空间，否则，将不允许插入元素。</p></blockquote><h5 id="顺序表的删除运算">顺序表的删除运算</h5><p>在顺序在存储结构的线性表中删除一个元素。</p><blockquote><p>注意：找到删除的数据元素后，从该元素位置开始，将后面的元素一一向前移动，在移动完成后，线性表的长度减 1</p></blockquote><h3 id="⭐⭐栈和队列">⭐⭐栈和队列</h3><h4 id="栈及其基本运算">栈及其基本运算</h4><p>栈是一种特殊的线性表，它是限定在一端进行插入和删除的线性表。它的插入和删除只能在表的一端进行，而另一端是封闭的，不允许进行插入和删除操作。</p><p>在栈中，允许插入和删除操作一端称为栈顶，不允许插入和删除操作的一端则称为栈底。</p><p>栈顶的元素总是最后被插入的元素，也是最先被删除的元素。它遵循的原则是：先进后出或后进先出。</p><p>堆栈指针总是指向栈顶元素的。</p><h5 id="栈的顺序存储及其运算">栈的顺序存储及其运算</h5><p>在栈的顺序存储空间 S （ 1 ： m ）中， S （ bottom ）通常为栈底元素， S （ top ）为栈顶元素。 Top=0 表示栈空； top=m 表示栈满。</p><h6 id="入栈运算">入栈运算</h6><p>即在栈的顶部插入一个新元素。操作方式是：将栈顶指针加 1 ，再将元素插入至指针所指的位置。</p><h6 id="退栈运算">退栈运算</h6><p>退栈运算即将栈顶元素取出并赋给一个指定的变量。</p><p>操作方式是：先将栈顶元素赋给指定的变量，再将栈顶指针减 1 。</p><h6 id="读栈顶元素">读栈顶元素</h6><p>将栈顶元素赋给某一指定变量，但栈顶指针不变。</p><h4 id="⭐队列及其基本运算">⭐队列及其基本运算</h4><h5 id="队列">队列</h5><p>队列即是允许在一端进行插入，而在另一端进行删除的线性表。</p><p>允许插入的一端称为队尾，通常用一个尾指针指向队尾；</p><p>允许删除的一端称为队首，通常用一个队首指针指向排队元素的前一个位置。</p><p>队列遵循的规则是：<strong>先进先出或后进后出</strong></p><h5 id="循环队列及其运算">循环队列及其运算</h5><p>队列的顺序存储结构一般采用循环队列的形式。</p><p>循环队列，即是次队列存储空间的最后一个位置绕到第一个位置，形成逻辑上的环状空间，供队列循环使用。</p><p>在循环队列中，用队尾指针 rear 指向队列中的队尾元素，用排头指针 front 指向排头元素的前一个位置，因此，从排头指针 front 指向的后一个位置到队尾指针 rear 指向的位置之间所有的元素均为队列中的元素。</p><p>循环队列的初始状态为空，即 rear=front=m 。这里 m 即为队列的存储空间。</p><p>循环队列的基本运算：入队运算和退队运算。</p><p><strong>入队运算</strong>：每进行一次入队运算，队尾指针加 1 。当队尾指针 rear=m+1 时，即表示队列空间的尾部已经放置了元素，则下一个元素应该旋转到队列空间的首部，即 rear=1</p><p><strong>退队运算</strong>：每退队一个元素，排头指针加 1 。当排头指针 front=m+1 时，即排头指针指向队列空间的尾部，退队后，排头指针指向队列空间的开始，即 front=1 。</p><p>在队列操作时，循环队列满时， front=rear ，队列空时，也有 rear=front ，即在队列空或满时，排头指针和队尾指针均指向同一个位置。</p><p>要判断队列空或满时，还应增加一个标志， s 值的定义：s = 0表示队列空;s = 1表示队列满</p><p>判断队列空与队列满的条件下：</p><p><strong>队列空的条件</strong>：s=0</p><p><strong>队列满的条件</strong>：s=1 、 front=rear</p><h6 id="入队运算">入队运算</h6><p>即在队尾加入一个新元素。这个运算有两个基本操作：首先，将队尾指针加 1 ，即 rear=rear+1 ，当 rear=m+1 时，置 rear=1 ，然后，将新元素插入到队尾指针指向的位置。</p><p>当循环队列非空（ s=1 ），且 front=rear 时，队列满，不能进行入队操作。此情况称“上溢”。</p><h6 id="退队操作">退队操作</h6><p>即将队首的元素赋给一个指定的变量。该运算也有两个基本操作：首先，将排头指针加 1 ，即 front=front+1 ，当 front=m+1 时，置 front=1 ，然后，将排头指针指向的元素赋给指定的变量。</p><p>当循环队列为空（ s=0 ）时，不能进行退队运算。此种情况称为“下溢”。</p><h3 id="线性链表">线性链表</h3><h4 id="线性链表基本概念">线性链表基本概念</h4><p>前面的线性表均是采用顺序存储结构及在顺序存储结构下的运算。</p><h5 id="顺序存储的优点">顺序存储的优点</h5><ul><li><p>结构简单</p></li><li><p>运算方便</p></li></ul><h5 id="顺序存储结构的缺点">顺序存储结构的缺点</h5><ul><li><p>要在顺序存储的线性表中插入一个新元素或删除一个元素时，为了保证插入或删除后的线性表仍然为顺序存储。在插入或删除元素时，需要移动大量的数据元素，因此运算效率较低。</p></li><li><p>如果一个线性表分配顺序存储空间后，如果出现线性表的存储空间已满，但还需要插入元素时，会发生“上溢”错误。</p></li><li><p>在实际应用时，可能有多个线性表同时使用存储空间，这样给存储空间的分配带来问题，有可能使有的队列空间不够或过多造成浪费。</p></li></ul><p>基于上述情况，对于大的线性表或元素变动频繁的大线性表不宜采用顺序存储结构，而应采用链式存储结构。</p><h5 id="链式存储结构">链式存储结构</h5><p>假设每一个数据结点对应一个存储单元，该存储单元称为存储结点，简称结点。</p><p>在链式存储方式中，要求每一个结点由两部分组成：一部分用于存放数据元素，你为数据域；另一部分用于存放指针，称为指针域。该指针用于指向该结点的前一个或后一个结点。</p><p>在链式存储结构中，存储数据结构的存储空间可以不连续，各数据结点的存储顺序与数据元素之间的逻辑关系不一致，而数据元素之间的逻辑关系是由指针域来确定的。</p><p>链式存储结构既可以用于线性结构，也可用于非线性结构。</p><h5 id="线性链表介绍">线性链表介绍</h5><p>线性表的链式存储结构称为线性链表。</p><p>将存储空间划分成若干的小块，每块占用若干个字节，这些小块称为存储结点。</p><p>将存储结点分为两个部分，一部分用于存储数据元素的值，称为数据域；另一部分用于存储元素之间的前后件关系，即存放下一个元素在存储序号（即存储地址），即指向后件结点，称为指针域。</p><p>在线性链表中用一个专门的指针 HEAD 指向线性链表中第一个数据元素的结点（即存放第一个元素的地址）。线性表中最后一个元素没有后件，因此，线性链表中的最后一个结点的指针域为空（用 Null 或 0 表示），表示链终结。</p><p>在线性链表中，各元素的存储序号是不连续的，元素间的前后件关系与位置关系也是不一致的。在线性链表中，前后件的关系依靠各结点的指针来指示，指向表的第一个元素的指针 HEAD 称为头指针，当 HEAD=NULL 时，表示该链表为空。</p><p>对于线性链表，可以从头指针开始，沿着各结点的指针扫描到链表中的所有结点。</p><p>这种线性链表称为线性单链表，即可以从表头开始向后扫描链表中的所有结点，而不能从中间或表尾结点向前扫描位于该结点之前的元素。</p><p>这种链表结构的缺点是不能任意地对链表中的元素按下同的方向进行扫描。在某些应用时，如果对链表中的元素设置两个指针域，一个为指向前件的指针域，称为左指针（ LLink ），一个为指向后件的指针域，称为右指针（ RLink ）。则这种链表是双向链表。</p><h5 id="⭐带链的栈">⭐带链的栈</h5><p>带链的栈即是用来收集计算机存储空间中的所有空闲的存储结点，这种带链的栈称为可利用栈。</p><p>当需要存储结点时，即从可利用的栈的顶部取出栈顶结点；当系统要释放一个存储结点时，将该结点空间放回到可利用栈的栈顶。</p><p>即在计算机中所有空闲的空间，均可以以结点的方式链接到可利用栈中，随着其他线性链表中结点的插入与删除，可利用栈处于动态变化之中，即可利用栈经常要进行退栈和入栈操作。</p><h5 id="带链的队列">带链的队列</h5><p>队列也是线性表，也可利用链式存储结构来进行保存。</p><h4 id="线性链表的基本运算">线性链表的基本运算</h4><p>线性链表包括的基本运算：</p><ul><li><p>在链表中包含指定元素的结点之前插入一个新元素</p></li><li><p>在链表中删除包含指定元素的结点</p></li><li><p>将两个线性链表按要求合并成一个线性链表</p></li><li><p>将一个线性链表按要求进行分解</p></li><li><p>逆转线性链表</p></li><li><p>复制线性链表</p></li><li><p>线性链表的排序</p></li><li><p>线性链表的查找</p></li></ul><h5 id="线性链表中查找指定的元素">线性链表中查找指定的元素</h5><p>在线性链表中查找元素 X ：从头指针指向的结点开始往后沿指针进行扫描，直到后面已没有结点或下一个结点的数据域为 X 为止。</p><p>元素的查找，经常是为了进行插入或删除操作而进行的，因此，在查找时，往往是需要记录下该结点的前一个结点。</p><h5 id="线性链表的插入">线性链表的插入</h5><p>线性链表的插入即在链式存储结构的线性表中插入一个新元素。</p><p>在线性链表中包含元素 x 的结点之前插入新元素 b ，插入过程：</p><ol><li>从可利用栈中取得一个结点，设该结点号为 p ，即取得的结点的存储序号存放在变量 p 中。并置结点 p 的数据域为插入的元素值 b 。</li><li>在线性链表中寻找包含元素 x 的前一个结点，该结点的存储序号为 q 。</li><li>将结点 p 插入到结点 q 之后。具体的操作：首先，使结点 p 插入到结点 q 之后（即结点 q 的后件结点），然后，使结点 q 的指针域 内容改为指向结点 p 。</li></ol><p>线性链表的插入操作，新结点是为来自于可利用栈，因此不会造成线性表的溢出。同样，由于可利用栈可被多个线性表利用，因此，不会造成存储空间的浪费，大家动态地共同使用存储空间。</p><h5 id="线性链表的删除">线性链表的删除</h5><p>线性链表的删除，即是在链式存储结构下的线性表中删除指定元素的结点。</p><p>操作方式：</p><ol><li>在线性表中找到包含指定元素 x 的前一个结点 p</li><li>将该结点 p 后的包含元素 x 的结点从线性链表中删除，然后将被删除结点的后一个结点 q 的地址提供给结点 p 的指针域，即将结点 p 指向结点 q 。</li><li>将删除的结点送回可利用栈。</li></ol><p>从以上的删除操作可见，删除一个指定的元素，不需要移动其他的元素即可实现，这是顺序存储的线性表所不能实现的。同时，此操作还可更有效地利用计算机的存储空间。</p><h4 id="循环链表及其基本操作">循环链表及其基本操作</h4><p>在线性链表中，虽然对数据元素的插入和删除操作比较简单，但由于它对第一个结点和空表需要单独处理，使得空表与非空表的处理不一致。</p><p>循环链表，即是采用另一种链接方式，它的特点如下：</p><ol><li>在循环链表中增加一个表头结点，其数据域为任意或根据需要来设置，指针域指向线性表的第一个元素的结点。循环链表的头指针指向表头结点。</li><li>循环链表中最后一个结点的指针域不是空的，而是指向表头结点。在循环链表中，所有结点的指针构成一个环状链。</li></ol><p>在循环链表中，只要指出表中任何一个结点的位置，均可以从它开始扫描到所有的结点，而线性链表做不到，线性链表是一种单向的链表，只能按照指针的方向进行扫描。</p><p>循环链表中设置了一个表头结点，因此，在任何时候都至少有一个结点，因此空表与非空表的运算相统一。</p><h3 id="⭐树与二叉树">⭐树与二叉树</h3><h4 id="树的基本概念">树的基本概念</h4><p>树是一种简单的非线性结构。在树结构中，数据元素之间有着明显的层次结构。在树的图形表示中，用直线连接两端的结点，上端点为前件，下端点为后件。</p><p>在树结构中，每一个结点只有一个前件，称为父结点。如 A 即为结点 B 、 C 、 D 的父结点。</p><p>没有父结点的结点只有一个，称为根结点。如上图所示，结点 A 即为根结点。</p><p>每一个结点可以有多个后件，它们均称为该结点的子结点。如结点 G 、 H 、 I 是结点 D 的子结点。</p><p>没有后件的结点，称为叶子结点。上图中，叶子结点有： J 、 M 、 N 、 L 、 C 、 G 、 H 、 I 。</p><p>在树结构中，一个结点所拥有的后件结点个数称为该结点的度。例如，结点 D 的度为 3 ，结点 E 的度为 1 等，按此原则，所有叶子结点的度均为 0 。</p><p>在树中，所有结点中最大的度称为该树的度。上图所示的树中，所有结点中最大的度是 3 ，所以该树的度为 3 。</p><p>树分层，根结点为第一层，往下依次类推。同一层结点的所有子结点均在下一层。如上图： A 结点在第 1 层， B 、 C 、 D 结点在第 2 层； E 、 F 、 G 、 H 、 I 在第 3 层； J 、 K 、 L 在第 4 层； M 、 N 在第 5 层。</p><p>树的最大层次称为树的深度。上图树的深度为 5 。</p><p>在树中，某结点的一个子结点为根构成的树称作该结点的子树。叶子结点没有子树。</p><p>在计算机中，可以用树来表示算术表达式。原则如下：</p><ol><li>表达式中每一个运算符在树中对应一个结点，称为运算符结点</li><li>运算符的每一个运算对象在树中为该运算符结点的子树（在树中的顺序为从左到右）</li><li>运算对象中的单变量均为叶子结点</li></ol><p>树在计算机中用多重链表表示。多重链表中的每个结点描述了树中对应结点的信息，而每个结点中的链域（即指针域）个数将随着树中该结点的度而定义。</p><p>如果在树中，每一个结点的子结点的个数不相同，因此在多重链中各结点的链域个数也不相同，会导致算法太复杂。因此，在树中，常采用定长结点来表示树中的每一个结点，即取树的度作为每个结点的链域的个数。这样，管理相对简化了，但会造成空间的浪费，因为有许多的结点存在空链域。</p><h4 id="二叉树及其基本性质">二叉树及其基本性质</h4><h5 id="二叉树的定义">二叉树的定义</h5><p>二叉树的特点：</p><ul><li><p>非空二叉树只有一个根结点</p></li><li><p>每一个结点最多只有两个子结点，且结点分左右。则一个结点最多可以有两棵子树，分别称为左子树和右子树</p></li></ul><p>在二叉树中，每一个结点的度最大为 2 ，即二叉树的度为 2 。在二叉树中，任何的子树也均为二叉树。</p><p>在二叉树中，每一个结点的子树被分为左子树和右子树。在二叉树中，允许某一个结点只有左子树或只有右子树。如果一个结点既没有左子树，也没有右子树，则该结点为叶子结点。</p><h5 id="⭐二叉树的基本性质">⭐二叉树的基本性质</h5><p>二叉树具有以下几个性质：</p><ol><li><strong>在二叉树的第k层上，最多有2<sup>k-1</sup>（k≥1）个结点</strong>；</li><li><strong>深度为m的二叉树最多有2<sup>m</sup>-1个结点</strong>；</li><li><strong>在任意一棵二叉树中，度为0的结点（即叶子结点）总是比度为2的结点多一个</strong>。</li><li><strong>具有n个结点的二叉树，其深度至少为［log<sub>2</sub>n］+1，其中［log<sub>2</sub>n］表示取log<sub>2</sub>n的整数部分</strong>。</li></ol><blockquote><p>在二叉树的遍历中，无论是前序遍历，中序遍历还是后序遍历，二叉树的叶子结点的先后顺序都是不变的。</p></blockquote><h5 id="满二叉树与完全二叉树">满二叉树与完全二叉树</h5><p>（1）满二叉树</p><p>满二叉树的特点：</p><p>除最后一层外，每一层上的所有结点都有两个子结点。即在满二叉树中，每一层上的结点数都达到最大值，即在满二叉树上的第 k 层上有 2 k-1 个结点。如下即为一棵满二叉树。</p><p>（2）完全二叉树</p><p>特点：除最后一层外，每一层上的结点数均达到最大值，在最后一层上只缺少右边的若干个结点。</p><p>即如果从根结点开始，对二叉树的结点自上而下、自左而右用自然数进行连续编号，则深度为 m 、且有 n 个结点的二叉树，当且仅当其每一个结点都与深度为 m 的满二叉树中编号从 1 到 n 的结点一一对应，则是完全二叉树。</p><p>对于完全二叉树，叶子结点只能在层次最大的两层中出现；对于任何一个结点，若其右分支下的子树结点的最大层次为 p ，则其分支下的子孙结点的最大层次为 p 或 p+1 。</p><p>完全二叉树具有的性质：</p><p>性质 5 ：具有 n 个结点的完全二叉树的深度为 [log 2 n]+1</p><p>性质 6 ：设完全二叉树共有 n 个结点。如果从根结点开始，按层次（每一层从左到右）用自然数 1 、 2 ……、 n 给结点编号，对于编号为 k （ k=1,2, …… n ）的结点有如下结论：</p><ul><li><p>若 k=1 ，则该结点为根结点，它没有父结点；若 k&gt;1 ，则该结点的父结点编号为 INT(k/2) 。</p></li><li><p>若 2k ≤ n ，则编号为 k 的结点的左子结点编号为 2k ；否则该结点无左子结点（当然也 没有右子结点）</p></li><li><p>若 2k+1 ≤ n ，则编号为 k 的结点的右子结点编号为 2k+1 ；否则该结点无右子结点。</p></li></ul><h4 id="二叉树的存储结构">二叉树的存储结构</h4><p>二叉树的存储常采用链式存储结构。</p><p>存储二叉树中各元素的存储结点由两个部分组成：数据域和指针域。在二叉树中，由于每个结点可有两个子结点，则它的指针域有两个：一个用于存储该结点的左子结点的存储地址，即称为左指针域；一个用于存储指向该结点的右子结点的存储地址，称为右指针域。</p><p>存储结构如下：</p><hr><h2 id="code￼0"><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">   Lchild   Value   Rchildi   L<span class="token punctuation">(</span>i<span class="token punctuation">)</span>     V<span class="token punctuation">(</span>i<span class="token punctuation">)</span>    R<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></h2><p>即二叉树的存储结构中每一个存储结点都有两个指针域，因此，二叉树的链式存储结构也称为二叉树的链表。在二叉树在存储中，用一个头指针指向二叉树的根结点的存储地址。</p><h4 id="二叉树的遍历">二叉树的遍历</h4><p>二叉树的遍历即是不重复地访问二叉树的所有结点。</p><p>在遍历二叉树时，一般先遍历左子树，然后再遍历右子树。在先左后右的原则下，二叉树的遍历又可分为三种：前序遍历、中序遍历和后序遍历。</p><h5 id="前序遍历">前序遍历</h5><p>前序遍历即先访问根结点，然后遍历左子树，最后遍历右子树。</p><p>在遍历左子树和遍历右子树时，依然是先遍历根结点，然后是左子树，再是右子树。</p><p>操作的具体方式：</p><ul><li><p>若二叉树为空，则结束返回。</p></li><li><p>否则：访问根结点 前序遍历左子树 前序遍历右子树</p></li></ul><p>如上图所示的完全二叉树，它的前序遍历结果是： A 、 B 、 D 、 H 、 P 、 Q 、 I 、 R 、 E 、 J 、 K 、 C 、 F 、 L 、 M 、 G 、 N 、 O</p><h5 id="中序遍历">中序遍历</h5><p>中序遍历，即先遍历左子树，然后访问根结点，最后是遍历右子树。</p><p>具体的操作方式：</p><ul><li><p>若二叉树为空，则结束返回。</p></li><li><p>否则：中序遍历左子树 访问根结点 中序遍历右子树</p></li></ul><p>这里强调，在遍历左子树和右子树时，仍然要采用中序遍历的方法。</p><p>如上图所示的完全二叉树，它的中序遍历结果是： P 、 H 、 Q 、 D 、 R 、 I 、 B 、 J 、 E 、 K 、 A 、 L 、 F 、 M 、 C 、 N 、 G 、 O</p><h5 id="后序遍历">后序遍历</h5><p>后序遍历，即选遍历左子树，然后是遍历右子树，最后访问根结点。</p><p>具体的操作方式：</p><ul><li><p>若二叉树为空，则结束返回。</p></li><li><p>否则：前序遍历左子树 前序遍历右子树 访问根结点</p></li></ul><p>如上图所示的完全二叉树，它的后序遍历结果是： P 、 Q 、 H 、 R 、 I 、 D 、 J 、 K 、 E 、 B 、 L 、 M 、 F 、 N 、 O 、 G 、 C 、 A</p><h3 id="查找技术">查找技术</h3><p>查找即是指在一个给定的数据结构中查找某个指定的元素。</p><h4 id="顺序查找">顺序查找</h4><p>顺序查找又称顺序搜索。一般是在线性表中查找指定的元素。</p><p>基本操作方法是：</p><p>从线性表的第一个元素开始，与被查元素进行比较，相等则查找成功，否则继续向后查找。如果所有的元素均查找完毕后都不相等，则该元素在指定的线性表中不存在。</p><p>顺序查找的最好情况：要查找的元素在线性表的第一个元素，则查找效率最高；如果要查找的元素在线性表的最后或根本不存在，则查找需要搜索所有的线性表元素，这种情况是 最差情况。</p><p>对于线性表而言，顺序查找效率很低。但对于以下的线性表，也只能采用顺序查找的方法：</p><ul><li><p>线性表为无序表，即表中的元素没有排列不是按大小顺序进行排列的，这类线性表不管它的存储方式是顺序存储还是链式存储，都只能按顺序查找方式进行查找</p></li><li><p>即使是有序线性表，如果采用链式存储，也只能采用顺序查找方式</p></li></ul><p>例如，现有线性表： 7 、 2 、 1 、 5 、 9 、 4 ，要在序列中查找元素 6 ，查找的过程是：</p><ul><li><p>整个线性表的长度为 5</p></li><li><p>查找计次 n=1 ，将元素 6 与序列的第一个 7 元素进行比较，不等，继续查找</p></li><li><p>n=2 ，将 6 与第二个元素 2 进行比较，不等，继续</p></li><li><p>n=3 ，将 6 与第三个元素 1 进行比较，不等，继续</p></li><li><p>n=4 ，将 6 与第四个元素 5 进行比较，不等，继续</p></li><li><p>n=5 ，将 6 与第五个元素 9 进行比较，不等，继续</p></li><li><p>n=6 ，将 6 与第六个元素 4 进行比较，不等，继续</p></li><li><p>n=7 ，超出线性表的长度，查找结束，则该表中不存在要查找的元素。</p></li></ul><h4 id="二分查找">二分查找</h4><p>二分查找只适用于顺序存储的有序表。此处所述的有序表是指线性中的元素按值非递减排列（即由小到大，但允许相邻元素值相等）。</p><p>二分查找的方法如下：</p><p>将要查找的元素与有序序列的中间元素进行比较：</p><ul><li><p>如果该元素比中间元素大，则继续在线性表的后半部分（中间项以后的部分）进行查找</p></li><li><p>如果要查找的元素的值比中间元素的值小，则继续在线性表的前半部分（中间项以前的部分）进行查找</p></li></ul><p>这个查找过程一直按相同的顺序进行下去，一直到查找成功或子表长度为 0 （说明线性表中没有要查找的元素）</p><p>有序线性表的二分法查找，条件是必须这个有序线性表的存储方式是顺序存储的。它的查找效率比顺序查找要高得多， 二分查找的最坏情况的查找次数是 log 2 n 次，而顺序查找的最坏情况的查找次数是 n 次 。</p><p>当然，二分查找的方法也支持顺序存储的递减序列的线性表。</p><p>有非递减有序线性表： 1 、 2 、 4 、 5 、 7 、 9 ，要查找元素 6 。查找的方法是：</p><ul><li><p>序列长度为 n=6 ，中间元素的序号 m=[(n+1)/2]=3</p></li><li><p>查找计次 k=1 ，将元素 6 与中间元素即元素 4 进行比较，不等， 6&gt;4</p></li><li><p>查找计次 k=2 ，查找继续在后半部分进行，后半部分子表的长度为 3 ，计算中间元素的序号： m=3+[(3+1)/2]=5 ，将元素与后半部分的中间项进行比较，即第 5 个元素中的 7 进行比较，不等， 6&lt;7</p></li><li><p>查找计次 k=3 ，继续查找在后半部分序列的前半部分子序列中查找，子表长度为 1 ，则中间项序号即为 m=3+[(1+1)/2]=4 ，即与第 4 个元素 5 进行比较，不相等，继续查找的子表长度为 0 ，则查找结束</p></li></ul><h3 id="排序技术">排序技术</h3><p>排序即是将一个无序的序列整理成按值非递减顺序排列的有序序列。在这里，我们讨论的是顺序存储的线性表的排序操作。</p><h4 id="交换类排序法">交换类排序法</h4><p>交换类排序法，即是借助于数据元素之间的互相交换进行排序的方法。</p><h5 id="冒泡排序法">冒泡排序法</h5><p>冒泡排序法即是利用相邻数据元素之间的交换逐步将线性表变成有序序列的操作方法。</p><p>操作过程如下：</p><ul><li><p>从表头开始扫描线性表，在扫描过程中逐次比较相邻两个元素的大小，若相邻两个元素中前一个元素的值比后一个元素的值大，将两个元素位置进行交换，当扫描完成一遍时，则序列中最大的元素被放置到序列的最后。</p></li><li><p>再继续对序列从头进行扫描，这一次扫描的长度是序列长度减 1 ，因为最大的元素已经就位了，采用与前相同的方法，两两之间进行比较，将次大数移到子序列的末尾。</p></li><li><p>按相同的方法继续扫描，每次扫描的子序列的长度均比上一次减 1 ，直至子序列的长度为 1 时，排序结束。</p></li></ul><p>例如，有序列 5 、 2 、 9 、 4 、 1 、 7 、 6 ，将该序列从小到大进行排列。</p><p>采用冒泡排序法，具体操作步骤如下：</p><hr><h2 id="code￼1"><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">序列长度 <span class="token assign-left variable">n</span><span class="token operator">=</span><span class="token number">7</span>  原序列               <span class="token number">5</span>   <span class="token number">2</span>   <span class="token number">9</span>   <span class="token number">4</span>   <span class="token number">1</span>   <span class="token number">7</span>   <span class="token number">6</span>  第一遍（从前往后）     <span class="token number">5</span>   <span class="token number">2</span>   <span class="token number">9</span>   <span class="token number">4</span>   <span class="token number">1</span>   <span class="token number">7</span>   <span class="token number">6</span>                      <span class="token number">2</span>   <span class="token number">5</span>   <span class="token number">9</span>   <span class="token number">4</span>   <span class="token number">1</span>   <span class="token number">7</span>   <span class="token number">6</span>                      <span class="token number">2</span>   <span class="token number">5</span>   <span class="token number">4</span>   <span class="token number">9</span>   <span class="token number">1</span>   <span class="token number">7</span>   <span class="token number">6</span>                      <span class="token number">2</span>   <span class="token number">3</span>   <span class="token number">4</span>   <span class="token number">1</span>   <span class="token number">9</span>   <span class="token number">7</span>   <span class="token number">6</span>                      <span class="token number">2</span>   <span class="token number">5</span>   <span class="token number">4</span>   <span class="token number">1</span>   <span class="token number">7</span>   <span class="token number">9</span>   <span class="token number">6</span>  第一遍结束后          <span class="token number">2</span>   <span class="token number">5</span>   <span class="token number">4</span>   <span class="token number">1</span>   <span class="token number">7</span>   <span class="token number">6</span>   <span class="token number">9</span>  第二遍（从前往后）     <span class="token number">2</span>   <span class="token number">5</span>   <span class="token number">4</span>   <span class="token number">1</span>   <span class="token number">7</span>   <span class="token number">6</span>   <span class="token number">9</span>                      <span class="token number">2</span>   <span class="token number">4</span>   <span class="token number">5</span>   <span class="token number">1</span>   <span class="token number">7</span>   <span class="token number">6</span>   <span class="token number">9</span>                      <span class="token number">2</span>   <span class="token number">4</span>   <span class="token number">1</span>   <span class="token number">5</span>   <span class="token number">7</span>   <span class="token number">6</span>   <span class="token number">9</span>                      <span class="token number">2</span>   <span class="token number">4</span>   <span class="token number">1</span>   <span class="token number">5</span>   <span class="token number">6</span>   <span class="token number">7</span>   <span class="token number">9</span>  第二遍结束后          <span class="token number">2</span>   <span class="token number">4</span>   <span class="token number">1</span>   <span class="token number">5</span>   <span class="token number">6</span>   <span class="token number">7</span>   <span class="token number">9</span>  第三遍（从前往后）     <span class="token number">2</span>   <span class="token number">4</span>   <span class="token number">1</span>   <span class="token number">5</span>   <span class="token number">6</span>   <span class="token number">7</span>   <span class="token number">9</span>                      <span class="token number">2</span>   <span class="token number">1</span>   <span class="token number">4</span>   <span class="token number">5</span>   <span class="token number">6</span>   <span class="token number">7</span>   <span class="token number">9</span>  第三遍结束            <span class="token number">2</span>   <span class="token number">1</span>   <span class="token number">4</span>   <span class="token number">5</span>   <span class="token number">6</span>   <span class="token number">7</span>   <span class="token number">9</span>  第四遍（从前往后）     <span class="token number">2</span>   <span class="token number">1</span>   <span class="token number">4</span>   <span class="token number">5</span>   <span class="token number">6</span>   <span class="token number">7</span>   <span class="token number">9</span>                      <span class="token number">1</span>   <span class="token number">2</span>   <span class="token number">4</span>   <span class="token number">5</span>   <span class="token number">6</span>   <span class="token number">7</span>   <span class="token number">9</span>  第四遍结束            <span class="token number">1</span>   <span class="token number">2</span>   <span class="token number">4</span>   <span class="token number">5</span>   <span class="token number">6</span>   <span class="token number">7</span>   <span class="token number">9</span>  最后结果              <span class="token number">1</span>   <span class="token number">2</span>   <span class="token number">4</span>   <span class="token number">5</span>   <span class="token number">6</span>   <span class="token number">7</span>   <span class="token number">9</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></h2><p>扫描的次数，最多需要扫描 n-1 次，如果序列已经就位，则扫描结束。测试是否已经就位，可设置一个标志，如果该次扫描没有数据交换，则说明数据排序结束。</p><h5 id="快速排序法">快速排序法</h5><p>冒泡排序方法每次交换只能改变相邻两个元素之间的逆序，速度相对较慢。如果将两个不相邻的元素之间进行交换，可以消除多个逆序。</p><p>快速排序的方法是：</p><p>从线性表中选取一个元素，设为 T ，将线性表后面小于 T 的元素移到前面，而前面大于 T 的元素移到后面，结果将线性表分成两个部分（称为两个子表）， T 插入到其分界线的位置处，这个过程称为线性表的分割。对过对线性表的一次分割，就以 T 为分界线，将线性表分成前后两个子表，且前面子表中的所有元素均不大于 T ，而后面的所有元素均不小于 T 。</p><p>再将前后两个子表再进行相同的快速排序，将子表再进行分割，直到所有的子表均为空，则完成快速排序操作。</p><p>在快速排序过程中，随着对各子表不断的进行分割，划分出的子表会越来越多，但一次又只能对一个子表进行分割处理，需要将暂时不用的子表记忆起来，这里可用栈来实现。</p><p>对某个子表进行分割后，可以将分割出的后一个子表的第一个元素与最后一个元素的位置压入栈中，而继续对前一个子表进行再分割；当分割出的子表为空时，可以从栈中退出一个子表进行分割。</p><p>这个过程直到栈为空为止，说明所有子表为空，没有子表再需分割，排序就完成。</p><h4 id="插入类排序法">插入类排序法</h4><h5 id="简单插入排序">简单插入排序</h5><p>插入排序，是指将无序序列中的各元素依次插入到已经有序的线性表中。</p><p>插入排序操作的思路：在线性表中，只包含第 1 个元素的子表，作为该有序表。从线性表的第 2 个元素开始直到最后一个元素，逐次将其中的每一个元素插入到前面的有序的子表中。</p><p>该方法与冒泡排序方法的效率相同，最坏的情况下需要 n(n-1)/2 次比较。</p><p>例如，有序列 5 、 2 、 9 、 4 、 1 、 7 、 6 ，将该序列从小到大进行排列。</p><p>采用简单插入排序法，具体操作步骤如下：</p><p>序列长度 n=7</p><hr><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token number">5</span>   <span class="token number">2</span>     <span class="token number">9</span>     <span class="token number">4</span>     <span class="token number">1</span>     <span class="token number">7</span>     <span class="token number">6</span>    <span class="token assign-left variable">j</span><span class="token operator">=</span><span class="token number">2</span><span class="token number">2</span>   <span class="token number">5</span>     <span class="token number">9</span>     <span class="token number">4</span>     <span class="token number">1</span>     <span class="token number">7</span>     <span class="token number">6</span>          <span class="token assign-left variable">j</span><span class="token operator">=</span><span class="token number">3</span><span class="token number">2</span>   <span class="token number">5</span>     <span class="token number">9</span>     <span class="token number">4</span>     <span class="token number">1</span>     <span class="token number">7</span>     <span class="token number">6</span>                <span class="token assign-left variable">j</span><span class="token operator">=</span><span class="token number">4</span><span class="token number">2</span>   <span class="token number">4</span>     <span class="token number">5</span>     <span class="token number">9</span>     <span class="token number">1</span>     <span class="token number">7</span>     <span class="token number">6</span>                      <span class="token assign-left variable">j</span><span class="token operator">=</span><span class="token number">5</span><span class="token number">1</span>   <span class="token number">2</span>     <span class="token number">4</span>     <span class="token number">5</span>     <span class="token number">9</span>     <span class="token number">7</span>     <span class="token number">6</span>                            <span class="token assign-left variable">j</span><span class="token operator">=</span><span class="token number">6</span><span class="token number">1</span>   <span class="token number">2</span>     <span class="token number">4</span>     <span class="token number">5</span>     <span class="token number">7</span>     <span class="token number">9</span>     <span class="token number">6</span>                                  <span class="token assign-left variable">j</span><span class="token operator">=</span><span class="token number">7</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>插入排序后的结果   1   2     4     5     6     7     9</p><hr><h5 id="希尔排序法">希尔排序法</h5><p>希尔排序法的基本思想：</p><p>将整个无序序列分割成若干小的子序列分别进行插入排序。</p><p>子序列的分割方法：将相隔某个增量 h 的元素构成一个子序列，在排序的过程中，逐次减小这个增量，最后当 h 减小到 1 时，再进行一次插入排序操作，即完成排序。</p><p>增量序列一般取 h t =n/2 k (k=1,2, … ,[log 2 n]) ，其中 n 为待排序序列的长度。</p><h4 id="选择类排序法">选择类排序法</h4><h5 id="简单选择排序法">简单选择排序法</h5><p>基本思路：扫描整个线性表，从中选出最小的元素，将它交换到表的最前面，然后对后面的子表采用相同的方法，直到子表为空为止。</p><p>对于长度为 n 的序列，需要扫描 n-1 次，每一次扫描均找出剩余的子表中最小的元素，然后将该最小元素与子表的第一个元素进行交换。</p><p>例如，有序列 5 、 2 、 9 、 4 、 1 、 7 、 6 ，将该序列从小到大进行排列。</p><p>采用简单选择排序法，具体操作步骤如下：</p><h2 id="code￼3"><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">原序列       <span class="token number">5</span>   <span class="token number">2</span>   <span class="token number">9</span>   <span class="token number">4</span>   <span class="token number">1</span>   <span class="token number">7</span>   <span class="token number">6</span>第一遍扫描   <span class="token number">1</span>   <span class="token number">2</span>   <span class="token number">9</span>   <span class="token number">4</span>   <span class="token number">5</span>   <span class="token number">7</span>   <span class="token number">6</span>第二遍扫描   <span class="token number">1</span>   <span class="token number">2</span>   <span class="token number">9</span>   <span class="token number">4</span>   <span class="token number">5</span>   <span class="token number">7</span>   <span class="token number">6</span>第三遍扫描   <span class="token number">1</span>   <span class="token number">2</span>   <span class="token number">4</span>   <span class="token number">9</span>   <span class="token number">5</span>   <span class="token number">7</span>   <span class="token number">6</span>第四遍扫描   <span class="token number">1</span>   <span class="token number">2</span>   <span class="token number">4</span>   <span class="token number">5</span>   <span class="token number">9</span>   <span class="token number">7</span>   <span class="token number">6</span>第五遍扫描   <span class="token number">1</span>   <span class="token number">2</span>   <span class="token number">4</span>   <span class="token number">5</span>   <span class="token number">6</span>   <span class="token number">7</span>   <span class="token number">9</span>第六遍扫描   <span class="token number">1</span>   <span class="token number">2</span>   <span class="token number">4</span>   <span class="token number">5</span>   <span class="token number">6</span>   <span class="token number">7</span>   <span class="token number">9</span>排序结果     <span class="token number">1</span>   <span class="token number">2</span>   <span class="token number">4</span>   <span class="token number">5</span>   <span class="token number">6</span>   <span class="token number">7</span>   <span class="token number">9</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></h2><h5 id="堆排序法-nlog2n">堆排序法 nlog2n</h5><p>堆排序法属于选择类排序方法。</p><p>堆的定义：具有 n 个元素的序列（ h 1 ,h 2 , … ,h n ），当且仅当满足 <img src="5.png" alt="堆">（ I=1,2, … ,n/2 ）时称之为堆。</p><p>本节只讨论满足前者条件的堆。</p><p>由堆的定义看，堆顶元素（即第一个元素）必为最大项。</p><p>可以用一维数组或完全二叉树来表示堆的结构。</p><p>用完全二叉树表示堆时，树中所有非叶子结点值均不小于其左右子树的根结点的值，因此堆顶（完全二叉树的根结点）元素必须为序列的 n 个元素中的最大项。</p><p>例如，有序列 5 、 2 、 9 、 4 、 1 、 7 、 6 ，将该序列从小到大进行排列。</p><p>利用堆排序法将该序列进行排序。</p><p>操作方式即：先将无序堆的根结点 5 与左右子树的根结点 2 、 9 进行比较， 5&lt;9 ，将 5 与 9 进行交换；整后，对左右子树进行堆调整，左子树的根结点 2 小于其左叶子结点 5 ，调整；右子树的根结点 5 小于其左右子结点 7 和 6 ，根据堆的要求，将 5 与 7 进行调整。</p><p>根据堆的定义，可以得到堆排序的方法：</p><ol><li>首先将一个无序序列建成堆</li><li>然后将堆顶元素（序列中的最大项）与堆中最后一个元素交换（最大项应该在序列的最后）。</li></ol><blockquote><p>本章应考点拨</p><p>本章内容在笔试中会出现 5-6 个题目，是公共基础知识部分出题量比较多的一章，所占分值也比较大，约 10 分。</p></blockquote><h2 id="程序设计基础">程序设计基础</h2><h3 id="程序设计方法与风格">程序设计方法与风格</h3><p>程序设计方法：主要经过了面向过程的结构化程序设计和面向对象的程序设计方法。</p><p>程序设计风格，是指编写程序时所表现出来的特点、习惯和逻辑思路。通常，要求程序设计的风格应强调简单和清晰，必须是可以读的，可以理解的。</p><p>要形成良好的程序设计的风格，应考虑如下因素：</p><h4 id="源程序文档化">源程序文档化</h4><ol><li><p>符号名的命名：符号名的命名要具有一定的实际含义，便于对程序的理解，即通常说的见名思义；</p></li><li><p>程序注释：正确的程序注释能够帮助他人理解程序。注释一般包括序言性注释和功能性注释；</p></li><li><p>视觉组织：为了使程序一目了然，可以对程序的格式进行设置，适当地通过空格、空行、缩进等使程序层次清晰。</p></li></ol><h4 id="数据说明方法">数据说明方法</h4><ol><li>数据说明的次序规范化；</li><li>说明语句中变量安排有序化；</li><li>使用注释来说明复杂的数据结构。</li></ol><h4 id="语句的结构">语句的结构</h4><ol><li>在一行内只写一条语句；</li><li>程序的编写应该优先考虑清晰性；</li><li>除非对效率有特殊的要求，否则，应做到清晰第一，效率第二；</li><li>首先保证程序的正确，然后再要求速度；</li><li>避免使用临时变量使程序的可读性下降；</li><li>尽量使用库函数，即尽量使用系统提供的资源；</li><li>避免采用复杂的条件语句；</li><li>尽量减少使用“否定”条件的条件语句；</li><li>数据结构要有利于程序的简化；</li><li>要模块化，使模块功能尽可能单一化；</li><li>利用信息隐蔽，确保每一个模块的独立性；</li><li>从数据出发去构造程序；</li><li>不要修补不好的程序，要重新编写。</li></ol><h4 id="输入和输出">输入和输出</h4><ol><li>对所有的输入输出数据都要检验数据的合法性；</li><li>检查输入项的各种重要组合的合理性；</li><li>输入格式要简单，以使得输入的步骤和操作尽可能简单；</li><li>输入数据时，应允许自由格式；</li><li>应允许缺省值；</li><li>输入一批数据时，最好使用输入结束标志；</li><li>以交互式输入输出方式进行输入时，要在屏幕上使用提示符明确输入的请求，同时在数据输入过程中和输入结束时，应在屏幕上给出状态信息；</li><li>当程序设计语言对输入格式有严格要求时，应保持输入格式与输入语句的一致性；给所有的输出加注释，并设计输出报表格式。</li></ol><h3 id="⭐结构化程序设计">⭐结构化程序设计</h3><h4 id="结构化程序设计的原则">结构化程序设计的原则</h4><p>结构化程序设计方法的主要原则：<strong>自顶而下</strong>、<strong>逐步求精</strong>，<strong>模块化</strong>，<strong>限制使用goto 语句</strong>。</p><h5 id="⭐自顶而下">⭐自顶而下</h5><p>程序设计时，应先考虑总体，后考虑细节；先考虑全局，后考虑局部目标。即先从最上层总目标开始设计，逐步使问题具体化。</p><h5 id="逐步求精">逐步求精</h5><p>对复杂问题，应设计一些子目标作为过渡，逐步细化。</p><h5 id="模块化处理">模块化处理</h5><p>一个复杂问题，都是由若干个稍简单的问题构成的。模块化即是将复杂问题进行分解，即将解决问题的总目标分解成若干个分目标，再进一步分解为具体的小目标，把每一个小目标称作一个模块。</p><h5 id="限制使用-goto-语句">限制使用 goto 语句</h5><p>goto 语句可以提高效率，但对程序的可读性、维护性都造成影响，因此应尽量不用 goto 语句。</p><h4 id="结构化程序设计的基本结构与特点">结构化程序设计的基本结构与特点</h4><p>结构化程序设计是程序设计的先进方法和工具，采用结构化程序设计可以使程序结构良好、易读、易理解、易维护。</p><h5 id="顺序结构">顺序结构</h5><p>顺序结构即是顺序执行的结构，是按照程序语句行的自然顺序，一条一条语句地执行程序。</p><h5 id="选择结构">选择结构</h5><p>选择结构又称分支结构，它包括简单选择和多分支选择结构。程序的执行是根据给定的条件，选择相应的分支来执行。</p><h5 id="重复结构">重复结构</h5><p>重复结构又称循环结构，根据给定的条件，决定是否重复执行某一相同的或类似的程序段。利用重复结构可以大量简化程序行。</p><h4 id="结构化程序设计原则和方法的应用">结构化程序设计原则和方法的应用</h4><ol><li><p>使用程序设计语言中的顺序、选择、循环等有限的控制结构表示程序的控制逻辑；</p></li><li><p>选用的控制结构只允许有一个入口和一个出口；</p></li><li><p>程序语句组成容易识别的块，每块只有一个入口和一个出口；</p></li><li><p>复杂结构应该用嵌套的基本控制结构进行组合嵌套来实现；</p></li><li><p>语言中所有没有的控制结构，应该采用前后一致的方法来模拟；</p></li><li><p>严格控制 goto 语句的使用：</p><ul><li>用一个非结构化的程序设计语言去实现一个结构化的构造；</li><li>若不使用 goto 语句会使功能模糊；</li><li>在某种可以改善而不是损害程序可读性的情况下。</li></ul></li></ol><h3 id="面向对象的程序设计">面向对象的程序设计</h3><h4 id="关于面向对象方法">关于面向对象方法</h4><p>面向对象方法的本质，是主张从客观世界固有的事物出发来构造系统，提倡用人类在现实生活中常用的思维方法来认识、理解和描述客观事物，强调最终建立的系统能够反映问题域，即系统中的对象以及对象之间的关系能够如实地反映问题域中固有事物及其关系。</p><p>面向对象的优点：</p><h5 id="与人类习惯的思维方法一致">与人类习惯的思维方法一致</h5><p>传统的程序设计方法是以算法作为核心，将程序与过程相互独立。</p><p>面向对象方法和技术是以对象为核心，对象是由数据和容许的操作组成的封装体，与客观实体有直接的对应关系。对象之间通过传递消息互相联系，以实现模拟世界中不同事物之间的联系。</p><h5 id="稳定性好">稳定性好</h5><p>面向对象方法基于构造问题领域的对象模型，以对象为中心构造软件系统。它的基本方法是用对象模拟问题领域中的实体，以对象间的联系刻画实体间的联系。</p><h5 id="可重用性好">可重用性好</h5><p>软件的重用性是指在不同的软件开发过程中重复使用相同或相似的软件元素的过程。</p><h5 id="易于开发大型软件产品">易于开发大型软件产品</h5><p>在使用面向对象进行软件开发时，可以把大型产品看作是一系列本质上相互独立的小产品来处理，降低了技术难度，也使软件开发的管理变得容易。</p><h5 id="可维护性好">可维护性好</h5><ol><li>利用面向对象的方法开发的软件稳定性比较好</li><li>用面向对象的方法开发的软件比较容易修改</li><li>用面向对象的方法开发的软件比较容易理解</li><li>易于测试和调试</li></ol><h4 id="⭐面向对象方法的基本概念">⭐面向对象方法的基本概念</h4><h5 id="⭐对象">⭐对象</h5><p>在面向对象程序设计方法中， 对象是系统中用来描述客观事物的一个实体，是构成系统的一个基本单位 ，它由一组表示其静态特征的属性和它执行的一组操作组成。</p><p>对象的基本特点：</p><ul><li><p>标识的唯一性：对象是可区分的，并且由对象的内在本质来区分，而不是通过描述来区分。</p></li><li><p>分类性：指可以将具有相同属性和操作的对象抽象成类。</p></li><li><p>多态性：指同一个操作可以是不同对象的行为。</p></li><li><p>封装性：从外面看只能看到对象的外部特征，即只需知道数据的取值范围和可以对该数据施加的操作，根本无需知道数据的具体结构以及实现操作的算法。</p></li><li><p>模块独立性好：对象是面向对象的软件的基本模块，它是由数据及可以对这些数据施加的操作所组成的统一体，而且对象是以数据为中心的，操作围绕对其数据所需做的处理来设置，没有无关的操作。从模块的独立性考虑，对象内容各种元素彼此相结合得很紧密，内聚性强。</p></li></ul><h5 id="类和实例">类和实例</h5><p>将属性、操作相似的对象归为类。具有共同的属性、共同的方法的对象的集合，即是类。</p><p>类是对象的抽象，它描述了属于该对象的所有对象性质，而一个对象则是其对应类的一个实例。</p><h5 id="消息">消息</h5><p>消息是一个实例与另一个实例之间传递的信息，它请求对象执行某一处理或回答某一个要求的信息，它统一了数据流和控制流。</p><p>消息只包含传递者的要求，它告诉接受者需要做哪些处理，并不指示接受者怎样去完成这些处理。</p><h5 id="继承">继承</h5><p>继承是使用已有的类定义作为基础建立新类的定义技术。已有的类可当作基类来引用，则新类相应地可作为派生类来引用。</p><p>继承即是指能够直接获得已有的性质和特征，而不必重复定义它们。</p><h5 id="多态性">多态性</h5><p>对象根据所接受的消息而做出动作，同样的消息被不同的对象接受时可导致完全不同的行动，该现象称为多态性。</p><p>在面向对象技术中，多态性是指子类对象可以像父类对象那样使用，同样的消息可以发送给父类对象也可以发送给子类对象。</p><p>多态性机制增加了面向对象软件系统的灵活性，减少了信息冗余，而且显著提高了软件的可重用性可扩充性。</p><blockquote><p>本章应考点拨</p><p>本章在考试中会出现约 1 个题目，所占分值大约占 2 分，是出题量较小的一章。本章内容比较少，也很简单，掌握住基本的概念就可以轻松应对考试了，所以在这部分丢分，比较可惜。</p></blockquote><h2 id="软件工程基础">软件工程基础</h2><h3 id="学习目标与要求">学习目标与要求</h3><ol><li>了解软件工程的基本概念；</li><li>了解软件工程过程与软件的生命周期，以及软件工程的目标和原则；</li><li>了解利用结构化分析法进行软件工程中的需求分析的方法，并了解需求分析的方法和需要完成的任务；</li><li>了解数据流图的使用方法；</li><li>了解如何利用结构化设计方法进行软件设计，并了解软件设计的一些常用用工具；</li><li>了解软件测试的目的和方法，以及软件测试的准则，了解常用的软件测试方法的区别和各自的功能与特点；</li><li>了解程序调试的方法和原则。</li></ol><h3 id="⭐软件工程基本概念">⭐软件工程基本概念</h3><h4 id="软件定义与软件特点">软件定义与软件特点</h4><h5 id="软件的定义">软件的定义</h5><p>与计算机系统的操作有关的计算机程序、规程、规则，以及可能有的文件、文档及数据。</p><h5 id="⭐软件的特点">⭐软件的特点</h5><ol><li><strong>软件是一种逻辑实体</strong>，而不是物理实体，具有抽象性；</li><li>软件的生产与硬件不同，<strong>它没有明显的制作过程</strong>；</li><li><strong>软件在运行、使用期间不存在磨损、老化问题</strong>；但为了适应硬件、环境以及需求的变化要进行修改，会导致一些错误的引入，导致软件失效率升高，从而使得软件退化；</li><li>软件的开发、运行对计算机系统具有依赖性，<strong>受到计算机系统的限制</strong>，这导致了软件移植的问题；</li><li>软件复杂性高，成本昂贵。软件开发需要投入大量、高强度的脑力劳动，成本高，风险大；</li><li>软件开发涉及诸多的社会因素。许多软件的开发和运行涉及软件用户的机构设置，体制问题以及管理方式等，甚至涉及到人们的观念和心理，软件知识产权及法律等问题。</li></ol><h5 id="软件的分类">软件的分类</h5><p>按功能分，可分为：</p><ul><li><p>应用软件：为解决特定领域的应用而开发的软件</p></li><li><p>系统软件：是计算机管理自身资源，提高计算机使用效率并为计算机用户提供各种服务的软件</p></li><li><p>支撑软件（或工具软件）：介于系统软件和应用软件之间，协助用户开发软件的工具性软件，包括辅助和支持开发和维护应用软件的工具软件</p></li></ul><h4 id="软件危机与软件工程">软件危机与软件工程</h4><h5 id="软件危机">软件危机</h5><p>泛指在计算机软件的开发和维护过程中所遇到的一系列严重问题。它主要表现在：</p><ol><li>软件需求的增长得不到满足，用户对系统不满意的情况经常发生；</li><li>软件开发成本和进度无法控制。开发的成本超预算和开发周期的超期经常出现；</li><li>软件质量难以保证；</li><li>软件不可维护或维护程度非常低；</li><li>软件成本不断提高；</li><li>软件开发生产率的提高赶不上硬件的发展和应用需求的增长。</li></ol><h5 id="⭐软件工程">⭐软件工程</h5><p>软件工程的定义：是应用于计算机软件的定义、开发和维护的一整套方法、工具、文档、实践标准和工序。</p><p>⭐软件工程包括 3 个要素：方法、工具和过程。</p><p>方法：完成软件工程项目的技术手段；</p><p>工具：支持软件的开发、管理、文档生成；</p><p>过程：支持软件开发的各个环节的控制、管理。</p><h4 id="软件工程过程与软件生命周期">软件工程过程与软件生命周期</h4><h5 id="软件工程过程">软件工程过程</h5><p>软件工程过程把输入转化为输出的一组彼此相关的资源和活动。支持软件工程过程的两方面内涵：</p><ol><li><p>软件工程过程是指为获得软件产品，在软件工具支持下由软件工程师完成的一系列软件工程活动。它包括 4 种基本活动：</p><ul><li>P— 软件规格说明。规定软件的功能及其运行时的限制；</li><li>D— 软件开发。产生满足规格说明的软件；</li><li>C— 软件确认。确认软件能够满足客户提出的要求；</li><li>A— 软件演进过程。为满足客户的变更要求，软件必须在使用的过程中演进。</li></ul></li><li><p>使用适当的资源（包括人员、硬软件工具、时间等），为开发软件进行的一组开发活动，在过程结束时将输入（用户要求）转化为输出（软件产品）。</p></li></ol><p>软件工程过程是将软件工程的方法和工具综合起来，以达到合理、及时地进行计算机软件开发的目的。</p><h5 id="软件生命周期">软件生命周期</h5><p>将软件产品从提出、实现、使用维护到停止使用退役的过程称为软件生命周期。即软件的生命周期就是软件产品从开始考虑其概念开始，到软件产品不能使用为止的整个时期都属于软件生命周期。一般包括可行性研究与需求分析、设计、实现、测试、交付使用以及维护等活动。这些活动可以有重复，执行时也可以有迭代。</p><p>生命周期的主要阶段：</p><ul><li><p>软件定义 ( 定义，可行性研究，需求分析 )</p></li><li><p>软件开发 （概要设计，详细设计，实施）</p></li><li><p>软件维护 ( 运行和维护 )</p></li></ul><p>软件生命周期的主要活动阶段是：</p><ol><li>可行性研究与计划制定：确定待开发软件系统的开发目标和总的要求，给出它的功能、性能、可靠性以及接口等方面的可能方案，制定完成开发任务的实话计划；</li><li>需要分析。对待开发软件提出的需求进行分析并给出详细的定义；</li><li>软件设计。系统设计人员和程序设计人员给出软件的结构、模块的划分、功能的分配以及处理流程；</li><li>软件实现。把软件设计转换成计算机可以接受的程序代码。即完成源程序的编码，编写用户手册、操作手册等面向用户的文档，编写单元测试计划；</li><li>软件测试。在设计测试用例的基础上，检验软件的各个组成部分，编写测试分析报告；</li><li>运行和维护。将已交付的软件投入运行，并在运行使用中不断地维护，根据新提出的需求进行必要且可能的扩充和删改。</li></ol><h4 id="软件工程的目标与原则">软件工程的目标与原则</h4><h5 id="软件工程的目标">软件工程的目标</h5><p>软件工程的目标：在给定成本、进度的情况下，开发出具有有效性、可靠性、可理解性、可维护性、可重用性、可适应性、可移植性、可追踪性和可互操作性且满足用户需求的产品。</p><p>软件工程需要达到的基本目标：</p><ul><li><p>付出较低的开发成本</p></li><li><p>达到要求的软件功能</p></li><li><p>取得较好的软件性能</p></li><li><p>开发的软件易于移植</p></li><li><p>需要较低的维护费用</p></li><li><p>能按时完成开发，及时交付使用</p></li></ul><p>软件工程的理论和技术性研究的内容包括：软件开发技术和软件工程管理。</p><h6 id="软件开发技术">软件开发技术</h6><p>软件开发方法学、开发过程、开发工具和软件工程环境，其主体内容是软件开发方法学。软件开发方法学是根据不同的软件类型，按不同的观点和原则，对软件开发中应遵循的策略、原则、步骤和必须产生的文档资料都做出规定，从而使软件开发能够进入规范化和工程化的阶段。</p><h6 id="软件工程管理">软件工程管理</h6><p>软件工程管理：软件管理学、软件工程经济学、软件心理学等内容。</p><p>软件工程管理学包括：人员组织、进度安排、质量保证、配置管理、项目计划等。</p><p>软件工程经济学：是研究软件开发中成本的估算、成本效益分析的方法和技术，用经济学的基本原理事研究软件工程开发中的经济效益问题。</p><p>软件心理学：从个体心理、人类行为、组织行为和企业文化等角度来研究软件管理和软件工程。</p><h5 id="软件工程的原则">软件工程的原则</h5><ol><li>抽象。抽取事物取基本的特征和行为，忽略非本质细节。采用分层次抽象，自顶向下，逐层细化的办法控制软件开发过程的复杂性；</li><li>信息隐蔽。采用封装技术，将程序模块的实现细节隐藏起来，使模块接口尽量简单；</li><li>模块化。模块是程序中相对独立的成分，一个独立的编程单位，应有良好的接口定义。块太大会使模块内部过渡复杂，不利于对模块的理解和修改，也不利于模块的调试和重用；模块太小会使程序结构过于复杂，难于控制；</li><li>局部化。在同一个物理模块中集中逻辑上相互关联的计算资源，保证模块间具有松散的耦合关系，模块内部有较强的内聚性；</li><li>确定性。所有的概念表达应是确定的、无歧义且规范。</li><li>一致性。包括程序、数据和文档的整个软件系统的各模块应使用已知的概念、符号和术语；程序内外部接口保持一致，系统规格说明与系统行为应保持一致；</li><li>完备性。软件系统不丢失任何重要成份，完全实现系统所需要的功能；</li><li>可验证性。开发大型软件系统需要对系统自顶向下，逐层分解。</li></ol><h4 id="软件开发工具与软件开发环境">软件开发工具与软件开发环境</h4><h5 id="软件开发工具">软件开发工具</h5><p>早期的软件开发，最早使用的是单一的程序设计语言，没有相应的开发工具，效率很低，随着软件开发工具的发展，提供了自动的或半自动的软件支撑环境，为软件开发提供了良好的环境。</p><h5 id="软件开发环境">软件开发环境</h5><p>软件开发环境或称软件工程环境是全面支持软件开发全过程的软件工具集合。</p><p>计算机辅助软件工程将各种软件工具、开发机器和一个存放开发过程信息的中心数据库组成起来，形成软件工程环境。</p><h3 id="⭐⭐结构化分析方法">⭐⭐结构化分析方法</h3><h4 id="需求分析与需求分析方法">需求分析与需求分析方法</h4><h5 id="⭐⭐需求分析">⭐⭐需求分析</h5><p><strong>软件需求分析是指用户对目标软件系统在功能、行为、性能、设计约束等方面的期望。</strong></p><p>需求分析的任务是发现需求、求精、建模和定义需求的过程。</p><h6 id="定义">定义</h6><p>软件需求分析是指用户对目标软件系统在功能、行为、性能、设计约束等方面的期望。</p><h6 id="⭐需求分析阶段的工作">⭐需求分析阶段的工作</h6><ol><li>**需求获取。**需求获取的目的是确定对目标系统的各方面需求；</li><li>**需求分析。**对获取的需求进行分析和综合，最终给出系统的解决方案和目标系统的逻辑模型；</li><li>**编写需求规格说明书。**为用户、分析人员和设计人员之间进行交流提供方便。</li><li>**需求评审。**对需求分析阶段的工作进行复审，验证需求文档的一致性、可靠性、完事性和有效性。</li></ol><h5 id="需求分析方法">需求分析方法</h5><ol><li><p>结构化分析方法包括：</p><ul><li>面向数据流的结构化分析方法</li><li>面向数据结构的 Jackson 方法</li><li>面向数据结构的结构化数据系统开发方法</li></ul></li><li><p>面向对象的分析方法</p></li></ol><p>从需求分析建立模型的特性分，需求分析方法又分为静态分析方法和动态分析方法。</p><h4 id="结构化分析方法">结构化分析方法</h4><h5 id="关于结构化分析方法">关于结构化分析方法</h5><p>结构化分析方法的实质是：着眼于数据流，自顶向下，逐层分解，建立系统的处理流程，以数据流图和数据字典为主要工具，建立系统的逻辑模型。</p><p>结构化分析的步骤：</p><ul><li><p>通过对用户的调查，以软件需求为线索，获得系统的具体模型；</p></li><li><p>去掉模型的非本质因素，抽象出系统的逻辑模型；</p></li><li><p>根据计算机的特点分析当前系统与目标系统的差别，建立目标系统的逻辑模型；</p></li><li><p>完善目标系统交补充细节，写出目标系统的软件需求规格说明；</p></li><li><p>评审直到确认完全符合用户对软件的需求。</p></li></ul><h5 id="⭐结构化分析的常用工具-（数据流图、数据字典、判定表、判定树）">⭐结构化分析的常用工具 （数据流图、数据字典、判定表、判定树）</h5><h6 id="数据流图">数据流图</h6><p>数据流图从数据传递和加工的角度，来刻画数据流从输入到输出的移动变换过程。</p><p>数据流图下的图形元素：</p><p>（圆），加工（转换）。输入数据经过加工变换产生输出</p><p>（箭头），数据流。沿箭头方向传送数据的通道，一般在旁边标注数据流名</p><p>（平行的二条直线），存储文件（数据源）。表示处理过程中存放各种数据的文件。</p><p>（长方形），源，潭。表示系统和环境的接口，属于系统之外的实体。</p><h6 id="数据字典">数据字典</h6><p>数据字典是结构化分析方法的核心。对数据流图中出现的被命名的图形元素的确切解释。通常包括：名称、别名、何处使用 / 如何使用、内容描述、补充信息等。</p><h6 id="判定树">判定树</h6><p>利用判定树，对数据结构中的数据之间的关系进行描述，弄清楚判定条件之间的从属关系、并列关系、选择关系。</p><h6 id="判定表">判定表</h6><p>在数据流图中的加工要依赖于多个条件的取值，即完成该加工的一组动作是由于某一组 条件取值的组合而引发的情况。它与判定树是相似的，但更适宜于较复杂的条件组合。</p><h4 id="⭐软件需求规格说明书">⭐软件需求规格说明书</h4><p>是需求分析阶段的最后成果，是软件开发的重要文档之一。</p><h5 id="作用">作用</h5><ul><li><p>便于用户、开发人员进行理解和交流</p></li><li><p>反映用户问题的结构，可以作为软件开发工作的基础和依据</p></li><li><p>作为确认测试和验收的依据</p></li></ul><h5 id="内容">内容</h5><p>在软件计划中确定的软件范围加以展开，制定出完整的信息描述、详细的功能说明、恰当的检验标准以及其他与要求有关的数据。</p><h5 id="特点">特点</h5><p>软件需求规格说明书是确保软件质量的措施，它的内涵是：</p><ul><li><p>正确性</p></li><li><p>无歧义性</p></li><li><p>完整性</p></li><li><p>可验证性</p></li><li><p>一致性</p></li><li><p>可理解性</p></li><li><p>可修改性</p></li><li><p>可追踪性</p></li></ul><h3 id="结构化设计方法">结构化设计方法</h3><h4 id="软件设计的基本概念">软件设计的基本概念</h4><h5 id="软件设计的基础">软件设计的基础</h5><p>软件设计包括软件结构设计、数据设计、接口设计、过程设计。其中，结构设计是定义软件系统各主要部件之间的关系；数据设计是将分析时创建的模型转化为数据结构的定义；接口设计是描述软件内部、软件和协作系统之间以及软件与人之间如何通信；过程设计是把系统结构部件转换成软件的过程性描述。</p><p>软件设计的一般过程：软件设计是一个迭代的过程；先进行高层次的结构设计；后进行低层次的过程设计；穿插进行数据设计和接口设计。</p><h5 id="软件设计的基本原理">软件设计的基本原理</h5><h6 id="抽象">抽象</h6><p>抽象的层次从概要设计到详细设计逐渐降低。在软件概要设计中的模块分层也是由抽象到具体逐步分析和构造出来的。</p><h6 id="模块化">模块化</h6><p>模块是指把一个待开发的软件分解成若干小的简单的部分。</p><p>模块化是指解决一个复杂问题时<strong>自顶向下</strong>逐层把软件系统划分成若干模块的过程。</p><h6 id="信息隐蔽">信息隐蔽</h6><p>在一个模块内包含的信息（过程或数据），对于不需要这些信息的其他模块来说是不能访问的。</p><h6 id="模块独立性">模块独立性</h6><p>独立性是指每个模块只完成系统要求的独立的子功能，并且与其他模块的联系最少且接口简单。</p><p>衡量软件的模块独立性的标准：</p><ul><li><p>内聚性：一个模块内部各个元素间彼此结合的紧密程度的度量</p></li><li><p>耦和性：模块间相互连接的紧密程序的度量</p></li></ul><h5 id="结构化的设计方法">结构化的设计方法</h5><p>即将软件设计成相对独立、单一功能的模块组成结构。</p><h4 id="概要设计">概要设计</h4><h5 id="概要设计的任务">概要设计的任务</h5><h6 id="设计软件系统结构">设计软件系统结构</h6><p>即将系统划分成模块以及模块的层次结构。</p><h6 id="数据结构及数据库设计">数据结构及数据库设计</h6><p>数据设计是实现需求定义和规格说明过程中提出的数据对象的逻辑表示。</p><p>数据设计的具体任务是：</p><ul><li><p>确定输入、输出文件的详细数据结构</p></li><li><p>结合算法设计，确定算法所必须的逻辑数据结构及其操作</p></li><li><p>确定对逻辑数据结构所必须的那些操作的程序模块，限制和确定各个数据设计决策的影响范围</p></li><li><p>需要与操作系统或调度程序接口所必须的控制表进行数据交换时，确定其详细的数据结构和使用规则</p></li><li><p>数据的保护性设计：防卫性、一致性、冗余性设计</p></li></ul><h6 id="编写概要设计文档">编写概要设计文档</h6><p>需要编写的文档有：</p><ul><li><p>概要设计说明书</p></li><li><p>数据库设计说明书</p></li><li><p>集成测试计划</p></li></ul><h6 id="概要设计文档评审">概要设计文档评审</h6><p>需要评审的内容：设计部分是否完整地实现了需求中规定的功能、性能等要求，设计方案的可行性，关键的处理及内外部接口定义的正确性、有效性，各部分之间的一致性等</p><p>软件结构设计工具是结构图，描述软件系统的层次和分块结构关系，它反映了整个系统的功能实现以及模块与模块之间的联系与通讯，是未来程序中的控制层次体系。</p><p>结构图的元素：</p><ul><li><p>矩形表示一个模块，在矩形内注明模块的功能和名字</p></li><li><p>箭头表示模块间的调用关系。带实心圆的箭头表示传递的是控制信息，带空心圆的箭头表示传递的是数据</p></li></ul><p>结构图中常有的模块类型：</p><ul><li><p>传入模块</p></li><li><p>传出模块</p></li><li><p>变换模块</p></li><li><p>协调模块</p></li></ul><h5 id="面向数据流的设计方法">面向数据流的设计方法</h5><ol><li>数据流类型<ul><li>变换型。将数据流分成三个部分：输入数据、中心变换和输出数据三个部分。</li><li>事务型。在事务中心接收数据，分析数据以确定它的类型，再选取一条活动的通路</li></ul></li></ol><p>面向数据流设计方法的实施要点与设计过程</p><h5 id="设计的准则">设计的准则</h5><ul><li><p>提高模块的独立性</p></li><li><p>模块规模适中</p></li><li><p>深度、宽度、扇出和扇入适当</p></li><li><p>使模块的作用域在该模块的控制域内</p></li><li><p>应减少模块的接口和界面的复杂性</p></li><li><p>设计成单入口、单出口的模块</p></li><li><p>设计功能可预测的模块</p></li></ul><h4 id="详细设计">详细设计</h4><p>详细设计，即为软件结构图中的每一个模块确定实现算法和局部数据结构，用某种工具表示算法和数据结构的细节。</p><p>常用的设计工具有：</p><ul><li><p>图形工具：程序流程图， N-S ， PAD ， HIPO</p></li><li><p>表格工具：判定表</p></li><li><p>语言工具： PDL （伪码）</p></li></ul><h3 id="⭐软件测试">⭐软件测试</h3><h4 id="软件测试的目的">软件测试的目的</h4><p>使用人工或自动手段来运行或测定某个系统的过程，其目的在于检验它是否满足规定的需求或是否弄清预期的结果与实际结果之间的差别。</p><h4 id="软件测试的准则">软件测试的准则</h4><ul><li><p>所有测试应追溯到需求</p></li><li><p>严格执行测试计划，排除测试的随意性</p></li><li><p>充分注意测试中的群集现象</p></li><li><p>程序员应避免检查自己的程序</p></li><li><p>穷举测试不可能</p></li><li><p>妥善保存测试计划、测试用例、出错统计和最终分析报告，为维护提供方便</p></li></ul><h4 id="软件测试技术与方法综述">软件测试技术与方法综述</h4><h5 id="静态测试与动态测试">静态测试与动态测试</h5><p>静态测试包括：代码检查、静态结构分析、代码质量度量等。</p><p>动态测试是基于计算机的测试，根据软件需求设计测试用例，利用这些用例去运行程序，以发现程序错误的过程。</p><h5 id="⭐白盒测试方法与测试用例设计（逻辑覆盖和基本路径测试）">⭐白盒测试方法与测试用例设计（逻辑覆盖和基本路径测试）</h5><p>白盒测试也称结构测试或逻辑驱动测试。</p><p>白盒测试的原则：保证所有的测试模块中每一条独立路径至少执行一次；保证所有的判断分支至少执行一次；保证所有的模块中每一个循环都在边界条件和一般条件下至少各执行一次；验证所有内部数据结构的有效性</p><p>主要的方法有：<strong>逻辑覆盖（包括语句覆盖、路径覆盖、判定覆盖、条件覆盖和判断 — 条件覆盖）</strong>、<strong>基本路径测试</strong>等</p><h5 id="⭐黑盒测试方法与测试用例设计-等价划分、边界值测试、错误推测、因果图">⭐黑盒测试方法与测试用例设计 ( 等价划分、边界值测试、错误推测、因果图 )</h5><p>黑盒测试方法也称功能测试或数据驱动测试，是对软件已经实现的功能是否满足需求进行测试和验证。</p><p>黑盒测试主要诊断功能不对或遗漏、界面错误、数据结构或外部数据库访问错误、性能错误、初始化和终止条件错。</p><p>黑盒测试方法主要有：<strong>等价类划分法（包括有效等价类和无效等价类）</strong>、<strong>边界值分析法</strong>、<strong>错误推测法</strong>、<strong>因果图</strong>等，主要用于软件确认测试。</p><h4 id="软件测试的实施-（单元测试、集成测试、确认测试、系统测试）">软件测试的实施 （单元测试、集成测试、确认测试、系统测试）</h4><h5 id="单元测试">单元测试</h5><p>对模块进行测试，用于发现模块内部的错误</p><h5 id="集成测试">集成测试</h5><p>测试和组装软件的过程，主要用于发现与接口有关的错误。</p><p>集成测试包括的内容：软件单元的接口测试、全局数据结构测试、边界条件和非法输入的测试等。</p><p>集成测试分为：增量方式组装（包括自顶而下、自底而上、自顶向下和自底向上的混合增量方式）与非增量方式组装。</p><h5 id="确认测试">确认测试</h5><p>验证软件的功能和性能及其他特征是否满足了需求规格说明中确定的各种需求，以及软件配置是否完全、正确。</p><h5 id="系统测试">系统测试</h5><p>将经过测试后的软件，与计算机的硬件、外设、支持软件、数据和人员等其他元素组合在一起，在实际运行环境中进行一系列的集成测试和确认测试。</p><h3 id="⭐程序的调试">⭐程序的调试</h3><h4 id="程序调试基本概念">程序调试基本概念</h4><p>程序调试活动包括：根据错误的迹象确定程序中错误的确切性质、原因和位置；对程序进行修改，排除错误。</p><h5 id="⭐基本步骤">⭐基本步骤</h5><ul><li>错误定位</li><li>修改设计和代码，以排除错误</li><li>进行回溯测试，防止引进新的错误。</li></ul><h5 id="程序调试的原则">程序调试的原则</h5><ol><li><p>确定错误的性质和位置</p><ul><li>分析与错误有关的信息</li><li>避开死胡同</li><li>调试工具只是一种辅助手段，只能帮助思考，不能代替思考</li><li>避免用试探法</li></ul></li><li><p>修改错误的原则</p><ul><li>在出现错误的地方，有可能还有别的错误，在修改时，一定要观察和检查相关的代码，以防止其他的错误</li><li>一定要注意错误代码的修改，不要只注意表象，而要注意错误的本身，把问题解决</li><li>注意在修正错误时，可能代入新的错误，错误修改后，一定要进行回归测试，避免新的错误产生</li><li>修改错误也是程序设计的一种形式</li><li>修改源代码程序，不要改变目标代码</li></ul></li></ol><h4 id="软件调试方法">软件调试方法</h4><h5 id="强行排错法">强行排错法</h5><p>通过内存全部打印来排错</p><p>在程序特定部位设置打印语句 — 即断点法</p><p>自动调试工具。</p><h5 id="回溯法">回溯法</h5><p>适合小规模程序的排错。发现错误，分析错误表象，确定位置，再回溯到源程序代码，找到错误位置或确定错误范围。</p><h5 id="原因排除法">原因排除法</h5><p>原因排除法包括：演绎法、归纳法和二分法。</p><p>演绎法：是一种从一般原理或前提出法，经过排除和精化的过程来推导出结论的思考方法。</p><p>归纳法：从一种特殊推断出一般的系统化思考方法。其基本思想是从一些线索着手，通过分析寻找到潜在的原因，从而找出错误。</p><p>二分法：如果已知每个变量在程序中若干个关键点的正确值，则可以使用定值语句在程序中的某点附近给这些变量赋值，然后运行程序并检查程序的输出。</p><h2 id="数据库设计基础">数据库设计基础</h2><h3 id="⭐数据库系统的基本概念">⭐数据库系统的基本概念</h3><h4 id="数据、数据库、数据库管理系统">数据、数据库、数据库管理系统</h4><h5 id="数据">数据</h5><p>数据是指存储在某一种媒体上能够被识别的物理符号，即描述事物的符号记录。</p><p>数据是有结构的。首先，数据有型与值的区别，型即类型，值是符合指定类型的值。</p><p>数据的概念在数据处理领域中已经大大地拓宽了。数据不仅包括数字、字母、文字和其他特殊字符组成的文本形式的数据，而且还包括图形、图像、动画、影像、声音等多媒体数据。但是使用最多、最基本的仍然是文字数据。</p><h5 id="数据库">数据库</h5><p>数据库（ DataBase ， DB ），是存储在计算机存储设备上，结构化的相互关联的数据的集合。它不仅包括描述事物的数据本身，而且还包括相关事物之间的联系。</p><p>它用综合的方法组织和管理数据，具有较小的数据冗余，可供多个用户共享，具有较高的数据独立性，具有安全机制，能够保证数据的安全、可靠，允许并发地使用数据库，能有效、及时地处理数据，并能保证数据的一致性和完整性。</p><p>例如，某个学校的相关数据，如学生基本情况、选课情况、学籍管理等所涉及的相关数据的集合。</p><h5 id="数据库管理系统">数据库管理系统</h5><p>数据库管理系统（ DataBase Management System ， DBMS ）是对数据库进行管理的系统软件，它的职能是有效地组织和存储数据、获取和管理数据，接受和完成用户提出的访问数据的各种请求。同时还能保证数据的安全性、可靠性、完整性、一致性，还要保证数据的高度独立性。</p><p>数据库管理系统主要功能包括以下几个方面：</p><ol><li><p><strong>数据模式定义</strong><br>数据库管理系统负责为数据库构建模式，也为数据库构建其数据框架。</p></li><li><p><strong>数据存取的物理构建</strong><br>数据库管理系统负责为数据模式的物理存取及构建提供有效的存取方法和手段。</p></li><li><p><strong>数据操纵</strong><br>数据库管理系统为用户使用数据库中的数据提供方便，一般提供查询、插入、修改和删除数据的功能，此外，还具有简单的算术运算和统计功能，还具有专长强大的程序控制功能。</p></li><li><p><strong>数据的完整性、安全性定义与检查</strong><br>数据库中的数据具有内存语义上的关联性与一致性，即数据的完整性。数据的完整性是保证数据库中数据正确的必要条件。</p><p>数据库中的数据具有内存语义上的关联性与一致性，即数据的完整性。数据的完整性是保证数据库中数据正确的必要条件。</p></li><li><p><strong>数据的并发控制与故障恢复</strong><br>数据库是一个集成、共享的数据集合体，它能为多个应用程序服务，因此，当多个应用程序对数据库并发操作时，要保证数据不被破坏。</p></li><li><p><strong>数据的服务</strong><br>数据库管理系统提供了对数据库中数据的多种服务，如数据拷贝、转存、重组、性能监测、分析等。</p></li></ol><p>数据库管理系统提供的相应的数据语言包括如下：</p><ol><li><p><strong>数据定义语言</strong>（ Data Definition Language ， DDL ）<br>D 用户通过它可以方便地对数据库中的相关内容进行定义。例如，对数据库、表、索引进行定义。</p></li><li><p><strong>数据操纵语言</strong>（ Data Manipulation Language ， DML ）<br>用户通过它可以实现对数据库的基本操作。例如，对表中数据的查询、插入、删除和修改。</p></li><li><p><strong>数据控制语言</strong>（ Data Control Language ， DCL ）<br>负责数据完整性、安全性的定义与检查以及并发控制、故障恢复等功能，包括系统初启程序、文件读写与维护程序、存取路径管理程序、缓冲区管理程序、安全性控制程序、完整性检查程序、并发控制程序、事务管理程序、运行日志管理程序、数据库恢复程序等。</p></li></ol><p>目前流行的 DBMS 均为关系型数据库系统，发 ORACLE 、 Sybase 的 PowerBuilder 及 IBM 的 DB2 、微软件的 SQLServer 等。还有一些小型的数据库，如 Visual FoxPro 和 Access 等。</p><h5 id="数据库管理员">数据库管理员</h5><p>数据库的管理员（ DataBase Administrator ， DBA ）：对数据库的规划、设计、维护、监视等进行管理。</p><p>主要工作如下：</p><ol><li><p>数据库设计</p></li><li><p>数据库维护</p></li><li><p>改善系统性能，提高系统效率</p></li></ol><h5 id="数据库系统">数据库系统</h5><p>数据库系统（ DataBase System ， DBS ）由如下几个部分组成：</p><ul><li><p>数据库（数据）</p></li><li><p>数据库管理系统（软件）</p></li><li><p>数据库管理员（人员）</p></li><li><p>系统平台（硬件平台和软件平台）</p></li></ul><p>硬件平台包括：</p><ul><li><p>计算机</p></li><li><p>网络</p></li></ul><p>软件平台包括：</p><ul><li><p>操作系统</p></li><li><p>数据库系统开发工具</p></li><li><p>接口软件</p></li></ul><h5 id="数据库应用系统">数据库应用系统</h5><p>数据库应用系统（ DataBase Application System ， DBAS ）是数据库系统再加上应用软件及应用界面而构成的。它包括：</p><ul><li><p>数据库</p></li><li><p>数据库管理系统</p></li><li><p>数据库管理员</p></li><li><p>硬件平台</p></li><li><p>软件平台</p></li><li><p>应用软件</p></li><li><p>应用界面</p></li></ul><h4 id="数据库系统的发展">数据库系统的发展</h4><p>随着计算机软硬件技术的发展，数据处理方法也经历了从低级到高级的发展过程，按照数据管理的特点可将其划分为 人工管理、文件系统及数据库系统三个阶段。</p><h5 id="人工管理阶段">人工管理阶段</h5><p>在 20 世纪 50 年代，计算机主要用于数值计算。从当时的硬件看，外存只有纸带、卡片、磁带，没有直接存取设备；从软件看（实际上，当时还未形成软件的整体概念），没有操作系统以及管理数据的软件；从数据看，数据量小，数据无结构，由用户直接管理，且数据间缺乏逻辑组织，数据依赖于特定的应用程序，缺乏独立性。</p><h5 id="文件系统阶段">文件系统阶段</h5><p>是数据库系统发展的初级阶段，它提供了简单的数据共享和数据管理能力，但无法提供完整的、统一的、管理和数据共享的能力。</p><h5 id="层次数据库与网状数据库阶段">层次数据库与网状数据库阶段</h5><p>20 世纪 60 年代末期，层次数据库与网状数据库开始发展，它们为统一管理和数据共享提供了支撑，即标志着数据库系统的真正来临。但它们有许多的不足，如受文件的物理影响较大，对数据库使用带来许多不便，数据结构复杂，不变于推广。</p><h5 id="关系数据库系统阶段">关系数据库系统阶段</h5><p>关系数据库系统出现于 20 世界 70 年代，它的数据库结构简单，使用方便，逻辑性强物理性少，使用广泛。</p><p>由于应用的领域不同，它常分为：</p><ul><li><p>工程数据库系统</p></li><li><p>图形数据库系统</p></li><li><p>图像数据库系统</p></li><li><p>统计数据库系统</p></li><li><p>知识数据库系统</p></li><li><p>分布式数据库系统</p></li><li><p>并行数据库系统</p></li><li><p>面向对象数据库系统</p></li></ul><h4 id="数据库系统的基本特点">数据库系统的基本特点</h4><h5 id="数据的集成性">数据的集成性</h5><ul><li><p>在数据库系统中采用统一的数据结构方式</p></li><li><p>在数据库系统中按照多个应用程序的需要组织全局的统一的数据结构，数据模式可建立全局的数据结构，也可建立数据间的语义联系从而构成一个内存紧密联系的数据整体</p></li><li><p>数据模式是多个应用程序共同的、全局的数据结构，而每个应用的数据则是全局结构中的一部分</p></li></ul><h5 id="数据的高共享性与低冗余性">数据的高共享性与低冗余性</h5><p>数据的一致性是指系统中同一数据的不同出现应保持相同的值，而数据的不一致性是指同一数据在系统不同拷贝处有不同的值。减少数据的冗余性可以避免数据的不一致性。</p><h5 id="⭐数据的独立性">⭐数据的独立性</h5><p>数据的独立性是指数据与程序间的互不依赖性。即数据的逻辑结构、存储结构与存取方式的改变不会影响应用程序。</p><ol><li>物理独立性<br>即数据的物理结构（包括存储结构、存取方式）的改变，不会影响数据库的逻辑结构，即不会引起应用程序的变化。</li><li>逻辑的独立性</li></ol><h5 id="数据统一管理与控制">数据统一管理与控制</h5><ul><li><p>数据库总体逻辑结构的改变，不需要相应修改应用程序。</p></li><li><p>数据完整性检查：检查数据库中数据的正确性以保证数据的正确</p></li><li><p>数据的安全性保护：检查数据库访问者以防非法访问</p></li><li><p>并发控制：控制多个应用程序的并发访问所发生的相互干扰以保证其正确性</p></li></ul><h4 id="数据库系统的内部结构体系">数据库系统的内部结构体系</h4><p>数据库系统的内部具有三级模式与二级映射。</p><h5 id="数据库系统的三级模式">数据库系统的三级模式</h5><p>数据模式是数据库系统中数据结构的一种表示形式，它具有不同的层次与结构方式。</p><h6 id="概念模式">概念模式</h6><p>概念模式是数据库系统中全局数据逻辑结构的描述，是全体用户公共数据视图。概念模式主要描述数据的概念记录类型以及它们之间的关系，还包括一些数据间的语义约束。</p><h6 id="外模式">外模式</h6><p>外模式又称子模式或用户模式，是用户的数据视图，即用户见到的数据模式。</p><p>概念模式给出系统全局的数据描述而外模式则给出每个用户的局部数据描述。</p><h6 id="内模式">内模式</h6><p>内模式又称物理模式，它给出数据库物理存储结构与物理存储方法，如数据存储的文件结构、索引、集簇及 hash 等存取方式与存取路径，内模式的物理性主要体现在操作系统及文件级上。</p><p>内模式对一般的用户是透明的，但它的设计直接影响到数据库系统的性能。</p><p>模式的三个级别层次反映了模式的三个不同环境以及它们的不同要求，其中内模式处于最底层，它反映数据在计算机物理结构中的实际存储形式，概念模式牌中层，它反映了设计者的数据全局逻辑要求，而外模式处于最外层，通过两种映射由物理数据库映射而成它反映用户对数据的要求。</p><h5 id="⭐⭐数据库系统的二级映射">⭐⭐数据库系统的二级映射</h5><p>数据库系统的三级模式是对数据的三个级别抽象，它把数据的具体物理实现留给物理模式，使得全局设计者不必关心数据库的具体实现与物理背景；通过两级映射建立了模式间的 联系与转换，使得概念模式与外模式虽然并不物理存在，但也能通过映射获得实体。同时，<strong>两级映射也保证了数据库系统中数据的独立性</strong>。</p><p>两级模式的映射：</p><ul><li><p>概念模式到内模式的映射：该映射给出概念模式中数据的全局逻辑结构到数据的物理存储结构间的对应关系</p></li><li><p>外模式到概念模式的映射：该映射给出了外模式与概念模式之间的对应关系</p></li></ul><h3 id="⭐数据模型">⭐数据模型</h3><h4 id="数据模型的基本概念">数据模型的基本概念</h4><p>数据是现实世界符号的抽象，而数据模型是数据特征的抽象，它从抽象层次上描述了系统的静态特征、动态行为和约束条件，为数据库系统的信息表示与操作提供了一个抽象的框架。</p><p>数据模型描述的三个部分：数据结构、数据操作与数据约束。</p><ol><li>数据结构<br>描述数据的类型、内容、性质及数据间的联系等。</li><li>数据操作<br>主要描述在相应的数据结构上的操作类型与操作方式。</li><li>数据约束<br>主要描述数据结构内数据间的语法、语义联系，它们之间的制约与依存关系，以及数据动态变化的规则，以保证数据的正确、有效与相容。</li></ol><p>逻辑数据模型又称数据模型，较为成熟的有：层次模型、网状模型和关系模型。</p><p>物理数据模型又称物理模型，是面向计算机物理表示的模型。</p><h4 id="⭐E-R-模型-数据管理模型">⭐E-R 模型(数据管理模型)</h4><h5 id="E-R-模型的基本概念">E-R 模型的基本概念</h5><p>E-R 模型（ Entity—Relationship model ），即实体联系模型。</p><h6 id="实体">实体</h6><p>在现实生活中客观存在且又能相互区别的事物，称为实体。</p><p>具有共性的实体可组成一个集合称为实体集。</p><h6 id="属性">属性</h6><p>属性是用来描述实体的特征。一个实体有许多个属性。</p><p>每个属性都可以有值，一个属性的取值范围称为该属性的值域或值集。</p><h6 id="联系">联系</h6><p>反映事物之间的关联称为联系。</p><p>实体集之间的联系有多种，就实体集个数而言，有：</p><ul><li><p>两个实体集间的联系</p></li><li><p>多个实体集之间的联系</p></li><li><p>一个实体集内部的联系</p></li></ul><p>两个实体集间的联系即实体集间的函数关系，有如下几种关系：</p><ul><li><p><strong>一对一的联系</strong></p></li><li><p><strong>一对多的联系</strong></p></li><li><p><strong>多对多的联系</strong></p></li></ul><h5 id="E-R-模型三个基本概念之间的联系关系">E-R 模型三个基本概念之间的联系关系</h5><h6 id="实体集与属性之间的联接关系">实体集与属性之间的联接关系</h6><p>实体是概念世界中的基本单位，属性附属于实体，它本身并不构成独立性单位。</p><p>一个实体可以有若干个属性，实体与它所有属性构成了实体的一个完整描述。实体与属性间有一定的联系。</p><p>实体有型与值的区分，一个实体的所有属性的集合，称为实体型，而实体中属性值的集合，即构成该实体的值。</p><h6 id="实体与联系">实体与联系</h6><p>实体集之间通过联系建立联接关系。</p><h5 id="E-R-模型的图示法">E-R 模型的图示法</h5><ul><li><p>用矩形表示实体集，在矩形内部标出实体集的名称</p></li><li><p>用椭圆形表示属性，在椭圆上标出属性的名称</p></li><li><p>用菱形表示联系，在菱形上标出联系名</p></li><li><p>属性依附于实体，它们之间用无向线段联接</p></li><li><p>属性也依附于联系，它们之间用无向线段联接</p></li><li><p>实体集与联系之间的联接关系，通过无向线段表示</p></li></ul><h4 id="层次模型">层次模型</h4><p>若用图来表示，层次模型是一棵倒立的树。在数据库中，满足以下两个条件的数据模型称为层次模型：</p><p>有且仅有一个结点无父结点，这个结点称为根结点</p><p>其他结点有且仅有一个父结点</p><p>在层次模型中，结点层次从根开始定义，根为第一层，根的子结点为第二层，根为其子结点的父结点，同一父结点的子结点称为兄弟结点，没有子结点的结点称为叶结点。</p><p>层次模型表示的是一对多的关系，即一个父节点可以对应多个子节点。这种模型的优点是简单、直观、处理方便、算法规范；缺点是不能表达含有多对多关系的复杂结构。</p><p>R1 是根节点， R2 、 R3 是 R1 的子结点，它们互为兄弟结点； R4 、 R5 为 R2 的子结节点，它们也互为兄弟节点； R3 、 R4 、 R5 是叶子结点。</p><p>其中，每一个节点都代表一个实体型，各实体型由上而下是 1:n 的联系。</p><p>支持层次模型的 DBMS 称为层次数据库管理系统，在这种数据库系统中建立的数据库是层次数据库。</p><p>层次数据模型支持的操作主要有：查询、插入、删除和更新。</p><h4 id="网状模型">网状模型</h4><p>若用图来表示，网状模型是一个网络。在数据库中，满足以下两个条件的数据模型称为网状模型。</p><p>允许一个以上的结点无父结点</p><p>一个结点可以有一个以上的父结点</p><p>允许两个结点间有两种以上的联系，即允许结点间有复合链，用网络表示某种联系</p><p>由于在网状模型中子结点与父结点的联系不是唯一的，所以要为每个联系命名，并指出与该联系有关的父结点和子结点。</p><p>网状模型的优点是可以表示复杂的数据结构，存取数据的效率比较高；缺点是结构复杂，每个问题都有其相对的特殊性，实现的算法难以规范化。</p><p>在抽象网状模型中， R1 与 R4 之间的联系被命名为 L1 ， R1 与 R3 之间的联系被命名为 L2 ， R2 与 R3 之间的联系被命名为 L3 ， R3 与 R5 之间的联系被命名为 L4 ， R4 与 R5 之间的联系被命名为 L5 。 R1 为 R3 和 R4 的父结点， R2 也是 R3 的父结点。 R1 和 R2 没有父结点。</p><p>网状模型是一个不加任何条件限制的无向图。它没有层次模型那样需要满足严格的条件，相对比较灵活。</p><p>通常的操作方式是将网状模型分解成若干个二级树，即只有两个层次的树。</p><p>在网状模型标准中，基本结构简单二级树叫做系，系的基本数据单位是记录，它相当于 E-R 模型中的实体集；记录又可由若干数据项组成，它相当于 E-R 模型中的属性。</p><h4 id="关系模型">关系模型</h4><h5 id="关系的数据结构">关系的数据结构</h5><p>关系模型是利用二维表来表示，简称表 。</p><p>表头即属性的集合，在表中每一行存放数据，称为元组。</p><p>二维表要求满足的条件：</p><ul><li><p>二维表中元组的个数有限</p></li><li><p>元组在二维表中的唯一性，在同一个表中不存在完全相同的两个元组</p></li><li><p>二维表中元组的顺序无关，可以任意调换</p></li><li><p>元组中的各分量不能再分解</p></li><li><p>二维表中各属性名唯一</p></li><li><p>二维表中各属性的顺序无关</p></li><li><p>二维表属性的分量具有与该属性相同的值域</p></li></ul><p>键：能够唯一确定元组的属性或属性的组合。例如，在学生基本情况表中，可以用学号来唯一标识某个学生，即学号可以作为该表的键。键具有标识元组、建立元组间联系等重要作用。</p><p>在二维表中凡是能够唯一标识元组的最小属性集称为该表的键或码。二维表中可能有若干个键，称为候选码或候选健。从二维表的所有候选键中选取一个作为用户使用的键称为主键或主码。</p><p>外键：如果表中的一个字段不是本表的键或候选键，而是另外一个表的键或候选键，则称该字段为外键或外码。</p><p>表中一定有键。</p><p>在关系中一般支持空值，空值表示未知的值或不可能出现的值，一般用 NULL 表示。关系的主键中不允许出现空值，因为如主键为空值则失去了其元组标识的作用。</p><p>关系模式支持子模式，关系子模式是关系数据库模式中用户所见到的那部分数据模式描述。</p><h5 id="关系操作">关系操作</h5><p>关系模型的数据操纵是建立在关系上的数据操纵，一般有查询、增加、删除和修改。</p><h6 id="数据查询">数据查询</h6><p>在一个关系中查询数据，操作方式是先定位，然后再操作。</p><p>在多个关系中查询数据，先将多个关系合并为一个关系，再在合并后的新关系中进行定位，然后再操作。</p><h6 id="数据删除">数据删除</h6><p>数据删除操作是在一个关系中删除元组的操作。操作方式也是先定位，然后再删除操作。</p><h6 id="数据插入">数据插入</h6><p>数据插入也是仅对一个关系的操作。即在指定的关系中插入一个或多个元组。</p><h6 id="数据修改">数据修改</h6><p>数据修改是在一个关系中修改指定的元组与属性。数据修改不是一个基本的操作，可分解为删除要修改的元组，再插入修改后的元组两个基本操作。</p><p>关系的基本操作：</p><ul><li><p>关系的属性指定</p></li><li><p>关系的元组选择</p></li><li><p>两个关系合并</p></li><li><p>一个或多个关系的查询</p></li><li><p>关系中元组的插入</p></li><li><p>关系中元组的删除</p></li></ul><h5 id="关系中的数据约束">关系中的数据约束</h5><p>数据约束：实体完整性约束、参照完整性约束和用户定义的完整性约束。</p><ol><li><p>实体完整性约束<br>要求关系的主键中属性值不能为空值，主键的惟一决定元组的惟一性。</p></li><li><p>参照完整性约束<br>关系之间相关联的基本约束，不允许关系引用不存在的元组。</p></li><li><p>用户定义的完整性约束<br>用户根据具体的数据环境与应用环境具体设置约束。关系数据库系统提供完整性约束语言，用户利用该语言写出的约束条件，运行时由系统自动检查。</p></li></ol><h3 id="⭐关系代数">⭐关系代数</h3><h4 id="关系模型的基本操作">关系模型的基本操作</h4><p>关系是由若干个不同的元组组成的，因此关系可看作元组的集合。 N 元关系是一个 n 元有序组的集合。</p><p>设有一个 n 元关系 R ，它有 n 个域，分别是 D 1 、 D 2 、……、 D n ，此时，它们的笛卡尔集是：</p><p>集合可看作是域的笛卡尔积的子集，</p><p>关系模型的四种操作是：</p><ul><li><p>插入</p></li><li><p>删除</p></li><li><p>修改</p></li><li><p>查询</p></li></ul><p>可将它们分解为六种基本操作：</p><ul><li><p>关系的属性指定</p></li><li><p>关系的元组选择</p></li><li><p>两个关系的合并运算</p></li><li><p>关系的查询</p></li><li><p>关系元组的插入</p></li><li><p>关系元组的删除</p></li></ul><h4 id="关系模型的基本运算">关系模型的基本运算</h4><h5 id="插入">插入</h5><p>插入操作可看作是集合的并运算。即在原有的关系 R 中并入要插入的元组 R’ ，是这两个元组的并运算:R∪R‘</p><h5 id="删除">删除</h5><p>在关系 R 中删除元组 R’ ，可看作是两个关系的差运算： R-R’</p><h5 id="修改">修改</h5><p>修改关系 R 中的元组的内容的操作：先将要修改的元组 R’ 从关系 R 中删除，再将修改后的元组 R ” 插入到关系 R 中，即操作为：（ R-R’）∪R’’</p><h5 id="查询">查询</h5><p>查询运算无法通过传统的集合运算来表示，需要专门的关系运算来实现。</p><h6 id="投影运算">投影运算</h6><p>投影运算，是从关系中指定若干个属性组合成一个新的关系的操作。投影操作后得到一个新的关系，其关系模式中包含的属性通常比原来的关系少，或者，与原来的关系具有不同的属性顺序。</p><p>投影是从垂直的角度进行运算，即从列的角度进行运算，投影运算基于一个关系，是一个一元运算。</p><h6 id="选择">选择</h6><p>选择，是从关系中查找满足条件的元组。选择的条件是通过逻辑表达式进行描述，逻辑表达式值为真的元组被选出。</p><p>选择是从行的角度进行的运算，即从水平方向进行元组的抽取。选择基于一个关系，得到的结果可以形成一个新的关系，它的关系模式与原关系相同，但是原关系的一个子集。例如，从学生表中查找女同学的信息。</p><h6 id="笛卡尔积运算">笛卡尔积运算</h6><p>两个关系的合并操作可以用笛卡尔积表示。设有 n 元关系 R 及 m 元关系 S ，它们分别有 p 、 q 个元组，则关系 R 和关系 S 的笛卡尔积为 R × S ，新关系是一个 n+m 元关系，元组个数是 p × q ，由 R 和 S 的有序组合而成。</p><h4 id="关系代数中的扩充运算">关系代数中的扩充运算</h4><h5 id="交运算">交运算</h5><p>关系 R 与关系 S 经交运算后所得到的关系是既在 R 中又在 S 中的元组组成，记为R∩S</p><h5 id="除运算">除运算</h5><p>如果将笛卡尔积运算看作乘运算的话，除运算即是它的逆运算。当关系 T=R × S 时，则可将运算写成：</p><p>T ÷ R ＝ S 或 T ／ R ＝ S</p><p>S 称为 T 除以 R 的商。 T 能被除的充分与必要条件是： T 中的域包含 R 中的所有属性， T 中有一些域不出现在 R 中。</p><p>在除运算中 S 的域由 T 中那些不出现在 R 中的域所组成，对于 S 中任一有序组，由它与关系 R 中每个有序组所构成的有序组均出现在关系 T 中。</p><h5 id="连接与自然连接运算">连接与自然连接运算</h5><p>联接是关系的横向运算。联接运算将两个关系横向地拼接成一个更宽的关系，生成的新关系中有满足联接条件的所有元组。</p><p>联接运算通过联接条件来控制，联接条件中将出现两个关系中的公共属性，或者具有相同的域、可比的属性。</p><p>连接运算基于两个关系。如下图所示为联接运算的操作。</p><p>在联接运算中，按字段值相等的为条件进行的联接运算，即为等值联接。上例即为等值联接的运算。</p><p>自然联接，是去掉重复属性的等值联接。自然联接是最常用的联接方式。如果上例进行的是自然联接，则联接后的关系如下图所示。</p><h3 id="数据库设计与管理">数据库设计与管理</h3><h4 id="数据库设计概述">数据库设计概述</h4><p>数据库设计的基本任务是根据用户对象的信息需求、处理需求和数据库的支持环境（包括硬件、操作系统与 DBMS ）设计出数据模式。</p><p>数据库设计的两种方法：</p><ul><li><p>面向数据的方法：以信息需求为主，兼顾处理需求。</p></li><li><p>面向过程的方法：以处理需求为主，兼顾信息需求。</p></li></ul><p>目前，面向数据的设计方法是数据库设计的主流方法。</p><p>数据库设计一般采用生命周期法，分为如下几个阶段：</p><ul><li><p>需求分析阶段</p></li><li><p>概念设计阶段</p></li><li><p>逻辑设计阶段</p></li><li><p>物理设计阶段</p></li><li><p>编码阶段</p></li><li><p>测试阶段</p></li><li><p>运行阶段</p></li><li><p>进一步修改阶段</p></li></ul><p>前四个阶段是数据库设计的主要阶段，重点以数据结构与模型的设计为主线。</p><h4 id="⭐数据库设计的需求分析">⭐数据库设计的需求分析</h4><p>第一阶段：需求收集和分析，收集基本数据和数据流图。</p><p>主要的任务是：通过详细调查现实世界要处理的对象（组织、部门、企业等），充分了解原系统的工作概况，明确用户的各种需求，在此基础上确定新系统的功能。</p><p>对数据库的要求：</p><ul><li><p>信息要求</p></li><li><p>处理要求</p></li><li><p>安全性和完整性的要求</p></li></ul><p>⭐数据字典是各类数据的集合，它包括五个部分：</p><ul><li><p>数据项，即数据的最小单位</p></li><li><p>数据结构，是若干数据项有意义的集合</p></li><li><p>数据流，可以是数据项，也可以是数据结构，用来表示某一处理过程的输入或输出</p></li><li><p>数据存储，处理过程中存取的数据，通常是手工凭证、手工文档或计算机文件</p></li><li><p>处理过程</p></li></ul><h4 id="数据库概念设计">数据库概念设计</h4><h5 id="概念设计概述">概念设计概述</h5><ol><li><p>集中式模式设计法<br>根据需求由一个统一的机构或人员设计一个综合的全局模式。适合于小型或并不复杂的单位或部门。</p></li><li><p>视图集成设计法<br>将系统分解成若干个部分，对每个部分进行局部模式设计，建立各个部分的视图，再以各视图为基础进行集成。比较适合于大型与复杂的单位，是现在使用较多的方法。</p></li></ol><h5 id="数据库概念设计的过程">数据库概念设计的过程</h5><h5 id="选择局部应用">选择局部应用</h5><p>根据系统情况，在多层的数据流图中选择一个适当层次的数据流图，将这组图中每一部分对应一个局部应用，以该层数据流图为出发点，设计各自的 E-R 图。</p><h5 id="视图设计">视图设计</h5><p>视图设计的三种次序：</p><ul><li><p>自顶向下：先从抽象级别高且普遍性强的对象开始逐步细化、具体化和特殊化。</p></li><li><p>由底向上：先从具体的对象开始，逐步抽象，普遍化和一般化，最后形成一个完整的视图设计</p></li><li><p>由内向外：先从最基本与最明显的对象开始，逐步扩充至非基本、不明显的对象。</p></li></ul><p>逻辑设计</p><p>学院（ 学院编号 ，学院名，学院地址，院长编号）</p><p>院长（ 院长编号 ，院长姓名，联系电话，办公地址）</p><p>系（ 系编号 ，系名，联系电话，系地址，学院编号，系主任职工号）</p><p>教师（ 职工号 ，姓名，性别，学历，职称，工资，联系电话，系编号）</p><p>班级（ 班级编号 ，班级名称，学生人数，系名）</p><p>学生（ 学号 ，身份证号，姓名，性别，出生日期，民族，籍贯，班级名）</p><p>课程（ 课程编号 ，课程名称，学分）</p><p>开课（ 系编号，课程号 ）</p><p>授课（ 职工号，课程号 ）</p><p>选课（ 学号，课程号 ，成绩）</p><h5 id="视图集成">视图集成</h5><p>视图集成是将所有局部视图统一与合并成一个完整的数据模式。</p><p>视图集成的重点是解决局部设计中的冲突，常见的冲突主要有如下几种：</p><ul><li><p>命名冲突：有同名异义或同义异名</p></li><li><p>概念冲突：同一概念在一处为实体而在另一处为属性或联系</p></li><li><p>域冲突：相同的属性在不同视图中有不同的域</p></li><li><p>约束冲突：不同的视图可能有不同的约束</p></li></ul><p>视图经过合并生成 E-R 图时，其中还可能存在冗余的数据和冗余的实体间联系。冗余数据和冗余联系容易破坏数据库的完整性，给数据库维护带来困难。</p><p>对于视图集成后所形成的整体的数据库概念结构必须进行验证，满足下列要求：</p><ul><li><p>整体概念结构内部必须具有一致性，即不能存在互相矛盾的表达</p></li><li><p>整体概念结构能准确地反映原来的每个视图结构，包括属性、实体及实体间的联系</p></li><li><p>整体概念结构能满足需求分析阶段所确定的所有要求</p></li><li><p>整体概念结构还需要提交给用户，征求用户和有关人员的意见，进行评审、修改和优化，最后定稿</p></li></ul><h4 id="数据库的逻辑设计">数据库的逻辑设计</h4><h5 id="从-E-R-模型向关系模式转换">从 E-R 模型向关系模式转换</h5><p>E-R 模型向关系模式的转换包括：</p><ul><li><p>E-R 模型中的属性转换为关系模式中的属性</p></li><li><p>E-R 模型中的实体转换为关系模式中的元组</p></li><li><p>E-R 模型中的实体集转换为关系模式中的关系</p></li><li><p>E-R 模型中的联系转换为关系模式中的关系</p></li></ul><p>转换中存在的一些问题：</p><ul><li><p>命名与属性域的处理。名称不要重复，同时，要用关系数据库中允许的数据类型来描述类型</p></li><li><p>非原子属性处理。在 E-R 模型中允许非原子属性存在，但在关系模式中不允许出现非原子属性，因此，要将非原子属性进行转换。</p></li><li><p>联系的转换。通常联系可转换为关系，但有的联系需要归并到相关联的实体中</p></li></ul><h5 id="逻辑模式规范化及调整、实现">逻辑模式规范化及调整、实现</h5><p>规范：对关系做规范化验证。</p><p>RDBMS：对逻辑模式进行调整以满足 RDBMS 的性能、存储空间等要求，包括如下内容：</p><ul><li><p>调整性能以减少连接运算</p></li><li><p>调整关系大小，使每个关系数量保持在合理水平，从而可以提高存取效率</p></li><li><p>尽量采取快照，提高查询速度</p></li></ul><h5 id="关系视图设计">关系视图设计</h5><p>逻辑设计又称外模式设计。关系视图是关系模式基础上所设计的直接面向操作用户的视图。</p><p>关系视图的作用：</p><ul><li><p>提供数据逻辑独立性</p></li><li><p>能适应用户对数据的不同需求</p></li><li><p>有一定数据保密功能</p></li></ul><h4 id="数据库的物理设计">数据库的物理设计</h4><p>物理设计的主要目标是对数据库内部物理结构作调整并选择合理的存取路径，以提高数据库访问速度及有效利用存储空间。</p><h4 id="数据库管理">数据库管理</h4><p>数据库管理包括：</p><h5 id="数据库的建立">数据库的建立</h5><p>数据库建立包括：</p><ul><li><p>数据模式的建立。数据模式由 DBA 负责建立，定义数据库名、表及相应的属性，定义主关键字、索引、集簇、完整性约束、用户访问权限、申请空间资源，定义分区等。</p></li><li><p>数据加载。在数据模式定义后可加载数据， DBA 可以编制加载程序将外界的数据加载到数据模式内，完成数据库的建立。</p></li></ul><h5 id="数据库的调整">数据库的调整</h5><p>在数据库库建立并运行一段时间后，对不适合的内容要进行调整，调整的内容包括：</p><ul><li><p>调整关系模式与视图使之更适应用户的需求</p></li><li><p>调整索引与集簇使数据库性能与效率更佳</p></li><li><p>调整分区、数据库缓冲区大小以及并发度使数据库物理性能更好</p></li></ul><h5 id="数据库的重组">数据库的重组</h5><p>数据库运行一段时间后，由于数据的大量插入、删除和修改，使性能受到很大的影响，需要重新调整存贮空间，使数据的连续性更好，即通过数据库的重组来实现。</p><h5 id="数据库的故障校复">数据库的故障校复</h5><p>保证数据不受非法盗用与破坏；保证数据的正确性。</p><h5 id="数据安全性控制与完整性控制">数据安全性控制与完整性控制</h5><p>一旦数据被破坏，要及时恢复。</p><h5 id="数据库监控">数据库监控</h5><p>DBA 需要随时观察数据库的动态变化，并在发生错误、故障或产生不适应情况时随时采取措施，并监控数据库的性能变化，必要时可对数据库进行调整。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 计算机二级 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>科学计算之NumPy</title>
      <link href="2019/07/22/%E7%A7%91%E5%AD%A6%E8%AE%A1%E7%AE%97%E4%B9%8BNumPy/"/>
      <url>2019/07/22/%E7%A7%91%E5%AD%A6%E8%AE%A1%E7%AE%97%E4%B9%8BNumPy/</url>
      
        <content type="html"><![CDATA[<p>NumPy库学习</p><hr><h2 id="数组">数组</h2><p>NumPy的主要对象为同类型的多维数组<br>维度成为轴，轴的数目为rank</p><ol><li><p>一维数组</p> <pre class="line-numbers language-Python" data-language="Python"><code class="language-Python">[1, 2, 3]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>二维数组</p> <pre class="line-numbers language-Python" data-language="Python"><code class="language-Python">[[1, 2, 3],[2, 3, 4]]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><blockquote><p>逻辑分割</p></blockquote></li></ol><p>NumPy的数组命名ndarray，简称array</p><blockquote><p>与标准Python库array.array不同，标准库内容少</p></blockquote><h3 id="数组属性">数组属性</h3><ul><li><p><code>ndarray.ndim</code>  判断数组的轴的个数</p>  <pre class="line-numbers language-Python" data-language="Python"><code class="language-Python">import numpy as npx &#x3D; np.array([[1, 2, 3], [4, 5, 6]])print(x)  # array([1, 2, 3], [4, 5, 6])print(x.ndim)  # 2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><code>ndarray.shape</code>  对n行m列的矩阵，shape返回(n, m)</p>  <pre class="line-numbers language-Python" data-language="Python"><code class="language-Python">import numpy as npx &#x3D; np.array([[1, 2, 3], [4, 5, 6]])print(x.shape)  # (2, 3)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p><code>ndarry.size</code> 数组元素的总数等于shape的乘积</p>  <pre class="line-numbers language-Python" data-language="Python"><code class="language-Python">import numpy as npx &#x3D; np.array([[1, 2, 3], [4, 5, 6]])print(x.size)  # 6<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p><code>ndarry.dtype</code> 描述数组中元素类型的对象</p>  <pre class="line-numbers language-Python" data-language="Python"><code class="language-Python">import numpy as npx &#x3D; np.array([[1, 2, 3], [4, 5, 6]])print(x.dtype)  # dtype(&#39;int64&#39;)y &#x3D; np.array([1., 2, 3])  # 向上转化浮点数优先级高print(y)  # array([1., 2., 3.])print(y.dtype)  # dtype(&#39;float64&#39;)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><code>ndarry.itemsize</code> 数组中每个元素的字节大小</p>  <pre class="line-numbers language-Python" data-language="Python"><code class="language-Python">import numpy as npx &#x3D; np.array([[1, 2, 3], [4, 5, 6]])print(x.itemsize)  # 8<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><p>float64类型数组的itemsize为8(=64/8)<br>complex32类型数组的itemsize为4(=32/4)</p></blockquote></li><li><p><code>ndarray.strides</code> 步长幅度(有疑问，后续需要查资料)</p>  <pre class="line-numbers language-Python" data-language="Python"><code class="language-Python">import numpy as npx &#x3D; np.array([[1, 2, 3], [4, 5, 6]])print(x.strides)  # (14, 4)y &#x3D; np.array([[1, 2], [3, 4], [5, 6]])print(y.strides)  # (8, 4)z &#x3D; np.array([1, 2, 3])print(z.strides)  # (4,)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><code>ndarray.data</code> 指针(不用)</p></li><li><p><code>ndarray.flags</code> 存放数组自身相关属性</p>  <pre class="line-numbers language-Python" data-language="Python"><code class="language-Python">import numpy as npx &#x3D; np.array([[1, 2, 3], [4, 5, 6]])print(x.flags)&#39;&#39;&#39;F_CONTIGUOUS : False  #OWNDATA : True  # 是否属于自己WRITEABLE : True  # 是否可写ALIGNED : True  # 是否对齐WRITEBACKIFCOPY : False  UPDATEIFCOPY : False&#39;&#39;&#39;# 修改属性x.flags.writable &#x3D; False<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="创建数组">创建数组</h3><ol><li><p><code>numpy.array</code> 使用array函数从常规Python<strong>列表或元组</strong>中创建数组</p> <pre class="line-numbers language-Python" data-language="Python"><code class="language-Python">import numpy as npprint(np.array(1))  # array(1)  0维占位用<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p><code>numpy.zeros()</code> 创建一个由0组成的数组<br><code>numpy.ones()</code>  创建一个由1组成的数组</p> <pre class="line-numbers language-Python" data-language="Python"><code class="language-Python">import numpy as npprint(np.zeros((3, 4)))  # 3x4print(np.ones(3, 4))print(np.zeros(3, 4), dtype &#x3D; bool)  # 指定类型<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><code>numpy.empty()</code> 生成无用数据</p> <pre class="line-numbers language-Python" data-language="Python"><code class="language-Python">import numpy as npprint(np.empty(2, 3))<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p><code>numpy.random.random()</code> 创建随机</p> <pre class="line-numbers language-Python" data-language="Python"><code class="language-Python">import numpy as npprint(np.random.random((2, 3)))<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p><code>numpy.arange()</code> 创建数字序列</p> <pre class="line-numbers language-Python" data-language="Python"><code class="language-Python">import numpy as npprint(np.arange(0, 10, 2))  # 始，终，步长<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p><code>numpy.linspace()</code> 创建等步长的数字序列</p> <pre class="line-numbers language-Python" data-language="Python"><code class="language-Python">import numpy as npprint(np.linspce(0, 2, 9))  # 始，终，个数<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p><code>numpy.fromfunction()</code> 从给定函数中创建数组</p> <pre class="line-numbers language-Python" data-language="Python"><code class="language-Python">import numpy as npdef f(x, y):    return 2*x+yprint(np.fromfunction(f,(3, 3)))  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><code>numpy.eye()</code>和<code>numpy.identity()</code> 创建正方形矩阵，对角线是1，其余为零</p> <pre class="line-numbers language-Python" data-language="Python"><code class="language-Python">import numpy as npprint(np.eye(2))print(np.identity(3))print(np.eye(4), k &#x3D; 1)   # 向右偏移print(np.eye(4), k &#x3D; -1)  # 向左偏移<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><code>numpy.fromfile()</code>和<code>numpy.tofile()</code> 从文件中存取</p></li><li><p><code>numpy.load()</code>和<code>numpy.save()</code> NumPy专用二级制存储文件</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Numpy </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>面向对象编程</title>
      <link href="2019/06/30/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B/"/>
      <url>2019/06/30/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<p>Python面向对象编程参考<a href="https://github.com/jackfrued/Python-100-Days">Python-100-Days</a></p><p><img src="https://pic.superbed.cn/item/5db304178b58bc7bf70c8b96.png" alt=""></p><hr><h3 id="property装饰器">@property装饰器</h3><p>之前我们讨论过Python中属性和方法访问权限的问题，虽然我们不建议将属性设置为私有的，但是如果直接将属性暴露给外界也是有问题的，比如我们没有办法检查赋给属性的值是否有效。我们之前的建议是将属性命名以单下划线开头，通过这种方式来暗示属性是受保护的，不建议外界直接访问，那么如果想访问属性可以通过属性的getter（访问器）和setter（修改器）方法进行对应的操作。如果要做到这点，就可以考虑使用@property包装器来包装getter和setter方法，使得对属性的访问既安全又方便，代码如下所示。</p><a id="more"></a><pre class="line-numbers language-Python" data-language="Python"><code class="language-Python">class Person(object):    def __init__(self, name, age):        self._name &#x3D; name        self._age &#x3D; age    # 访问器 - getter方法    @property    def name(self):        return self._name    # 访问器 - getter方法    @property    def age(self):        return self._age    # 修改器 - setter方法    @age.setter    def age(self, age):        self._age &#x3D; age    def play(self):        if self._age &lt;&#x3D; 16:            print(&#39;%s正在玩飞行棋.&#39; % self._name)        else:            print(&#39;%s正在玩斗地主.&#39; % self._name)def main():    person &#x3D; Person(&#39;王大锤&#39;, 12)    person.play()    person.age &#x3D; 22    person.play()    # person.name &#x3D; &#39;白元芳&#39;  # AttributeError: can&#39;t set attributeif __name__ &#x3D;&#x3D; &#39;__main__&#39;:    main()<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="slots-魔法">__slots__魔法</h3><p>我们讲到这里，不知道大家是否已经意识到，Python是一门<a href="https://zh.wikipedia.org/wiki/%E5%8A%A8%E6%80%81%E8%AF%AD%E8%A8%80">动态语言</a>。通常，动态语言允许我们在程序运行时给对象绑定新的属性或方法，当然也可以对已经绑定的属性和方法进行解绑定。但是如果我们需要限定自定义类型的对象只能绑定某些属性，可以通过在类中定义__slots__变量来进行限定。需要注意的是__slots__的限定只对当前类的对象生效，对子类并不起任何作用。</p><pre class="line-numbers language-Python" data-language="Python"><code class="language-Python">class Person(object):    # 限定Person对象只能绑定_name, _age和_gender属性    __slots__ &#x3D; (&#39;_name&#39;, &#39;_age&#39;, &#39;_gender&#39;)    def __init__(self, name, age):        self._name &#x3D; name        self._age &#x3D; age    @property    def name(self):        return self._name    @property    def age(self):        return self._age    @age.setter    def age(self, age):        self._age &#x3D; age    def play(self):        if self._age &lt;&#x3D; 16:            print(&#39;%s正在玩飞行棋.&#39; % self._name)        else:            print(&#39;%s正在玩斗地主.&#39; % self._name)def main():    person &#x3D; Person(&#39;王大锤&#39;, 22)    person.play()    person._gender &#x3D; &#39;男&#39;    # AttributeError: &#39;Person&#39; object has no attribute &#39;_is_gay&#39;    # person._is_gay &#x3D; True<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="静态方法和类方法">静态方法和类方法</h3><p>之前，我们在类中定义的方法都是对象方法，也就是说这些方法都是发送给对象的消息。实际上，我们写在类中的方法并不需要都是对象方法，例如我们定义一个“三角形”类，通过传入三条边长来构造三角形，并提供计算周长和面积的方法，但是传入的三条边长未必能构造出三角形对象，因此我们可以先写一个方法来验证三条边长是否可以构成三角形，这个方法很显然就不是对象方法，因为在调用这个方法时三角形对象尚未创建出来（因为都不知道三条边能不能构成三角形），所以这个方法是属于三角形类而并不属于三角形对象的。我们可以使用静态方法来解决这类问题，代码如下所示。</p><pre class="line-numbers language-Python" data-language="Python"><code class="language-Python">from math import sqrtclass Triangle(object):    def __init__(self, a, b, c):        self._a &#x3D; a        self._b &#x3D; b        self._c &#x3D; c    @staticmethod    def is_valid(a, b, c):        return a + b &gt; c and b + c &gt; a and a + c &gt; b    def perimeter(self):        return self._a + self._b + self._c    def area(self):        half &#x3D; self.perimeter() &#x2F; 2        return sqrt(half * (half - self._a) *                    (half - self._b) * (half - self._c))def main():    a, b, c &#x3D; 3, 4, 5    # 静态方法和类方法都是通过给类发消息来调用的    if Triangle.is_valid(a, b, c):        t &#x3D; Triangle(a, b, c)        print(t.perimeter())        # 也可以通过给类发消息来调用对象方法但是要传入接收消息的对象作为参数        # print(Triangle.perimeter(t))        print(t.area())        # print(Triangle.area(t))    else:        print(&#39;无法构成三角形.&#39;)if __name__ &#x3D;&#x3D; &#39;__main__&#39;:    main()<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>和静态方法比较类似，Python还可以在类中定义类方法，类方法的第一个参数约定名为cls，它代表的是当前类相关的信息的对象（类本身也是一个对象，有的地方也称之为类的元数据对象），通过这个参数我们可以获取和类相关的信息并且可以创建出类的对象，代码如下所示。</p><pre class="line-numbers language-Python" data-language="Python"><code class="language-Python">from time import time, localtime, sleepclass Clock(object):    &quot;&quot;&quot;数字时钟&quot;&quot;&quot;    def __init__(self, hour&#x3D;0, minute&#x3D;0, second&#x3D;0):        self._hour &#x3D; hour        self._minute &#x3D; minute        self._second &#x3D; second    @classmethod    def now(cls):        ctime &#x3D; localtime(time())        return cls(ctime.tm_hour, ctime.tm_min, ctime.tm_sec)    def run(self):        &quot;&quot;&quot;走字&quot;&quot;&quot;        self._second +&#x3D; 1        if self._second &#x3D;&#x3D; 60:            self._second &#x3D; 0            self._minute +&#x3D; 1            if self._minute &#x3D;&#x3D; 60:                self._minute &#x3D; 0                self._hour +&#x3D; 1                if self._hour &#x3D;&#x3D; 24:                    self._hour &#x3D; 0    def show(self):        &quot;&quot;&quot;显示时间&quot;&quot;&quot;        return &#39;%02d:%02d:%02d&#39; % \               (self._hour, self._minute, self._second)def main():    # 通过类方法创建对象并获取系统时间    clock &#x3D; Clock.now()    while True:        print(clock.show())        sleep(1)        clock.run()if __name__ &#x3D;&#x3D; &#39;__main__&#39;:    main()<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="类之间的关系">类之间的关系</h3><p>简单的说，类和类之间的关系有三种：is-a、has-a和use-a关系。</p><ul><li>is-a关系也叫继承或泛化，比如学生和人的关系、手机和电子产品的关系都属于继承关系。</li><li>has-a关系通常称之为关联，比如部门和员工的关系，汽车和引擎的关系都属于关联关系；关联关系如果是整体和部分的关联，那么我们称之为聚合关系；如果整体进一步负责了部分的生命周期（整体和部分是不可分割的，同时同在也同时消亡），那么这种就是最强的关联关系，我们称之为合成关系。</li><li>use-a关系通常称之为依赖，比如司机有一个驾驶的行为（方法），其中（的参数）使用到了汽车，那么司机和汽车的关系就是依赖关系。</li></ul><p>利用类之间的这些关系，我们可以在已有类的基础上来完成某些操作，也可以在已有类的基础上创建新的类，这些都是实现代码复用的重要手段。复用现有的代码不仅可以减少开发的工作量，也有利于代码的管理和维护，这是我们在日常工作中都会使用到的技术手段。</p><h3 id="继承和多态">继承和多态</h3><p>刚才我们提到了，可以在已有类的基础上创建新类，这其中的一种做法就是让一个类从另一个类那里将属性和方法直接继承下来，从而减少重复代码的编写。提供继承信息的我们称之为父类，也叫超类或基类；得到继承信息的我们称之为子类，也叫派生类或衍生类。子类除了继承父类提供的属性和方法，还可以定义自己特有的属性和方法，所以子类比父类拥有的更多的能力，在实际开发中，我们经常会用子类对象去替换掉一个父类对象，这是面向对象编程中一个常见的行为，对应的原则称之为<a href="https://zh.wikipedia.org/wiki/%E9%87%8C%E6%B0%8F%E6%9B%BF%E6%8D%A2%E5%8E%9F%E5%88%99">里氏替换原则</a>。下面我们先看一个继承的例子。</p><pre class="line-numbers language-Python" data-language="Python"><code class="language-Python">class Person(object):    &quot;&quot;&quot;人&quot;&quot;&quot;    def __init__(self, name, age):        self._name &#x3D; name        self._age &#x3D; age    @property    def name(self):        return self._name    @property    def age(self):        return self._age    @age.setter    def age(self, age):        self._age &#x3D; age    def play(self):        print(&#39;%s正在愉快的玩耍.&#39; % self._name)    def watch_av(self):        if self._age &gt;&#x3D; 18:            print(&#39;%s正在观看爱情动作片.&#39; % self._name)        else:            print(&#39;%s只能观看《熊出没》.&#39; % self._name)class Student(Person):    &quot;&quot;&quot;学生&quot;&quot;&quot;    def __init__(self, name, age, grade):        super().__init__(name, age)        self._grade &#x3D; grade    @property    def grade(self):        return self._grade    @grade.setter    def grade(self, grade):        self._grade &#x3D; grade    def study(self, course):        print(&#39;%s的%s正在学习%s.&#39; % (self._grade, self._name, course))class Teacher(Person):    &quot;&quot;&quot;老师&quot;&quot;&quot;    def __init__(self, name, age, title):        super().__init__(name, age)        self._title &#x3D; title    @property    def title(self):        return self._title    @title.setter    def title(self, title):        self._title &#x3D; title    def teach(self, course):        print(&#39;%s%s正在讲%s.&#39; % (self._name, self._title, course))def main():    stu &#x3D; Student(&#39;王大锤&#39;, 15, &#39;初三&#39;)    stu.study(&#39;数学&#39;)    stu.watch_av()    t &#x3D; Teacher(&#39;骆昊&#39;, 38, &#39;砖家&#39;)    t.teach(&#39;Python程序设计&#39;)    t.watch_av()if __name__ &#x3D;&#x3D; &#39;__main__&#39;:    main()<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>子类在继承了父类的方法后，可以对父类已有的方法给出新的实现版本，这个动作称之为方法重写（override）。通过方法重写我们可以让父类的同一个行为在子类中拥有不同的实现版本，当我们调用这个经过子类重写的方法时，不同的子类对象会表现出不同的行为，这个就是多态（poly-morphism）。</p><pre class="line-numbers language-Python" data-language="Python"><code class="language-Python">from abc import ABCMeta, abstractmethodclass Pet(object, metaclass&#x3D;ABCMeta):    &quot;&quot;&quot;宠物&quot;&quot;&quot;    def __init__(self, nickname):        self._nickname &#x3D; nickname    @abstractmethod    def make_voice(self):        &quot;&quot;&quot;发出声音&quot;&quot;&quot;        passclass Dog(Pet):    &quot;&quot;&quot;狗&quot;&quot;&quot;    def make_voice(self):        print(&#39;%s: 汪汪汪...&#39; % self._nickname)class Cat(Pet):    &quot;&quot;&quot;猫&quot;&quot;&quot;    def make_voice(self):        print(&#39;%s: 喵...喵...&#39; % self._nickname)def main():    pets &#x3D; [Dog(&#39;旺财&#39;), Cat(&#39;凯蒂&#39;), Dog(&#39;大黄&#39;)]    for pet in pets:        pet.make_voice()if __name__ &#x3D;&#x3D; &#39;__main__&#39;:    main()<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在上面的代码中，我们将<code>Pet</code>类处理成了一个抽象类，所谓抽象类就是不能够创建对象的类，这种类的存在就是专门为了让其他类去继承它。Python从语法层面并没有像Java或C#那样提供对抽象类的支持，但是我们可以通过<code>abc</code>模块的<code>ABCMeta</code>元类和<code>abstractmethod</code>包装器来达到抽象类的效果，如果一个类中存在抽象方法那么这个类就不能够实例化（创建对象）。上面的代码中，<code>Dog</code>和<code>Cat</code>两个子类分别对<code>Pet</code>类中的<code>make_voice</code>抽象方法进行了重写并给出了不同的实现版本，当我们在<code>main</code>函数中调用该方法时，这个方法就表现出了多态行为（同样的方法做了不同的事情）。</p><h3 id="综合案例">综合案例</h3><h4 id="案例1：奥特曼打小怪兽">案例1：奥特曼打小怪兽</h4><pre class="line-numbers language-Python" data-language="Python"><code class="language-Python">from abc import ABCMeta, abstractmethodfrom random import randint, randrangeclass Fighter(object, metaclass&#x3D;ABCMeta):    &quot;&quot;&quot;战斗者&quot;&quot;&quot;    # 通过__slots__魔法限定对象可以绑定的成员变量    __slots__ &#x3D; (&#39;_name&#39;, &#39;_hp&#39;)    def __init__(self, name, hp):        &quot;&quot;&quot;初始化方法        :param name: 名字        :param hp: 生命值        &quot;&quot;&quot;        self._name &#x3D; name        self._hp &#x3D; hp    @property    def name(self):        return self._name    @property    def hp(self):        return self._hp    @hp.setter    def hp(self, hp):        self._hp &#x3D; hp if hp &gt;&#x3D; 0 else 0    @property    def alive(self):        return self._hp &gt; 0    @abstractmethod    def attack(self, other):        &quot;&quot;&quot;攻击        :param other: 被攻击的对象        &quot;&quot;&quot;        passclass Ultraman(Fighter):    &quot;&quot;&quot;奥特曼&quot;&quot;&quot;    __slots__ &#x3D; (&#39;_name&#39;, &#39;_hp&#39;, &#39;_mp&#39;)    def __init__(self, name, hp, mp):        &quot;&quot;&quot;初始化方法        :param name: 名字        :param hp: 生命值        :param mp: 魔法值        &quot;&quot;&quot;        super().__init__(name, hp)        self._mp &#x3D; mp    def attack(self, other):        other.hp -&#x3D; randint(15, 25)    def huge_attack(self, other):        &quot;&quot;&quot;究极必杀技(打掉对方至少50点或四分之三的血)        :param other: 被攻击的对象        :return: 使用成功返回True否则返回False        &quot;&quot;&quot;        if self._mp &gt;&#x3D; 50:            self._mp -&#x3D; 50            injury &#x3D; other.hp * 3 &#x2F;&#x2F; 4            injury &#x3D; injury if injury &gt;&#x3D; 50 else 50            other.hp -&#x3D; injury            return True        else:            self.attack(other)            return False    def magic_attack(self, others):        &quot;&quot;&quot;魔法攻击        :param others: 被攻击的群体        :return: 使用魔法成功返回True否则返回False        &quot;&quot;&quot;        if self._mp &gt;&#x3D; 20:            self._mp -&#x3D; 20            for temp in others:                if temp.alive:                    temp.hp -&#x3D; randint(10, 15)            return True        else:            return False    def resume(self):        &quot;&quot;&quot;恢复魔法值&quot;&quot;&quot;        incr_point &#x3D; randint(1, 10)        self._mp +&#x3D; incr_point        return incr_point    def __str__(self):        return &#39;~~~%s奥特曼~~~\n&#39; % self._name + \            &#39;生命值: %d\n&#39; % self._hp + \            &#39;魔法值: %d\n&#39; % self._mpclass Monster(Fighter):    &quot;&quot;&quot;小怪兽&quot;&quot;&quot;    __slots__ &#x3D; (&#39;_name&#39;, &#39;_hp&#39;)    def attack(self, other):        other.hp -&#x3D; randint(10, 20)    def __str__(self):        return &#39;~~~%s小怪兽~~~\n&#39; % self._name + \            &#39;生命值: %d\n&#39; % self._hpdef is_any_alive(monsters):    &quot;&quot;&quot;判断有没有小怪兽是活着的&quot;&quot;&quot;    for monster in monsters:        if monster.alive &gt; 0:            return True    return Falsedef select_alive_one(monsters):    &quot;&quot;&quot;选中一只活着的小怪兽&quot;&quot;&quot;    monsters_len &#x3D; len(monsters)    while True:        index &#x3D; randrange(monsters_len)        monster &#x3D; monsters[index]        if monster.alive &gt; 0:            return monsterdef display_info(ultraman, monsters):    &quot;&quot;&quot;显示奥特曼和小怪兽的信息&quot;&quot;&quot;    print(ultraman)    for monster in monsters:        print(monster, end&#x3D;&#39;&#39;)def main():    u &#x3D; Ultraman(&#39;骆昊&#39;, 1000, 120)    m1 &#x3D; Monster(&#39;狄仁杰&#39;, 250)    m2 &#x3D; Monster(&#39;白元芳&#39;, 500)    m3 &#x3D; Monster(&#39;王大锤&#39;, 750)    ms &#x3D; [m1, m2, m3]    fight_round &#x3D; 1    while u.alive and is_any_alive(ms):        print(&#39;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;第%02d回合&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#39; % fight_round)        m &#x3D; select_alive_one(ms)  # 选中一只小怪兽        skill &#x3D; randint(1, 10)   # 通过随机数选择使用哪种技能        if skill &lt;&#x3D; 6:  # 60%的概率使用普通攻击            print(&#39;%s使用普通攻击打了%s.&#39; % (u.name, m.name))            u.attack(m)            print(&#39;%s的魔法值恢复了%d点.&#39; % (u.name, u.resume()))        elif skill &lt;&#x3D; 9:  # 30%的概率使用魔法攻击(可能因魔法值不足而失败)            if u.magic_attack(ms):                print(&#39;%s使用了魔法攻击.&#39; % u.name)            else:                print(&#39;%s使用魔法失败.&#39; % u.name)        else:  # 10%的概率使用究极必杀技(如果魔法值不足则使用普通攻击)            if u.huge_attack(m):                print(&#39;%s使用究极必杀技虐了%s.&#39; % (u.name, m.name))            else:                print(&#39;%s使用普通攻击打了%s.&#39; % (u.name, m.name))                print(&#39;%s的魔法值恢复了%d点.&#39; % (u.name, u.resume()))        if m.alive &gt; 0:  # 如果选中的小怪兽没有死就回击奥特曼            print(&#39;%s回击了%s.&#39; % (m.name, u.name))            m.attack(u)        display_info(u, ms)  # 每个回合结束后显示奥特曼和小怪兽的信息        fight_round +&#x3D; 1    print(&#39;\n&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;战斗结束!&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;\n&#39;)    if u.alive &gt; 0:        print(&#39;%s奥特曼胜利!&#39; % u.name)    else:        print(&#39;小怪兽胜利!&#39;)if __name__ &#x3D;&#x3D; &#39;__main__&#39;:    main()<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="案例2：扑克游戏">案例2：扑克游戏</h4><pre class="line-numbers language-Python" data-language="Python"><code class="language-Python">import randomclass Card(object):    &quot;&quot;&quot;一张牌&quot;&quot;&quot;    def __init__(self, suite, face):        self._suite &#x3D; suite        self._face &#x3D; face    @property    def face(self):        return self._face    @property    def suite(self):        return self._suite    def __str__(self):        if self._face &#x3D;&#x3D; 1:            face_str &#x3D; &#39;A&#39;        elif self._face &#x3D;&#x3D; 11:            face_str &#x3D; &#39;J&#39;        elif self._face &#x3D;&#x3D; 12:            face_str &#x3D; &#39;Q&#39;        elif self._face &#x3D;&#x3D; 13:            face_str &#x3D; &#39;K&#39;        else:            face_str &#x3D; str(self._face)        return &#39;%s%s&#39; % (self._suite, face_str)    def __repr__(self):        return self.__str__()class Poker(object):    &quot;&quot;&quot;一副牌&quot;&quot;&quot;    def __init__(self):        self._cards &#x3D; [Card(suite, face)                       for suite in &#39;♠♥♣♦&#39;                       for face in range(1, 14)]        self._current &#x3D; 0    @property    def cards(self):        return self._cards    def shuffle(self):        &quot;&quot;&quot;洗牌(随机乱序)&quot;&quot;&quot;        self._current &#x3D; 0        random.shuffle(self._cards)    @property    def next(self):        &quot;&quot;&quot;发牌&quot;&quot;&quot;        card &#x3D; self._cards[self._current]        self._current +&#x3D; 1        return card    @property    def has_next(self):        &quot;&quot;&quot;还有没有牌&quot;&quot;&quot;        return self._current &lt; len(self._cards)class Player(object):    &quot;&quot;&quot;玩家&quot;&quot;&quot;    def __init__(self, name):        self._name &#x3D; name        self._cards_on_hand &#x3D; []    @property    def name(self):        return self._name    @property    def cards_on_hand(self):        return self._cards_on_hand    def get(self, card):        &quot;&quot;&quot;摸牌&quot;&quot;&quot;        self._cards_on_hand.append(card)    def arrange(self, card_key):        &quot;&quot;&quot;玩家整理手上的牌&quot;&quot;&quot;        self._cards_on_hand.sort(key&#x3D;card_key)# 排序规则-先根据花色再根据点数排序def get_key(card):    return (card.suite, card.face)def main():    p &#x3D; Poker()    p.shuffle()    players &#x3D; [Player(&#39;东邪&#39;), Player(&#39;西毒&#39;), Player(&#39;南帝&#39;), Player(&#39;北丐&#39;)]    for _ in range(13):        for player in players:            player.get(p.next)    for player in players:        print(player.name + &#39;:&#39;, end&#x3D;&#39; &#39;)        player.arrange(get_key)        print(player.cards_on_hand)if __name__ &#x3D;&#x3D; &#39;__main__&#39;:    main()<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><strong>说明：</strong> 大家可以自己尝试在上面代码的基础上写一个简单的扑克游戏，例如21点(Black Jack)，游戏的规则可以自己在网上找一找。</p></blockquote><h4 id="案例3：工资结算系统">案例3：工资结算系统</h4><pre class="line-numbers language-Python" data-language="Python"><code class="language-Python">&quot;&quot;&quot;某公司有三种类型的员工 分别是部门经理、程序员和销售员需要设计一个工资结算系统 根据提供的员工信息来计算月薪部门经理的月薪是每月固定15000元程序员的月薪按本月工作时间计算 每小时150元销售员的月薪是1200元的底薪加上销售额5%的提成&quot;&quot;&quot;from abc import ABCMeta, abstractmethodclass Employee(object, metaclass&#x3D;ABCMeta):    &quot;&quot;&quot;员工&quot;&quot;&quot;    def __init__(self, name):        &quot;&quot;&quot;        初始化方法        :param name: 姓名        &quot;&quot;&quot;        self._name &#x3D; name    @property    def name(self):        return self._name    @abstractmethod    def get_salary(self):        &quot;&quot;&quot;        获得月薪        :return: 月薪        &quot;&quot;&quot;        passclass Manager(Employee):    &quot;&quot;&quot;部门经理&quot;&quot;&quot;    def get_salary(self):        return 15000.0class Programmer(Employee):    &quot;&quot;&quot;程序员&quot;&quot;&quot;    def __init__(self, name, working_hour&#x3D;0):        super().__init__(name)        self._working_hour &#x3D; working_hour    @property    def working_hour(self):        return self._working_hour    @working_hour.setter    def working_hour(self, working_hour):        self._working_hour &#x3D; working_hour if working_hour &gt; 0 else 0    def get_salary(self):        return 150.0 * self._working_hourclass Salesman(Employee):    &quot;&quot;&quot;销售员&quot;&quot;&quot;    def __init__(self, name, sales&#x3D;0):        super().__init__(name)        self._sales &#x3D; sales    @property    def sales(self):        return self._sales    @sales.setter    def sales(self, sales):        self._sales &#x3D; sales if sales &gt; 0 else 0    def get_salary(self):        return 1200.0 + self._sales * 0.05def main():    emps &#x3D; [        Manager(&#39;刘备&#39;), Programmer(&#39;诸葛亮&#39;),        Manager(&#39;曹操&#39;), Salesman(&#39;荀彧&#39;),        Salesman(&#39;吕布&#39;), Programmer(&#39;张辽&#39;),        Programmer(&#39;赵云&#39;)    ]    for emp in emps:        if isinstance(emp, Programmer):            emp.working_hour &#x3D; int(input(&#39;请输入%s本月工作时间: &#39; % emp.name))        elif isinstance(emp, Salesman):            emp.sales &#x3D; float(input(&#39;请输入%s本月销售额: &#39; % emp.name))        # 同样是接收get_salary这个消息但是不同的员工表现出了不同的行为(多态)        print(&#39;%s本月工资为: ￥%s元&#39; %              (emp.name, emp.get_salary()))if __name__ &#x3D;&#x3D; &#39;__main__&#39;:    main()<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vim简单使用</title>
      <link href="2019/06/27/Vim%E5%9F%BA%E7%A1%80/"/>
      <url>2019/06/27/Vim%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<p>Vim是从 vi 发展出来的一个文本编辑器。</p><hr><h2 id="打开-退出">打开/退出</h2><ul><li>vim -R file1 只读打开</li><li>:qall 退出所有文件</li><li>:wq 保存并退出</li><li>:q! 强制退出</li></ul><h2 id="插入">插入</h2><ul><li>i 在当前位置生前插入</li><li>I 在当前行首插入</li><li>a 在当前位置后插入</li><li>A 在当前行尾插入</li><li>o 在当前行之后插入一行</li><li>O 在当前行之前插入一行</li></ul><h2 id="移动">移动</h2><ul><li>h 左移一个字符</li><li>l 右移一个字符</li><li>k 上移一个字符</li><li>j 下移一个字符</li></ul><blockquote><p>**说明:**以上四个命令可以配合数字使用,比如20j就是向下移动20行，5h就是向左移动5个字符。</p></blockquote><h2 id="删除">删除</h2><ul><li>dd 删除当前行</li><li>dj 删除当前行和上一行</li><li>dk 删除当前行和下一行</li><li>10dd 删除当前行开始的共10行</li><li>D 删除当前字符至行尾</li></ul><h2 id="跳转">跳转</h2><ul><li>gg 跳转到文件头</li><li>G 跳转到文件尾</li><li>Ctrl + d 向下滚动半屏</li><li>Ctrl + u 向上滚动半屏</li><li>Ctrl + f 向下滚动一屏</li><li>Ctrl + b 向上滚动一屏</li><li>冒号+行号，跳转到指定行；比如:120，跳转到120行；</li><li>$ 跳转到行尾</li><li>0 跳转到行首</li></ul><h2 id="编辑">编辑</h2><ul><li>u 撤销</li><li>yy 复制当前行</li><li>yaw 复制词</li><li>按v（逐字）或V（逐行）进入可视模式，然后用jklh命令移动即可选择某些行或字符，再按y即可复制任意部分</li><li>p 粘贴在当前位置</li></ul><blockquote><p>**说明:**另外，删除在vim里面就是剪切的意思，所以dd就是剪切当前行，可以用v或V选择特定部分再按d就是任意剪切了</p></blockquote><h2 id="查找">查找</h2><ul><li>/text　　查找text，按n健查找下一个，按N健查找前一个</li><li>?text　　查找text，反向查找，按n健查找下一个，按N健查找前一个</li><li>:set ignorecase　　忽略大小写的查找</li><li>:set noignorecase　　不忽略大小写的查找</li></ul><h2 id="替换">替换</h2><ul><li>:s/old/new/ 用old替换new，替换当前行的第一个匹配</li><li>:s/old/new/g 用old替换new，替换当前行的所有匹配</li><li>:%s/old/new/ 用old替换new，替换所有行的第一个匹配</li><li>:%s/old/new/g 用old替换new，替换整个文件的所有匹配</li></ul><blockquote><p>**提示:**也可以用v或V选择指定行，然后执行</p></blockquote><h2 id="多文件操作">多文件操作</h2><ul><li>vim file1 file2 file3 … 同时编辑多个文件</li><li>:split 将窗口分成上下两个子窗口，对应两个不同的文件</li><li>:vsplit 将窗口分成左右两个子窗口，对应两个不同的文件</li><li>:bn 切换到下一个文件（当前窗口）</li><li>:bp 切换到上一个文件（当前窗口）</li><li>Ctrl-w h    移动到窗口左边</li><li>Ctrl-w j    移动到窗口下边</li><li>Ctrl-w k    移动到窗口上边</li><li>Ctrl-w l    移动到窗口右边</li></ul>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vim </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Windows常用快捷键及命令</title>
      <link href="2019/06/24/Windows%E5%B8%B8%E7%94%A8%E5%BF%AB%E6%8D%B7%E9%94%AE%E5%8F%8A%E5%91%BD%E4%BB%A4/"/>
      <url>2019/06/24/Windows%E5%B8%B8%E7%94%A8%E5%BF%AB%E6%8D%B7%E9%94%AE%E5%8F%8A%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<p>Windows常用快捷键及命令</p><hr><h2 id="Fn键">Fn键</h2><p><kbd>F1</kbd>：帮助</p><p><kbd>F2</kbd>：重命名</p><p><kbd>F3</kbd>：打开搜索</p><p><kbd>F4</kbd>：打开地址栏常用地址</p><p><kbd>F5</kbd>刷新</p><p><kbd>F11</kbd>：全屏/退出全屏</p><h2 id="文件和文件夹">文件和文件夹</h2><p><kbd>Shift</kbd>：选择连续的内容（与鼠标左键配合使用）</p><p><kbd>Ctrl</kbd>：选择不连续的内容（与鼠标左键配合使用）</p><p><kbd>Ctrl</kbd>+<kbd>A</kbd>：选择全部内容</p><p><kbd>Ctrl</kbd>+<kbd>C</kbd>：复制选择的项目</p><p><kbd>Ctrl</kbd>+<kbd>X</kbd>：剪切选择的项目</p><p><kbd>Ctrl</kbd>+<kbd>V</kbd>：粘贴选择的项目</p><p><kbd>Ctrl</kbd>+<kbd>Z</kbd>：撤销操作</p><p><kbd>Ctrl</kbd>+<kbd>Y</kbd>：重新执行某项操作</p><p><kbd>Delete</kbd>：删除所选的项目并将其移动到“回收站”</p><p><kbd>Shift</kbd>+<kbd>Delete</kbd>：永久删除所选的项目（删除之后无法从回收站还原）</p><h2 id="Windows徽标键">Windows徽标键</h2><p><kbd>Win</kbd>：打开或者关闭开始菜单</p><p><kbd>Win</kbd>+<kbd>Pause</kbd>：显示系统属性对话框</p><p><kbd>Win</kbd>+<kbd>D</kbd>：显示桌面</p><p><kbd>Win</kbd>+<kbd>M</kbd>：最小化所有窗口</p><p><kbd>Win</kbd>+<kbd>Shift</kbd>+<kbd>M</kbd>：还原最小化窗口到桌面上</p><p><kbd>Win</kbd>+<kbd>E</kbd>：打开我的电脑，Win10系统为资源管理器</p><p><kbd>Win</kbd>+<kbd>L</kbd>：锁定您的计算机或切换用户</p><p><kbd>Win</kbd>+<kbd>R</kbd>：打开运行对话框</p><p><kbd>Win</kbd>+<kbd>↓</kbd>：小化窗口</p><p><kbd>Win</kbd>+<kbd>↑</kbd>：最大化当前窗口</p><p><kbd>Win</kbd>+<kbd>←</kbd>：最大化到窗口左侧的屏幕上</p><p><kbd>Win</kbd>+<kbd>→</kbd>：最大化到窗口右侧的屏幕上</p><p><kbd>Win</kbd>+<kbd>Home</kbd>：最小化所有窗口，除了当前激活窗口</p><h2 id="windows资源管理器">windows资源管理器</h2><p><kbd>Alt</kbd>+<kbd>P</kbd>：显示预览窗格</p><p><kbd>Alt</kbd>+<kbd>←</kbd>：切换到前一次打开的文件夹</p><p><kbd>Alt</kbd>+<kbd>→</kbd>：切换到下一次后打开的文件夹</p><p><kbd>Alt</kbd>+<kbd>↑</kbd>：打开上层文件夹</p><p><kbd>Backspace</kbd>：打开上层文件夹</p><p><kbd>Ctrl</kbd>+<kbd>Shift</kbd>+打开应用：以管理员身份运行</p><h2 id="windows对话框">windows对话框</h2><p><kbd>Ctrl</kbd>+<kbd>Shift</kbd>+<kbd>Tab</kbd>：在选项卡上向后移动</p><p><kbd>Tab</kbd>：在选项上向后移动</p><p><kbd>shift</kbd>+<kbd>Tab</kbd>：在选项卡上向前移动</p><h2 id="屏幕程序切换">屏幕程序切换</h2><p><kbd>Ctrl</kbd>+<kbd>Win</kbd>+<kbd>D</kbd>：创建虚拟座面</p><p><kbd>Ctrl</kbd>+<kbd>Win</kbd>+<kbd>→</kbd>&amp;<kbd>←</kbd>：切换虚拟屏幕</p><p><kbd>Alt</kbd>+<kbd>Tab</kbd>：在打开的项目之间来回切换</p><p><kbd>Alt</kbd>+<kbd>F4</kbd>：关闭活动的项目或者退出活动程序</p><p><kbd>Alt</kbd>+<kbd>Enter</kbd>：显示所选项的属性</p><p><kbd>Shift</kbd>+<kbd>F10</kbd>：显示选定项目的快捷菜单，相当于鼠标右击</p><p><kbd>Esc</kbd>：取消当前任务</p><p><kbd>Ctrl</kbd>+<kbd>Shift</kbd>+<kbd>Esc</kbd>：打开任务管理器</p><p><kbd>Ctrl</kbd>+<kbd>鼠标滚轮</kbd>：更改桌面上的图标大小</p><h2 id="以-Chromium为的核心浏览器">以 Chromium为的核心浏览器</h2><p><kbd>Ctrl</kbd>+<kbd>Shift</kbd>+<kbd>B</kbd>：显示或关闭书签栏</p><p><kbd>Ctrl</kbd>+<kbd>T</kbd>：打开新标签</p><p><kbd>Ctrl</kbd> + <kbd>Tab</kbd>：跳转标签页</p><p><kbd>Ctrl</kbd>+<kbd>W</kbd>：关闭当前标签</p><p><kbd>Alt</kbd> + <kbd>空格键</kbd>，然后按 <kbd>N</kbd> 键：最小化当前窗口</p><p><kbd>Ctrl</kbd> + <kbd>J</kbd>：在新标签页中打开“下载内容”页</p><p><kbd>Ctrl</kbd>+<kbd>Shift</kbd>+<kbd>T</kbd>：恢复标签页</p><h2 id="Win-R">Win+R</h2><p>使用<kbd>Win</kbd>+<kbd>R</kbd>打开运行窗口执行命令</p><p>设置自动关机：shutdown -s -t 秒数</p><p>取消关机：shutdown -a</p><p>打开注册表：regedit</p><h2 id="其他软件自定义">其他软件自定义</h2><h3 id="QQ">QQ</h3><p><kbd>Ctrl</kbd>+<kbd>Alt</kbd>+<kbd>A</kbd>：打开截图</p><h3 id="网易云">网易云</h3><p><kbd>Ctrl</kbd>+<kbd>Alt</kbd>+<kbd>空格</kbd>：暂停网易云音乐</p><p><kbd>Ctrl</kbd>+<kbd>Alt</kbd>+<kbd>→</kbd>&amp;<kbd>←</kbd>：切换上下歌</p><p><kbd>Ctrl</kbd>+<kbd>Alt</kbd>+<kbd>L</kbd>：标记喜欢歌曲</p>]]></content>
      
      
      <categories>
          
          <category> 快捷键 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 快捷键 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo博客搭建</title>
      <link href="2019/06/17/Hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"/>
      <url>2019/06/17/Hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/</url>
      
        <content type="html"><![CDATA[<p>介绍Hexo博客的搭建以及部署到GitHub上</p><hr><p><img src="https://puui.qpic.cn/fans_admin/0/3_1206436828_1572055658592/0" alt="Hexo博客搭建"></p><h2 id="框架安装">框架安装</h2><ol><li><p>官网安装<a href="http://nodejs.cn/download/">Node.js</a></p></li><li><p>利用cnmp解决npm下载安装缓慢问题</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">npm</span> <span class="token function">install</span> -g cnpm --registry<span class="token operator">=</span>https://registry.npm.taobao.org<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>在安装之前需要安装Git</p></blockquote></li><li><p>安装Hexo框架<code>cnpm install -g hexo-cli</code></p></li></ol><h2 id="框架配置">框架配置</h2><ol><li>切换到新建博客目录下</li><li><code>hexo init</code>自动生成框架</li><li><code>hexo s</code>启动检验<blockquote><p>Hexo3将server独立需单独安装<br>命令npm install hexo-server --save<br>如果EADDRINUSE错误修改端口例如hexo s -p 8080</p></blockquote></li></ol><a id="more"></a><h2 id="框架目录"><a href="https://hexo.io/zh-cn/docs/setup">框架目录</a></h2><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token builtin class-name">.</span>├── _config.yml├── package.json├── scaffolds├── <span class="token builtin class-name">source</span><span class="token operator">|</span>   ├── _drafts<span class="token operator">|</span>   └── _posts└── theme<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="config-yml">_config.yml</h3><p>修改配置信息</p><h3 id="package-json">package.json</h3><p>应用程序的信息</p><h3 id="scaffolds">scaffolds</h3><p>模版文件夹</p><h3 id="source">source</h3><p>资源文件夹是存放用户资源的地方</p><blockquote><p>除_posts文件夹之外，开头命名为_(下划线)的文件 / 文件夹和隐藏的文件将会被忽略。Markdown 和 HTML 文件会被解析并放到 public文件夹，而其他文件会被拷贝过去。</p></blockquote><h3 id="themes">themes</h3><p>主题文件夹</p><h2 id="博客使用">博客使用</h2><ol><li><p><code>hexo n &quot;title&quot;</code> 创建文章</p><blockquote><p>按照scaffolds文件夹模板创建<br>此外可以创建草稿<code>hexo new draft &quot;title&quot;</code></p></blockquote></li><li><p><code>hexo clean</code></p></li><li><p><code>hexo g</code>生成博客</p></li></ol><h2 id="远端部署">远端部署</h2><ol><li><p>安装GitHub插件<code>cnpm install -g hexo-deployer-git --save</code></p></li><li><p>在Github上创建项目库</p><blockquote><p>项目库命名要是   用户名+.github.io   例如：lanqilu.github.io</p></blockquote></li><li><p>设置 _config.yml 文件</p><pre class="line-numbers language-yml" data-language="yml"><code class="language-yml"># Deployment## Docs: https:&#x2F;&#x2F;hexo.io&#x2F;docs&#x2F;deployment.htmldeploy:type: gitrepo: https:&#x2F;&#x2F;github.com&#x2F;&lt;GitHub_name&gt;&#x2F;&lt;GitHub_repositories&gt;.gitbranch: master<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>部署到远端<code>hexo d</code><br>填写github账号密码</p></li><li><p>常用部署命令<br>cmd<code>hexo clean &amp;&amp; hexo g &amp;&amp; hexo d</code><br>powershell<code>hexo clean '&amp;' hexo g '&amp;' hexo d</code></p></li></ol><h2 id="更换主题">更换主题</h2><p>以<a href="https://github.com/theme-next/hexo-theme-next">Next</a>为例</p><ul><li><p>克隆到themes目录下</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">git</span> clone  https://github.com/theme-next/hexo-theme-next.git<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>配置<code>_config.yml</code></p> <pre class="line-numbers language-yml" data-language="yml"><code class="language-yml"># Extensions## Plugins: https:&#x2F;&#x2F;hexo.io&#x2F;plugins&#x2F;## Themes: https:&#x2F;&#x2F;hexo.io&#x2F;themes&#x2F;theme: next-reloaded  # 主题名<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="问题">问题</h2><h3 id="图片问题">图片问题</h3><p>配置<code>_config.yml</code>里面的<code>post_asset_folder:false</code>这个选项设置为<code>true</code><br>默认在创建新文件时生成同名文件夹</p><blockquote><p>使用方法<code>![](xxx.jpg)</code></p></blockquote><p>推荐使用图床来在Markdown文本中插入图片</p>]]></content>
      
      
      <categories>
          
          <category> Blog </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> GitHub </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>日语输入法的使用</title>
      <link href="2019/06/17/%E6%97%A5%E8%AF%AD%E8%BE%93%E5%85%A5%E6%B3%95%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
      <url>2019/06/17/%E6%97%A5%E8%AF%AD%E8%BE%93%E5%85%A5%E6%B3%95%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<p>微软日语输入法的简单使用来自该<a href="https://www.bilibili.com/video/av37827841">视频</a></p><hr><a id="more"></a><p><img src="https://pic.superbed.cn/item/5db3013b8b58bc7bf70c5c2b.jpg" alt="桜"></p><h2 id="切换输入模式">切换输入模式</h2><ul><li><p>所有语言所有输入法之间切换Win+space（空格）</p></li><li><p>多语言默认输入法之间切换Alt+Shift</p></li><li><p>同一语言下输入法切换Ctrl+Shift</p></li><li><p>英文输入：快捷键Alt + ~（Esc键下边,数字1左边的那个键）<br>可以在直接输入【罗马字】（图标A）和当前假名输入法间切换</p></li><li><p>平假名：Ctrl + Caps Lock<br>日文模式下切换到【平假名】Hiragana（图标あ），<br>罗马字，英文输入（图标A）下则是切换回日文模式，如原先不在Hiragana，则必须多按一次。</p></li><li><p>片假名：Alt + Caps Lock<br>日文模式下切换到【片假名】，全角片假名Full-width Katakana</p></li></ul><blockquote><p>**说明:**罗马字，英文输入（图标A）下则是切换回日文模式，如原先不在Full-width Katakana，则必须多按一次。</p></blockquote><h2 id="字符选择快捷键">字符选择快捷键</h2><p>敲完字母后<strong>不敲空格键或回车键</strong>，加按</p><ul><li>F5，转成字符集（选字或造字）</li><li>F6，恢复平假名（全角）</li><li>F7，转成片假名（全角）</li><li>F8，转成片假名（半角）</li><li>F9，转成罗马字母（全角），连续按击可以在全大写，全小写，首字母大写之间转换。</li><li>F10，转成罗马字母（半角），连续按击可以在全大写，全小写，首字母大写之间转换。</li></ul><h2 id="输入规则">输入规则</h2><ol><li>促音的输入法：促音后的第一个字母连续输入两次。例: 設定　せってい　settei<br>单独输入促音也可以用ltu或xtu，<blockquote><p>同理 小写假名都是x或者l加原来的拼写如xaぁ 与aあ</p></blockquote></li><li>拨音的输入法:按两下&quot;n&quot;。例:　漫画　まんが　mannga</li><li>拗音的输入法:例:きゃきゅきょ kya kyu kyo （亦即是罗马字拼写法则）</li><li>长音输入法：片假名按数字0右边的-号键（减号键），平假名前面的元音多打一个</li><li>助词“を”的输入方法是“wo”</li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> 日语 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Markdown基本语法</title>
      <link href="2019/05/08/Markdown%E8%AF%AD%E6%B3%95/"/>
      <url>2019/05/08/Markdown%E8%AF%AD%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<p>Markdown是一种可以使用普通文本编辑器编写的标记语言，通过简单的标记语法，它可以使普通文本内容具有一定的格式。</p><p>Markdown具有一系列衍生版本，用于扩展Markdown的功能（如表格、脚注、内嵌HTML等等），这些功能原初的Markdown尚不具备，它们能让Markdown转换成更多的格式，例如LaTeX，Docbook。</p><p>Markdown增强版中比较有名的有Markdown Extra、MultiMarkdown、 Maruku等。这些衍生版本要么基于工具，如Pandoc；要么基于网站，如GitHub和Wikipedia，在语法上基本兼容，但在一些语法和渲染效果上有改动。</p><p>因为增强版等存在不同软件和网站有各自特殊的语法规则，本文档仅整理常用的通用规则。</p><hr><h2 id="Markdown-标题">Markdown 标题</h2><p>顶格使用 <code>#</code> 标记，并在<code>#</code>号后加入1个空格，根据空格前的<code>#</code>数量确定标题的级数</p><pre class="line-numbers language-none"><code class="language-none"># 一级标题## 二级标题### 三级标题#### 四级标题##### 五级标题###### 六级标题<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>标题分为四级：</p><ul><li>一级标题：文章的标题</li><li>二级标题：文章主要部分的大标题</li><li>三级标题：二级标题下面一级的小标题</li><li>四级标题：三级标题下面某一方面的小标题</li></ul><p>标题使用原则：</p><p>一级标题下，不能直接出现三级标题。示例：下面的文章结构，缺少二级标题。</p><pre class="line-numbers language-none"><code class="language-none"># 一级标题### 三级标题<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>标题要避免孤立编号（即同级标题只有一个）。示例：下面的文章结构，<code>二级标题 A</code>只包含一个三级标题，完全可以省略<code>三级标题 A</code>。</p><pre class="line-numbers language-none"><code class="language-none">## 二级标题 A### 三级标题 A## 二级标题 B<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>下级标题不重复上一级标题的名字。示例：下面的文章结构，二级标题与下属的三级标题同名，建议避免。</p><pre class="line-numbers language-none"><code class="language-none">## 概述### 概述<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>谨慎使用四级标题，尽量避免出现，保持层级的简单，防止出现过于复杂的章节。如果三级标题下有并列性的内容，建议只使用项目列表（Item list）。示例：下面的结构二要好于结构一。结构一适用的场景，主要是较长篇幅的内容。</p><pre class="line-numbers language-none"><code class="language-none">结构一### 三级标题#### 四级标题 A#### 四级标题 B#### 四级标题 C结构二### 三级标题**（1）A****（2）B****（3）C**<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Markdown-文本">Markdown 文本</h2><p>通过<code>*</code>和<code>_</code>对文本的包围使用可以实现以下几种效果</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown"><span class="token italic"><span class="token punctuation">*</span><span class="token content">斜体文本</span><span class="token punctuation">*</span></span><span class="token italic"><span class="token punctuation">_</span><span class="token content">斜体文本</span><span class="token punctuation">_</span></span><span class="token bold"><span class="token punctuation">**</span><span class="token content">粗体文本</span><span class="token punctuation">**</span></span><span class="token bold"><span class="token punctuation">__</span><span class="token content">粗体文本</span><span class="token punctuation">__</span></span><span class="token bold"><span class="token punctuation">**</span><span class="token content"><span class="token italic"><span class="token punctuation">*</span><span class="token content">粗斜体文本</span><span class="token punctuation">*</span></span></span><span class="token punctuation">**</span></span><span class="token bold"><span class="token punctuation">__</span><span class="token content"><span class="token italic"><span class="token punctuation">_</span><span class="token content">粗斜体文本</span><span class="token punctuation">_</span></span></span><span class="token punctuation">__</span></span><span class="token strike"><span class="token punctuation">~~</span><span class="token content">删除线</span><span class="token punctuation">~~</span></span><span class="token code keyword">`代码`</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>若单使用<code>***</code> <code>---</code>可实现如下分隔线的效果</p><hr><p>此外使用Html标签中的<code>&lt;u&gt;下划线&lt;/u&gt;</code> 实现下划线效果</p><blockquote><p>该网站修改下划线效果，改成如下样式：<u>下划线</u>。以实现遮盖效果</p></blockquote><h2 id="Markdown-列表">Markdown 列表</h2><p>列表分为无序和有序两种，实现起来也非常简单</p><p>无序列表：使用星号(<code>*</code>)、加号(<code>+</code>)或是减号(<code>-</code>)作为列表标记：</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown"><span class="token list punctuation">*</span> 123<span class="token list punctuation">+</span> 456<span class="token list punctuation">-</span> 789<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><p>但为了方便修改，建议一篇文档只使用一种实现方式，推荐统一使用<code>+</code>来实现</p></blockquote><hr><p>有序列表：<code>1.</code>只需在数字后加上半角句号并添加一个空格即可实现</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown"><span class="token list punctuation">1.</span> a<span class="token list punctuation">2.</span> b<span class="token list punctuation">3.</span> c<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><p>列表之间可以相互嵌套，但要注意层次间的缩进</p></blockquote><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown"><span class="token list punctuation">1.</span> 第一项:   <span class="token list punctuation">+</span> 第一项嵌套的第一个元素   <span class="token list punctuation">+</span> 第一项嵌套的第二个元素<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="Markdown-区块">Markdown 区块</h2><p>区块使用<code>&gt;</code>符号加空格实现，同样可以进行嵌套</p><p><code>&gt; 最外层</code><br><code>&gt; &gt; 第一层嵌套</code><br><code>&gt; &gt; &gt; 第二层嵌套</code></p><blockquote><p>最外层</p><blockquote><p>第一层嵌套</p><blockquote><p>第二层嵌套</p></blockquote></blockquote></blockquote><h2 id="Markdown-代码">Markdown 代码</h2><p>如<code>printf()</code> 所示，表示代码，使用该符号`（键盘上在数字1前）将内容包裹</p><p>连续的3个反单引号包裹的片段就可以，实现代码块样式</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown"><span class="token code"><span class="token punctuation">```</span><span class="token code-language">python</span><span class="token code-block language-python"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Hello,world!"</span><span class="token punctuation">)</span></span><span class="token punctuation">```</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="Markdown-链接">Markdown 链接</h2><p>使用该形式<code>[链接名称](链接地址)</code>可创建一个链接</p><p>这是一个链接<a href="http://www.baidu.com/">百度</a></p><h2 id="Markdown-图片">Markdown 图片</h2><p><img src="https://pic.downk.cc/item/5fe748a83ffa7d37b3ef621f.jpg" alt="Markdown" title="Hello"></p><p>上图的实现方法</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown"><span class="token url">![<span class="token content">Markdown</span>](https://pic.downk.cc/item/5fe748a83ffa7d37b3ef621f.jpg <span class="token string">"Hello"</span>)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><code>![图名](图片地址)</code></p><p><code>![图名](图片地址 &quot;可选标题&quot;)</code></p><p>开头一个感叹号<code>!</code>,接着一个方括号，里面放上图片的替代文字,接着一个普通括号，里面放上图片的网址(或者本地文件地址)，最后还可以用引号包住并加上选择性的 ‘title’ 属性的文字。</p><p>Markdown 还没有办法指定图片的高度与宽度，如果你需要的话，你可以使用普通的 <code>&lt;img&gt;</code> 标签</p><h2 id="Markdown-表格">Markdown 表格</h2><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown"><span class="token table"><span class="token table-header-row"><span class="token punctuation">|</span><span class="token table-header important">  表头   </span><span class="token punctuation">|</span><span class="token table-header important"> 表头  </span><span class="token punctuation">|</span></span><span class="token table-line"><span class="token punctuation">|</span>  <span class="token punctuation">----</span>  <span class="token punctuation">|</span> <span class="token punctuation">----</span>  <span class="token punctuation">|</span></span><span class="token table-data-rows"><span class="token punctuation">|</span><span class="token table-data"> 单元格  </span><span class="token punctuation">|</span><span class="token table-data"> 单元格 </span><span class="token punctuation">|</span><span class="token punctuation">|</span><span class="token table-data"> 单元格  </span><span class="token punctuation">|</span><span class="token table-data"> 单元格 </span><span class="token punctuation">|</span></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><table><thead><tr><th style="text-align:center">表头</th><th style="text-align:center">表头</th></tr></thead><tbody><tr><td style="text-align:center">单元格</td><td style="text-align:center">单元格</td></tr><tr><td style="text-align:center">单元格</td><td style="text-align:center">单元格</td></tr></tbody></table><ul><li>-: 设置内容和标题栏居右对齐。</li><li>:- 设置内容和标题栏居左对齐。</li><li>:-: 设置内容和标题栏居中对齐。</li></ul><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown"><span class="token table"><span class="token table-header-row"><span class="token punctuation">|</span><span class="token table-header important"> 左对齐 </span><span class="token punctuation">|</span><span class="token table-header important"> 右对齐 </span><span class="token punctuation">|</span><span class="token table-header important"> 居中对齐 </span><span class="token punctuation">|</span></span><span class="token table-line"><span class="token punctuation">|</span> <span class="token punctuation">:-----</span> <span class="token punctuation">|</span> <span class="token punctuation">-----:</span> <span class="token punctuation">|</span> <span class="token punctuation">:------:</span> <span class="token punctuation">|</span></span><span class="token table-data-rows"><span class="token punctuation">|</span><span class="token table-data"> 单元格 </span><span class="token punctuation">|</span><span class="token table-data"> 单元格 </span><span class="token punctuation">|</span><span class="token table-data">  单元格  </span><span class="token punctuation">|</span><span class="token punctuation">|</span><span class="token table-data"> 单元格 </span><span class="token punctuation">|</span><span class="token table-data"> 单元格 </span><span class="token punctuation">|</span><span class="token table-data">  单元格  </span><span class="token punctuation">|</span></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><table><thead><tr><th style="text-align:left">左对齐</th><th style="text-align:right">右对齐</th><th style="text-align:center">居中对齐</th></tr></thead><tbody><tr><td style="text-align:left">单元格</td><td style="text-align:right">单元格</td><td style="text-align:center">单元格</td></tr><tr><td style="text-align:left">单元格</td><td style="text-align:right">单元格</td><td style="text-align:center">单元格</td></tr></tbody></table><p>参考资料：</p><ul><li>阮一峰，<a href="https://github.com/ruanyf/document-style-guide">中文技术文档的写作规范</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Markdown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git的常见使用</title>
      <link href="2019/03/12/Git%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/"/>
      <url>2019/03/12/Git%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<p>Git的常见使用</p><hr><h2 id="配置GitHub">配置GitHub</h2><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">git config --global user.name &quot;your_name&quot;git config --global user.email &quot;your_email@example.com&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>在windows系统中的<code>C:\Users\用户名\.ssh</code>中会产生<code>.ssh</code>文件夹中会生成一对密钥包括<code>id_rsa</code>私钥和<code>id_rsa.pub</code>公钥文件</p><p>如果不存在，在Git Bash使用以下命令生成</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">ssh-keygen -t rsa -C &quot;your_email@example.com&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>将会弹出以下信息</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">Generating public/private rsa key pair.Enter <span class="token function">file</span> <span class="token keyword">in</span> <span class="token function">which</span> to save the key <span class="token punctuation">(</span>/c/Users/用户名/.ssh/id_rsa<span class="token punctuation">)</span>:  回车Created directory <span class="token string">'/c/Users/用户名/.ssh'</span><span class="token builtin class-name">.</span>Enter passphrase <span class="token punctuation">(</span>empty <span class="token keyword">for</span> no passphrase<span class="token punctuation">)</span>:    回车或输密码Enter same passphrase again:                   回车或再一次输密码Your identification has been saved <span class="token keyword">in</span> /c/Users/用户名/.ssh/id_rsaYour public key has been saved <span class="token keyword">in</span> /c/Users/用户名/.ssh/id_rsa.pubThe key fingerprint is:SHA256:JAldGP+8XXXXXXXXXXXRhzaEpUd5hJfTn0zrJxhXbFYM your_email@example.comThe key's randomart image is:+---<span class="token punctuation">[</span>RSA <span class="token number">3072</span><span class="token punctuation">]</span>----+<span class="token operator">|</span>    <span class="token punctuation">..</span>o<span class="token operator">=</span>*<span class="token punctuation">..</span>   .o <span class="token operator">|</span><span class="token operator">|</span>     +o<span class="token operator">=</span> +   E  o<span class="token operator">|</span><span class="token operator">|</span>    <span class="token builtin class-name">.</span> + <span class="token operator">=</span> <span class="token builtin class-name">.</span> <span class="token builtin class-name">.</span> <span class="token builtin class-name">.</span> <span class="token builtin class-name">.</span><span class="token operator">|</span><span class="token operator">|</span>     <span class="token builtin class-name">.</span> B + o <span class="token builtin class-name">.</span> +.<span class="token operator">|</span><span class="token operator">|</span>    + O S o o + <span class="token builtin class-name">.</span><span class="token operator">|</span><span class="token operator">|</span>   <span class="token operator">=</span> @ o <span class="token builtin class-name">.</span> <span class="token operator">=</span> <span class="token operator">=</span>   <span class="token operator">|</span><span class="token operator">|</span>  <span class="token builtin class-name">.</span> B o   o B    <span class="token operator">|</span><span class="token operator">|</span>     o     <span class="token builtin class-name">.</span> <span class="token builtin class-name">.</span>   <span class="token operator">|</span><span class="token operator">|</span>                 <span class="token operator">|</span>+----<span class="token punctuation">[</span>SHA256<span class="token punctuation">]</span>-----+<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>将<code>id_rsa.pub</code>公钥文件放到Setting中的SSH and GPG keys中</p><p><img src="http://img.whl123456.top/image/GitHubSSH.png" alt="GitHub"></p><p>在Git Bash中输入以下命令，验证是否成功</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">ssh</span> -T git@github.com<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果成功则会显示以下消息</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">Hi your_name<span class="token operator">!</span> You've successfully authenticated, but GitHub does not provide shell access.<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="创建版本库">创建版本库</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">mkdir</span> <span class="token operator">&lt;</span>文件夹名<span class="token operator">></span><span class="token builtin class-name">cd</span> <span class="token operator">&lt;</span>文件名<span class="token operator">></span><span class="token builtin class-name">pwd</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><code>git init</code> 把这个目录变成Git可以管理的仓库</p><p>结果生成.git 隐藏文件夹 （不要手动修改文件夹的内容）</p><blockquote><p>注意事项<br>不要使用Windows自带的记事本编辑任何文件<br>默认编码设置成UTF-8 without BOM</p></blockquote><p><img src="http://img.whl123456.top/image/image-20200613103720281.png" alt="image-20200613103720281"></p><h3 id="文件放到Git仓库目录下">文件放到Git仓库目录下</h3><p><code>git status</code></p><p><code>git add &lt;file&gt;</code></p><p><code>git add .</code>提交新文件和被修改文件，不包括被删除文件</p><p><code>git add -u</code>提交被修改和被删除文件，不包括新文件</p><p><code>git add -A</code>提交所有变化</p><p><code>git add -i</code></p><blockquote><p>Unix哲学 “没有消息就是好消息”</p></blockquote><h3 id="把文件提交到仓库">把文件提交到仓库</h3><p><code>git commit -m &lt;message&gt;</code>-m 后面输入本次提交的说明</p><p><code>git commit --amend</code>修改最近一次提交的注释信息</p><h3 id="vim编辑器的使用">vim编辑器的使用</h3><p><code>vi &lt;filename&gt;</code></p><p>输入字母<code>i</code>或Insert键进入最常用的插入编辑模式<br>按下字母键 <code>c</code>（此时进入编辑状态），可以开始修改注释信息了<br>按下Esc (退出编辑状态)<br>接着连按两次大写字母<code>Z</code>，保存并退出<br>只想保存文件，则键入:<code>w</code><br>放弃所有文件修改：按下ESC键进入命令模式，键入:<code>q!</code>回车后放弃修改并退出vi<br><code>.</code>放弃所有文件修改，但不退出 vi:<br>按下ESC键进入命令模式，键入:<code>e!</code>，回车后回到命令模式</p><h3 id="修改文件后">修改文件后</h3><p><code>git stautus</code> 掌握仓库当前的状态</p><blockquote><p>On branch master<br>nothing to commit, working tree clean</p></blockquote><p><code>git diff &lt;file&gt;</code>#看具体修改了什么内容<br>再<code>git add &lt;file&gt;</code></p><p><code>git log</code>#历史记录 显示从最近到最远的提交日志</p><p><code>git log --pretty=oneline</code>oneline 压缩模式</p><h3 id="退回之前的版本">退回之前的版本</h3><p>就是HEAD<sup>，上上一个版本就是HEAD</sup><sup>，当然往上100个版本写100个</sup>比较容易数不过来，所以写成HEAD~100<br><code>git reset --hard HEAD^</code></p><p><code>git reflog</code>#记录你的每一次命令<br><code>git reset --hard &lt;commit id&gt;</code>（id不必写全）</p><h3 id="修改">修改</h3><p><code>git checkout -- &lt;file&gt;</code><br>丢弃 工作区 的修改  在工作区的修改全部撤销，<br>让这个文件回到最近一次git commit或git add时的状态</p><p><code>git reset HEAD &lt;file&gt;</code><br>既可以回退版本，也可以把暂存区的修改回退到工作区</p><h3 id="删除文件">删除文件</h3><p><code>rm &lt;file&gt;</code>     #删除工作区文件<br><code>git rm &lt;file&gt;</code> #从版本库中删除该文件</p><p>先手动删除文件，然后使用git add<file>效果是一样的<br>git checkout  – <file>   #把误删的文件恢复到最新版本（用版本库里的版本替换工作区的版本）</p><h3 id="分支">分支</h3><p><code>git checkout -b &lt;branchname&gt;</code> #创建分支,然后切换到分支<br><code>git branch &lt;branchname&gt;</code>      #创建分支<br><code>git checkout &lt;branchname&gt;</code>    #切换到分支<br><code>git branch</code>                   #查看当前分支<br><code>git checkout master</code>          #换回master分支<br><code>git merge &lt;branchname&gt;</code>       #合并指定分支到当前分支<br><code>git branch -d &lt;branchname&gt;</code>   #删除分支<br><code>git branch -m &lt;branchname&gt;</code>   #重命名分支</p><h2 id="GitHub">GitHub</h2><h3 id="推送">推送</h3><p>关联一个远程库并推送</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">git</span> remote <span class="token function">add</span> origin git@Lanqilu:path/<span class="token operator">&lt;</span>repo-name<span class="token operator">></span>.git<span class="token function">git</span> push -u origin master<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="克隆">克隆</h3><p><code>git clone &lt;url&gt;</code></p><h3 id="拉取">拉取</h3><p><code>git pull</code></p><ol><li><p>服务器代码合并本地代码</p> <pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">git</span> stash     //暂存当前正在进行的工作。<span class="token function">git</span> pull origin master //拉取服务器的代码<span class="token function">git</span> stash pop //合并暂存的代码<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>服务器代码覆盖本地代码</p> <pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">git</span> reset --hard  //回滚到上一个版本<span class="token function">git</span> pull origin master<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ol><h3 id="版本控制">版本控制</h3><p><code>git log</code></p><p><code>git log --pretty=oneline</code></p><p><code>git log --oneline</code></p><p><code>git reflog</code></p><p><code>git reset --hard [部分索引值]</code></p><h3 id="隐藏文件">隐藏文件</h3><p>exclude</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token comment"># git ls-files --others --exclude-from=.git/info/exclude</span><span class="token comment"># Lines that start with '#' are comments.</span><span class="token comment"># For a project mostly in C, the following would be a good set of</span><span class="token comment"># exclude patterns (uncomment them if you want to use them):</span><span class="token comment"># *.[oa]</span><span class="token comment"># *~</span>.*<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="忽略文件">忽略文件</h3><p><code>touch .gitignore</code><br><code>.git/info/exclude`` ``vi .git/info/exclude</code></p><ol><li>忽略文件中的空行或以井号( #告开始的行将会被忽略。</li><li>可以使用Linux通配符。例如:星号(* )代表任意多个字符,问号( ? ) 代表-一个字符 ,方括号( [abc] )代表可选字符范围,<br>大括号( {string1,string… )代表可选的字符串等。</li><li>如果名称的最前面有一一个感叹号(!) , 表示例外规则,将不被忽略。</li><li>如果名称的最前面是一个路径分隔符 (/ ) , 表示要忽略的文件在此目录下,而子目录中的文件不忽略。</li><li>如果名称的最后面是一个路径分隔符(/) , 表示要忽略的是此目录下该名称的子目录,而非文件(默认文件或目录都忽略)。</li></ol><h3 id="删除远程文件">删除远程文件</h3><p>方法一<br>这里以删除 test文件夹为案例</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">git</span> <span class="token function">rm</span> -r --cached <span class="token builtin class-name">test</span> //--cached不会把本地的test删除<span class="token function">git</span> commit -m <span class="token string">'delete test '</span><span class="token function">git</span> push -u origin master<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>方法二<br>如果误提交的文件夹比较多，方法一也较繁琐<br>直接修改.gitignore文件,将不需要的文件过滤掉，然后执行命令:</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">git</span> <span class="token function">rm</span> -r --cached <span class="token builtin class-name">.</span><span class="token function">git</span> <span class="token function">add</span> <span class="token builtin class-name">.</span><span class="token function">git</span> commit<span class="token function">git</span> push -u origin master<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><a href="https://blog.csdn.net/cui130/article/details/84033966">参考博客</a></p></blockquote><h3 id="下载文件">下载文件</h3><p>单个文件<a href="https://minhaskamal.github.io/DownGit/#/home">DownGit</a>，国内访问较慢</p><p>将仓库克隆到码云上在下载</p><p>使用迅雷</p><h2 id="错误">错误</h2><ol><li>原因是因为上传时间太长了，导致ssh连接超时断开</li></ol><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">fatal: sha1 <span class="token function">file</span> <span class="token string">'&lt;stdout>'</span> <span class="token function">write</span> error: Broken pipe KiB/sfatal: the remote end hung up unexpectedlyfatal: the remote end hung up unexpectedly<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><p><a href="https://blog.csdn.net/qq_31803503/article/details/88323527">解决方案</a></p></blockquote><h3 id="push问题">push问题</h3><h4 id="rejected-master-master-non-fast-forward">! [rejected] master -&gt; master (non-fast-forward)</h4><h5 id="错误-2">错误</h5><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ <span class="token function">git</span> pushTo github.com:Lanqilu/BiliBilil-Leaderboard.git <span class="token operator">!</span> <span class="token punctuation">[</span>rejected<span class="token punctuation">]</span>        master -<span class="token operator">></span> master <span class="token punctuation">(</span>non-fast-forward<span class="token punctuation">)</span>error: failed to push some refs to <span class="token string">'git@github.com:Lanqilu/BiliBilil-Leaderboard.git'</span>hint: Updates were rejected because the tip of your current branch is behindhint: its remote counterpart. Integrate the remote changes <span class="token punctuation">(</span>e.g.hint: <span class="token string">'git pull ...'</span><span class="token punctuation">)</span> before pushing again.hint: See the <span class="token string">'Note about fast-forwards'</span> <span class="token keyword">in</span> <span class="token string">'git push --help'</span> <span class="token keyword">for</span> details.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="问题">问题</h5><p>git仓库中已经有一部分代码，所以它不允许你直接把你的代码覆盖上去</p><h5 id="解决方法">解决方法</h5><p>利用强覆盖方式用你本地的代码替代git仓库内的内容</p><blockquote><p>不推荐使用，需要解决冲突再提交</p></blockquote><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">git</span> push -f<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><a href="https://blog.csdn.net/lujinjian605894472/article/details/8443403">参考地址</a></p><!--hexo clean && hexo g && hexo d--><h3 id="pull问题">pull问题</h3><h4 id="问题描述：本地内容有修改但要与pull">问题描述：本地内容有修改但要与pull</h4><h4 id="解决办法">解决办法</h4><p>先git status暂存</p><p>再pull之后git status pop 选择修改</p>]]></content>
      
      
      <categories>
          
          <category> Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
